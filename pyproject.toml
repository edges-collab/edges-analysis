[build-system]
requires = [
    "setuptools>=60",
    "setuptools-scm>=8.0",
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]


[project]
name = "edges-analysis"
description = "Functionality for processing EDGES field data"
readme = "README.rst"
authors = [
    {name="Steven Murray", email="steven.murray@sns.it"},
]
license = {text="MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "numpy",
    "scipy",
    "matplotlib",
    "astropy",
    "pygsdata",
    "edges-io>=4.0.0",
    "edges-cal>=6.0.0",
    "healpy",
    "h5py",
    "tqdm",
    "rich>=9.0",
    "pathos",
    "methodtools",
    "attrs",
    "questionary",
    "psutil",
    "jinja2",
    "astropy-healpix",
    "typing_extensions",
    "frozendict",
]
dynamic = ["version"]

[project.urls]
Documentation = "https://edges-analysis.readthedocs.io/en/latest/"
Repository = "https://github.com/edges-collab/edges-analysis"
Issues = "https://github.com/edges-collab/edges-analysis/issues"
Changelog = "https://github.com/edges-collab/edges-analysis/releases"


[project.optional-dependencies]
testing = [
  "pytest",
  "pytest-cov",
  "pytest_cases>=3.8.3"
]
docs = [
  "sphinx",
  "nbsphinx",
  "numpydoc",
  "sphinx_rtd_theme",
  "sphinx_click",
  "ipython"
]
dev = [
  "edges-analysis[testing,docs]",
  "pre-commit"
]


[tool.pytest.ini_options]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts = "--verbose --durations=25 --cov edges_analysis"
norecursedirs = [
    "dist",
    "build",
    ".tox"
]
testpaths = "tests"

[tool.ruff]
exclude = [
  "*.ipynb",  # for now
]
preview = true


[tool.ruff.lint]
extend-select = [
  "UP",   # pyupgrade
  "E",    # pycodestyle
  "W",    # pycodestyle warning
  "F",    # pyflakes
  "C90",  # mccabe complexity
  "I",    # isort
  "N",    # pep8-naming
  "D",    # docstyle
  # "ANN"   # type annotations
  "B",    # bugbear
  "A",    # builtins
  "C4",   # comprehensions
  "DTZ",  # datetime
  "FA",   # future annotations
  "PIE",  # flake8-pie
  "T",    # print statements
  "PT",   # pytest-style
  "Q",    # quotes
  "SIM",  # simplify
  "PTH",  # use Pathlib
  "ERA",  # kill commented code
  "NPY",  # numpy-specific rules
  "PERF", # performance
  # "FURB", # refurb
  "RUF",  # ruff-specific rules
]
ignore = [
    "DTZ007",   # use %z in strptime
    "DTZ001",   # require tzinfo in datetime
    "B008",     # do not performa function call in argument defaults
    "PTH207",   # allow glob.glob() because when we use it, it's necessary
    "A003",     # class attribute shadowing builtins
    "RUF009",   # don;e perform function call in dataclass defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D103",  # ignore missing docstring in tests
    "D102",  # same here but for methods
    "D101",
    "DTZ",   # ignore datetime in tests
    "T",     # print statements
]
"docs/conf.py" = [
    "A",  # conf.py can shadow builtins
    "ERA",
]
"src/edges_analysis/calibration/loss.py" = [
  "N806",  # upper-case variables because it's more mathy
]
"src/edges_analysis/config.py" = [
  "PTH111",  # here we want to use strings
]
[tool.ruff.lint.pydocstyle]
convention = 'numpy'
property-decorators = ["pytest.fixture"]

[tool.ruff.lint.mccabe]
max-complexity = 18
