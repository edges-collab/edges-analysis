
import datetime as dt
import numpy as np
import edges as eg
import reflection_coefficient as rc
import matplotlib.pyplot as plt
import matplotlib.ticker as mpt
import emcee as emcee
import astropy.coordinates as apc
import scipy.io as sio
import scipy.interpolate as sci


from astropy.io import fits
from os import listdir, system
from os.path import expanduser
from matplotlib import cm

import h5py
import corner

import healpy as hp
from scipy import stats

import astropy.units as apu
import astropy.time as apt
import astropy.coordinates as apc

from os import makedirs
from os.path import exists

import matplotlib.patheffects as path_effects
import matplotlib.colors as colors
import matplotlib.cm as cm
from matplotlib.font_manager import FontProperties

import high_band_edges as hb





# Determining home folder
home_folder = expanduser("~")



def batch_LNA_high_band_uncertainty_propagation():





	# BEST FIDUCIAL CASE  (BAD ANTENNA PHASE, QUIET SKY)
	# -----------------------------------------------------------------------------------------------------------------------
	# -----------------------------------------------------------------------------------------------------------------------







	# Physical temperature
	# --------------------

	# Physical temperature ambient
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[0] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'tamb', nMC, MC_temp = MC_temp)


	# Physical temperature hot
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[1] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'thot', nMC, MC_temp = MC_temp)


	# Physical temperature open
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[2] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'topen', nMC, MC_temp = MC_temp)


	# Physical temperature shorted
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[3] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'tshorted', nMC, MC_temp = MC_temp)



	# Physical temperature
	# --------------------

	# Physical temperature ambient
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[0] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'tamb', nMC, MC_temp = MC_temp)


	# Physical temperature hot
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[1] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'thot', nMC, MC_temp = MC_temp)


	# Physical temperature open
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[2] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'topen', nMC, MC_temp = MC_temp)


	# Physical temperature shorted
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[3] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'tshorted', nMC, MC_temp = MC_temp)












	# Spectra
	# -------
	# Spectrum of ambient
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[0] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'spec_amb', nMC, MC_spectra_noise = MC_spectra_noise)


	# Spectrum of hot
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[1] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'spec_hot', nMC, MC_spectra_noise = MC_spectra_noise)


	# Spectrum of open
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[2] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'spec_open', nMC, MC_spectra_noise = MC_spectra_noise)


	# Spectrum of shorted
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[3] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'spec_shorted', nMC, MC_spectra_noise = MC_spectra_noise)





	# Spectra
	# -------
	# Spectrum of ambient
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[0] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'spec_amb', nMC, MC_spectra_noise = MC_spectra_noise)


	# Spectrum of hot
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[1] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'spec_hot', nMC, MC_spectra_noise = MC_spectra_noise)


	# Spectrum of open
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[2] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'spec_open', nMC, MC_spectra_noise = MC_spectra_noise)


	# Spectrum of shorted
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[3] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'spec_shorted', nMC, MC_spectra_noise = MC_spectra_noise)














	# Systematic S11
	# ---------------

	# Magnitude
	#---------------------------------	

	# LNA S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[0] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_LNA_mag', nMC, MC_s11_syst = MC_s11_syst)


	# Amb S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[2] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_amb_mag', nMC, MC_s11_syst = MC_s11_syst)


	# Hot S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[4] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_hot_mag', nMC, MC_s11_syst = MC_s11_syst)


	# Open S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[6] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_open_mag', nMC, MC_s11_syst = MC_s11_syst)


	# Shorted S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[8] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_shorted_mag', nMC, MC_s11_syst = MC_s11_syst)


	# SR S12*S21 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[12] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s12s21_sr_mag', nMC, MC_s11_syst = MC_s11_syst)


	# Antenna Magnitude, Traditional Polynomial, Quiet Sky
	nMC            = 5000
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_antenna_mag', nMC, MC_antenna_S11_mag='yes')















	# LNA S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[0] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s11_LNA_mag', nMC, MC_s11_syst = MC_s11_syst)


	# Amb S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[2] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s11_amb_mag', nMC, MC_s11_syst = MC_s11_syst)


	# Hot S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[4] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s11_hot_mag', nMC, MC_s11_syst = MC_s11_syst)


	# Open S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[6] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s11_open_mag', nMC, MC_s11_syst = MC_s11_syst)


	# Shorted S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[8] = 1
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s11_shorted_mag', nMC, MC_s11_syst = MC_s11_syst)


	# SR S12*S21 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[12] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s12s21_sr_mag', nMC, MC_s11_syst = MC_s11_syst)


	# Antenna agnitude, EDGES Polynomial, Quiet Sky
	nMC            = 5000
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_antenna_mag', nMC, MC_antenna_S11_mag='yes')










	# Phase
	# ---------------------------------

	# LNA S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[1] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_LNA_ang', nMC, MC_s11_syst = MC_s11_syst)


	# Amb S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[3] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_amb_ang', nMC, MC_s11_syst = MC_s11_syst)


	# Hot S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[5] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_hot_ang', nMC, MC_s11_syst = MC_s11_syst)


	# Open S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[7] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_open_ang', nMC, MC_s11_syst = MC_s11_syst)


	# Shorted S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[9] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_shorted_ang', nMC, MC_s11_syst = MC_s11_syst)


	# Antenna Phase, Traditional Polynomial, Quiet Sky
	nMC            = 5000	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'poly_s11_antenna_ang', nMC, MC_antenna_S11_ang='yes')








	# LNA S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[1] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s11_LNA_ang', nMC, MC_s11_syst = MC_s11_syst)


	# Amb S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[3] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s11_amb_ang', nMC, MC_s11_syst = MC_s11_syst)


	# Hot S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[5] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s11_hot_ang', nMC, MC_s11_syst = MC_s11_syst)


	# Open S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[7] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s11_open_ang', nMC, MC_s11_syst = MC_s11_syst)


	# Shorted S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[9] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'edges_s11_shorted_ang', nMC, MC_s11_syst = MC_s11_syst)


	# Antenna Phase, EDGES Polynomial, Quiet Sky
	nMC            = 5000	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_antenna_ang', nMC, MC_antenna_S11_ang='yes')












	#-------------------------------------------------------------------------------------------------------------------------
	#-------------------------------------------------------------------------------------------------------------------------
	# LOUD SKY
	# --------



	# Physical temperature
	# --------------------

	# Physical temperature ambient
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[0] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'tamb', nMC, quiet_loud_sky='loud', MC_temp = MC_temp)


	# Physical temperature hot
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[1] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'thot', nMC, quiet_loud_sky='loud', MC_temp = MC_temp)


	# Physical temperature open
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[2] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'topen', nMC, quiet_loud_sky='loud', MC_temp = MC_temp)


	# Physical temperature shorted
	nMC        = 5000
	MC_temp    = np.zeros(6); 
	MC_temp[3] = 1	
	out        = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'tshorted', nMC, quiet_loud_sky='loud', MC_temp = MC_temp)






	# Spectra
	# -------
	# Spectrum of ambient
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[0] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'spec_amb', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)


	# Spectrum of hot
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[1] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'spec_hot', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)


	# Spectrum of open
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[2] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'spec_open', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)


	# Spectrum of shorted
	nMC                 = 5000
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[3] = 1	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'spec_shorted', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)











	# S11 Magnitude
	# -------------

	# LNA S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[0] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_LNA_mag', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# Amb S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[2] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_amb_mag', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# Hot S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[4] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_hot_mag', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# Open S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[6] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_open_mag', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# Shorted S11 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[8] = 1
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_shorted_mag', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# SR S12*S21 Mag
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[12] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's12s21_sr_mag', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# Antenna Magnitude, EDGES Polynomial, Loud Sky
	nMC            = 5000
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'loud_edges_s11_antenna_mag', nMC, MC_antenna_S11_mag='yes', quiet_loud_sky='loud')







	# S11 Phase
	# ---------

	# LNA S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[1] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_LNA_ang', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# Amb S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[3] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_amb_ang', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# Hot S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[5] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_hot_ang', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# Open S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[7] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_open_ang', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# Shorted S11 Ang
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[9] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 's11_shorted_ang', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)


	# Antenna Phase, EDGES Polynomial, Loud Sky
	nMC            = 5000
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'loud_edges_s11_antenna_ang', nMC, MC_antenna_S11_ang='yes', quiet_loud_sky='loud')












	# All effects
	# --------------------

	nMC                   = 5000

	MC_temp               = np.zeros(6);
	MC_spectra_noise      = np.zeros(6);
	MC_s11_syst           = np.zeros(20);

	MC_temp[0:4]          = 1
	MC_spectra_noise[0:4] = 1	
	MC_s11_syst[0:10]     = 1
	MC_s11_syst[12]       = 1






	# -------------------------------------------------
	# Uncorrelated ------------------------------------
	# -------------------------------------------------

	# Trad Poly, Quiet Sky, Uncorr S11
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_uncorr_REP_11', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_uncorr_REP_12', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_uncorr_REP_13', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_uncorr_REP_14', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_uncorr_REP_15', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_uncorr_REP_16', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_uncorr_REP_17', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_uncorr_REP_18', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_uncorr_REP_19', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_uncorr_REP_20', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)



	# EDGES Poly, Quiet Sky, Uncorr S11
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_uncorr_REP_11', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_uncorr_REP_12', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_uncorr_REP_13', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_uncorr_REP_14', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_uncorr_REP_15', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_uncorr_REP_16', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_uncorr_REP_17', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_uncorr_REP_18', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_uncorr_REP_19', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_uncorr_REP_20', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst)



	# EDGES Poly, Loud Sky, Uncorr S11
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_uncorr_REP_11', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_uncorr_REP_12', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_uncorr_REP_13', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_uncorr_REP_14', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_uncorr_REP_15', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_uncorr_REP_16', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_uncorr_REP_17', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_uncorr_REP_18', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_uncorr_REP_19', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_uncorr_REP_20', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud')



	# -------------------------------------------------
	# Correlated --------------------------------------
	# -------------------------------------------------

	# Trad Poly, Quiet Sky, Corr S11
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_corr_REP_11', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_corr_REP_12', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_corr_REP_13', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_corr_REP_14', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_corr_REP_15', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_corr_REP_16', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_corr_REP_17', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_corr_REP_18', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_corr_REP_19', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('poly', 'all_poly_quiet_sky_corr_REP_20', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')





	# EDGES Poly, Quiet Sky, Corr S11
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_corr_REP_11', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_corr_REP_12', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_corr_REP_13', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_corr_REP_14', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_corr_REP_15', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_corr_REP_16', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_corr_REP_17', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_corr_REP_18', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_corr_REP_19', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_quiet_sky_corr_REP_20', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, systematic_s11='correlated')



	# EDGES Poly, Loud Sky, Corr S11
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_corr_REP_11', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud', systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_corr_REP_12', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud', systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_corr_REP_13', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud', systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_corr_REP_14', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud', systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_corr_REP_15', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud', systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_corr_REP_16', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud', systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_corr_REP_17', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud', systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_corr_REP_18', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud', systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_corr_REP_19', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud', systematic_s11='correlated')
	out = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'all_edges_poly_loud_sky_corr_REP_20', nMC, MC_antenna_S11_mag='yes', MC_antenna_S11_ang='yes', MC_temp = MC_temp, MC_spectra_noise = MC_spectra_noise, MC_s11_syst = MC_s11_syst, quiet_loud_sky='loud', systematic_s11='correlated')


















	# -------------------------------------------------------------
	# -------------------------------------------------------------
	# REDUCED INPUT UNCERTAINTIES
	# -------------------------------------------------------------
	# -------------------------------------------------------------


	# Physical temperature
	# --------------------

	# Physical temperature ambient
	nMC        = 100
	MC_temp    = np.zeros(6); 
	MC_temp[0] = 0.7
	out        = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_tamb_3term_quiet_sky', nMC, MC_temp = MC_temp)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_tamb_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)











	# Spectra
	# -------
	# Spectrum of ambient
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[0] = 0.45	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_amb_5term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_amb_5term_quiet_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)





	# Spectrum of ambient
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[0] = 0.1
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_amb_5term_loud_sky', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_amb_5term_loud_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)








	# Spectrum of ambient
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[0] = 0.35	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_amb_4term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_amb_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# Spectrum of ambient
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[0] = 0.09
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_amb_4term_loud_sky', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_amb_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)







	# Spectrum of ambient
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[0] = 0.30	
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_amb_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_amb_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# Spectrum of ambient
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[0] = 0.08
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_amb_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_amb_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)










	# Spectrum of hot
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[1] = 0.45
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_hot_5term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_hot_5term_quiet_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Spectrum of hot
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[1] = 0.10
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_hot_5term_loud_sky', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_hot_5term_loud_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Spectrum of hot
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[1] = 0.35
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_hot_4term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_hot_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)	



	# Spectrum of hot
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[1] = 0.10
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_hot_4term_loud_sky', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_hot_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# Spectrum of hot
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[1] = 0.30
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_hot_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_hot_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# Spectrum of hot
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6); 
	MC_spectra_noise[1] = 0.05
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_spec_hot_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_spec_hot_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)














	# Reflection Coefficient
	# ----------------------
	# LNA S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[0] = 0.25
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_mag_5term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_mag_5term_quiet_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# LNA S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[0] = 0.05
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_mag_5term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_mag_5term_loud_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# LNA S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[0] = 0.10
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_mag_4term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_mag_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# LNA S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[0] = 0.01
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_mag_4term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_mag_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# LNA S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[0] = 0.10
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_mag_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_mag_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# LNA S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[0] = 0.01
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_mag_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_mag_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)









	# LNA S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[1] = 0.05	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_ang_5term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_ang_5term_quiet_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)


	# LNA S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[1] = 0.01	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_ang_5term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_ang_5term_loud_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# LNA S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[1] = 0.04	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_ang_4term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_ang_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# LNA S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[1] = 0.01	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_ang_4term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_ang_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# LNA S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[1] = 0.04	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_ang_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_ang_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)


	# LNA S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[1] = 0.01	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_LNA_ang_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_LNA_ang_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)















	# Amb S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[2] = 0.90
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_amb_mag_4term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_amb_mag_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Amb S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[2] = 0.50
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_amb_mag_4term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_amb_mag_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# Amb S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[2] = 0.15
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_amb_mag_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_amb_mag_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Amb S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[2] = 0.20
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_amb_mag_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_amb_mag_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)















	# Amb S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[3] = 0.95	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_amb_ang_5term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)	

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_amb_ang_5term_loud_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Amb S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[3] = 0.40	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_amb_ang_4term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)	

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_amb_ang_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Amb S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[3] = 0.45	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_amb_ang_4term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)	

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_amb_ang_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Amb S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[3] = 0.10	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_amb_ang_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_amb_ang_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Amb S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[3] = 0.03	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_amb_ang_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)	

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_amb_ang_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)















	# Hot S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[4] = 0.90	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_hot_mag_4term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_hot_mag_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# Hot S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[4] = 0.40	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_hot_mag_4term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_hot_mag_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# Hot S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[4] = 0.15	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_hot_mag_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_hot_mag_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Hot S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[4] = 0.30	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_hot_mag_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_hot_mag_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)








	# Hot S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[5] = 0.85	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_hot_ang_5term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_hot_ang_5term_loud_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Hot S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[5] = 0.40	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_hot_ang_4term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_hot_ang_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Hot S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[5] = 0.55	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_hot_ang_4term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_hot_ang_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Hot S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[5] = 0.1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_hot_ang_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_hot_ang_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)


	# Hot S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[5] = 0.03	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_hot_ang_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_hot_ang_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)

















	# Open S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[6] = 0.50	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_open_mag_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_open_mag_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Open S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[6] = 0.50	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_open_mag_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_open_mag_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)









	# Open S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[7] = 0.8	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_open_ang_4term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_open_ang_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Open S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[7] = 0.7	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_open_ang_4term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_open_ang_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Open S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[7] = 0.6	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_open_ang_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_open_ang_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Open S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[7] = 0.6	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_open_ang_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_open_ang_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)








	# Shorted S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[8] = 0.7	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_shorted_mag_4term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_shorted_mag_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# Shorted S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[8] = 0.60	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_shorted_mag_4term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_shorted_mag_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Shorted S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[8] = 0.60	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_shorted_mag_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_shorted_mag_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Shorted S11 Mag
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[8] = 0.55	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_shorted_mag_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_shorted_mag_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)









	# Shorted S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[9] = 0.75	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_shorted_ang_3term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_shorted_ang_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)


	# Shorted S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[9] = 0.75	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_shorted_ang_3term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_shorted_ang_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)














	# Antenna Magnitude
	nMC                   = 50
	MC_std_ant_mag_factor = 0.2
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_mag_5term_quiet_sky', nMC, MC_antenna_S11_mag='yes', MC_std_ant_mag_factor=MC_std_ant_mag_factor, quiet_loud_sky='quiet')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_mag_5term_quiet_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Antenna Magnitude
	nMC                   = 50
	MC_std_ant_mag_factor = 0.05
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_mag_5term_loud_sky', nMC, MC_antenna_S11_mag='yes', MC_std_ant_mag_factor=MC_std_ant_mag_factor, quiet_loud_sky='loud')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_mag_5term_loud_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)





	# Antenna Magnitude
	nMC                   = 50
	MC_std_ant_mag_factor = 0.10
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_mag_4term_quiet_sky', nMC, MC_antenna_S11_mag='yes', MC_std_ant_mag_factor=MC_std_ant_mag_factor, quiet_loud_sky='quiet')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_mag_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# Antenna Magnitude
	nMC                   = 50
	MC_std_ant_mag_factor = 0.03
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_mag_4term_loud_sky', nMC, MC_antenna_S11_mag='yes', MC_std_ant_mag_factor=MC_std_ant_mag_factor, quiet_loud_sky='loud')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_mag_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)




	# Antenna Magnitude
	nMC                   = 50
	MC_std_ant_mag_factor = 0.10
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_mag_3term_quiet_sky', nMC, MC_antenna_S11_mag='yes', MC_std_ant_mag_factor=MC_std_ant_mag_factor, quiet_loud_sky='quiet')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_mag_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Antenna Magnitude
	nMC                   = 50
	MC_std_ant_mag_factor = 0.05
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_mag_3term_loud_sky', nMC, MC_antenna_S11_mag='yes', MC_std_ant_mag_factor=MC_std_ant_mag_factor, quiet_loud_sky='loud')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_mag_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)








	# Antenna Phase
	nMC                   = 50
	MC_std_ant_ang_factor = 0.05
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_ang_5term_quiet_sky', nMC, MC_antenna_S11_ang='yes', MC_std_ant_ang_factor=MC_std_ant_ang_factor, quiet_loud_sky='quiet')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_ang_5term_quiet_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Antenna Phase
	nMC                   = 50
	MC_std_ant_ang_factor = 0.01
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_ang_5term_loud_sky', nMC, MC_antenna_S11_ang='yes', MC_std_ant_ang_factor=MC_std_ant_ang_factor, quiet_loud_sky='loud')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_ang_5term_loud_sky/DTant_5term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Antenna Phase
	nMC                   = 50
	MC_std_ant_ang_factor = 0.04
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_ang_4term_quiet_sky', nMC, MC_antenna_S11_ang='yes', MC_std_ant_ang_factor=MC_std_ant_ang_factor, quiet_loud_sky='quiet')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_ang_4term_quiet_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Antenna Phase
	nMC                   = 50
	MC_std_ant_ang_factor = 0.01
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_ang_4term_loud_sky', nMC, MC_antenna_S11_ang='yes', MC_std_ant_ang_factor=MC_std_ant_ang_factor, quiet_loud_sky='loud')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_ang_4term_loud_sky/DTant_4term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Antenna Phase
	nMC                   = 50
	MC_std_ant_ang_factor = 0.04
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_ang_3term_quiet_sky', nMC, MC_antenna_S11_ang='yes', MC_std_ant_ang_factor=MC_std_ant_ang_factor, quiet_loud_sky='quiet')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_ang_3term_quiet_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)



	# Antenna Phase
	nMC                   = 50
	MC_std_ant_ang_factor = 0.01
	out                   = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'reduced_s11_antenna_ang_3term_loud_sky', nMC, MC_antenna_S11_ang='yes', MC_std_ant_ang_factor=MC_std_ant_ang_factor, quiet_loud_sky='loud')

	d   = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/reduced_s11_antenna_ang_3term_loud_sky/DTant_3term.txt')
	NN  = int(0.95*len(d[0,:]))
	RMS = int(round(1000 * np.sort(np.sqrt(np.sum(d**2,  axis=0)/len(d[:,0])))[NN]))
	print(RMS)









































































	# -----------------------------------------------------------
	# Testing cases with better receiver S11, and antenna S11
	# -----------------------------------------------------------


	# Lower LNA S11 Mag

	# uncertainty in LNA S11 magnitude
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[0] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'LNA_mag_minus30dB_s11_LNA_mag', nMC, receiver_reflection='minus30dB', MC_s11_syst = MC_s11_syst)


	# uncertainty in LNA S11 phase
	nMC            = 5000
	MC_s11_syst    = np.zeros(20); 
	MC_s11_syst[1] = 1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'LNA_mag_minus30dB_s11_LNA_ang', nMC, receiver_reflection='minus30dB', MC_s11_syst = MC_s11_syst)







	# Lower LNA S11 Mag

	# uncertainty in antenna S11 magnitude
	nMC            = 5000
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'LNA_mag_minus30dB_s11_antenna_mag', nMC, MC_antenna_S11_mag='yes', receiver_reflection='minus30dB')


	# uncertainty in antenna S11 phase
	nMC            = 5000	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'LNA_mag_minus30dB_s11_antenna_ang', nMC, MC_antenna_S11_ang='yes', receiver_reflection='minus30dB')






	# Lower antenna S11 Mag

	# uncertainty in antenna S11 magnitude
	nMC            = 5000
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'antenna_mag_minus20dB_s11_antenna_mag', nMC, antenna_S11_mag =-20, MC_antenna_S11_mag='yes')


	# uncertainty in antenna S11 phase
	nMC            = 5000	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'antenna_mag_minus20dB_s11_antenna_ang', nMC, antenna_S11_mag =-20, MC_antenna_S11_ang='yes')





	# Good (lower) antenna phase

	# uncertainty in antenna S11 magnitude
	nMC            = 5000
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'antenna_good_phase_s11_antenna_mag', nMC, good_bad_antenna_phase='good_phase', MC_antenna_S11_mag='yes')


	# uncertainty in antenna S11 phase
	nMC            = 5000	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'antenna_good_phase_s11_antenna_ang', nMC, good_bad_antenna_phase='good_phase', MC_antenna_S11_ang='yes')








	# Lower LNA S11 Mag AND Lower antenna S11 Mag

	# uncertainty in antenna S11 magnitude
	nMC            = 5000
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'LNA_mag_minus30dB_antenna_mag_minus20dB_s11_antenna_mag', nMC, MC_antenna_S11_mag='yes', antenna_S11_mag =-20, receiver_reflection='minus30dB')


	# uncertainty in antenna S11 phase
	nMC            = 5000	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'LNA_mag_minus30dB_antenna_mag_minus20dB_s11_antenna_ang', nMC, MC_antenna_S11_ang='yes', antenna_S11_mag =-20, receiver_reflection='minus30dB')






	# Lower LNA S11 Mag AND Lower antenna S11 Mag AND Good phase

	# uncertainty in antenna S11 magnitude
	nMC            = 5000
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'LNA_mag_minus30dB_antenna_mag_minus20dB_antenna_good_phase_s11_antenna_mag', nMC, MC_antenna_S11_mag='yes', antenna_S11_mag =-20, receiver_reflection='minus30dB', good_bad_antenna_phase='good_phase')


	# uncertainty in antenna S11 phase
	nMC            = 5000	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'LNA_mag_minus30dB_antenna_mag_minus20dB_antenna_good_phase_s11_antenna_ang', nMC, MC_antenna_S11_ang='yes', antenna_S11_mag =-20, receiver_reflection='minus30dB', good_bad_antenna_phase='good_phase')













	# -----------------------------------------------------------------------------
	# -----------------------------------------------------------------------------
	# New Attempts with Reduced Uncertainty
	# -----------------------------------------------------------------------------
	# -----------------------------------------------------------------------------



	# Spectrum of Ambient with Loud Sky
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6)
	MC_spectra_noise[0] = 0.1
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'V2_reduced_spec_amb_5term_loud_sky', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)



	# Spectrum of Hot with Loud Sky
	nMC                 = 50
	MC_spectra_noise    = np.zeros(6)
	MC_spectra_noise[1] = 0.1
	out                 = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'V2_reduced_spec_hot_5term_loud_sky', nMC, quiet_loud_sky='loud', MC_spectra_noise = MC_spectra_noise)












	# LNA S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20)
	MC_s11_syst[1] = 0.1	
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'V2_reduced_s11_LNA_ang_5term_quiet_sky', nMC, quiet_loud_sky='quiet', MC_s11_syst = MC_s11_syst)


	# LNA S11 Ang
	nMC            = 50
	MC_s11_syst    = np.zeros(20)
	MC_s11_syst[1] = 0.01
	out            = eg.MC_LNA_high_band_uncertainty_propagation('edges_poly', 'V2_reduced_s11_LNA_ang_5term_loud_sky', nMC, quiet_loud_sky='loud', MC_s11_syst = MC_s11_syst)










	return 1









def antenna_s11_comparison_days_109_124():

	# paths
	root_folder = '/Volumes/WORK/EDGES/calibration_march_2015/antenna/field_antenna_s11/data/corrected/'
	plot_folder = '/Volumes/WORK/EDGES/calibration_march_2015/antenna/field_antenna_s11/plots/analyses/comparison_days_109_124/'


	# loading average corrected measurements
	m1 = np.genfromtxt(root_folder + '2015_109_07_39_s11/2015_109_07_39_s11.txt') # 15hr local
	m2 = np.genfromtxt(root_folder + '2015_119_13_04_s11/2015_119_13_04_s11.txt') # 21hr local
	m3 = np.genfromtxt(root_folder + '2015_120_14_05_s11/2015_120_14_05_s11.txt') # 22hr local
	m4 = np.genfromtxt(root_folder + '2015_123_14_32_s11/2015_123_14_32_s11.txt') # 22hr local
	m5 = np.genfromtxt(root_folder + '2015_124_13_27_s11/2015_124_13_27_s11.txt') # 21hr local


	# complex vectors
	f = m1[:,0]/1e6
	d1 = m1[:,1] + 1j*m1[:,2]
	d2 = m2[:,1] + 1j*m2[:,2]
	d3 = m3[:,1] + 1j*m3[:,2]
	d4 = m4[:,1] + 1j*m4[:,2]
	d5 = m5[:,1] + 1j*m5[:,2]


	# average of 5 measurements
	dm = np.mean([d1, d2, d3, d4, d5], axis=0)	


	# plot
	plt.close()
	fig1 = plt.figure(num=1, figsize=(11, 8))


	# magnitude
	plt.subplot(2,1,1)
	l1, = plt.plot(f, 20*np.log10(np.abs(d1)) - 20*np.log10(np.abs(dm)),'k', label='109')
	l2, = plt.plot(f, 20*np.log10(np.abs(d2)) - 20*np.log10(np.abs(dm)),'b', label='119')
	l3, = plt.plot(f, 20*np.log10(np.abs(d3)) - 20*np.log10(np.abs(dm)),'g', label='120')
	l4, = plt.plot(f, 20*np.log10(np.abs(d4)) - 20*np.log10(np.abs(dm)),'r', label='123')
	l5, = plt.plot(f, 20*np.log10(np.abs(d5)) - 20*np.log10(np.abs(dm)),'r', label='124')

	plt.xlim([50, 200])
	plt.ylim([-0.2, 0.2])
	plt.xticks(np.arange(60, 220, 20))
	plt.yticks(np.arange(-0.2, 0.25, 0.05))
	plt.grid()
	plt.ylabel('$\Delta$ magnitude [dB]')
	plt.legend([l1, l2, l3, l4, l5], ['day 109 (~15hr local)','day 119 (~21hr local)','day 120 (~22hr local)','day 123 (~22hr local)','day 124 (~21hr local)'], loc=2, fontsize=10)


	# phase
	plt.subplot(2,1,2)
	l1, = plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d1)) - (180/np.pi)*np.unwrap(np.angle(dm)),'k', label='109')
	l2, = plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d2)) - (180/np.pi)*np.unwrap(np.angle(dm)),'b', label='119')
	l3, = plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d3)) - (180/np.pi)*np.unwrap(np.angle(dm)),'g', label='120')
	l4, = plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d4)) - (180/np.pi)*np.unwrap(np.angle(dm)),'r', label='123')
	l5, = plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d5)) - (180/np.pi)*np.unwrap(np.angle(dm)),'r', label='124')

	plt.xlim([50, 200])
	plt.ylim([-1.2, 1.2])
	plt.xticks(np.arange(60, 220, 20))
	plt.yticks(np.arange(-1.2, 1.4, 0.2))
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('$\Delta$ phase [deg]')


	# saving plot
	plt.savefig(plot_folder + 'comparison_days_109_124.pdf', bbox_inches='tight')
	plt.close()















def low_band_LNA_S11():

	# Path
	root_path1  = '/Volumes/WORK/EDGES/calibration_august_2015/LNA/S11/raw/20150825/'
	root_path2  = '/Volumes/WORK/EDGES/calibration_august_2015/LNA/S11/raw/20150826/'
	root_path3  = '/Volumes/WORK/EDGES/calibration_august_2015/LNA/S11/raw/20150827/'
	root_path4  = '/Volumes/WORK/EDGES/calibration_august_2015/LNA/S11/raw/20150828/'
	root_path5  = '/Volumes/WORK/EDGES/calibration_august_2015/LNA/S11/raw/20150831/'
	root_path6  = '/Volumes/WORK/EDGES/calibration_august_2015/LNA/S11/raw/20150901/'
	root_path7  = '/Volumes/WORK/EDGES/calibration_august_2015/LNA/S11/raw/20150902/'
	root_path8  = '/Volumes/WORK/EDGES/calibration_august_2015/LNA/S11/raw/20150903/'
	root_path9  = '/Volumes/WORK/EDGES/calibration_august_2015/LNA/S11/raw/20150904/'
	root_path10 = '/Volumes/WORK/EDGES/calibration_august_2015/LNA/S11/raw/20150905/'





	# Measurements 1
	o_m, f      = rc.s1p_read(root_path1 + 'open_-35dBm_100av.S1P')
	s_m, f      = rc.s1p_read(root_path1 + 'short_-35dBm_100av.S1P')
	l_m, f      = rc.s1p_read(root_path1 + 'load_-35dBm_100av.S1P')

	t1_m, f = rc.s1p_read(root_path1 + 'test1_-35dBm_no_av.S1P')
	t2_m, f = rc.s1p_read(root_path1 + 'test2_-35dBm_no_av.S1P')
	t3_m, f = rc.s1p_read(root_path1 + 'test3_-35dBm_no_av.S1P')
	t4_m, f = rc.s1p_read(root_path1 + 'test4_-35dBm_no_av.S1P')
	t5_m, f = rc.s1p_read(root_path1 + 'test5_-35dBm_100av_35degC.S1P')
	t6_m, f = rc.s1p_read(root_path1 + 'test6_-35dBm_100av_25degC.S1P')


	# Models
	resistance_of_match = 49.98 # female
	md = 1
	o_a, s_a, l_a = rc.agilent_85033E(f, resistance_of_match, md)	


	# Correction 
	t1_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, t1_m)
	t2_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, t2_m)
	t3_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, t3_m)
	t4_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, t4_m)
	t5_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, t5_m)
	t6_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, t6_m)











	# Measurements 2
	o_m, f      = rc.s1p_read(root_path2 + 'open_-35dBm_100av.S1P')
	s_m, f      = rc.s1p_read(root_path2 + 'short_-35dBm_100av.S1P')
	l_m, f      = rc.s1p_read(root_path2 + 'load_-35dBm_100av.S1P')	

	attn1_m, f  = rc.s1p_read(root_path2 + 'attn10dB_-35dBm_100av.S1P')
	lna1_m, f   = rc.s1p_read(root_path2 + 'LNA1_-35dBm_100av.S1P')
	lna2_m, f   = rc.s1p_read(root_path2 + 'LNA2_-35dBm_100av.S1P')



	# Correction 
	attn1_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, attn1_m)
	lna1_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna1_m)
	lna2_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna2_m)	









	# Measurements 3
	o_m, f      = rc.s1p_read(root_path3 + 'LNA/open_-35dBm_100av.S1P')
	s_m, f      = rc.s1p_read(root_path3 + 'LNA/short_-35dBm_100av.S1P')
	l_m, f      = rc.s1p_read(root_path3 + 'LNA/load_-35dBm_100av.S1P')	

	attn2_m, f  = rc.s1p_read(root_path3 + 'LNA/attn10dB_-35dBm_100av.S1P')
	lna3_m, f   = rc.s1p_read(root_path3 + 'LNA/LNA_-35dBm_100av.S1P')



	# Correction 
	attn2_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, attn2_m)
	lna3_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna3_m)







	# Measurements 4
	o_m, f      = rc.s1p_read(root_path4 + 'LNA/open_-35dBm_100av.S1P')
	s_m, f      = rc.s1p_read(root_path4 + 'LNA/short_-35dBm_100av.S1P')
	l_m, f      = rc.s1p_read(root_path4 + 'LNA/load_-35dBm_100av.S1P')	

	attn3_m, f  = rc.s1p_read(root_path4 + 'LNA/attn10dB_-35dBm_100av.S1P')
	lna4_m, f   = rc.s1p_read(root_path4 + 'LNA/LNA1_-35dBm_100av.S1P')
	lna5_m, f   = rc.s1p_read(root_path4 + 'LNA/LNA2_-35dBm_100av.S1P')
	lna6_m, f   = rc.s1p_read(root_path4 + 'LNA/LNA3_after_switching_-35dBm_100av.S1P')


	# Correction 
	attn3_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, attn3_m)
	lna4_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna4_m)
	lna5_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna5_m)
	lna6_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna6_m)






	# Measurements 5
	o_m, f      = rc.s1p_read(root_path5 + 'LNA/open_-35dBm_100av.S1P')
	s_m, f      = rc.s1p_read(root_path5 + 'LNA/short_-35dBm_100av.S1P')
	l_m, f      = rc.s1p_read(root_path5 + 'LNA/load_-35dBm_100av.S1P')	

	attn4_m, f  = rc.s1p_read(root_path5 + 'LNA/attn10dB_-35dBm_100av.S1P')
	lna7_m, f   = rc.s1p_read(root_path5 + 'LNA/LNA_-35dBm_100av.S1P')


	# Correction 
	attn4_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, attn4_m)
	lna7_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna7_m)






	# Measurements 6
	o_m, f      = rc.s1p_read(root_path6 + 'LNA/open_-35dBm_100av.S1P')
	s_m, f      = rc.s1p_read(root_path6 + 'LNA/short_-35dBm_100av.S1P')
	l_m, f      = rc.s1p_read(root_path6 + 'LNA/load_-35dBm_100av.S1P')	

	attn5_m, f  = rc.s1p_read(root_path6 + 'LNA/attn10dB_-35dBm_100av.S1P')
	lna8_m, f   = rc.s1p_read(root_path6 + 'LNA/LNA_-35dBm_100av.S1P')


	# Correction 
	attn5_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, attn5_m)
	lna8_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna8_m)




	# Measurements 7
	o_m, f      = rc.s1p_read(root_path7 + 'LNA/open_-35dBm_100av.S1P')
	s_m, f      = rc.s1p_read(root_path7 + 'LNA/short_-35dBm_100av.S1P')
	l_m, f      = rc.s1p_read(root_path7 + 'LNA/load_-35dBm_100av.S1P')	

	attn6_m, f  = rc.s1p_read(root_path7 + 'LNA/attn10dB_-35dBm_100av.S1P')
	lna9_m, f   = rc.s1p_read(root_path7 + 'LNA/LNA_-35dBm_100av.S1P')


	# Correction 
	attn6_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, attn6_m)
	lna9_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna9_m)






	# Measurements 8
	o_m, f      = rc.s1p_read(root_path8 + 'LNA/open_-35dBm_100av.S1P')
	s_m, f      = rc.s1p_read(root_path8 + 'LNA/short_-35dBm_100av.S1P')
	l_m, f      = rc.s1p_read(root_path8 + 'LNA/load_-35dBm_100av.S1P')	

	attn7_m, f  = rc.s1p_read(root_path8 + 'LNA/attn10dB_-35dBm_100av.S1P')
	lna10_m, f   = rc.s1p_read(root_path8 + 'LNA/LNA_-35dBm_100av.S1P')


	# Correction 
	attn7_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, attn7_m)
	lna10_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna10_m)






	# Measurements 9
	o_m, f      = rc.s1p_read(root_path9 + 'LNA/open_-35dBm_100av.S1P')
	s_m, f      = rc.s1p_read(root_path9 + 'LNA/short_-35dBm_100av.S1P')
	l_m, f      = rc.s1p_read(root_path9 + 'LNA/load_-35dBm_100av.S1P')	

	attn8_m, f   = rc.s1p_read(root_path9 + 'LNA/attn10dB_-35dBm_100av.S1P')
	lna11_m, f   = rc.s1p_read(root_path9 + 'LNA/LNA1_controlled25degC_-35dBm_100av.S1P')
	lna12_m, f   = rc.s1p_read(root_path9 + 'LNA/LNA2_unregulated_right_after_connection_-35dBm_100av.S1P')
	lna13_m, f   = rc.s1p_read(root_path9 + 'LNA/LNA3_unregulated_after_stabilization_-35dBm_100av.S1P')
	lna14_m, f   = rc.s1p_read(root_path9 + 'LNA/LNA4_regulated_again_-35dBm_100av.S1P')
	lna15_m, f   = rc.s1p_read(root_path9 + 'LNA/LNA5_regulated_35degC_-35dBm_100av.S1P')
	lna16_m, f   = rc.s1p_read(root_path9 + 'LNA/LNA6_regulated_25degC_returning_from_35degC_-35dBm_100av.S1P')
#	lna11_m, f   = rc.s1p_read(root_path9 + 'LNA/LNA1_controlled25degC_-35dBm_100av.S1P')



	# Correction 
	attn8_corr, s11, s12s21, s22  = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, attn8_m)
	lna11_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna11_m)
	lna12_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna12_m)
	lna13_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna13_m)
	lna14_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna14_m)	
	lna15_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna15_m)	
	lna16_corr,  s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna16_m)








	# Measurements 10
	o_m, f      = rc.s1p_read(root_path10 + 'LNA/open_-35dBm_100av.S1P')
	s_m, f      = rc.s1p_read(root_path10 + 'LNA/short_-35dBm_100av.S1P')
	l_m, f      = rc.s1p_read(root_path10 + 'LNA/load_-35dBm_100av.S1P')	

	attn9_m, f  = rc.s1p_read(root_path10 + 'LNA/attn10dB_-35dBm_100av.S1P')
	lna17_m, f  = rc.s1p_read(root_path10 + 'LNA/LNA_-35dBm_100av.S1P')


	# Correction 
	attn9_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, attn9_m)
	lna17_corr, s11, s12s21, s22 = rc.de_embed(o_a, s_a, l_a, o_m, s_m, l_m, lna17_m)	























	# Plot 1
	plt.close()
	plt.close()
	plt.close()
	plt.close()

	plt.figure(1)
	plt.plot(f/1e6, 20*np.log10(np.abs(t3_corr)),'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(lna1_corr)),'y')
	plt.plot(f/1e6, 20*np.log10(np.abs(t6_corr)),'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(t5_corr)),'k')
	#plt.plot(f/1e6, 20*np.log10(np.abs(t1_corr)),'k')
	#plt.plot(f/1e6, 20*np.log10(np.abs(t2_corr)),'b')

	#plt.plot(f/1e6, 20*np.log10(np.abs(t4_corr)),'r')


	plt.plot(f/1e6, 20*np.log10(np.abs(lna2_corr)),'y')


	plt.plot(f/1e6, 20*np.log10(np.abs(lna3_corr)),'b')

	plt.plot(f/1e6, 20*np.log10(np.abs(lna4_corr)),'m')
	plt.plot(f/1e6, 20*np.log10(np.abs(lna5_corr)),'m')
	plt.plot(f/1e6, 20*np.log10(np.abs(lna6_corr)),'m')

	plt.plot(f/1e6, 20*np.log10(np.abs(lna7_corr)),'c')
	plt.plot(f/1e6, 20*np.log10(np.abs(lna8_corr)),'y')
	plt.plot(f/1e6, 20*np.log10(np.abs(lna9_corr)),'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(lna10_corr)),'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(lna11_corr)),'b',linewidth=3)
	plt.plot(f/1e6, 20*np.log10(np.abs(lna12_corr)),'r',linewidth=3)
	plt.plot(f/1e6, 20*np.log10(np.abs(lna13_corr)),'k',linewidth=3)
	plt.plot(f/1e6, 20*np.log10(np.abs(lna14_corr)),'m',linewidth=3)
	plt.plot(f/1e6, 20*np.log10(np.abs(lna15_corr)),'g',linewidth=3)
	plt.plot(f/1e6, 20*np.log10(np.abs(lna16_corr)),'c',linewidth=3)
	plt.plot(f/1e6, 20*np.log10(np.abs(lna17_corr)),'y',linewidth=3)


	plt.xlim([50, 100])
	plt.ylim([-42, -32])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.title('LNA S11 After Switch Replacement')

	plt.legend(['unregulated ambient temperature, right after powering LNA', 'regulated at 25degC', 'unregulated ambient temperature, after it stabilizes', 'regulated at 35degC'],loc='best')







	# Plot 2
	plt.figure(2)

	plt.plot(f/1e6, 20*np.log10(np.abs(attn1_corr)),'r')
	plt.plot(f/1e6, 20*np.log10(rc.impedance2gamma(60.93-0.051,50)) * np.ones(len(f)), 'k')

	plt.plot(f/1e6, 20*np.log10(np.abs(attn2_corr)),'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(attn3_corr)),'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(attn4_corr)),'m')
	plt.plot(f/1e6, 20*np.log10(np.abs(attn5_corr)),'y')
	plt.plot(f/1e6, 20*np.log10(np.abs(attn6_corr)),'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(attn7_corr)),'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(attn8_corr)),'c',linewidth=3)
	plt.plot(f/1e6, 20*np.log10(np.abs(attn9_corr)),'y',linewidth=3)

	plt.grid()

	plt.ylim([-20.3, -20.0])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.title('10-dB Attenuator')
	plt.legend(['reflection measurement','DC expectation'],loc='best')







	return 1














def verification_simulators_high_band_2015_25degC(flow, fhigh, start_percent=0, plot='no'):
	"""
	Last modification: May 24, 2015.

	This function calibrates the verification data (simulators 1 and 2) taken with the high-band receiver 2015 at 25degC.

	Definition:
	f, cal_spec_simu1, cal_spec_simu2, phys_temp1, phys_temp2 = verification_simulators_high_band_2015_25degC(flow, fhigh, start_percent=0, plot='no')

	Input parameters:
	flow: low-end frequency limit in MHz
	fhigh: high-end frequency limit in MHz
	start_percent: percentage of initial data to dismiss
	plot: flag to plot basic data cuts. Use plot='yes' to plot

	Output parameters:
	f: frequency at raw EDGES resolution in the range [flow, fhigh]
	cal_spec_simu1: calibrated spectra of simulator1
	cal_spec_simu2: calibrated spectra of simulator2
	phys_temp1: physical temperature of simulator1
	phys_temp2: physical temperature of simulator2

	Usage:
	f, sp1, sp2, t1, t2 = verification_simulators_high_band_2015_25degC(90, 190, start_percent=10, plot='yes')
	"""

	#### Paths ####
	path_root = '/Volumes/WORK'

	path_spectra    = path_root + '/EDGES/data/level1/calibration_march_2015/300_350/'
	path_resistance = path_root + '/EDGES/calibration_march_2015/LNA/resistance/'
	path_s11        = path_root + '/EDGES/calibration_march_2015/LNA/S11/corrected_delay/'   # using load delay is recommended











	#### List of files to load ####
	# simu1
	file_simu11 = path_spectra + 'level1_simulator1_hires_2015_088_18_300_350.mat'
	file_simu12 = path_spectra + 'level1_simulator1_hires_2015_089_00_300_350.mat'
	spec_simu1  = [file_simu11, file_simu12]
	res_simu1   = path_resistance + 'resistance_simulator1_hires_20150329.txt'

	# simu2
	file_simu21 = path_spectra + 'level1_simulator2_2015_075_22_300_350.mat'
	file_simu22 = path_spectra + 'level1_simulator2_2015_076_00_300_350.mat'
	file_simu23 = path_spectra + 'level1_simulator2_2015_077_00_300_350.mat'
	spec_simu2  = [file_simu21, file_simu22, file_simu23]
	res_simu2   = path_resistance + 'resistance_simulator2_20150316.txt'

	# simu2
	# NOT GOOD MEASUREMENTS. PREFER THE ABOVE
	#file_simu21 = path_spectra + 'level1_simulator2_hires_2015_089_07_300_350.mat'
	#spec_simu2  = [file_simu21]
	#res_simu2   = path_resistance + 'resistance_simulator2_hires_20150330.txt'






	#### Loading and averaging of spectra and physical temperature ####
	# percentage of initial data to leave out
	sss1, phys_temp_simu1 = eg.average_calibration_spectrum(spec_simu1, res_simu1, start_percent=start_percent, plot=plot)
	sss2, phys_temp_simu2 = eg.average_calibration_spectrum(spec_simu2, res_simu2, start_percent=start_percent, plot=plot)

	# EDGES frequency
	ff, ilow, ihigh = eg.frequency_edges(flow, fhigh)

	# data selection
	fe      = ff[ilow:ihigh+1]
	Ts1_unc = sss1[ilow:ihigh+1]
	Ts2_unc = sss2[ilow:ihigh+1]










	#### S11 data ####
	s11 = np.genfromtxt(path_s11 + 'calibration_S11_high_resolution.txt')
	#s11 = np.genfromtxt(path_s11 + 'antenna_simulators_hires_20150330.txt')     # this file is NOT recommended	


	for i in range(len(s11[:,0]-1)):
		if (s11[i,0] <= flow) and (s11[i+1,0] > flow):
			index_low = i
		if (s11[i,0] <= fhigh) and (s11[i+1,0] > fhigh):
			index_high = i+1
	index_s11 = np.arange(index_low, index_high+1)


	# frequency / complex data
	f_s11_raw     = s11[index_s11, 0]




	s11_simu1_raw = s11[index_s11, 5] + 1j*s11[index_s11, 6]
	s11_simu2_raw = s11[index_s11, 7] + 1j*s11[index_s11, 8]

	#s11_simu1_raw = s11[index_s11, 1] + 1j*s11[index_s11, 2] # in case the other file is preferred (not recommended)
	#s11_simu2_raw = s11[index_s11, 3] + 1j*s11[index_s11, 4]






	# magnitudes and phases
	s11_simu1_raw_mag = np.abs(s11_simu1_raw)
	s11_simu1_raw_ang = np.unwrap(np.angle(s11_simu1_raw))

	s11_simu2_raw_mag = np.abs(s11_simu2_raw)
	s11_simu2_raw_ang = np.unwrap(np.angle(s11_simu2_raw))


	# fitting model to S11
	fit_s11_simu1_mag = eg.fit_polynomial_fourier('fourier', (f_s11_raw-140)/60, s11_simu1_raw_mag, 17, plot='no')   # 17
	fit_s11_simu1_ang = eg.fit_polynomial_fourier('fourier', (f_s11_raw-140)/60, s11_simu1_raw_ang, 25, plot='no')   # 25

	fit_s11_simu2_mag = eg.fit_polynomial_fourier('fourier', (f_s11_raw-140)/60, s11_simu2_raw_mag, 21, plot='no')   # 21
	fit_s11_simu2_ang = eg.fit_polynomial_fourier('fourier', (f_s11_raw-140)/60, s11_simu2_raw_ang, 25, plot='no')   # 25


	# evaluate models
	s11_simu1_mag = eg.model_evaluate('fourier', fit_s11_simu1_mag[0], (fe-140)/60)
	s11_simu1_ang = eg.model_evaluate('fourier', fit_s11_simu1_ang[0], (fe-140)/60)
	s11_simu2_mag = eg.model_evaluate('fourier', fit_s11_simu2_mag[0], (fe-140)/60)
	s11_simu2_ang = eg.model_evaluate('fourier', fit_s11_simu2_ang[0], (fe-140)/60)


	# complex models
	s11_simu1 = s11_simu1_mag * (np.cos(s11_simu1_ang) + 1j*np.sin(s11_simu1_ang))
	s11_simu2 = s11_simu2_mag * (np.cos(s11_simu2_ang) + 1j*np.sin(s11_simu2_ang))









	#### LNA calibration quantities ####
	rlna, C1, C2, TU, TC, TS = eg.model_LNA_high_band_2015_25degC(fe, method='iterative', cable='open', realization='fiducial')







	#### Calibrated antenna temperature ####
	Ts1_cal = eg.calibrated_antenna_temperature(Ts1_unc, s11_simu1, rlna, C1[-1,:], C2[-1,:], TU[-1,:], TC[-1,:], TS[-1,:])
	Ts2_cal = eg.calibrated_antenna_temperature(Ts2_unc, s11_simu2, rlna, C1[-1,:], C2[-1,:], TU[-1,:], TC[-1,:], TS[-1,:])


	return fe, Ts1_cal, Ts2_cal, phys_temp_simu1, phys_temp_simu2, rlna, C1[-1,:], C2[-1,:], TU[-1,:], TC[-1,:], TS[-1,:]







def calibration_comparison_high_band_receiver_25degC():

	# Paths
	path_root  = '/Volumes/WORK'
	path_data  = path_root + '/EDGES/analysis/calibration_march_2015/comparison_20150604/data/'
	path_plots = path_root + '/EDGES/analysis/calibration_march_2015/comparison_20150604/plots/'


	# Data loading
	ND_F1_O = np.genfromtxt(path_data + 'ND_F1_O.txt')
	ND_F1_S = np.genfromtxt(path_data + 'ND_F1_S.txt')
	ND_F2_O = np.genfromtxt(path_data + 'ND_F2_O.txt')
	ND_F2_S = np.genfromtxt(path_data + 'ND_F2_S.txt')
	D_F1_O  = np.genfromtxt(path_data + 'D_F1_O.txt')
	D_F1_S  = np.genfromtxt(path_data + 'D_F1_S.txt')
	D_F2_O  = np.genfromtxt(path_data + 'D_F2_O.txt')
	D_F2_S  = np.genfromtxt(path_data + 'D_F2_S.txt')



	# Computing Deltas and RMS
	fe = ND_F1_O[:,0]

	DT1_S1 = ND_F1_O[:,1] - np.mean(ND_F1_O[:,1])
	DT2_S1 = ND_F1_S[:,1] - np.mean(ND_F1_S[:,1])
	DT3_S1 = ND_F2_O[:,1] - np.mean(ND_F2_O[:,1]) 
	DT4_S1 = ND_F2_S[:,1] - np.mean(ND_F2_S[:,1])
	DT5_S1 = D_F1_O[:,1]  - np.mean(D_F1_O[:,1])
	DT6_S1 = D_F1_S[:,1]  - np.mean(D_F1_S[:,1])
	DT7_S1 = D_F2_O[:,1]  - np.mean(D_F2_O[:,1]) 
	DT8_S1 = D_F2_S[:,1]  - np.mean(D_F2_S[:,1])

	R1_S1 = np.sqrt(np.sum(DT1_S1**2)/len(DT1_S1))
	R2_S1 = np.sqrt(np.sum(DT2_S1**2)/len(DT2_S1))
	R3_S1 = np.sqrt(np.sum(DT3_S1**2)/len(DT3_S1))
	R4_S1 = np.sqrt(np.sum(DT4_S1**2)/len(DT4_S1))
	R5_S1 = np.sqrt(np.sum(DT5_S1**2)/len(DT5_S1))
	R6_S1 = np.sqrt(np.sum(DT6_S1**2)/len(DT6_S1))
	R7_S1 = np.sqrt(np.sum(DT7_S1**2)/len(DT7_S1))
	R8_S1 = np.sqrt(np.sum(DT8_S1**2)/len(DT8_S1))




	DT1_S2 = ND_F1_O[:,2] - np.mean(ND_F1_O[:,2])
	DT2_S2 = ND_F1_S[:,2] - np.mean(ND_F1_S[:,2])
	DT3_S2 = ND_F2_O[:,2] - np.mean(ND_F2_O[:,2]) 
	DT4_S2 = ND_F2_S[:,2] - np.mean(ND_F2_S[:,2])
	DT5_S2 = D_F1_O[:,2]  - np.mean(D_F1_O[:,2])
	DT6_S2 = D_F1_S[:,2]  - np.mean(D_F1_S[:,2])
	DT7_S2 = D_F2_O[:,2]  - np.mean(D_F2_O[:,2]) 
	DT8_S2 = D_F2_S[:,2]  - np.mean(D_F2_S[:,2])

	R1_S2 = np.sqrt(np.sum(DT1_S2**2)/len(DT1_S2))
	R2_S2 = np.sqrt(np.sum(DT2_S2**2)/len(DT2_S2))
	R3_S2 = np.sqrt(np.sum(DT3_S2**2)/len(DT3_S2))
	R4_S2 = np.sqrt(np.sum(DT4_S2**2)/len(DT4_S2))
	R5_S2 = np.sqrt(np.sum(DT5_S2**2)/len(DT5_S2))
	R6_S2 = np.sqrt(np.sum(DT6_S2**2)/len(DT6_S2))
	R7_S2 = np.sqrt(np.sum(DT7_S2**2)/len(DT7_S2))
	R8_S2 = np.sqrt(np.sum(DT8_S2**2)/len(DT8_S2))










	# Plots

	DY = 0.4

	plt.close()

	fig = plt.figure(num=1, figsize=(20, 12))

	ax = fig.add_subplot(1,2,1)
	ax.plot(fe, DT1_S1 - 0*DY, 'k')
	ax.plot(fe, DT2_S1 - 1*DY, 'k')
	ax.plot(fe, DT3_S1 - 2*DY, 'k')
	ax.plot(fe, DT4_S1 - 3*DY, 'k')
	ax.plot(fe, DT5_S1 - 4*DY, 'k')
	ax.plot(fe, DT6_S1 - 5*DY, 'k')
	ax.plot(fe, DT7_S1 - 6*DY, 'k')
	ax.plot(fe, DT8_S1 - 7*DY, 'k')

	ax.set_ylim([-3.0, 0.2])
	ax.set_xlim([80, 220])

	ax.set_xlabel('frequency [MHz]')
	ax.set_ylabel('$\Delta$T [K]   (0.2 K per division)')

	ax.grid()
	ax.set_yticks(np.arange(0, -3.0, -DY/2))
	ax.set_yticklabels(['C1','','C2','','C3','','C4','','C5','','C6','','C7','','C8'], fontsize = 16, fontweight = 'bold')

	ax.text(190, -0*DY+0.02, 'RMS = ' + str(round(R1_S1, 3)) + ' K', color='b', fontweight = 'bold')
	ax.text(190, -1*DY+0.02, 'RMS = ' + str(round(R2_S1, 3)) + ' K', color='b', fontweight = 'bold')
	ax.text(190, -2*DY+0.02, 'RMS = ' + str(round(R3_S1, 3)) + ' K', color='b', fontweight = 'bold')
	ax.text(190, -3*DY+0.02, 'RMS = ' + str(round(R4_S1, 3)) + ' K', color='b', fontweight = 'bold')
	ax.text(190, -4*DY+0.02, 'RMS = ' + str(round(R5_S1, 3)) + ' K', color='b', fontweight = 'bold')
	ax.text(190, -5*DY+0.02, 'RMS = ' + str(round(R6_S1, 3)) + ' K', color='b', fontweight = 'bold')
	ax.text(190, -6*DY+0.02, 'RMS = ' + str(round(R7_S1, 3)) + ' K', color='b', fontweight = 'bold')
	ax.text(190, -7*DY+0.02, 'RMS = ' + str(round(R8_S1, 3)) + ' K', color='b', fontweight = 'bold')

	ax.set_title('SIMULATOR 1')







	ax = fig.add_subplot(1,2,2)
	ax.plot(fe, DT1_S2 - 0*DY, 'k')
	ax.plot(fe, DT2_S2 - 1*DY, 'k')
	ax.plot(fe, DT3_S2 - 2*DY, 'k')
	ax.plot(fe, DT4_S2 - 3*DY, 'k')
	ax.plot(fe, DT5_S2 - 4*DY, 'k')
	ax.plot(fe, DT6_S2 - 5*DY, 'k')
	ax.plot(fe, DT7_S2 - 6*DY, 'k')
	ax.plot(fe, DT8_S2 - 7*DY, 'k')

	ax.set_ylim([-3.0, 0.2])
	ax.set_xlim([80, 220])

	ax.set_xlabel('frequency [MHz]')
	ax.set_ylabel('$\Delta$T [K]   (0.2 K per division)')

	ax.grid()
	ax.set_yticks(np.arange(0, -3.0, -DY/2))
	ax.set_yticklabels(['C1','','C2','','C3','','C4','','C5','','C6','','C7','','C8'], fontsize = 16, fontweight = 'bold')

	ax.text(190, -0*DY+0.02, 'RMS = ' + str(round(R1_S2, 3)) + ' K', color='r', fontweight = 'bold')
	ax.text(190, -1*DY+0.02, 'RMS = ' + str(round(R2_S2, 3)) + ' K', color='r', fontweight = 'bold')
	ax.text(190, -2*DY+0.02, 'RMS = ' + str(round(R3_S2, 3)) + ' K', color='r', fontweight = 'bold')
	ax.text(190, -3*DY+0.02, 'RMS = ' + str(round(R4_S2, 3)) + ' K', color='r', fontweight = 'bold')
	ax.text(190, -4*DY+0.02, 'RMS = ' + str(round(R5_S2, 3)) + ' K', color='r', fontweight = 'bold')
	ax.text(190, -5*DY+0.02, 'RMS = ' + str(round(R6_S2, 3)) + ' K', color='r', fontweight = 'bold')
	ax.text(190, -6*DY+0.02, 'RMS = ' + str(round(R7_S2, 3)) + ' K', color='r', fontweight = 'bold')
	ax.text(190, -7*DY+0.02, 'RMS = ' + str(round(R8_S2, 3)) + ' K', color='r', fontweight = 'bold')

	ax.set_title('SIMULATOR 2')


	# saving plot
	plt.savefig(path_plots + 'calibration_comparison.pdf', bbox_inches='tight')
	plt.close()








def test_calibration_data_low_band_2015_25degC():
	"""
	Last modification: May 28, 2015.

	This function loads and plots the initial test measurements with the low-band system in the lab.

	Definition: 
	ff, ta = test_calibration_data_low_band_2015_25degC()

	Input parameters:
	none

	Output parameters:
	ff: frequency in MHz
	ta: "uncalibrated antenna temperature in K"

	Usage:
	ff, ta = test_calibration_data_low_band_2015_25degC()
	"""


	# Path
	path_root = '/Volumes/WORK/'

	file_test1 = path_root + 'EDGES/data/level1/calibration_june_2015/300_350/tests/level1_2015_148_04_300_350.mat'
	file_test2 = path_root + 'EDGES/data/level1/calibration_june_2015/300_350/tests/level1_2015_149_00_300_350.mat'
	spectrum_files = [file_test1, file_test2]


	# Spectra
	start_percent = 10
	for i in range(len(spectrum_files)):
		tai, xxx = eg.level1_MAT(spectrum_files[i], plot='no')
		if i == 0:
			ta = tai
		elif i > 0:
			ta = np.concatenate((ta, tai), axis=0)

	index_start_spectra = int((start_percent/100)*len(ta[:,0]))
	ta_sel = ta[index_start_spectra::,:]
	av_ta = np.mean(ta_sel, axis=0)


	# Frequency
	ff, il, ih = eg.frequency_edges(50,100)


	# Plotting
	plt.close()

	plt.figure(1)

	plt.subplot(2,1,1)
	line1, = plt.plot(ta[:, il])
	line2, = plt.plot(ta[:, int((ih-il)/2) + il])
	line3, = plt.plot(ta[:, ih])
	plt.grid()
	plt.xlabel('spectrum number')
	plt.ylabel('uncalibrated temperature [K]\nassuming 300 and 350 K for internal loads')
	plt.legend((line1, line2, line3), ('50 MHz','75 MHz','100 MHz'), loc=9, ncol=3)
	plt.title('TIME STREAMS')

	plt.subplot(2,1,2)
	plt.plot(ff, av_ta)
	plt.xlim([50, 100])
	plt.ylim([319, 326])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('uncalibrated temperature [K]\nassuming 300 and 350 K for internal loads')
	plt.title('TIME AVERAGE, AFTER DISMISSING FIRST 10% OF DATA SET')




	return ff, ta




















def test2_calibration_data_low_band_2015_25degC():


	ff, il, ih = eg.frequency_edges(50, 100)
	fe = ff[il:ih]



	#### Paths ####
	path_root = '/Volumes/WORK'

	# Paths for source data
	path_spectra    = path_root + '/EDGES/data/level1/calibration_june_2015/300_350/'













	# Ambient 1
	file_amb11 = path_spectra + 'level1_ambient_load_25degC_2015_151_02_300_350.mat'
	file_amb12 = path_spectra + 'level1_ambient_load_25degC_2015_152_00_300_350.mat'
	file_amb13 = path_spectra + 'level1_ambient_load_25degC_2015_153_00_300_350.mat'

	ta11, xxx = eg.level1_MAT(file_amb11, plot='no')
	ta12, xxx = eg.level1_MAT(file_amb12, plot='no')
	ta13, xxx = eg.level1_MAT(file_amb13, plot='no')

	ta1 = np.mean(np.concatenate((ta11[:,il:ih], ta12[:,il:ih], ta13[:,il:ih]),axis=0),axis=0)






	# Ambient 2
	file_amb21 = path_spectra + 'level1_ambient_load_25degC_2015_161_04_300_350.mat'
	file_amb22 = path_spectra + 'level1_ambient_load_25degC_2015_162_00_300_350.mat'
	file_amb23 = path_spectra + 'level1_ambient_load_25degC_2015_163_00_300_350.mat'

	ta21, xxx = eg.level1_MAT(file_amb21, plot='no')
	ta22, xxx = eg.level1_MAT(file_amb22, plot='no')
	ta23, xxx = eg.level1_MAT(file_amb23, plot='no')

	ta2 = np.mean(np.concatenate((ta21[:,il:ih], ta22[:,il:ih], ta23[:,il:ih]),axis=0),axis=0)









	# Hot 1
	file_hot11 = path_spectra + 'level1_hot_load_25degC_2015_149_01_300_350.mat'
	file_hot12 = path_spectra + 'level1_hot_load_25degC_2015_150_00_300_350.mat'
	file_hot13 = path_spectra + 'level1_hot_load_25degC_2015_151_00_300_350.mat'

	th11, xxx = eg.level1_MAT(file_hot11, plot='no')
	th12, xxx = eg.level1_MAT(file_hot12, plot='no')
	th13, xxx = eg.level1_MAT(file_hot13, plot='no')

	th1 = np.mean(np.concatenate((th11[:,il:ih], th12[:,il:ih], th13[:,il:ih]),axis=0),axis=0)


	# Hot 2
	file_hot21 = path_spectra + 'level1_hot_load_25degC_2015_163_05_300_350.mat'
	file_hot22 = path_spectra + 'level1_hot_load_25degC_2015_164_00_300_350.mat'
	file_hot23 = path_spectra + 'level1_hot_load_25degC_2015_165_00_300_350.mat'

	th21, xxx = eg.level1_MAT(file_hot21, plot='no')
	th22, xxx = eg.level1_MAT(file_hot22, plot='no')
	th23, xxx = eg.level1_MAT(file_hot23, plot='no')

	th2 = np.mean(np.concatenate((th21[:,il:ih], th22[:,il:ih], th23[:,il:ih]),axis=0),axis=0)






	# Open 1
	file_open11 = path_spectra + 'level1_open_cable_25degC_2015_153_02_300_350.mat'
	file_open12 = path_spectra + 'level1_open_cable_25degC_2015_154_00_300_350.mat'
	file_open13 = path_spectra + 'level1_open_cable_25degC_2015_155_00_300_350.mat'

	to11, xxx = eg.level1_MAT(file_open11, plot='no')
	to12, xxx = eg.level1_MAT(file_open12, plot='no')
	to13, xxx = eg.level1_MAT(file_open13, plot='no')

	to1 = np.mean(np.concatenate((to11[:,il:ih], to12[:,il:ih], to13[:,il:ih]),axis=0),axis=0)


	# Open 2	
	file_open21 = path_spectra + 'level1_open_cable_25degC_2015_165_20_300_350.mat'
	file_open22 = path_spectra + 'level1_open_cable_25degC_2015_166_00_300_350.mat'
	file_open23 = path_spectra + 'level1_open_cable_25degC_2015_167_00_300_350.mat'

	to21, xxx = eg.level1_MAT(file_open21, plot='no')
	to22, xxx = eg.level1_MAT(file_open22, plot='no')
	to23, xxx = eg.level1_MAT(file_open23, plot='no')

	to2 = np.mean(np.concatenate((to21[:,il:ih], to22[:,il:ih], to23[:,il:ih]),axis=0),axis=0)







	# Shorted 1
	file_shorted11 = path_spectra + 'level1_shorted_cable_25degC_2015_155_02_300_350.mat'
	file_shorted12 = path_spectra + 'level1_shorted_cable_25degC_2015_156_00_300_350.mat'
	file_shorted13 = path_spectra + 'level1_shorted_cable_25degC_2015_157_00_300_350.mat'

	ts11, xxx = eg.level1_MAT(file_shorted11, plot='no')
	ts12, xxx = eg.level1_MAT(file_shorted12, plot='no')
	ts13, xxx = eg.level1_MAT(file_shorted13, plot='no')

	ts1 = np.mean(np.concatenate((ts11[:,il:ih], ts12[:,il:ih], ts13[:,il:ih]),axis=0),axis=0)


	# Shorted 2
	file_shorted21 = path_spectra + 'level1_shorted_cable_25degC_2015_167_21_300_350.mat'
	file_shorted22 = path_spectra + 'level1_shorted_cable_25degC_2015_168_00_300_350.mat'
	file_shorted23 = path_spectra + 'level1_shorted_cable_25degC_2015_169_00_300_350.mat'

	ts21, xxx = eg.level1_MAT(file_shorted21, plot='no')
	ts22, xxx = eg.level1_MAT(file_shorted22, plot='no')
	ts23, xxx = eg.level1_MAT(file_shorted23, plot='no')

	ts2 = np.mean(np.concatenate((ts21[:,il:ih], ts22[:,il:ih], ts23[:,il:ih]),axis=0),axis=0)


















	# Simulator1_1
	file_sim1_11 = path_spectra + 'level1_simulator1_25degC_2015_157_02_300_350.mat'
	file_sim1_12 = path_spectra + 'level1_simulator1_25degC_2015_158_00_300_350.mat'
	file_sim1_13 = path_spectra + 'level1_simulator1_25degC_2015_159_00_300_350.mat'

	tsim1_11, xxx = eg.level1_MAT(file_sim1_11, plot='no')
	tsim1_12, xxx = eg.level1_MAT(file_sim1_12, plot='no')
	tsim1_13, xxx = eg.level1_MAT(file_sim1_13, plot='no')

	tsim1_1 = np.mean(np.concatenate((tsim1_11[:,il:ih], tsim1_12[:,il:ih], tsim1_13[:,il:ih]),axis=0),axis=0)





	# Simulator1_2
	file_sim1_21 = path_spectra + 'level1_simulator1_25degC_2015_169_23_300_350.mat'
	file_sim1_22 = path_spectra + 'level1_simulator1_25degC_2015_170_00_300_350.mat'
	file_sim1_23 = path_spectra + 'level1_simulator1_25degC_2015_171_00_300_350.mat'

	tsim1_21, xxx = eg.level1_MAT(file_sim1_21, plot='no')
	tsim1_22, xxx = eg.level1_MAT(file_sim1_22, plot='no')
	tsim1_23, xxx = eg.level1_MAT(file_sim1_23, plot='no')

	tsim1_2 = np.mean(np.concatenate((tsim1_21[:,il:ih], tsim1_22[:,il:ih], tsim1_23[:,il:ih]),axis=0),axis=0)







	# Simulator2
	file_sim21 = path_spectra + 'level1_simulator2_25degC_2015_159_02_300_350.mat'
	file_sim22 = path_spectra + 'level1_simulator2_25degC_2015_159_23_300_350.mat'
	file_sim23 = path_spectra + 'level1_simulator2_25degC_2015_160_00_300_350.mat'
	file_sim24 = path_spectra + 'level1_simulator2_25degC_2015_161_00_300_350.mat'

	tsim21, xxx = eg.level1_MAT(file_sim21, plot='no')
	tsim22, xxx = eg.level1_MAT(file_sim22, plot='no')
	tsim23, xxx = eg.level1_MAT(file_sim23, plot='no')
	tsim24, xxx = eg.level1_MAT(file_sim24, plot='no')

	tsim2 = np.mean(np.concatenate((tsim21[:,il:ih], tsim22[:,il:ih], tsim23[:,il:ih], tsim24[:,il:ih]),axis=0),axis=0)









	fit_ta1     = eg.fit_polynomial_fourier('polynomial', (fe-75)/25, ta1, 8, plot='no')
	fit_ta2     = eg.fit_polynomial_fourier('polynomial', (fe-75)/25, ta2, 8, plot='no')
	fit_th1     = eg.fit_polynomial_fourier('polynomial', (fe-75)/25, th1, 8, plot='no')
	fit_th2     = eg.fit_polynomial_fourier('polynomial', (fe-75)/25, th2, 8, plot='no')
	fit_to1     = eg.fit_polynomial_fourier('fourier',    (fe-75)/25, to1, 25, plot='no')
	fit_to2     = eg.fit_polynomial_fourier('fourier',    (fe-75)/25, to2, 25, plot='no')
	fit_ts1     = eg.fit_polynomial_fourier('fourier',    (fe-75)/25, ts1, 25, plot='no')
	fit_ts2     = eg.fit_polynomial_fourier('fourier',    (fe-75)/25, ts2, 25, plot='no')
	fit_tsim1_1 = eg.fit_polynomial_fourier('fourier',    (fe-75)/25, tsim1_1, 13, plot='no')
	fit_tsim1_2 = eg.fit_polynomial_fourier('fourier',    (fe-75)/25, tsim1_2, 13, plot='no')
	fit_tsim2 = eg.fit_polynomial_fourier('fourier',    (fe-75)/25, tsim2, 13, plot='no')

	ta1_model     = eg.model_evaluate('polynomial', fit_ta1[0],   (fe-75)/25)
	ta2_model     = eg.model_evaluate('polynomial', fit_ta2[0],   (fe-75)/25)
	th1_model     = eg.model_evaluate('polynomial', fit_th1[0],   (fe-75)/25)
	th2_model     = eg.model_evaluate('polynomial', fit_th2[0],   (fe-75)/25)
	to1_model     = eg.model_evaluate('fourier',    fit_to1[0],   (fe-75)/25)
	to2_model     = eg.model_evaluate('fourier',    fit_to2[0],   (fe-75)/25)
	ts1_model     = eg.model_evaluate('fourier',    fit_ts1[0],   (fe-75)/25)
	ts2_model     = eg.model_evaluate('fourier',    fit_ts2[0],   (fe-75)/25)
	tsim1_1_model = eg.model_evaluate('fourier',    fit_tsim1_1[0], (fe-75)/25)
	tsim1_2_model = eg.model_evaluate('fourier',    fit_tsim1_2[0], (fe-75)/25)
	tsim2_model   = eg.model_evaluate('fourier',    fit_tsim2[0], (fe-75)/25)







	ta1x      = eg.spectral_binning(fe, ta1, 100)
	ta2x      = eg.spectral_binning(fe, ta2, 100)
	th1x      = eg.spectral_binning(fe, th1, 100)
	th2x      = eg.spectral_binning(fe, th2, 100)
	to1x      = eg.spectral_binning(fe, to1, 100)
	to2x      = eg.spectral_binning(fe, to2, 100)
	ts1x      = eg.spectral_binning(fe, ts1, 100)
	ts2x      = eg.spectral_binning(fe, ts2, 100)
	tsim1_1_x = eg.spectral_binning(fe, tsim1_1, 100)
	tsim1_2_x = eg.spectral_binning(fe, tsim1_2, 100)
	tsim2x = eg.spectral_binning(fe, tsim2, 100)

	feb  = ta1x[0]
	ta1b = ta1x[1]
	ta2b = ta2x[1]
	th1b = th1x[1]
	th2b = th2x[1]
	to1b = to1x[1]
	to2b = to2x[1]
	ts1b = ts1x[1]
	ts2b = ts2x[1]
	tsim1_1_b = tsim1_1_x[1]
	tsim1_2_b = tsim1_2_x[1]
	tsim2b = tsim2x[1]

	fit_ta1b      = eg.fit_polynomial_fourier('polynomial', (feb-75)/25, ta1b, 8, plot='no')
	fit_ta2b      = eg.fit_polynomial_fourier('polynomial', (feb-75)/25, ta2b, 8, plot='no')
	fit_th1b      = eg.fit_polynomial_fourier('polynomial', (feb-75)/25, th1b, 8, plot='no')
	fit_th2b      = eg.fit_polynomial_fourier('polynomial', (feb-75)/25, th2b, 8, plot='no')
	fit_to1b      = eg.fit_polynomial_fourier('fourier',    (feb-75)/25, to1b, 25, plot='no')
	fit_to2b      = eg.fit_polynomial_fourier('fourier',    (feb-75)/25, to2b, 25, plot='no')
	fit_ts1b      = eg.fit_polynomial_fourier('fourier',    (feb-75)/25, ts1b, 25, plot='no')
	fit_ts2b      = eg.fit_polynomial_fourier('fourier',    (feb-75)/25, ts2b, 25, plot='no')
	fit_tsim1_1_b = eg.fit_polynomial_fourier('fourier',    (feb-75)/25, tsim1_1_b, 13, plot='no')
	fit_tsim1_2_b = eg.fit_polynomial_fourier('fourier',    (feb-75)/25, tsim1_2_b, 13, plot='no')
	fit_tsim2b    = eg.fit_polynomial_fourier('fourier',    (feb-75)/25, tsim2b, 13, plot='no')

	ta1b_model      = eg.model_evaluate('polynomial', fit_ta1b[0],   (feb-75)/25)
	ta2b_model      = eg.model_evaluate('polynomial', fit_ta2b[0],   (feb-75)/25)
	th1b_model      = eg.model_evaluate('polynomial', fit_th1b[0],   (feb-75)/25)
	th2b_model      = eg.model_evaluate('polynomial', fit_th2b[0],   (feb-75)/25)
	to1b_model      = eg.model_evaluate('fourier',    fit_to1b[0],   (feb-75)/25)
	to2b_model      = eg.model_evaluate('fourier',    fit_to2b[0],   (feb-75)/25)
	ts1b_model      = eg.model_evaluate('fourier',    fit_ts1b[0],   (feb-75)/25)
	ts2b_model      = eg.model_evaluate('fourier',    fit_ts2b[0],   (feb-75)/25)
	tsim1_1_b_model = eg.model_evaluate('fourier',    fit_tsim1_1_b[0], (feb-75)/25)
	tsim1_2_b_model = eg.model_evaluate('fourier',    fit_tsim1_2_b[0], (feb-75)/25)
	tsim2b_model    = eg.model_evaluate('fourier',    fit_tsim2b[0], (feb-75)/25)






	plt.close()
	fig = plt.figure(1)

	ax = fig.add_subplot(6,1,1)
	ax.plot(fe, ta2 - ta2_model, 'g')
	ax.plot(feb, ta2b - ta2b_model,'k')
	ax.set_ylim([-0.1, 0.1])
	ax.set_xticks(np.arange(50,105,5))
	ax.set_xticklabels(['','','','','','','','','','',''])
	ax.set_ylabel('$\Delta$T [K]')
	ax.set_title('AMBIENT LOAD: days 161, 162, 163')
	ax.grid()

	ax = fig.add_subplot(6,1,2)
	ax.plot(fe, th2 - th2_model, 'g')
	ax.plot(feb, th2b - th2b_model,'k')
	ax.set_ylim([-0.1, 0.1])
	ax.set_xticks(np.arange(50,105,5))
	ax.set_xticklabels(['','','','','','','','','','',''])
	ax.set_ylabel('$\Delta$T [K]')
	ax.set_title('HOT LOAD: days 163, 164, 165')
	ax.grid()

	ax = fig.add_subplot(6,1,3)
	ax.plot(fe, to2 - to2_model, 'g')
	ax.plot(feb, to2b - to2b_model,'k')
	ax.set_ylim([-0.1, 0.1])
	ax.set_xticks(np.arange(50,105,5))
	ax.set_xticklabels(['','','','','','','','','','',''])
	ax.set_ylabel('$\Delta$T [K]')
	ax.set_title('OPEN CABLE: days 165, 166, 167')
	ax.grid()


	ax = fig.add_subplot(6,1,4)
	ax.plot(fe, ts2 - ts2_model, 'g')
	ax.plot(feb, ts2b - ts2b_model,'k')
	ax.set_ylim([-0.1, 0.1])
	ax.set_xticks(np.arange(50,105,5))
	ax.set_xticklabels(['','','','','','','','','','',''])
	ax.set_ylabel('$\Delta$T [K]')
	ax.set_title('SHORTED CABLE: days 167, 168, 169')
	ax.grid()

	ax = fig.add_subplot(6,1,5)
	ax.plot(fe, tsim1_2 - tsim1_2_model, 'g')
	ax.plot(feb, tsim1_2_b - tsim1_2_b_model,'k')
	ax.set_ylim([-0.1, 0.1])
	ax.set_xticks(np.arange(50,105,5))
	ax.set_xticklabels(['','','','','','','','','','',''])
	ax.set_ylabel('$\Delta$T [K]')
	ax.set_title('SIMULATOR 1: days 169, 170, 171')
	ax.grid()

	ax = fig.add_subplot(6,1,6)
	ax.plot(fe, tsim2 - tsim2_model, 'g')
	ax.plot(feb, tsim2b - tsim2b_model,'k')
	ax.set_ylim([-0.1, 0.1])
	ax.set_xticks(np.arange(50,105,5))
	ax.set_ylabel('$\Delta$T [K]')
	ax.set_xlabel('frequency [MHz]')
	ax.set_title('SIMULATOR 2: days 159, 160, 161')
	ax.grid()






	return fe, feb, to1-to1_model, to1b-to1b_model













def verification_simulators_low_band_2015_25degC(flow, fhigh, start_percent=0, plot='no'):
	"""
	Last modification: June 23, 2015.

	This function calibrates the verification data (simulators 1 and 2) taken with the low-band receiver 2015 at 25degC.

	Definition:
	f, cal_spec_simu1, cal_spec_simu2, phys_temp1, phys_temp2 = verification_simulators_low_band_2015_25degC(flow, fhigh, start_percent=0, plot='no')

	Input parameters:
	flow: low-end frequency limit in MHz
	fhigh: high-end frequency limit in MHz
	start_percent: percentage of initial data to dismiss
	plot: flag to plot basic data cuts. Use plot='yes' to plot

	Output parameters:
	f: frequency at raw EDGES resolution in the range [flow, fhigh]
	cal_spec_simu1: calibrated spectra of simulator1
	cal_spec_simu2: calibrated spectra of simulator2
	phys_temp1: physical temperature of simulator1
	phys_temp2: physical temperature of simulator2

	Usage:
	f, sp1, sp2, t1, t2 = verification_simulators_low_band_2015_25degC(50, 100, start_percent=10, plot='yes')
	"""

	#### Paths ####
	path_root = '/Volumes/WORK'

	path_spectra    = path_root + '/EDGES/data/level1/calibration_june_2015/300_350/'
	path_resistance = path_root + '/EDGES/calibration_june_2015/LNA/resistance/'
	path_s11        = path_root + '/EDGES/calibration_june_2015/LNA/S11/corrected/'   # using load delay is recommended











	#### List of files to load ####
	# Simu1
	file_simu11 = path_spectra + 'level1_simulator1_25degC_2015_169_23_300_350.mat'
	file_simu12 = path_spectra + 'level1_simulator1_25degC_2015_170_00_300_350.mat'
	file_simu13 = path_spectra + 'level1_simulator1_25degC_2015_171_00_300_350.mat'
	spec_simu1  = [file_simu11, file_simu12, file_simu13]
	res_simu1   = path_resistance + 'simulator1_2015_169_23.txt'

	# Simu2
	file_simu21 = path_spectra + 'level1_simulator2_25degC_2015_159_02_300_350.mat'
	file_simu22 = path_spectra + 'level1_simulator2_25degC_2015_159_23_300_350.mat'
	file_simu23 = path_spectra + 'level1_simulator2_25degC_2015_160_00_300_350.mat'
	file_simu24 = path_spectra + 'level1_simulator2_25degC_2015_161_00_300_350.mat'
	spec_simu2  = [file_simu21, file_simu22, file_simu23, file_simu24]
	res_simu21  = path_resistance + 'simulator2_2015_159_02.txt'  
	res_simu22  = path_resistance + 'simulator2_2015_159_23.txt'
	res_simu2   = [res_simu21, res_simu22]






	#### Loading and averaging of spectra and physical temperature ####
	# Percentage of initial data to leave out
	sss1, phys_temp_simu1 = eg.average_calibration_spectrum(spec_simu1, res_simu1, start_percent=start_percent, plot=plot)
	sss2, phys_temp_simu2 = eg.average_calibration_spectrum(spec_simu2, res_simu2, start_percent=start_percent, plot=plot)

	# EDGES frequency
	ff, ilow, ihigh = eg.frequency_edges(flow, fhigh)

	# Data selection
	fe      = ff[ilow:ihigh+1]
	Ts1_unc = sss1[ilow:ihigh+1]
	Ts2_unc = sss2[ilow:ihigh+1]










	#### S11 data ####
	s11 = np.genfromtxt(path_s11 + 's11_calibration_low_band_LNA25degC_2015-06-23-20-03-13.txt')	

	for i in range(len(s11[:,0])):
		if (s11[i,0] <= flow) and (s11[i+1,0] > flow):
			index_low = i
		if (s11[i-1,0] < fhigh) and (s11[i,0] >= fhigh):
			index_high = i
	index_s11 = np.arange(index_low, index_high+1)


	# Frequency / complex data
	f_s11         = s11[index_s11, 0]
	s11_simu1_raw = s11[index_s11, 17] + 1j*s11[index_s11, 18]
	s11_simu2_raw = s11[index_s11, 19] + 1j*s11[index_s11, 20]





	# Magnitudes and phases
	s11_simu1_raw_mag = np.abs(s11_simu1_raw)
	s11_simu1_raw_ang = np.unwrap(np.angle(s11_simu1_raw))

	s11_simu2_raw_mag = np.abs(s11_simu2_raw)
	s11_simu2_raw_ang = np.unwrap(np.angle(s11_simu2_raw))





	# Fitting model to S11
	f_s11n            = (f_s11-75)/25

	fit_s11_simu1_mag = eg.fit_polynomial_fourier('fourier', f_s11n, s11_simu1_raw_mag, 17, plot='no')
	fit_s11_simu1_ang = eg.fit_polynomial_fourier('fourier', f_s11n, s11_simu1_raw_ang, 17, plot='no') 

	fit_s11_simu2_mag = eg.fit_polynomial_fourier('fourier', f_s11n, s11_simu2_raw_mag, 17, plot='no')
	fit_s11_simu2_ang = eg.fit_polynomial_fourier('fourier', f_s11n, s11_simu2_raw_ang, 17, plot='no') 




	# Evaluate models
	fen = (fe-75)/25

	s11_simu1_mag = eg.model_evaluate('fourier', fit_s11_simu1_mag[0], fen)
	s11_simu1_ang = eg.model_evaluate('fourier', fit_s11_simu1_ang[0], fen)
	s11_simu2_mag = eg.model_evaluate('fourier', fit_s11_simu2_mag[0], fen)
	s11_simu2_ang = eg.model_evaluate('fourier', fit_s11_simu2_ang[0], fen)




	# Complex models
	s11_simu1 = s11_simu1_mag * (np.cos(s11_simu1_ang) + 1j*np.sin(s11_simu1_ang))
	s11_simu2 = s11_simu2_mag * (np.cos(s11_simu2_ang) + 1j*np.sin(s11_simu2_ang))









	#### LNA calibration quantities ####
	rlna, C1, C2, TU, TC, TS = eg.model_LNA_low_band_2015_25degC(fe, 'fiducial', 'shorted', 'iterative', 0, 'no')







	#### Calibrated antenna temperature ####
	Ts1_cal = eg.calibrated_antenna_temperature(Ts1_unc, s11_simu1, rlna, C1, C2, TU, TC, TS)
	Ts2_cal = eg.calibrated_antenna_temperature(Ts2_unc, s11_simu2, rlna, C1, C2, TU, TC, TS)


	return fe, Ts1_cal, Ts2_cal, phys_temp_simu1, phys_temp_simu2, rlna, C1, C2, TU, TC, TS
	#return f_s11, s11_simu2_raw_mag, s11_simu2_raw_ang, fit_s11_simu2_mag, fit_s11_simu2_ang  






def low_band_30dB_s11_accuracy():


	path_root   = '/Volumes/WORK/'
	path_data   = path_root + 'EDGES/calibration_june_2015/LNA/S11/raw/20150630/LNA/'
	om, f = rc.s1p_read(path_data + 'open_2_VNA_-30dBm_10av.S1P')
	sm, f = rc.s1p_read(path_data + 'short_2_VNA_-30dBm_10av.S1P')
	lm, f = rc.s1p_read(path_data + 'load_2_VNA_-30dBm_10av.S1P')

	attn3dBm, f   = rc.s1p_read(path_data + 'attn3dB_2_VNA_-30dBm_10av.S1P')
	attn6dBm, f   = rc.s1p_read(path_data + 'attn6dB_2_VNA_-30dBm_10av.S1P')
	attn10dBm, f  = rc.s1p_read(path_data + 'attn10dB_2_VNA_-30dBm_10av.S1P')
	attn19dBm, f  = rc.s1p_read(path_data + 'attn19dB_2_VNA_-30dBm_10av.S1P')


	# Models of standards
	resistance_of_match = 49.97 # female
	md = 1
	oa, sa, la = rc.agilent_85033E(f, resistance_of_match, md)


	# Correction
	out  = rc.de_embed(oa, sa, la, om, sm, lm, attn3dBm)
	attn3dBc = out[0]

	out  = rc.de_embed(oa, sa, la, om, sm, lm, attn6dBm)
	attn6dBc = out[0]

	out  = rc.de_embed(oa, sa, la, om, sm, lm, attn10dBm)
	attn10dBc = out[0]

	out  = rc.de_embed(oa, sa, la, om, sm, lm, attn19dBm)
	attn19dBc = out[0]


	# DC expectations
	attn3dB_DC  = rc.impedance2gamma(150.165 - 0.051,50) * np.ones(len(f))
	attn6dB_DC  = rc.impedance2gamma( 83.823 - 0.051,50) * np.ones(len(f))
	attn10dB_DC = rc.impedance2gamma( 61.262 - 0.051,50) * np.ones(len(f))
	attn19dB_DC = rc.impedance2gamma( 51.413 - 0.051,50) * np.ones(len(f))

	# Plots


	plt.subplot(4,1,1)
	h1, = plt.plot(f/1e6, 20*np.log10(np.abs(attn3dBc)),'b')
	h2, = plt.plot(f/1e6, 20*np.log10(np.abs(attn3dB_DC)),'r')
	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)
	plt.ylabel('magnitude [dB]')
	plt.title('3-dB ATTENUATOR')
	plt.legend([h1, h2],['reflection measurement','DC measurement'],loc=0)

	plt.subplot(4,1,2)
	h1, = plt.plot(f/1e6, 20*np.log10(np.abs(attn6dBc)),'b')
	h2, = plt.plot(f/1e6, 20*np.log10(np.abs(attn6dB_DC)),'r')
	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)
	plt.ylabel('magnitude [dB]')
	plt.title('6-dB ATTENUATOR')

	plt.subplot(4,1,3)
	h1, = plt.plot(f/1e6, 20*np.log10(np.abs(attn10dBc)),'b')
	h2, = plt.plot(f/1e6, 20*np.log10(np.abs(attn10dB_DC)),'r')
	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)
	plt.ylabel('magnitude [dB]')
	plt.title('10-dB ATTENUATOR')

	plt.subplot(4,1,4)
	h1, = plt.plot(f/1e6, 20*np.log10(np.abs(attn19dBc)),'b')
	h2, = plt.plot(f/1e6, 20*np.log10(np.abs(attn19dB_DC)),'r')
	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)
	plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.title('19-dB ATTENUATOR')


	return 1
#plt.xlabel('frequency [MHz]')
#plt.ylabel('magnitude [dB]')
#plt.legend([h1,h2,h3,h4,h5,h6],['original','???','-30 dBm, right after stopping switching','-30 dBm, 15 minutes after stopping switching','-30 dBm, 35 minutes after stopping switching','before starting switching'],loc=0)







def comparison_back_end_attenuation():

	path_spectra = '/Volumes/WORK/EDGES/data/level1/calibration_june_2015/300_350/'
	path_resistance = '/Volumes/WORK/EDGES/calibration_june_2015/LNA/resistance/'

	#### List of files to load ####

	# No attenuation
	file_no_attn1 = path_spectra + 'level1_open_cable_25degC_2015_165_20_300_350.mat'
	file_no_attn2 = path_spectra + 'level1_open_cable_25degC_2015_166_00_300_350.mat'
	file_no_attn3 = path_spectra + 'level1_open_cable_25degC_2015_167_00_300_350.mat'
	spec_no_attn  = [file_no_attn1, file_no_attn2, file_no_attn3]
	res_open   = path_resistance + 'open_cable_2015_165_20.txt'      

	# Attenuation
	file_attn1 = path_spectra + 'tests/level1_open_cable_25degC_extra_attenuation_back_end_2015_181_15_300_350.mat'
	file_attn2 = path_spectra + 'tests/level1_open_cable_25degC_extra_attenuation_back_end_2015_182_00_300_350.mat'
	spec_attn  = [file_attn1, file_attn2]

	# No Ethernet
	file_NE1 = path_spectra + 'tests/level1_open_cable_NoEthernet_2015_182_08_300_350.mat'
	file_NE2 = path_spectra + 'tests/level1_open_cable_NoEthernet_2015_183_00_300_350.mat'
	spec_NE  = [file_NE1, file_NE2]




	#### Loading and averaging of spectra and physical temperature ####
	start_percent = 2
	plot = 'no'
	sna, pt = eg.average_calibration_spectrum(spec_no_attn, res_open, start_percent=start_percent, plot=plot) 
	sa,  pt = eg.average_calibration_spectrum(spec_attn,    res_open, start_percent=start_percent, plot=plot)  # using same resistance, not important 
	sne, pt = eg.average_calibration_spectrum(spec_NE,      res_open, start_percent=start_percent, plot=plot)  # using same resistance, not important




	# Open back-end
	file_be  = path_spectra + 'tests/level1_open_input_back_end_2015_182_05_300_350.mat'
	out      = eg.level1_MAT_three_loads(file_be, plot='no')

	ant = out[0]
	amb = out[1]
	hot = out[2]

	sbe_all = np.concatenate((ant, amb, hot), axis=0)
	sbe = np.mean(sbe_all, axis=0)


	# EDGES frequency
	ff, ilow, ihigh = eg.frequency_edges(50, 100)

	# Data selection
	fe   = ff[ilow:ihigh+1]
	Tsna = sna[ilow:ihigh+1]
	Tsa  = sa[ilow:ihigh+1]
	Tbe  = sbe[ilow:ihigh+1]
	Tne  = sne[ilow:ihigh+1]


	# Binning
	fb, Tsna_b, cc = eg.spectral_binning(fe, Tsna, 100)
	fb, Tsa_b, cc  = eg.spectral_binning(fe, Tsa,  100)
	fb, Tne_b, cc  = eg.spectral_binning(fe, Tne,  100)


	# RFI comparison

	# Fitting model
	fit_sna = eg.fit_polynomial_fourier('fourier', (fe-75)/25, Tsna, 27, plot='no')
	fit_sna = eg.fit_polynomial_fourier('fourier', (fe-75)/25, Tsna, 27, plot='no')
	fit_ne  = eg.fit_polynomial_fourier('fourier', (fe-75)/25, Tne, 27, plot='no')
	fit_be  = np.polyfit(fe, Tbe, 7)

	model_sna = eg.model_evaluate('fourier', fit_sna[0], (fe-75)/25)
	model_ne  = eg.model_evaluate('fourier', fit_ne[0],  (fe-75)/25)
	model_be  = np.polyval(fit_be, fe)


	# Plots

	plt.figure(1)
	h1, = plt.plot(fb, Tsa_b - Tsna_b)
	h2, = plt.plot(fb, Tne_b - Tsna_b)
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('temperature [K]')
	plt.title('DIFFERENCES BETWEEN MEASUREMENTS OF OPEN CABLE')
	plt.legend([h1, h2],['With extra attenuation (181/182) - Normal (166/167)', 'With Ethernet disconnected (182/183) - Normal (166/167)'],loc=0)

	plt.figure(2)
	h2, = plt.plot(fe, Tne  - model_ne,  'g')
	h1, = plt.plot(fe, Tsna - model_sna, 'b')
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('temperature [K]')
	plt.legend([h1, h2],['Normal (166/167)', 'With Ethernet disconnected (182/183)'],loc=0)
	plt.title('CHECK OF RFI IN MEASUREMENTS OF OPEN CABLE')

	plt.figure(3)

	plt.subplot(2,1,1)
	plt.plot(fe, Tbe-model_be)
	plt.grid()
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('no units')
	plt.xlim([45, 105])
	plt.title('CHECK OF RFI IN MEASUREMENTS OF BACK-END ONLY')

	plt.subplot(2,1,2)
	plt.plot(fe, Tbe-model_be)
	plt.grid()
	plt.xlim([57, 83])
	plt.ylim([-1e-11, 5e-11])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('no units')

	return fb, Tsna_b, Tsa_b, Tne_b, fe, Tsna-model_sna, Tne-model_ne, Tbe-model_be























def plots_MC_high_band_simulations():

	root_path = '/Volumes/WORK/'

	f = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/freq.txt')

	DTant = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant.txt')

	#DTant_0deg_fit = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_0deg_fit.txt')

	DTant_1deg_fit = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_1deg_fit.txt')

	DTant_2deg_fit = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_2deg_fit.txt')

	DTant_3deg_fit = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_3deg_fit.txt')

	DTant_4deg_fit = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_4deg_fit.txt')

	DTant_5deg_fit = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_5deg_fit.txt')


	plt.close()
	fig = plt.figure(1)

	plt.subplot(2,3,1)
	plt.plot(f, 1000 * DTant[:,10:20])
	plt.xlim([80, 200])
	plt.ylim([-600, 600])
	plt.ylabel('$\Delta$ T$_{ANT}$ [mK]')#, fontsize=16)
	plt.grid()
	ax = plt.gca()
	ax.set_xticklabels('')
	ax.set_yticks(np.arange(-600, 900, 300))
	#plt.text(140, 480, 'ORIGINAL', fontsize=12, bbox = dict(facecolor='red')) #, facecolor='red'

	plt.subplot(2,3,2)
	plt.plot(f, 1000 * DTant_1deg_fit[:,10:20])
	plt.xlim([80, 200])
	plt.ylim([-600, 600])
	plt.grid()
	ax = plt.gca()
	ax.set_xticklabels('')
	ax.set_yticks(np.arange(-600, 900, 300))
	ax.set_yticklabels('')
	#plt.text(140, 480, '1st-DEG',fontsize=12) #, facecolor='red'

	plt.subplot(2,3,3)
	plt.plot(f, 1000 * DTant_2deg_fit[:,10:20])
	plt.xlim([80, 200])
	plt.ylim([-600, 600])	
	plt.grid()
	ax = plt.gca()
	ax.set_xticklabels('')
	ax.set_yticks(np.arange(-600, 900, 300))
	ax.set_yticklabels('')
	#plt.text(140, 480, '2nd-DEG',fontsize=12) #, facecolor='red'

	plt.subplot(2,3,4)
	plt.plot(f, 1000 * DTant_3deg_fit[:,10:20])
	plt.xlim([80, 200])
	plt.ylim([-16, 16])
	plt.xlabel('frequency [MHz]')#, fontsize=16)
	plt.ylabel('$\Delta$ T$_{ANT}$ [mK]')#, fontsize=16)
	plt.grid()
	ax = plt.gca()
	ax.set_xticklabels(['','100','120','140','160','180',''])
	ax.set_yticks(np.arange(-16, 24, 8))
	#plt.text(140, 12, '3rd-DEG',fontsize=12) #, facecolor='red'

	plt.subplot(2,3,5)
	plt.plot(f, 1000 * DTant_4deg_fit[:,10:20])
	plt.xlim([80, 200])
	plt.ylim([-16, 16])
	plt.xlabel('frequency [MHz]')#, fontsize=16)
	plt.grid()
	ax = plt.gca()
	ax.set_xticklabels(['','100','120','140','160','180',''])
	ax.set_yticks(np.arange(-16, 24, 8))
	ax.set_yticklabels('')
	#plt.text(140, 12, '4th-DEG',fontsize=12) #, facecolor='red'

	plt.subplot(2,3,6)
	plt.plot(f, 1000 * DTant_5deg_fit[:,10:20])
	plt.xlim([80, 200])
	plt.ylim([-16, 16])
	plt.xlabel('frequency [MHz]')#, fontsize=16)
	plt.grid()
	ax = plt.gca()
	ax.set_xticklabels(['','100','120','140','160','180',''])
	ax.set_yticks(np.arange(-16, 24, 8))
	ax.set_yticklabels('')
	#plt.text(140, 12, '5th-DEG',fontsize=12) #, facecolor='red'



	fig = plt.figure(2)

	plt.hist(1000*np.sqrt(np.sum(DTant**2,axis=0)/len(DTant[:,0])),20,color='y')
	plt.hist(1000*np.sqrt(np.sum(DTant_1deg_fit**2,axis=0)/len(DTant_1deg_fit[:,0])),20,color='r')
	plt.hist(1000*np.sqrt(np.sum(DTant_2deg_fit**2,axis=0)/len(DTant_2deg_fit[:,0])),20,color='g')
	plt.hist(1000*np.sqrt(np.sum(DTant_3deg_fit**2,axis=0)/len(DTant_3deg_fit[:,0])),20,color='b')
	plt.hist(1000*np.sqrt(np.sum(DTant_4deg_fit**2,axis=0)/len(DTant_4deg_fit[:,0])),20,color='k')
	plt.ylim([0,900])
	plt.xlim([0,600])
	#plt.legend('','','','','')
	plt.xlabel('RMS Difference [mK]', fontsize=18)
	plt.ylabel('relative counts [%]', fontsize=18)
	ax = plt.gca()
	ax.set_xticks([0,100,200,300,400,500,600])
	ax.set_xticklabels(['0','100','200','300','400','500','600'], fontsize=16)
	ax.set_yticks([0,200,400,600,800])
	ax.set_yticklabels(['','','50','','100',''], fontsize=16)

	return 1





def RMS_results_MC_high_band_OLD():


	root_path = '/Volumes/WORK/'
	f = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/tamb_fiducial/freq.txt')

	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/tamb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/tamb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/tamb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/tamb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/tamb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/tamb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/tamb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Tamb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))







	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/thot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Thot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/topen_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/topen_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/topen_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/topen_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/topen_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/topen_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/topen_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Topen: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))		










	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_amb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_amb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_amb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_amb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_amb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_amb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_amb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Spec Amb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	








	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_hot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_hot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_hot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_hot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_hot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_hot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_hot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Spec Hot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))		








	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_open_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_open_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_open_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_open_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_open_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_open_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/spec_open_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Spec Open: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))		













	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_LNA_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_LNA_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_LNA_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_LNA_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_LNA_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_LNA_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_LNA_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Mag S11 LNA: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	





	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_LNA_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_LNA_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_LNA_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_LNA_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_LNA_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_LNA_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_LNA_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Ang S11 LNA: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	











	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_amb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_amb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_amb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_amb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_amb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_amb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_amb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Mag S11 Amb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_amb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_amb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_amb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_amb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_amb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_amb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_amb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Ang S11 Amb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	









	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_hot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_hot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_hot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_hot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_hot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_hot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_hot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Mag S11 Hot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_hot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_hot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_hot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_hot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_hot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_hot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_hot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Ang S11 Hot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	











	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_open_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_open_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_open_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_open_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_open_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_open_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11mag_open_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Mag S11 Cable: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_open_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_open_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_open_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_open_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_open_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_open_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/syst_s11ang_open_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('Ang S11 Cable: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	














	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_tamb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_tamb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_tamb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_tamb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_tamb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_tamb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_tamb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Tamb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))







	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_thot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_thot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_thot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_thot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_thot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_thot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_thot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Thot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))







	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_topen_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_topen_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_topen_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_topen_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_topen_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_topen_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_topen_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Topen: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))








	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_amb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_amb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_amb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_amb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_amb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_amb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_amb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Spec Amb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	








	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_hot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_hot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_hot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_hot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_hot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_hot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_hot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Spec Hot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))		








	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_open_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_open_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_open_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_open_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_open_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_open_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_spec_open_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Spec Open: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))		













	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_LNA_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_LNA_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_LNA_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_LNA_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_LNA_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_LNA_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_LNA_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Mag S11 LNA: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	





	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_LNA_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_LNA_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_LNA_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_LNA_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_LNA_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_LNA_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_LNA_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Ang S11 LNA: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	











	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_amb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_amb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_amb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_amb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_amb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_amb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_amb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Mag S11 Amb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_amb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_amb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_amb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_amb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_amb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_amb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_amb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Ang S11 Amb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	









	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_hot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_hot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_hot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_hot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_hot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_hot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_hot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Mag S11 Hot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_hot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_hot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_hot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_hot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_hot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_hot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_hot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Ang S11 Hot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	











	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_open_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_open_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_open_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_open_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_open_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_open_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11mag_open_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Mag S11 Cable: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_open_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_open_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_open_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_open_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_open_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_open_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/loud_sky_syst_s11ang_open_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('LOUD SKY Ang S11 Cable: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	















	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_tamb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_tamb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_tamb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_tamb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_tamb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_tamb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_tamb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Tamb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))







	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_thot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_thot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_thot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_thot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_thot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_thot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_thot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Thot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_topen_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_topen_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_topen_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_topen_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_topen_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_topen_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_topen_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Topen: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))		










	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_amb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_amb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_amb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_amb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_amb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_amb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_amb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Spec Amb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	








	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_hot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_hot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_hot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_hot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_hot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_hot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_hot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Spec Hot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))		








	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_open_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_open_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_open_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_open_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_open_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_open_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_spec_open_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Spec Open: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))		













	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_LNA_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_LNA_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_LNA_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_LNA_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_LNA_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_LNA_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_LNA_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Mag S11 LNA: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	





	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_LNA_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_LNA_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_LNA_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_LNA_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_LNA_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_LNA_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_LNA_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Ang S11 LNA: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	











	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_amb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_amb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_amb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_amb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_amb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_amb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_amb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Mag S11 Amb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_amb_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_amb_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_amb_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_amb_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_amb_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_amb_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_amb_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Ang S11 Amb: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	









	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_hot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_hot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_hot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_hot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_hot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_hot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_hot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Mag S11 Hot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_hot_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_hot_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_hot_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_hot_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_hot_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_hot_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_hot_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Ang S11 Hot: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	











	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_open_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_open_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_open_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_open_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_open_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_open_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11mag_open_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Mag S11 Cable: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	D1 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_open_fiducial/DTant_1deg_fit.txt')	
	D2 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_open_fiducial/DTant_2deg_fit.txt')
	D3 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_open_fiducial/DTant_3deg_fit.txt')
	D4 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_open_fiducial/DTant_4deg_fit.txt')
	D5 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_open_fiducial/DTant_5deg_fit.txt')
	D6 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_open_fiducial/DTant_6deg_fit.txt')
	D7 = np.genfromtxt(root_path + 'EDGES/calibration_march_2015/LNA/uncertainty_propagation/data/bad_phase_syst_s11ang_open_fiducial/DTant_7deg_fit.txt')

	RMS1 = round(1000 * np.max(np.sqrt(np.sum(D1**2, axis=0)/len(f))), 1)
	RMS2 = round(1000 * np.max(np.sqrt(np.sum(D2**2, axis=0)/len(f))), 1)
	RMS3 = round(1000 * np.max(np.sqrt(np.sum(D3**2, axis=0)/len(f))), 1)
	RMS4 = round(1000 * np.max(np.sqrt(np.sum(D4**2, axis=0)/len(f))), 1)
	RMS5 = round(1000 * np.max(np.sqrt(np.sum(D5**2, axis=0)/len(f))), 1)
	RMS6 = round(1000 * np.max(np.sqrt(np.sum(D6**2, axis=0)/len(f))), 1)
	RMS7 = round(1000 * np.max(np.sqrt(np.sum(D7**2, axis=0)/len(f))), 1)

	print('BAD PHASE Ang S11 Cable: ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	















	return 1



def plots_high_band_LNA():


	ff, il, ih = eg.frequency_edges(90, 190)
	fe = ff[il:ih]


	o = eg.model_LNA_high_band_2015_25degC(fe, 'fiducial', 'open', 'direct', 0, 'uncorrelated')



	plt.close()

	plt.figure(1)

	plt.subplot(2,3,1)
	plt.plot(fe, o[1], 'b', linewidth=3)
	ax = plt.gca()
	ax.set_xticks([80,100,120,140,160,180,200])
	ax.set_xticklabels('') #, fontsize=16)
	ax.set_yticks(np.arange(0.85,0.95,0.02))
	ax.set_yticklabels(np.arange(0.85,0.95,0.02), fontsize=20)
	plt.grid()

	plt.subplot(2,3,2)
	plt.plot(fe, o[2], 'b', linewidth=3)
	ax = plt.gca()
	ax.set_xticks([80,100,120,140,160,180,200])
	ax.set_xticklabels('') #, fontsize=16)
	ax.set_yticks(np.arange(25,65,10))
	ax.set_yticklabels(np.arange(25,65,10), fontsize=20)
	plt.grid()
	plt.ylabel('[ K ]', fontsize=20)

	plt.subplot(2,3,4)
	plt.plot(fe, o[3], 'r', linewidth=3)
	ax = plt.gca()
	ax.set_xticks([80,100,120,140,160,180,200])
	ax.set_xticklabels(['','100','120','140','160','180',''], fontsize=20)
	ax.set_yticks(np.arange(66,68.5,0.5))
	ax.set_yticklabels(np.arange(66,68.5,0.5), fontsize=20)
	plt.grid()
	plt.xlabel('frequency [MHz]', fontsize=20)
	plt.ylabel('[ K ]', fontsize=20)	

	plt.subplot(2,3,5)
	plt.plot(fe, o[4], 'r', linewidth=3)	
	ax = plt.gca()
	ax.set_xticks([80,100,120,140,160,180,200])
	ax.set_xticklabels(['','100','120','140','160','180',''], fontsize=20)
	ax.set_yticks(np.arange(-40,10,10))
	ax.set_yticklabels(np.arange(-40,10,10), fontsize=20)
	plt.grid()
	plt.xlabel('frequency [MHz]', fontsize=20)
	plt.ylabel('[ K ]', fontsize=20)

	plt.subplot(2,3,6)
	plt.plot(fe, o[5], 'r', linewidth=3)
	ax = plt.gca()
	ax.set_xticks([80,100,120,140,160,180,200])
	ax.set_xticklabels(['','100','120','140','160','180',''], fontsize=20)
	ax.set_yticks(np.arange(-10,30,10))
	ax.set_yticklabels(np.arange(-10,30,10), fontsize=20)
	plt.grid()
	plt.xlabel('frequency [MHz]', fontsize=20)
	plt.ylabel('[ K ]', fontsize=20)	

	return 1





def plots_high_band_sky_antenna():



	ff, il, ih = eg.frequency_edges(90, 190)
	fe = ff[il:ih]	


	# Sky model
	Tq = eg. model_foreground_high_band(fe, quiet_loud_sky='quiet')
	Tl = eg. model_foreground_high_band(fe, quiet_loud_sky='loud')


	# Antenna reflection coefficient
	mag   = -15 * np.ones(len(fe))
	ang1  =   (250 - (500/200) * fe)
	ang2  = 2*(250 - (500/200) * fe)



	plt.close()

	plt.figure(1)
	plt.plot(fe, Tq, linewidth=3)
	plt.plot(fe, Tl, 'r', linewidth=3)
	plt.grid()
	ax = plt.gca()
	ax.set_xticks([80,100,120,140,160,180,200])
	ax.set_xticklabels(['','100','120','140','160','180',''])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('T$_{ANT}$   [K]')

	plt.figure(2)
	plt.subplot(1,2,1)
	plt.plot(fe, mag, 'b', linewidth=3)
	plt.ylim((-30,0))
	ax = plt.gca()
	ax.set_xticks([80,100,120,140,160,180,200])
	ax.set_xticklabels(['','100','120','140','160','180',''])	
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')	

	plt.subplot(1,2,2)
	plt.plot(fe, ang1-ang1[0], 'b', linewidth=3)
	plt.plot(fe, ang2-ang2[0], 'r', linewidth=3)
	plt.ylim((-600, 100))
	ax = plt.gca()
	ax.set_xticks([80,100,120,140,160,180,200])
	ax.set_xticklabels(['','100','120','140','160','180',''])	
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('phase [degrees]')	

	return 1



def plot_S11_high_band_antenna_and_LNA():

	# Antenna
	ant   = np.genfromtxt('/media/WORK/EDGES/calibration_march_2015/antenna/field_antenna_s11/data/corrected/2015_212_18_55/S11_blade_high_band_2015_212_18_55.txt')
	f_ant = ant[:,0]
	ra    = ant[:,1] + 1j*ant[:,2] 

	# LNA
	f, il, ih = eg.frequency_edges(90, 199)
	fe = f[il:ih]	
	rl, c1, c2, tu, tc, ts = eg.model_LNA_high_band_2015_25degC(fe, 'fiducial', 'open', 'direct', 0, 'uncorrelated')


	# Plot
	plt.close()
	fig = plt.figure(1)
	ax  = fig.add_subplot(1,1,1)
	ax.plot(f_ant/1e6, 20*np.log10(np.abs(ra)),'b', linewidth=5)
	ax.plot(fe, 20*np.log10(np.abs(rl)), 'r', linewidth=5)
	plt.xlim([100,200])
	plt.ylim([-30, 0])
	ax.set_yticklabels(['','-25','-20','-15','-10','-5','0'])
	plt.xlabel('Frequency [MHz]',fontsize=24)
	plt.ylabel('Reflection magnitude [dB]',fontsize=24)
	plt.legend(['Antenna','LNA'],fontsize=24)
	ax.tick_params(axis='x', labelsize=24)
	ax.tick_params(axis='y', labelsize=24)

	return 1


















def plots_for_high_band_calibration_paper(models_eor='no', models_eor_constraints='no', spectra='no', reflection='no', convolution='no', antenna_reflection='no', calibration_quantities='no', calibration_quantities2='no', residuals='no', residuals_typical='no', s11_accuracy = 'no'):


	if models_eor == 'yes':

		# Path
		#path_root      = home_folder + ''
		#path_plot_save = path_root + '/WORK/papers/EDGES_calibration/figures/'
		path_plot_save = '/home/ramo7131/Desktop/'



		size_x = 5.5
		size_y = 2.6
		x0     = 0.11 #0.05
		y0     = 0.09
		dx     = 0.87
		dy     = 1
		x00    = 0.057

		f1            = plt.figure(num=1, figsize=(size_x, size_y))
		ff            = np.arange(90,190,1)
		EoR1, xHI1, z = eg.model_eor(ff, zr=9,  dz=0.5)
		EoR2, xHI2, z = eg.model_eor(ff, zr=10, dz=1)
		EoR3, xHI3, z = eg.model_eor(ff, zr=11, dz=2)





		#ax1 = f1.add_axes([1*x0, y0+1*dy+(y0/6), dx, dy])	
		#ax1.plot(ff, xHI1,'b',   linewidth=2)
		#ax1.plot(ff, xHI2,'r--',   linewidth=2)
		#ax1.plot(ff, xHI3,'g:', linewidth=2)
		#ax1.set_xlim(90,190)
		#ax1.set_xticklabels('')
		#plt.ylim([0,1.1])
		#plt.grid()

		#plt.ylabel(r'$\overline{\mathrm{x}}_{\mathrm{HI}}$',fontsize=16)
		#ax2 = ax1.twiny()
		#ax2.set_xlabel('$z$',fontsize=22)
		#ax2.set_xticks(np.array((101-90, 118-90, 142-90, 178-90, ))/len(ff))
		#ax2.set_xticklabels([int(z[101-90]), int(z[118-90]), int(z[142-90]), int(z[177-90])])
		#ax1.legend([r'${z_r=9}$' +', ' + r'${\Delta z=0.5}$', r'${z_r=10}$' +', ' + r'${\Delta z=1}$', r'${z_r=11}$' +', ' + r'${\Delta z=2}$'])
		#ax1.tick_params(axis='x', labelsize=48)



		ax2 = f1.add_axes([1*x0, y0+0*dy, dx, dy])
		ax2.plot(ff, EoR1*1e3,'b',   linewidth=2)
		ax2.plot(ff, EoR2*1e3,'r--',   linewidth=2)
		ax2.plot(ff, EoR3*1e3,'g:', linewidth=2)
		ax2.set_yticks(np.arange(0,35,10))
		plt.ylim([0,35])
		#ax7.set_yticklabels(['','40','80','120',''])
		plt.xlabel('$\\nu$ [MHz]',fontsize=16)
		#plt.ylabel('$\overline{\delta T}_{b}$ [mK]',fontsize=16)
		plt.ylabel('brightness temperature [mK]', fontsize=14)
		ax2.set_xlim(90,190)
		ax2.legend([r'${z_r=9}$' +', ' + r'${\Delta z=0.5}$', r'${z_r=10}$' +', ' + r'${\Delta z=1}$', r'${z_r=11}$' +', ' + r'${\Delta z=2}$'])
		plt.grid()

		ax3 = ax2.twiny()
		ax3.set_xlabel('$z$',fontsize=22)
		ax3.set_xticks(np.array((101-90, 118-90, 142-90, 178-90, ))/len(ff))
		ax3.set_xticklabels([int(z[101-90]), int(z[118-90]), int(z[142-90]), int(z[177-90])])

		plt.savefig(path_plot_save + 'models_eor.pdf', bbox_inches='tight')
		plt.close()	
		plt.close()
		plt.close()
		plt.close()












	if models_eor_constraints == 'yes':


		dg = np.genfromtxt(home_folder + '/DATA/EDGES/signal_constraints/simulated/simulated_constraints_gaussian_90-190MHz.txt')
		dt = np.genfromtxt(home_folder + '/DATA/EDGES/signal_constraints/simulated/simulated_constraints_tanh_90-190MHz.txt')
		path_save = home_folder + '/WORK/papers/EDGES_high-band_calibration/figures/'


		for j in range(4):
			for i in range(len(dg[:,0])):
				if (dg[i,0] - 6) < (2.5/2.34)*dg[i,j+1]:
					dg[i,j+1] = np.nan




		plt.close()
		plt.close()
		plt.close()


		f1   = plt.figure(1, figsize=(4.7, 5.4))



		offx = 0.075
		offy = 0.08
		dx   = 0.91
		dy   = 0.85	
		ax1 = f1.add_axes([offx, offy, dx, dy])
		ax1.plot(dt[:,0], (2.34/2.5)*(dt[:,0]-6), 'c')
		ax1.plot(dg[:,0], dg[:,1], 'b', linewidth=2)
		ax1.plot(dg[:,0], dg[:,2], 'b--', linewidth=2)
		ax1.plot(dg[:,0], dg[:,3], 'b-.', linewidth=2)
		#ax1.plot(dg[:,0], dg[:,4], 'b:', linewidth=2)


		ax1.plot(dt[:,0], dt[:,1], 'r', linewidth=2)
		ax1.plot(dt[:,0], dt[:,2], 'r--', linewidth=2)
		ax1.plot(dt[:,0], dt[:,3], 'r-.', linewidth=2)
		#ax1.plot(dt[:,0], dt[:,4], 'r:', linewidth=2)
		ax1.plot([5, 15], [0, 0], 'k')


		plt.gca().invert_xaxis()
		ax1.set_xlim([15, 6])
		plt.xlabel(r'$z_{\rm{r}}$', fontsize=18)
		plt.ylabel(r'$\Delta z$',   fontsize=18)
		ax1.set_yticks(np.arange(0,9,1))
		plt.ylim([-0.5, 9])
		plt.grid()


		ax12 = ax1.twiny()
		ax12.set_xlabel(r'$\nu$ [MHz]', fontsize=15)		
		f  = np.arange(90, 191, 20)
		zz = eg.frequency2redshift(f)
		ax12.set_xticks((zz-6)/(15-6))
		ax12.set_xticklabels(f)
		plt.gca().invert_xaxis()

		ax1.legend([r'upper limit for Gaussian model' + '\n' + 'to make $\delta T_b=0$ at $z=6$', r'Gaussian model, RMS noise = 8 mK', r'Gaussian model, RMS noise = 4 mK',
		            r'Gaussian model, RMS noise = 2 mK',r'Tanh model, RMS noise = 8 mK',  r'Tanh model, RMS noise = 4 mK',  r'Tanh model, RMS noise = 2 mK'], fontsize=9)


		plt.savefig(path_save + 'model_constraints.pdf', bbox_inches='tight')
		plt.close()	
		plt.close()
		plt.close()
		plt.close()













	if spectra == 'yes':
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------
		# SPECTRA
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------	



		# Path
		path_root      = home_folder + ''
		path_par_s11   = path_root + '/WORK/EDGES/receiver_calibration/calibration_march_2015/LNA/models/25degC/spectra/'
		path_data      = path_root + '/WORK/EDGES/receiver_calibration/calibration_march_2015/LNA/models/25degC/data/'
		path_plot_save = path_root + '/WORK/papers/EDGES_calibration/figures/'



		# Normalized frequency
		f, il, ih = eg.frequency_edges(90,190)
		fe        = f[il:ih+1]
		fn        = (fe - 140)/60



		# Loading parameters
		par_spec_amb        = np.genfromtxt(path_par_s11 + 'par_spec_amb.txt')
		par_spec_hot        = np.genfromtxt(path_par_s11 + 'par_spec_hot.txt')
		par_spec_open       = np.genfromtxt(path_par_s11 + 'par_spec_open.txt')
		par_spec_shorted    = np.genfromtxt(path_par_s11 + 'par_spec_shorted.txt')



		# Evaluating models
		Tae  = eg.model_evaluate('polynomial', par_spec_amb,     fn)
		The  = eg.model_evaluate('polynomial', par_spec_hot,     fn)
		Toe  = eg.model_evaluate('fourier',    par_spec_open,    fn)
		Tse  = eg.model_evaluate('fourier',    par_spec_shorted, fn)



		# Raw data
		data     = np.genfromtxt(path_data + 'average_spectra_300_350.txt')
		Tae_raw  = data[:,1]
		The_raw  = data[:,2]
		Toe_raw  = data[:,3]
		Tse_raw  = data[:,4]		




		# Plot

		size_x = 5.5
		size_y = 11
		x0 = 0.1
		y0 = 0.06
		dx = 0.85
		dy_main = 0.14
		dy_res  = 0.04


		f1  = plt.figure(num=1, figsize=(size_x, size_y))		


		ax = f1.add_axes([1*x0,      (1 + 3*0.5)*y0 + 4*dy_main + 3*dy_res, dx, dy_res])
		ax.plot(fe, Tae_raw - Tae,'b')
		ax.set_xticklabels('')
		plt.ylim([-0.4,0.4])
		ax.set_yticks([-0.2, 0.2])
		ax.set_yticklabels(['$-$0.2','$+$0.2'])
		plt.ylabel('$\Delta$ [K]', fontsize=16)
		plt.grid()

		ax = f1.add_axes([1*x0,      (1 + 3*0.5)*y0 + 3*dy_main + 3*dy_res, dx, dy_main])
		ax.plot(fe, Tae,'b', linewidth=2)
		plt.ylabel('$T^*_A$   [K]', fontsize=16)
		ax.set_xticklabels('')
		plt.ylim([286,290])
		ax.set_yticks(np.arange(287,290,1))
		#ax.set_yticklabels(['-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])		
		#ax.text(85,287,   'Ambient Load')
		#ax.text(85,286.5, '#TERMS: ' + str(len(par_spec_amb)))		
		plt.grid()


		Delta = The_raw - The
		ax = f1.add_axes([1*x0,      (1 + 2*0.5)*y0 + 3*dy_main + 2*dy_res, dx, dy_res])
		Delta[819:822] = 0
		ax.plot(fe, Delta,'b')
		ax.set_xticklabels('')
		plt.ylim([-0.4,0.4])
		ax.set_yticks([-0.2, 0.2])
		ax.set_yticklabels(['$-$0.2','$+$0.2'])
		plt.ylabel('$\Delta$ [K]', fontsize=16)
		plt.grid()

		ax = f1.add_axes([1*x0,      (1 + 2*0.5)*y0 + 2*dy_main + 2*dy_res, dx, dy_main])
		ax.plot(fe, The,'b', linewidth=2)
		plt.ylabel('$T^*_H$   [K]', fontsize=16)
		ax.set_xticklabels('')
		plt.ylim([409,415])
		ax.set_yticks(np.arange(410,415,1))		
		#ax.set_yticklabels(['-0.90','-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])
		#ax.text(85,413.8, 'Hot Load')
		#ax.text(85,413,   '#TERMS: ' + str(len(par_spec_hot)))		
		plt.grid()



		ax = f1.add_axes([1*x0,    (1+0.5)*y0 + 2*dy_main + 1*dy_res,   dx, dy_res])
		ax.plot(fe, Toe_raw - Toe,'b')
		ax.set_xticklabels('')
		plt.ylim([-0.4,0.4])
		ax.set_yticks([-0.2, 0.2])
		ax.set_yticklabels(['$-$0.2','$+$0.2'])
		plt.ylabel('$\Delta$ [K]', fontsize=16)
		plt.grid()

		ax = f1.add_axes([1*x0,    (1+0.5)*y0 + 1*dy_main + 1*dy_res,   dx, dy_main])
		ax.plot(fe, Toe,'b', linewidth=2)
		plt.ylabel('$T^*_O$   [K]', fontsize=16)
		ax.set_xticklabels('')
		plt.ylim([0,140])
		ax.set_yticks(np.arange(20,140,20))
		#ax.set_yticklabels(['-56','-49','-54','-53','-52'])
		#ax.text(85,22,'Open Cable')
		#ax.text(85,7, '#TERMS: ' + str(len(par_spec_open)))		
		plt.grid()



		ax = f1.add_axes([1*x0,    1*y0 + 1*dy_main,   dx, dy_res])
		ax.plot(fe, Tse_raw - Tse,'b')
		ax.set_xticklabels('')
		plt.ylim([-0.4,0.4])
		ax.set_yticks([-0.2, 0.2])
		ax.set_yticklabels(['$-$0.2','$+$0.2'])
		plt.ylabel('$\Delta$ [K]', fontsize=16)
		plt.grid()

		ax = f1.add_axes([1*x0,    1*y0,               dx, dy_main])
		ax.plot(fe, Tse,'b', linewidth=2)
		plt.ylabel('$T^*_S$   [K]', fontsize=16)
		#ax.set_xticklabels('')
		plt.ylim([0,140])
		ax.set_yticks(np.arange(20,140,20))
		#ax.set_yticklabels(['-0.08','-0.07','-0.06','-0.05'])		
		#ax.text(85,22,'Shorted Cable')
		#ax.text(85,7, '#TERMS: ' + str(len(par_spec_shorted)))		
		plt.xlabel('$\\nu$ [MHz]', fontsize=16)
		plt.grid()


		plt.savefig(path_plot_save + 'spectra.pdf', bbox_inches='tight')
		plt.close()	
		plt.close()
		plt.close()
		plt.close()
















	if reflection == 'yes':
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------
		# REFLECTION
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------	


		# Paths
		path_root       = home_folder + ''			
		path_par_s11    = path_root + '/WORK/EDGES/receiver_calibration/calibration_march_2015/LNA/models/25degC/s11/'
		path_plot_save  = path_root + '/WORK/papers/EDGES_calibration/figures/'


		# Loading raw data
		o1, o2, o3 = eg.load_high_band_calibration_s11()

		f_s11_lores     = np.real(o1[0])
		s11_LNA_raw     = o1[1]
		s11_amb_raw     = o1[2]
		s11_hot_raw     = o1[3]

		f_s11_hires     = np.real(o2[0])
		s11_open_raw    = o2[1]
		s11_shorted_raw = o2[2]


		# Normalized frequency
		f_s11_lores_n   = (f_s11_lores-140)/60
		f_s11_hires_n   = (f_s11_hires-140)/60

		f, il, ih       = eg.frequency_edges(90,190)
		fe              = f[il:ih+1]
		fen             = (fe-140)/60	




		# LNA
		s11_LNA_mag_raw     = np.abs(s11_LNA_raw)
		s11_LNA_ang_raw     = np.unwrap(np.angle(s11_LNA_raw))

		# Ambient
		s11_amb_mag_raw     = np.abs(s11_amb_raw)
		s11_amb_ang_raw     = np.unwrap(np.angle(s11_amb_raw))

		# Hot
		s11_hot_mag_raw     = np.abs(s11_hot_raw)
		s11_hot_ang_raw     = np.unwrap(np.angle(s11_hot_raw))

		# Open
		s11_open_mag_raw    = np.abs(s11_open_raw)
		s11_open_ang_raw    = np.unwrap(np.angle(s11_open_raw))

		# Shorted
		s11_shorted_mag_raw = np.abs(s11_shorted_raw)
		s11_shorted_ang_raw = np.unwrap(np.angle(s11_shorted_raw))






		# Loading S11 parameters
		par_s11_LNA_mag     = np.genfromtxt(path_par_s11 + 'par_s11_LNA_mag.txt')
		par_s11_LNA_ang     = np.genfromtxt(path_par_s11 + 'par_s11_LNA_ang.txt')	
		par_s11_amb_mag     = np.genfromtxt(path_par_s11 + 'par_s11_amb_mag.txt')
		par_s11_amb_ang     = np.genfromtxt(path_par_s11 + 'par_s11_amb_ang.txt')
		par_s11_hot_mag     = np.genfromtxt(path_par_s11 + 'par_s11_hot_mag.txt')
		par_s11_hot_ang     = np.genfromtxt(path_par_s11 + 'par_s11_hot_ang.txt')
		par_s11_open_mag    = np.genfromtxt(path_par_s11 + 'par_s11_open_mag.txt')
		par_s11_open_ang    = np.genfromtxt(path_par_s11 + 'par_s11_open_ang.txt')
		par_s11_shorted_mag = np.genfromtxt(path_par_s11 + 'par_s11_shorted_mag.txt')
		par_s11_shorted_ang = np.genfromtxt(path_par_s11 + 'par_s11_shorted_ang.txt')

		par_s11_sr_mag      = np.genfromtxt(path_par_s11 + 'par_s11_sr_mag.txt')
		par_s11_sr_ang      = np.genfromtxt(path_par_s11 + 'par_s11_sr_ang.txt')
		par_s12s21_sr_mag   = np.genfromtxt(path_par_s11 + 'par_s12s21_sr_mag.txt')
		par_s12s21_sr_ang   = np.genfromtxt(path_par_s11 + 'par_s12s21_sr_ang.txt')
		par_s22_sr_mag      = np.genfromtxt(path_par_s11 + 'par_s22_sr_mag.txt')
		par_s22_sr_ang      = np.genfromtxt(path_par_s11 + 'par_s22_sr_ang.txt')

		par_s11_simu1_mag   = np.genfromtxt(path_par_s11 + 'par_s11_simu1_mag.txt')
		par_s11_simu1_ang   = np.genfromtxt(path_par_s11 + 'par_s11_simu1_ang.txt')
		par_s11_simu2_mag   = np.genfromtxt(path_par_s11 + 'par_s11_simu2_mag.txt')
		par_s11_simu2_ang   = np.genfromtxt(path_par_s11 + 'par_s11_simu2_ang.txt')



		# Evaluating S11 models at raw frequency
		s11_LNA_mag_raw_model     = eg.model_evaluate('fourier',    par_s11_LNA_mag,     f_s11_lores_n)
		s11_LNA_ang_raw_model     = eg.model_evaluate('fourier',    par_s11_LNA_ang,     f_s11_lores_n)

		s11_amb_mag_raw_model     = eg.model_evaluate('fourier',    par_s11_amb_mag,     f_s11_lores_n)
		s11_amb_ang_raw_model     = eg.model_evaluate('fourier',    par_s11_amb_ang,     f_s11_lores_n)
		s11_hot_mag_raw_model     = eg.model_evaluate('fourier',    par_s11_hot_mag,     f_s11_lores_n)
		s11_hot_ang_raw_model     = eg.model_evaluate('fourier',    par_s11_hot_ang,     f_s11_lores_n)

		s11_open_mag_raw_model    = eg.model_evaluate('fourier',    par_s11_open_mag,    f_s11_hires_n)
		s11_open_ang_raw_model    = eg.model_evaluate('fourier',    par_s11_open_ang,    f_s11_hires_n)
		s11_shorted_mag_raw_model = eg.model_evaluate('fourier',    par_s11_shorted_mag, f_s11_hires_n)
		s11_shorted_ang_raw_model = eg.model_evaluate('fourier',    par_s11_shorted_ang, f_s11_hires_n)


		# Evaluating S11 models at EDGES frequency
		s11_LNA_mag     = eg.model_evaluate('fourier',    par_s11_LNA_mag,     fen)
		s11_LNA_ang     = eg.model_evaluate('fourier',    par_s11_LNA_ang,     fen)

		s11_amb_mag     = eg.model_evaluate('fourier',    par_s11_amb_mag,     fen)
		s11_amb_ang     = eg.model_evaluate('fourier',    par_s11_amb_ang,     fen)
		s11_hot_mag     = eg.model_evaluate('fourier',    par_s11_hot_mag,     fen)
		s11_hot_ang     = eg.model_evaluate('fourier',    par_s11_hot_ang,     fen)

		s11_open_mag    = eg.model_evaluate('fourier',    par_s11_open_mag,    fen)
		s11_open_ang    = eg.model_evaluate('fourier',    par_s11_open_ang,    fen)
		s11_shorted_mag = eg.model_evaluate('fourier',    par_s11_shorted_mag, fen)
		s11_shorted_ang = eg.model_evaluate('fourier',    par_s11_shorted_ang, fen)




























		# Plots

		size_x = 11
		size_y = 11
		x0 = 0.1
		y0 = 0.06
		dx = 0.4
		dy_main = 0.14
		dy_res  = 0.04

		FS = 15


		f1  = plt.figure(num=1, figsize=(size_x, size_y))		


		ax = f1.add_axes([1*x0,                (1 + 4*0.5)*y0 + 5*dy_main + 4*dy_res, dx, dy_res])
		ax.plot(f_s11_lores, 20*np.log10(s11_amb_mag_raw) - 20*np.log10(s11_amb_mag_raw_model),'b')
		ax.set_xticklabels('')
		plt.ylim([-0.002,0.002])
		ax.set_yticks([-0.001, 0.001])
		ax.set_yticklabels(['$-$0.001', '$+$0.001'])
		plt.ylabel('$\Delta$ [dB]', fontsize=FS)
		#plt.title('MAGNITUDE',fontsize=14)
		plt.grid()

		ax = f1.add_axes([1*x0,                (1 + 4*0.5)*y0 + 4*dy_main + 4*dy_res, dx, dy_main])
		ax.plot(fe, 20*np.log10(s11_amb_mag),'b', linewidth=2)
		plt.ylabel(r'$|\Gamma_A|$   [dB]', fontsize=FS)
		ax.set_xticklabels('')
		plt.ylim([-39.6,-38.0])
		ax.set_yticks(np.arange(-39.4,-38.0,0.4))
		#ax.set_yticklabels(['$-$39.2','-39.0','-38.8','-38.6','-38.4','-38.2'])
		#ax.text(85,-38.8,'Ambient Load')
		#ax.text(85,-38.5,'NTERMS: ' + str(len(par_s11_amb_mag)))
		plt.grid()

		ax = f1.add_axes([(1 + 1.2)*x0 + 1*dx, (1 + 4*0.5)*y0 + 5*dy_main + 4*dy_res, dx, dy_res])
		ax.plot(np.real(f_s11_lores), (180/np.pi)*s11_amb_ang_raw - (180/np.pi)*s11_amb_ang_raw_model,'r')
		ax.set_xticklabels('')
		plt.ylim([-0.01,0.01])
		ax.set_yticks([-0.005, 0.005])
		ax.set_yticklabels(['$-$0.005', '$+$0.005'])
		plt.ylabel('$\Delta$ [ $^\mathrm{o}$]', fontsize=FS)
		#plt.title('PHASE',fontsize=14)
		plt.grid()

		ax = f1.add_axes([(1 + 1.2)*x0 + 1*dx, (1 + 4*0.5)*y0 + 4*dy_main + 4*dy_res, dx, dy_main])
		ax.plot(fe, (180/np.pi)*(s11_amb_ang),'r', linewidth=2)
		plt.ylabel(r'$\angle\,\Gamma_A$  [ $^\mathrm{o}$]', fontsize=FS)
		ax.set_xticklabels('')
		plt.ylim([-40,-10])
		ax.set_yticks(np.arange(-35,-10,5))
		#ax.set_yticklabels(['-14','-12','-10','-8','-6'])
		#ax.text(85,-25,'Ambient Load')
		#ax.text(85,-35,'NTERMS: ' + str(len(par_s11_amb_ang)))
		plt.grid()





		ax = f1.add_axes([1*x0,                (1 + 3*0.5)*y0 + 4*dy_main + 3*dy_res, dx, dy_res])
		ax.plot(f_s11_lores, 20*np.log10(s11_hot_mag_raw) - 20*np.log10(s11_hot_mag_raw_model),'b')
		ax.set_xticklabels('')
		plt.ylim([-0.002,0.002])
		ax.set_yticks([-0.001, 0.001])
		ax.set_yticklabels(['$-$0.001', '$+$0.001'])
		plt.ylabel('$\Delta$ [dB]', fontsize=FS)
		plt.grid()

		ax = f1.add_axes([1*x0,                (1 + 3*0.5)*y0 + 3*dy_main + 3*dy_res, dx, dy_main])
		ax.plot(fe, 20*np.log10(s11_hot_mag),'b', linewidth=2)
		plt.ylabel(r'$|\Gamma_H|$   [dB]', fontsize=FS)
		ax.set_xticklabels('')
		plt.ylim([-38.4,-36.8])
		ax.set_yticks(np.arange(-38.2,-36.8,0.4))
		#ax.set_yticklabels(['-38.0','-37.8','-37.6','-37.4','-37.2','-37.0'])		
		#ax.text(85,-37.6,'Hot Load')
		#ax.text(85,-37.3,'NTERMS: ' + str(len(par_s11_hot_mag)))
		plt.grid()


		ax = f1.add_axes([(1 + 1.2)*x0 + 1*dx, (1 + 3*0.5)*y0 + 4*dy_main + 3*dy_res, dx, dy_res])
		ax.plot(np.real(f_s11_lores), (180/np.pi)*s11_hot_ang_raw - (180/np.pi)*s11_hot_ang_raw_model,'r')
		ax.set_xticklabels('')
		plt.ylim([-0.01,0.01])
		ax.set_yticks([-0.005, 0.005])
		ax.set_yticklabels(['$-$0.005', '$+$0.005'])
		plt.ylabel('$\Delta$ [ $^\mathrm{o}$]', fontsize=FS)
		plt.grid()

		ax = f1.add_axes([(1 + 1.2)*x0 + 1*dx, (1 + 3*0.5)*y0 + 3*dy_main + 3*dy_res, dx, dy_main])
		ax.plot(fe, (180/np.pi)*(s11_hot_ang),'r', linewidth=2)
		plt.ylabel(r'$\angle\,\Gamma_H$  [ $^\mathrm{o}$]', fontsize=FS)
		ax.set_xticklabels('')
		plt.ylim([-40,-10])
		ax.set_yticks(np.arange(-35,-10,5))
		#ax.set_yticklabels(['-14','-12','-10','-8','-6'])		
		#ax.text(85,-25,'Hot Load')
		#ax.text(85,-35,'NTERMS: ' + str(len(par_s11_hot_ang)))
		plt.grid()









		ax = f1.add_axes([1*x0,                (1 + 2*0.5)*y0 + 3*dy_main + 2*dy_res, dx, dy_res])
		ax.plot(f_s11_hires, 20*np.log10(s11_open_mag_raw) - 20*np.log10(s11_open_mag_raw_model),'b')
		ax.set_xticklabels('')
		plt.ylim([-0.002,0.002])
		ax.set_yticks([-0.001, 0.001])
		ax.set_yticklabels(['$-$0.001', '$+$0.001'])
		plt.ylabel('$\Delta$ [dB]', fontsize=FS)
		plt.grid()


		ax = f1.add_axes([1*x0,                (1 + 2*0.5)*y0 + 2*dy_main + 2*dy_res, dx, dy_main])
		ax.plot(fe, 20*np.log10(s11_open_mag),'b', linewidth=2)
		plt.ylabel(r'$|\Gamma_O|$   [dB]', fontsize=FS)
		ax.set_xticklabels('')
		plt.ylim([-0.95,-0.45])
		ax.set_yticks(np.arange(-0.90,-0.40,0.1))
		#ax.set_yticklabels(['-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])		
		#ax.text(85,-0.8,'Open Cable')
		#ax.text(85,-0.85,'NTERMS: ' + str(len(par_s11_open_mag)))
		plt.grid()


		ax = f1.add_axes([(1 + 1.2)*x0 + 1*dx, (1 + 2*0.5)*y0 + 3*dy_main + 2*dy_res, dx, dy_res])
		ax.plot(f_s11_hires, (180/np.pi)*np.unwrap(s11_open_ang_raw) - (180/np.pi)*np.unwrap(s11_open_ang_raw_model),'r')
		ax.set_xticklabels('')
		plt.ylim([-0.01,0.01])
		ax.set_yticks([-0.005, 0.005])
		ax.set_yticklabels(['$-$0.005', '$+$0.005'])
		plt.ylabel('$\Delta$ [ $^\mathrm{o}$]', fontsize=FS)
		plt.grid()


		ax = f1.add_axes([(1 + 1.2)*x0 + 1*dx, (1 + 2*0.5)*y0 + 2*dy_main + 2*dy_res, dx, dy_main])
		ax.plot(fe, (180/np.pi)*s11_open_ang,'r', linewidth=2)
		plt.ylabel(r'$\angle\,\Gamma_O$  [ $^\mathrm{o}$]', fontsize=FS)
		ax.set_xticklabels('')
		plt.ylim([-2500,500])
		ax.set_yticks(np.arange(-2000,500,500))
		#ax.set_yticklabels(['-1000','-800','-600','-400','-200'])		
		#ax.text(85,-1600,'Open Cable')
		#ax.text(85,-2000,'NTERMS: ' + str(len(par_s11_open_ang)))
		plt.grid()










		ax = f1.add_axes([1*x0,                (1+0.5)*y0 + 2*dy_main + 1*dy_res,   dx, dy_res])
		ax.plot(f_s11_hires, 20*np.log10(s11_shorted_mag_raw) - 20*np.log10(s11_shorted_mag_raw_model),'b')
		ax.set_xticklabels('')
		plt.ylim([-0.002,0.002])
		ax.set_yticks([-0.001, 0.001])
		ax.set_yticklabels(['$-$0.001', '$+$0.001'])
		plt.ylabel('$\Delta$ [dB]', fontsize=FS)
		plt.grid()

		ax = f1.add_axes([1*x0,                (1+0.5)*y0 + 1*dy_main + 1*dy_res,   dx, dy_main])
		ax.plot(fe, 20*np.log10(s11_shorted_mag),'b', linewidth=2)
		plt.ylabel(r'$|\Gamma_S|$   [dB]', fontsize=FS)
		ax.set_xticklabels('')
		plt.ylim([-0.95,-0.45])
		ax.set_yticks(np.arange(-0.90,-0.40,0.1))		
		#ax.set_yticklabels(['-0.90','-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])
		#ax.text(85,-0.8,'Shorted Cable')
		#ax.text(85,-0.85,'NTERMS: ' + str(len(par_s11_shorted_mag)))
		plt.grid()



		ax = f1.add_axes([(1 + 1.2)*x0 + 1*dx, (1+0.5)*y0 + 2*dy_main + 1*dy_res,   dx, dy_res])
		ax.plot(f_s11_hires, (180/np.pi)*np.unwrap(s11_shorted_ang_raw) - (180/np.pi)*np.unwrap(s11_shorted_ang_raw_model),'r')
		ax.set_xticklabels('')
		plt.ylim([-0.01,0.01])
		ax.set_yticks([-0.005, 0.005])
		ax.set_yticklabels(['$-$0.005', '$+$0.005'])
		plt.ylabel('$\Delta$ [ $^\mathrm{o}$]', fontsize=FS)
		plt.grid()

		ax = f1.add_axes([(1 + 1.2)*x0 + 1*dx, (1+0.5)*y0 + 1*dy_main + 1*dy_res,   dx, dy_main])
		ax.plot(fe, (180/np.pi)*s11_shorted_ang,'r', linewidth=2)
		plt.ylabel(r'$\angle\,\Gamma_S$  [ $^\mathrm{o}$]', fontsize=FS)
		ax.set_xticklabels('')
		plt.ylim([-2500,500])
		ax.set_yticks(np.arange(-2000,500,500))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])
		#ax.text(85,-1600,'Shorted Cable')
		#ax.text(85,-2000,'NTERMS: ' + str(len(par_s11_shorted_ang)))
		plt.grid()












		ax = f1.add_axes([1*x0,                1*y0 + 1*dy_main, dx, dy_res])
		ax.plot(f_s11_lores, 20*np.log10(s11_LNA_mag_raw) - 20*np.log10(s11_LNA_mag_raw_model),'b')
		ax.set_xticklabels('')
		plt.ylim([-0.008,0.008])
		ax.set_yticks([-0.004, 0.004])
		ax.set_yticklabels(['$-$0.004', '$+$0.004'])
		plt.ylabel('$\Delta$ [dB]', fontsize=FS)
		plt.grid()

		ax = f1.add_axes([1*x0,                1*y0,             dx, dy_main])
		ax.plot(fe, 20*np.log10(s11_LNA_mag),'b', linewidth=2)
		plt.ylabel(r'$|\Gamma_{\mathrm{rec}}|$   [dB]', fontsize=FS)
		plt.xlabel('$\\nu$ [MHz]', fontsize=FS)
		plt.ylim([-22.5,-18.5])
		ax.set_yticks(np.arange(-22,-18,1))
		#ax.set_yticklabels(['-38','-37','-36','-35','-34','-33'])
		#ax.text(85,-20.5,'Receiver')
		#ax.text(85,-19.8,'NTERMS: ' + str(len(par_s11_LNA_mag)))
		plt.grid()




		ax = f1.add_axes([(1 + 1.2)*x0 + 1*dx, 1*y0 + 1*dy_main, dx, dy_res])
		ax.plot(f_s11_lores, (180/np.pi)*np.unwrap(s11_LNA_ang_raw) - (180/np.pi)*np.unwrap(s11_LNA_ang_raw_model),'r')
		ax.set_xticklabels('')
		plt.ylim([-0.04,0.04])
		ax.set_yticks([-0.02, 0.02])
		ax.set_yticklabels(['$-$0.02', '$+$0.02'])
		plt.ylabel('$\Delta$ [ $^\mathrm{o}$]', fontsize=FS)
		plt.grid()

		ax = f1.add_axes([(1 + 1.2)*x0 + 1*dx, 1*y0,             dx, dy_main])
		ax.plot(fe, (180/np.pi)*np.unwrap(s11_LNA_ang),'r', linewidth=2)		
		plt.xlabel('$\\nu$ [MHz]', fontsize=FS)
		plt.ylabel(r'$\angle\,\Gamma_{\mathrm{rec}}$   [ $^\mathrm{o}$]', fontsize=FS)
		plt.ylim([-260,-80])
		ax.set_yticks(np.arange(-230,-80,30))
		#ax.set_yticklabels(['85','90','95','100','105'])
		#ax.text(85,-170,'Receiver')
		#ax.text(85,-230,'NTERMS: ' + str(len(par_s11_LNA_ang)))
		plt.grid()


		plt.savefig(path_plot_save + 'reflection.pdf', bbox_inches='tight')
		plt.close()
		plt.close()







	if convolution == 'yes':
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------
		# CONVOLUTION
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------	


		# Paths
		path_root       = home_folder + ''			
		path_plot_save  = path_root + '/WORK/papers/EDGES_calibration/figures/'


		# Frequency
		f, il, ih       = eg.frequency_edges(90,190)
		fe              = f[il:ih+1]	

		# Convolution temperature
		TQ = eg.model_foreground_high_band(fe, quiet_loud_sky='quiet')
		TL = eg.model_foreground_high_band(fe, quiet_loud_sky='loud')


		# Plot		
		size_x = 6
		size_y = 4

		f1  = plt.figure(num=1, figsize=(size_x, size_y))

		h1, = plt.plot(fe, TQ, 'b',   linewidth=2, label='beam convolved with quiet sky')
		h2, = plt.plot(fe, TL, 'r--', linewidth=2, label='beam convolved with loud sky')
		plt.legend(handles=[h1, h2], fontsize=12)
		plt.xlabel('$\\nu$ [MHz]', fontsize=16)
		plt.ylabel('$T^{\mathrm{in}}_{\mathrm{ant}}$ [K]', fontsize=16)
		plt.grid()

		plt.savefig(path_plot_save + 'antenna_temperature.pdf', bbox_inches='tight')
		plt.close()
		plt.close()
		plt.close()







	if antenna_reflection == 'yes':
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------
		# ANTENNA REFLECTION
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------	


		# Paths
		path_root       = home_folder + ''			
		path_plot_save  = path_root + '/WORK/papers/EDGES_calibration/figures/'


		# Frequency
		f, il, ih       = eg.frequency_edges(90,190)
		fe              = f[il:ih+1]	

		# Antenna reflection coefficient
		mag  = -15 * np.ones(len(fe))  # for -15 dB
		ang  = 2*(250 - (500/200) * fe)  # bad  case






		# Plot		
		size_x = 5.3
		size_y = 4.15

		f1 = plt.figure(num=1, figsize=(size_x, size_y))
		ax = f1.add_subplot(1,1,1)

		h1  = ax.plot(fe, mag, 'b', linewidth=2, label='$|\Gamma_{\mathrm{ant}}|$')
		ax2 = ax.twinx()
		h2  = ax2.plot(fe, ang, 'r--', linewidth=2, label=r'$\angle\/\Gamma_{\mathrm{ant}}$')

		h      = h1 + h2
		labels = [l.get_label() for l in h]
		ax.legend(h, labels, loc=0, fontsize=16)

		ax.grid()
		ax.set_xlabel('$\\nu$ [MHz]', fontsize=16)
		ax.set_ylabel('$|\Gamma_{\mathrm{ant}}|$ [dB]', fontsize=16)
		ax2.set_ylabel(r'$\angle\/\Gamma_{\mathrm{ant}}$ [ $^\mathrm{o}$]', fontsize=16)

		plt.savefig(path_plot_save + 'antenna_reflection.pdf', bbox_inches='tight')
		plt.close()
		plt.close()
		plt.close()	





	if calibration_quantities == 'yes':
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------
		# CALIBRATION QUANTITIES
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------			

		# Paths
		path_root       = home_folder + ''			
		path_plot_save  = path_root + '/WORK/papers/EDGES_calibration/figures/'


		# Frequency
		f, il, ih = eg.frequency_edges(90, 190)
		fe = f[il:ih+1]


		# Fiducial LNA calibration quantities
		models_fiducial = eg.models_LNA('high_band', fe, spectra_data_model='model')

		rl  = models_fiducial[0]
		sca = models_fiducial[1]
		off = models_fiducial[2]
		TU  = models_fiducial[3]
		TC  = models_fiducial[4]
		TS  = models_fiducial[5]




		# Plot

		size_x = 5.3
		size_y = 10.5
		x0 = 0.1
		y0 = 0.06
		dx = 0.85
		dy = 0.13


		f1  = plt.figure(num=1, figsize=(size_x, size_y))		

		ax = f1.add_axes([x0, y0 + 4*dy, dx, dy])
		ax.plot(fe, sca,'b',linewidth=2)
		plt.ylabel('$C_1$', fontsize=16)
		ax.set_xticklabels('')
		plt.ylim([0.84, 0.94])
		ax.set_yticks(np.arange(0.86,0.94,0.02))
		#ax.set_yticklabels(['-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])
		plt.grid()


		ax = f1.add_axes([x0, y0 + 3*dy, dx, dy])
		ax.plot(fe, off,'b',linewidth=2)
		plt.ylabel('$C_2$ [K]', fontsize=16)
		ax.set_xticklabels('')
		plt.ylim([-7.5,-4.5])
		ax.set_yticks(np.arange(-7,-4.5,0.5))
		#ax.set_yticklabels(['-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])		
		plt.grid()

		ax = f1.add_axes([x0, y0 + 2*dy, dx, dy])
		ax.plot(fe, TU,'b',linewidth=2)
		plt.ylabel('$T_{\mathrm{unc}}$ [K]', fontsize=16)
		ax.set_xticklabels('')
		plt.ylim([66,68.5])
		ax.set_yticks(np.arange(66.5,68.5,0.5))		
		#ax.set_yticklabels(['-0.90','-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])	
		plt.grid()

		ax = f1.add_axes([x0, y0 + dy, dx, dy])
		ax.plot(fe, TC,'b',linewidth=2)
		plt.ylabel('$T_{\mathrm{cos}}$ [K]', fontsize=16)
		ax.set_xticklabels('')
		plt.ylim([-35,0])
		ax.set_yticks(np.arange(-30,0,5))
		#ax.set_yticklabels(['-56','-49','-54','-53','-52'])		
		plt.grid()

		ax = f1.add_axes([x0, y0, dx, dy])
		ax.plot(fe, TS,'b',linewidth=2)
		plt.ylabel('$T_{\mathrm{sin}}$ [K]', fontsize=16)
		#ax.set_xticklabels('')
		plt.ylim([-10,20])
		ax.set_yticks(np.arange(-5,20,5))
		#ax.set_yticklabels(['-0.08','-0.07','-0.06','-0.05'])		
		plt.xlabel('$\\nu$ [MHz]', fontsize=16)
		plt.grid()


		plt.savefig(path_plot_save + 'calibration_quantities.pdf', bbox_inches='tight')
		plt.close()	
		plt.close()
		plt.close()
		plt.close()















	if calibration_quantities2 == 'yes':
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------
		# CALIBRATION QUANTITIES
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------			

		# Paths
		path_root       = home_folder + ''			
		path_plot_save  = path_root + '/WORK/papers/EDGES_high-band_calibration/figures/'


		# Frequency
		f, il, ih = eg.frequency_edges(90, 190)
		fe = f[il:ih+1]	


		# Fiducial LNA calibration quantities
		models_fiducial = eg.receiver_calibration('high_band_2015', fe, receiver_temperature=25, low_band_cal_file=1, high_band_cal_file=1)
		#eg.models_LNA('high_band_2016', 25, fe, spectra_data_model='model')

		rl  = models_fiducial[0]
		sca = models_fiducial[1]
		off = models_fiducial[2]
		TU  = models_fiducial[3]
		TC  = models_fiducial[4]
		TS  = models_fiducial[5]




		# Plot

		size_x = 4.5
		size_y = 11 #10.5
		x0 = 0.1
		y0 = 0.05
		dx = 0.85
		dy = 0.19


		f1  = plt.figure(num=1, figsize=(size_x, size_y))		


		ax     = f1.add_axes([x0, y0 + 2*dy, dx, dy])	
		h1     = ax.plot(fe, 20*np.log10(np.abs(rl)), 'b', linewidth=2, label='$|\Gamma_{\mathrm{rec}}|$')
		ax2    = ax.twinx()
		h2     = ax2.plot(fe, (180/np.pi)*np.unwrap(np.angle(rl)), 'r--', linewidth=2, label=r'$\angle\/\Gamma_{\mathrm{rec}}$')
		h      = h1 + h2
		labels = [l.get_label() for l in h]
		ax.legend(h, labels, loc=9, fontsize=13)

		ax.set_ylim([-23, -18])
		ax.set_xticklabels('')
		ax.set_yticks(np.arange(-22,-18,1))
		ax.set_ylabel('$|\Gamma_{\mathrm{rec}}|$ [dB]', fontsize=16)
		ax.text(82, -22.75, 'A)', fontsize=20)

		ax2.set_ylim([-250, -50])
		ax2.set_xticklabels('')
		ax2.set_yticks([-200,-150,-100])		
		ax2.set_ylabel(r'$\angle\/\Gamma_{\mathrm{rec}}$ [ $^\mathrm{o}$]', fontsize=16)





		ax     = f1.add_axes([x0, y0 + 1*dy, dx, dy])
		h1     = ax.plot(fe, sca,'b',linewidth=2, label='$C_1$')
		ax2    = ax.twinx()
		h2     = ax2.plot(fe, off,'r--',linewidth=2, label='$C_2$')
		h      = h1 + h2
		labels = [l.get_label() for l in h]
		ax.legend(h, labels, loc=0, fontsize=13)

		ax.set_ylim([0.84, 0.94])
		ax.set_xticklabels('')
		ax.set_yticks(np.arange(0.86,0.94,0.02))
		ax.set_ylabel('$C_1$', fontsize=16)
		ax.text(82, 0.845, 'B)', fontsize=20)

		ax2.set_ylim([-7.5, -4.5])
		ax2.set_xticklabels('')
		ax2.set_yticks(np.arange(-7, -4.5, 0.5))
		ax2.set_ylabel('$C_2$ [K]', fontsize=16)





		ax     = f1.add_axes([x0, y0 + 0*dy, dx, dy])
		h1     = ax.plot(fe, TU,'b', linewidth=2, label='$T_{\mathrm{unc}}$')
		ax2    = ax.twinx()
		h2     = ax2.plot(fe, TC,'r--', linewidth=2, label='$T_{\mathrm{cos}}$')
		h3     = ax2.plot(fe, TS,'g--', linewidth=2, label='$T_{\mathrm{sin}}$')		

		h      = h1 + h2 + h3
		labels = [l.get_label() for l in h]
		ax.legend(h, labels, loc=0, fontsize=13, ncol=3)

		ax.set_ylim([66, 68.5])
		ax.set_yticks(np.arange(66.5,68.5,0.5))
		ax.set_ylabel('$T_{\mathrm{unc}}$ [K]', fontsize=16)
		ax.set_xlabel('$\\nu$ [MHz]', fontsize=16)
		ax.text(82, 66.12, 'C)', fontsize=20)

		ax2.set_ylim([-40, 40])
		ax2.set_yticks(np.arange(-30, 35, 10))
		ax2.set_ylabel('$T_{\mathrm{cos}}, T_{\mathrm{sin}}$ [K]', fontsize=16)













		#ax = f1.add_axes([x0, y0 + 2*dy, dx, dy])
		#ax.plot(fe, TU,'b',linewidth=2)
		#plt.ylabel('$T_{\mathrm{unc}}$ [K]', fontsize=16)
		#ax.set_xticklabels('')
		#plt.ylim([66,68.5])
		#ax.set_yticks(np.arange(66.5,68.5,0.5))		
		##ax.set_yticklabels(['-0.90','-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])	
		#plt.grid()

		#ax = f1.add_axes([x0, y0 + 1*dy, dx, dy])
		#ax.plot(fe, TC,'b',linewidth=2)
		#plt.ylabel('$T_{\mathrm{cos}}$ [K]', fontsize=16)
		#ax.set_xticklabels('')
		#plt.ylim([-35,0])
		#ax.set_yticks(np.arange(-30,0,5))
		##ax.set_yticklabels(['-56','-49','-54','-53','-52'])		
		#plt.grid()

		#ax = f1.add_axes([x0, y0 + 0*dy, dx, dy])
		#ax.plot(fe, TS,'b',linewidth=2)
		#plt.ylabel('$T_{\mathrm{sin}}$ [K]', fontsize=16)
		##ax.set_xticklabels('')
		#plt.ylim([-10,20])
		#ax.set_yticks(np.arange(-5,20,5))
		##ax.set_yticklabels(['-0.08','-0.07','-0.06','-0.05'])		
		#plt.grid()
		#ax.set_xlabel('$\\nu$ [MHz]', fontsize=16)



		plt.savefig(path_plot_save + 'calibration_quantities2.pdf', bbox_inches='tight')
		plt.close()	
		plt.close()
		plt.close()
		plt.close()

















	if residuals == 'yes':
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------
		# CALIBRATION QUANTITIES
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------			

		# Paths
		path_root       = home_folder + ''			
		path_plot_save  = path_root + '/WORK/papers/EDGES_calibration/figures/'


		fe = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/thot/freq.txt')



		# Plots

		size_x = 10
		size_y = 12.0
		x0 = 0.1
		y0 = 0.06
		dx = 0.5
		dy = 0.09



		f1  = plt.figure(num=1, figsize=(size_x, size_y))		


		ax = f1.add_axes([x0,                y0 + 10*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/thot/DTant.txt')				
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]') # $\Delta$ 
		ax.set_xticklabels('')
		#plt.ylim([-0.95,-0.45])
		ax.set_yticks(np.arange(-400,600,200))		
		#ax.set_yticklabels(['-0.90','-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])		
		plt.title('REMOVING NO TERMS', fontsize=16)
		t = ax.text(140, 300, '$T_{Ht}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()

		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 10*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/thot/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-0.045,0.045])
		ax.set_yticks(np.arange(-0.03,0.045,0.015))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		plt.title('REMOVING 5 TERMS', fontsize=16)
		t = ax.text(140, 0.022, '$T_{Ht}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()






		ax = f1.add_axes([x0,                y0 + 9*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/tshorted/DTant.txt')	
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-3,3])
		ax.set_yticks(np.arange(-2,2.5,1))		
		#ax.set_yticklabels(['-0.90','-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])		
		t = ax.text(140, 1.5, '$T_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 9*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/tshorted/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-0.6,0.6])
		ax.set_yticks(np.arange(-0.4,0.6,0.2))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 0.32, '$T_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()








		ax = f1.add_axes([x0,                y0 + 12*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/spec_hot/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-9,9])
		ax.set_yticks(np.arange(-6,9,3))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 4, '$T^*_H$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 12*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/spec_hot/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-6,6])
		ax.set_yticks(np.arange(-4,6,2))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 3.1, '$T^*_H$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()














		ax = f1.add_axes([x0,                y0 + 11*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/spec_shorted/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-0.9,0.9])
		ax.set_yticks(np.arange(-0.6,0.9,0.3))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 0.43, '$T^*_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 11*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/spec_shorted/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-0.9,0.9])
		ax.set_yticks(np.arange(-0.6,0.9,0.3))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 0.43, '$T^*_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()









		ax = f1.add_axes([x0,                y0 + 8*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_hot_mag/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-30,30])
		ax.set_yticks(np.arange(-20,25,10))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 15, '$|\Gamma_H|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 8*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_hot_mag/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-0.45,0.45])
		ax.set_yticks(np.arange(-0.3,0.45,0.15))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])				
		t = ax.text(140, 0.23, '$|\Gamma_H|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()






		ax = f1.add_axes([x0,                y0 + 7*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_hot_ang/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-150,150])
		ax.set_yticks(np.arange(-100,110,50))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 75, r'$\angle\/\Gamma_H$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 7*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_hot_ang/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-1.5,1.5])
		ax.set_yticks(np.arange(-1.0,1.5,0.5))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 0.7, r'$\angle\/\Gamma_H$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()






		ax = f1.add_axes([x0,                y0 + 6*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_shorted_mag/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-6,6])
		ax.set_yticks(np.arange(-4,5,2))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 3, '$|\Gamma_S|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 6*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_shorted_mag/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-2.1,2.1])
		ax.set_yticks(np.arange(-1.4,2.1,0.7))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 1.0, '$|\Gamma_S|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()









		ax = f1.add_axes([x0,                y0 + 5*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_shorted_ang/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-1.5,1.5])
		ax.set_yticks(np.arange(-1,1.5,0.5))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(134, 0.8, r'$\angle\/\Gamma_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 5*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_shorted_ang/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-1.5,1.5])
		ax.set_yticks(np.arange(-1,1.5,0.5))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])	
		t = ax.text(140, 0.8, r'$\angle\/\Gamma_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([x0,                y0 + 4*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_LNA_mag/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-30,30])
		ax.set_yticks(np.arange(-20,25,10))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 15, '$|\Gamma_{\mathrm{rec}}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 4*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_LNA_mag/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-12,12])
		ax.set_yticks(np.arange(-8,12,4))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])	
		t = ax.text(140, 6, '$|\Gamma_{\mathrm{rec}}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()






		ax = f1.add_axes([x0,                y0 + 3*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_LNA_ang/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-60,60])
		ax.set_yticks(np.arange(-40,45,20))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 30, r'$\angle\/\Gamma_{\mathrm{rec}}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 3*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_LNA_ang/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-60,60])
		ax.set_yticks(np.arange(-40,45,20))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])	
		t = ax.text(140, 30, r'$\angle\/\Gamma_{\mathrm{rec}}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()






		ax = f1.add_axes([x0,                y0 + 2*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s12s21_sr_mag/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		#ax.set_xlabel('frequency [MHz]')
		plt.ylim([-150,150])
		ax.set_yticks(np.arange(-100,120,50))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 75, '$|S_{21}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()
		ax.set_xticklabels('')


		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 2*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s12s21_sr_mag/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.set_xlabel('frequency [MHz]')
		plt.ylim([-0.015,0.015])
		ax.set_yticks(np.arange(-0.01,0.015,0.005))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])	
		t = ax.text(140, 0.007, '$|S_{21}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()
		ax.set_xticklabels('')





















		ax = f1.add_axes([x0,                y0 + 1*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_antenna_mag/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		plt.ylim([-45,45])
		ax.set_yticks(np.arange(-30,45,15))		
		t = ax.text(133, 22, '$|\Gamma_{\mathrm{ant}}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()
		ax.set_xticklabels('')


		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 1*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_antenna_mag/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		plt.ylim([-12,12])
		ax.set_yticks(np.arange(-8,12,4))					
		t = ax.text(140, 6, '$|\Gamma_{\mathrm{ant}}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()
		ax.set_xticklabels('')








		ax = f1.add_axes([x0,                y0 + 0*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_antenna_ang/DTant.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xlabel('frequency [MHz]')
		plt.ylim([-45,45])
		ax.set_yticks(np.arange(-30,45,15))
		t = ax.text(132, 22, r'$\angle\/\Gamma_{\mathrm{ant}}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 0*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_antenna_ang/DTant_5term.txt')
		ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.set_xlabel('frequency [MHz]')
		plt.ylim([-45,45])
		ax.set_yticks(np.arange(-30,45,15))	
		t = ax.text(132, 22, r'$\angle\/\Gamma_{\mathrm{ant}}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()		







		plt.savefig(path_plot_save + 'residuals.pdf', bbox_inches='tight')
		plt.close()
		plt.close()






















	if residuals_typical == 'yes':
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------
		# CALIBRATION QUANTITIES
		# ---------------------------------------------------------------------------
		# ---------------------------------------------------------------------------			

		# Paths
		path_root       = home_folder + ''			
		path_plot_save  = path_root + '/WORK/papers/EDGES_calibration/figures/'


		fe = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/thot/freq.txt')



		# Plots

		size_x = 10
		size_y = 12.0
		x0 = 0.1
		y0 = 0.06
		dx = 0.5
		dy = 0.09



		f1  = plt.figure(num=1, figsize=(size_x, size_y))		


		ax = f1.add_axes([x0,                y0 + 10*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/thot/DTant.txt')				
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,12],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,13],'r', linewidth=2)
		plt.ylabel('[mK]') # $\Delta$ 
		ax.set_xticklabels('')
		plt.ylim([-600,600])
		ax.set_yticks(np.arange(-400,600,200))		
		#ax.set_yticklabels(['-0.90','-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])		
		#plt.title('REMOVING NO TERMS', fontsize=16)
		t = ax.text(140, 300, '$T_{Ht}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()

		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 10*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/thot/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,12],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,13],'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-0.045,0.045])
		ax.set_yticks(np.arange(-0.03,0.045,0.015))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		#plt.title('REMOVING 5 TERMS', fontsize=16)
		t = ax.text(140, 0.022, '$T_{Ht}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()






		ax = f1.add_axes([x0,                y0 + 9*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/tshorted/DTant.txt')	
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,10],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,12],'r', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-3,3])
		ax.set_yticks(np.arange(-2,2.5,1))		
		#ax.set_yticklabels(['-0.90','-0.85','-0.80','-0.75','-0.70','-0.65','-0.60','-0.55'])		
		t = ax.text(140, 1.5, '$T_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 9*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/tshorted/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,10],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,12],'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-0.6,0.6])
		ax.set_yticks(np.arange(-0.4,0.6,0.2))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 0.32, '$T_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()








		ax = f1.add_axes([x0,                y0 + 12*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/spec_hot/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,9],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,34],'r', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-6,6])
		ax.set_yticks(np.arange(-4,6,2))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 3, '$T^*_H$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 12*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/spec_hot/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,9],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,34],'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-6,6])
		ax.set_yticks(np.arange(-4,6,2))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 3.1, '$T^*_H$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()














		ax = f1.add_axes([x0,                y0 + 11*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/spec_shorted/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,0],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,50],'r', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-0.9,0.9])
		ax.set_yticks(np.arange(-0.6,0.9,0.3))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 0.43, '$T^*_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 11*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/spec_shorted/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,0],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,50],'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-0.9,0.9])
		ax.set_yticks(np.arange(-0.6,0.9,0.3))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 0.43, '$T^*_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()









		ax = f1.add_axes([x0,                y0 + 8*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_hot_mag/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,2],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,4],'r', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-30,30])
		ax.set_yticks(np.arange(-20,25,10))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 15, '$|\Gamma_H|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 8*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_hot_mag/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,2],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,4],'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-0.45,0.45])
		ax.set_yticks(np.arange(-0.3,0.45,0.15))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])				
		t = ax.text(140, 0.23, '$|\Gamma_H|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()






		ax = f1.add_axes([x0,                y0 + 7*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_hot_ang/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,7],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,27],'r', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-150,150])
		ax.set_yticks(np.arange(-100,110,50))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 75, r'$\angle\/\Gamma_H$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 7*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_hot_ang/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,7],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,27],'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-1.5,1.5])
		ax.set_yticks(np.arange(-1.0,1.5,0.5))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 0.7, r'$\angle\/\Gamma_H$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()






		ax = f1.add_axes([x0,                y0 + 6*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_shorted_mag/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,3],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,4],'r', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-6,6])
		ax.set_yticks(np.arange(-4,5,2))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 3, '$|\Gamma_S|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 6*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_shorted_mag/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,3],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,4],'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-2.1,2.1])
		ax.set_yticks(np.arange(-1.4,2.1,0.7))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 1.0, '$|\Gamma_S|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()









		ax = f1.add_axes([x0,                y0 + 5*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_shorted_ang/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,1],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,8],'r', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-1.5,1.5])
		ax.set_yticks(np.arange(-1,1.5,0.5))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(134, 0.8, r'$\angle\/\Gamma_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 5*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_shorted_ang/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,1],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,8],'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-1.5,1.5])
		ax.set_yticks(np.arange(-1,1.5,0.5))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])	
		t = ax.text(140, 0.8, r'$\angle\/\Gamma_S$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()







		ax = f1.add_axes([x0,                y0 + 4*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_LNA_mag/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,1],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,8],'r', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-30,30])
		ax.set_yticks(np.arange(-20,25,10))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 15, '$|\Gamma_{\mathrm{rec}}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 4*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_LNA_mag/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,1],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,8],'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-12,12])
		ax.set_yticks(np.arange(-8,12,4))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])	
		t = ax.text(140, 6, '$|\Gamma_{\mathrm{rec}}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()






		ax = f1.add_axes([x0,                y0 + 3*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_LNA_ang/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  0.93*1000*d[:,102],'b', linewidth=2)
		ax.plot(fe,  0.93*1000*d[:,106],'r', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xticklabels('')
		plt.ylim([-60,60])
		ax.set_yticks(np.arange(-40,45,20))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])			
		t = ax.text(140, 30, r'$\angle\/\Gamma_{\mathrm{rec}}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 3*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_LNA_ang/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,102],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,106],'r', linewidth=2)
		ax.set_xticklabels('')
		plt.ylim([-60,60])
		ax.set_yticks(np.arange(-40,45,20))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])	
		t = ax.text(140, 30, r'$\angle\/\Gamma_{\mathrm{rec}}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()






		ax = f1.add_axes([x0,                y0 + 2*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s12s21_sr_mag/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,37],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,38],'r', linewidth=2)
		plt.ylabel('[mK]')
		#ax.set_xlabel('frequency [MHz]')
		plt.ylim([-150,150])
		ax.set_yticks(np.arange(-100,120,50))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])		
		t = ax.text(140, 75, '$|S_{21}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()
		ax.set_xticklabels('')


		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 2*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s12s21_sr_mag/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,37],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,38],'r', linewidth=2)
		#ax.set_xlabel('frequency [MHz]')
		plt.ylim([-0.015,0.015])
		ax.set_yticks(np.arange(-0.01,0.015,0.005))		
		#ax.set_yticklabels(['-800','-600','-400','-200','0'])	
		t = ax.text(140, 0.007, '$|S_{21}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()
		ax.set_xticklabels('')





















		ax = f1.add_axes([x0,                y0 + 1*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_antenna_mag/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,29],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,34],'r', linewidth=2)
		plt.ylabel('[mK]')
		plt.ylim([-45,45])
		ax.set_yticks(np.arange(-30,45,15))		
		t = ax.text(133, 22, '$|\Gamma_{\mathrm{ant}}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()
		ax.set_xticklabels('')


		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 1*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_antenna_mag/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,29],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,34],'r', linewidth=2)
		plt.ylim([-12,12])
		ax.set_yticks(np.arange(-8,12,4))					
		t = ax.text(140, 6, '$|\Gamma_{\mathrm{ant}}|$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()
		ax.set_xticklabels('')








		ax = f1.add_axes([x0,                y0 + 0*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/s11_antenna_ang/DTant.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'b', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'b', linewidth=2)
		ax.plot(fe,  1000*d[:,3],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,4],'r', linewidth=2)
		plt.ylabel('[mK]')
		ax.set_xlabel('$\\nu$ [MHz]', fontsize=16)
		plt.ylim([-45,45])
		ax.set_yticks(np.arange(-30,45,15))
		t = ax.text(132, 22, r'$\angle\/\Gamma_{\mathrm{ant}}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()



		ax = f1.add_axes([(1 + 0.9)*x0 + dx, y0 + 0*dy,   dx, dy])
		d = np.genfromtxt(home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/correct_residuals/polynomials_edges/s11_antenna_ang/DTant_5term.txt')
		#ax.plot(fe,  1000*np.std(d, axis=1),'r', linewidth=2)
		#ax.plot(fe, -1000*np.std(d, axis=1),'r', linewidth=2)
		ax.plot(fe,  1000*d[:,3],'b', linewidth=2)
		ax.plot(fe,  1000*d[:,4],'r', linewidth=2)
		ax.set_xlabel('$\\nu$ [MHz]', fontsize=16)
		plt.ylim([-45,45])
		ax.set_yticks(np.arange(-30,45,15))	
		t = ax.text(132, 22, r'$\angle\/\Gamma_{\mathrm{ant}}$',fontsize=18)
		t.set_bbox(dict(color='white', alpha=1, edgecolor='white'))
		plt.grid()		







		plt.savefig(path_plot_save + 'residuals_typical.pdf', bbox_inches='tight')
		plt.close()
		plt.close()
















	if s11_accuracy == 'yes':

		# Loading data
		path_folder_vna = home_folder + '/DATA/EDGES/receiver_calibration/calibration_june_2016/LNA/S11/raw/reference_attenuators/'

		o_vna, f_vna = rc.s1p_read(path_folder_vna + 'calibration_male_Open.s1p')
		s_vna, f_vna = rc.s1p_read(path_folder_vna + 'calibration_male_Short.s1p')
		l_vna, f_vna = rc.s1p_read(path_folder_vna + 'calibration_male_Load.s1p')

		a6_vna,  f_vna = rc.s1p_read(path_folder_vna + 'load_06db.s1p')
		a10_vna, f_vna = rc.s1p_read(path_folder_vna + 'load_10db.s1p')
		a12_vna, f_vna = rc.s1p_read(path_folder_vna + 'load_12db.s1p')		


		# DC resistance
		gamma_6dB        = np.ones(len(f_vna)) * rc.impedance2gamma(85.267, 50)
		gamma_10dB       = np.ones(len(f_vna)) * rc.impedance2gamma(60.828, 50)

		gamma_6dB_plus   = np.ones(len(f_vna)) * rc.impedance2gamma(85.267+0.01, 50)
		gamma_6dB_minus  = np.ones(len(f_vna)) * rc.impedance2gamma(85.267-0.01, 50)

		gamma_10dB_plus  = np.ones(len(f_vna)) * rc.impedance2gamma(60.828+0.01, 50)
		gamma_10dB_minus = np.ones(len(f_vna)) * rc.impedance2gamma(60.828-0.01, 50)


		# Correction of verification measurements at VNA input
		resistance_of_match = 50.11
		md = 1
		oa_vna, sa_vna, la_vna                   = rc.agilent_85033E(f_vna, resistance_of_match, md)
		oa_vna_plus, sa_vna_plus, la_vna_plus    = rc.agilent_85033E(f_vna, resistance_of_match+0.01, md)
		oa_vna_minus, sa_vna_minus, la_vna_minus = rc.agilent_85033E(f_vna, resistance_of_match-0.01, md)

		a6_vna_c,  xx, xx, xx = rc.de_embed(oa_vna, sa_vna, la_vna, o_vna, s_vna, l_vna, a6_vna)
		a10_vna_c, xx, xx, xx = rc.de_embed(oa_vna, sa_vna, la_vna, o_vna, s_vna, l_vna, a10_vna)

		a6_vna_c_plus,  xx, xx, xx = rc.de_embed(oa_vna_plus, sa_vna_plus, la_vna_plus, o_vna, s_vna, l_vna, a6_vna)
		a10_vna_c_plus, xx, xx, xx = rc.de_embed(oa_vna_plus, sa_vna_plus, la_vna_plus, o_vna, s_vna, l_vna, a10_vna)

		a6_vna_c_minus,  xx, xx, xx = rc.de_embed(oa_vna_minus, sa_vna_minus, la_vna_minus, o_vna, s_vna, l_vna, a6_vna)
		a10_vna_c_minus, xx, xx, xx = rc.de_embed(oa_vna_minus, sa_vna_minus, la_vna_minus, o_vna, s_vna, l_vna, a10_vna)



		# Plot
		plt.close()
		plt.close()
		plt.close()
		plt.close()


		f1  = plt.figure(num=1, figsize=(6, 7))

		plt.subplot(2,1,1)

		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(gamma_6dB))[(4*89):(4*189+1)], 'r', linewidth=2)
		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(gamma_6dB_plus))[(4*89):(4*189+1)], 'r--', linewidth=2)		

		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(a6_vna_c))[(4*89):(4*189+1)], 'k', linewidth=2)
		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(a6_vna_c_plus))[(4*89):(4*189+1)], color='0.6', linewidth=1.5)

		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(gamma_6dB))[(4*89):(4*189+1)], 'r', linewidth=2)
		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(gamma_6dB_plus))[(4*89):(4*189+1)], 'r--', linewidth=2)

		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(a6_vna_c_minus))[(4*89):(4*189+1)], color='0.6', linewidth=1.5)
		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(gamma_6dB_minus))[(4*89):(4*189+1)], 'r--', linewidth=2)

		plt.legend(['From direct DC measurement of attenuator','Assuming $0.01-\Omega$ error for attenuator', 'VNA measurement using best-measured \n DC resistance of $50-\Omega$ calibration load','Assuming $0.01-\Omega$ error for $50-\Omega$ calibration load'], fontsize=11)


		plt.xlim([80, 200])
		plt.ylim([-11.685,-11.655])
		plt.grid()
		plt.ylabel('6-dB attenuator\n magnitude [dB]', fontsize=13)

		ax = plt.gca()
		ax.ticklabel_format(useOffset=False)		



		plt.subplot(2,1,2)
		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(a10_vna_c))[(4*89):(4*189+1)], 'k', linewidth=2)
		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(a10_vna_c_plus))[(4*89):(4*189+1)], color='0.6', linewidth=1.5)
		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(a10_vna_c_minus))[(4*89):(4*189+1)], color='0.6', linewidth=1.5)		

		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(gamma_10dB))[(4*89):(4*189+1)], 'r', linewidth=2)
		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(gamma_10dB_plus))[(4*89):(4*189+1)], 'r--', linewidth=2)
		plt.plot((f_vna/1e6)[(4*89):(4*189+1)], 20*np.log10(np.abs(gamma_10dB_minus))[(4*89):(4*189+1)], 'r--', linewidth=2)


		plt.ylim([-20.22,-20.18])


		plt.xlim([80, 200])
		plt.grid()
		plt.xlabel(r'$\nu$ [MHz]', fontsize=16)
		plt.ylabel('10-dB attenuator\n magnitude [dB]', fontsize=13)

		ax = plt.gca()
		ax.ticklabel_format(useOffset=False)








		# Paths
		path_root       = home_folder + ''			
		path_plot_save  = path_root + '/WORK/papers/EDGES_calibration/figures/'		

		plt.savefig(path_plot_save + 'reflection_accuracy.pdf', bbox_inches='tight')
		plt.close()
		plt.close()		


	return 0








































def ripple_blade_antenna():

	root_path = '/Volumes/WORK/EDGES/calibration_march_2015/antenna/field_antenna_s11/data/corrected/'
	plot_path = '/Users/raul/Desktop/'






	# Blade
	o = np.genfromtxt(root_path + '2015_262_19_14/open_raw_dataset_2015_262_19_14_magnitude_linear_50-200MHz.txt')
	s = np.genfromtxt(root_path + '2015_262_19_14/short_raw_dataset_2015_262_19_14_magnitude_linear_50-200MHz.txt')
	l = np.genfromtxt(root_path + '2015_262_19_14/load_raw_dataset_2015_262_19_14_magnitude_linear_50-200MHz.txt')
	a = np.genfromtxt(root_path + '2015_262_19_14/ant_raw_dataset_2015_262_19_14_magnitude_linear_50-200MHz.txt')

	aux = np.genfromtxt(root_path + '2015_262_19_14/dataset_2015_262_19_14_UTCDateTime_Tswitch_Tamb_Hamb_Tdp.txt')
	ac = np.genfromtxt(root_path + '2015_262_19_14/dataset_2015_262_19_14_magnitude_linear_50-200MHz.txt')


	do = np.ones((len(o[:,0]) - 1, len(o[1,:])))
	ds = np.ones((len(s[:,0]) - 1, len(s[1,:])))
	dl = np.ones((len(l[:,0]) - 1, len(l[1,:])))
	da = np.ones((len(a[:,0]) - 1, len(a[1,:])))

	for i in range(len(o[:,1])-1):
		do[i,:] = 20*np.log10(o[i+1,:]) - 20*np.log10(o[i,:])
		ds[i,:] = 20*np.log10(s[i+1,:]) - 20*np.log10(s[i,:])
		dl[i,:] = 20*np.log10(l[i+1,:]) - 20*np.log10(l[i,:])
		da[i,:] = 20*np.log10(a[i+1,:]) - 20*np.log10(a[i,:])







	mo   = np.mean(o[1000:1600,:], axis=0)
	ms   = np.mean(s[1000:1600,:], axis=0)
	ml   = np.mean(l[1000:1600,:], axis=0)
	ma   = np.mean(a[1000:1600,:], axis=0)
	mac  = np.mean(ac[1000:1600,:], axis=0)

	mdo  = np.mean(do[1000:1600,:], axis=0)	
	mds  = np.mean(ds[1000:1600,:], axis=0)	
	mdl  = np.mean(dl[1000:1600,:], axis=0)	
	mda  = np.mean(da[1000:1600,:], axis=0)















	# figure 1	

	plt.close()
	f1 = plt.figure(num=1, figsize=(18, 12))


	ax1 = f1.add_subplot(4,1,1)
	line1 = ax1.plot(aux[:,7])
	ax1.set_ylabel('ambient temperature [degC]')
	ax1.grid()
	ax1.set_xticklabels('')


	ax1 = f1.add_subplot(4,1,2)
	line1 = ax1.plot( 20*np.log10(ac[0:-1, 60])  - 20*np.log10(mac[60])  + 4 * 0.1, label='110 MHz' )   
	line2 = ax1.plot( 20*np.log10(ac[0:-1, 80])  - 20*np.log10(mac[80])  + 3 * 0.1, label='130 MHz' ) 
	line3 = ax1.plot( 20*np.log10(ac[0:-1, 100]) - 20*np.log10(mac[100]) + 2 * 0.1, label='150 MHz' )
	line4 = ax1.plot( 20*np.log10(ac[0:-1, 120]) - 20*np.log10(mac[120]) + 1 * 0.1, label='170 MHz' )
	line5 = ax1.plot( 20*np.log10(ac[0:-1, 140]) - 20*np.log10(mac[140]) + 0 * 0.1, label='190 MHz' )

	ladded = line1+line2+line3+line4+line5
	lab = [k.get_label() for k in ladded]
	ax1.legend(ladded, lab, bbox_to_anchor=(1, 1.2), ncol=5)

	ax1.set_ylim([-0.05, 0.45])
	ax1.set_yticks([-0.05, 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45])
	ax1.set_yticklabels(['','','','','','','','','','',''])
	ax1.grid()
	ax1.set_ylabel('corrected antenna [dB]')
	ax1.set_xticklabels('')


	ax2 = f1.add_subplot(4,1,3)
	dy = 0.5
	line1 = ax2.plot( 20*np.log10(o[0:-1, 60])  - 20*np.log10(mo[60])  + 4 * dy, label='110 MHz' )   
	line2 = ax2.plot( 20*np.log10(o[0:-1, 80])  - 20*np.log10(mo[80])  + 3 * dy, label='130 MHz' ) 
	line3 = ax2.plot( 20*np.log10(o[0:-1, 100]) - 20*np.log10(mo[100]) + 2 * dy, label='150 MHz' )
	line4 = ax2.plot( 20*np.log10(o[0:-1, 120]) - 20*np.log10(mo[120]) + 1 * dy, label='170 MHz' )
	line5 = ax2.plot( 20*np.log10(o[0:-1, 140]) - 20*np.log10(mo[140]) + 0 * dy, label='190 MHz' )


	ax2.set_ylim([-0.25, 2.25])
	ax2.set_yticks([-0.25, 0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25])
	ax2.set_yticklabels(['','','','','','','','','','',''])
	ax2.grid()
	ax2.set_ylabel('raw open [dB]')
	ax2.set_xticklabels('')


	ax3 = f1.add_subplot(4,1,4)
	dy = 0.03
	line1 = ax3.plot( do[0:-1, 60]  - mdo[60]  + 4 * dy, label='110 MHz' )   
	line2 = ax3.plot( do[0:-1, 80]  - mdo[80]  + 3 * dy, label='130 MHz' ) 
	line3 = ax3.plot( do[0:-1, 100] - mdo[100] + 2 * dy, label='150 MHz' )
	line4 = ax3.plot( do[0:-1, 120] - mdo[120] + 1 * dy, label='170 MHz' )
	line5 = ax3.plot( do[0:-1, 140] - mdo[140] + 0 * dy, label='190 MHz' )


	ax3.set_ylim([-0.015, 0.135])
	#ax3.set_yticks([-0.0001, -0.0001, 0, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008])
	ax3.set_yticklabels([''])
	ax3.grid()
	ax3.set_ylabel('derivative raw open [dB]')	
	ax3.set_xlabel('trace number')



	# saving plot
	plt.savefig(plot_path + 'blade_open.png', bbox_inches='tight')
	plt.close()	







	# figure 2	

	plt.close()
	f1 = plt.figure(num=1, figsize=(18, 12))


	ax1 = f1.add_subplot(4,1,1)
	line1 = ax1.plot(aux[:,7])
	ax1.set_ylabel('ambient temperature [degC]')
	ax1.grid()
	ax1.set_xticklabels('')


	ax1 = f1.add_subplot(4,1,2)
	line1 = ax1.plot( 20*np.log10(ac[0:-1, 60])  - 20*np.log10(mac[60])  + 4 * 0.1, label='110 MHz' )   
	line2 = ax1.plot( 20*np.log10(ac[0:-1, 80])  - 20*np.log10(mac[80])  + 3 * 0.1, label='130 MHz' ) 
	line3 = ax1.plot( 20*np.log10(ac[0:-1, 100]) - 20*np.log10(mac[100]) + 2 * 0.1, label='150 MHz' )
	line4 = ax1.plot( 20*np.log10(ac[0:-1, 120]) - 20*np.log10(mac[120]) + 1 * 0.1, label='170 MHz' )
	line5 = ax1.plot( 20*np.log10(ac[0:-1, 140]) - 20*np.log10(mac[140]) + 0 * 0.1, label='190 MHz' )

	ladded = line1+line2+line3+line4+line5
	lab = [k.get_label() for k in ladded]
	ax1.legend(ladded, lab, bbox_to_anchor=(1, 1.2), ncol=5)

	ax1.set_ylim([-0.05, 0.45])
	ax1.set_yticks([-0.05, 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45])
	ax1.set_yticklabels(['','','','','','','','','','',''])
	ax1.grid()
	ax1.set_ylabel('corrected antenna [dB]')
	ax1.set_xticklabels('')


	ax2 = f1.add_subplot(4,1,3)
	dy = 0.5
	line1 = ax2.plot( 20*np.log10(s[0:-1, 60])  - 20*np.log10(ms[60])  + 4 * dy, label='110 MHz' )   
	line2 = ax2.plot( 20*np.log10(s[0:-1, 80])  - 20*np.log10(ms[80])  + 3 * dy, label='130 MHz' ) 
	line3 = ax2.plot( 20*np.log10(s[0:-1, 100]) - 20*np.log10(ms[100]) + 2 * dy, label='150 MHz' )
	line4 = ax2.plot( 20*np.log10(s[0:-1, 120]) - 20*np.log10(ms[120]) + 1 * dy, label='170 MHz' )
	line5 = ax2.plot( 20*np.log10(s[0:-1, 140]) - 20*np.log10(ms[140]) + 0 * dy, label='190 MHz' )


	ax2.set_ylim([-0.25, 2.25])
	ax2.set_yticks([-0.25, 0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25])
	ax2.set_yticklabels(['','','','','','','','','','',''])
	ax2.grid()
	ax2.set_ylabel('raw short [dB]')
	ax2.set_xticklabels('')


	ax3 = f1.add_subplot(4,1,4)
	dy = 0.03
	line1 = ax3.plot( ds[0:-1, 60]  - mds[60]  + 4 * dy, label='110 MHz' )   
	line2 = ax3.plot( ds[0:-1, 80]  - mds[80]  + 3 * dy, label='130 MHz' ) 
	line3 = ax3.plot( ds[0:-1, 100] - mds[100] + 2 * dy, label='150 MHz' )
	line4 = ax3.plot( ds[0:-1, 120] - mds[120] + 1 * dy, label='170 MHz' )
	line5 = ax3.plot( ds[0:-1, 140] - mds[140] + 0 * dy, label='190 MHz' )


	ax3.set_ylim([-0.015, 0.135])
	#ax3.set_yticks([-0.0001, -0.0001, 0, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008])
	ax3.set_yticklabels([''])
	ax3.grid()
	ax3.set_ylabel('derivative raw short [dB]')	
	ax3.set_xlabel('trace number')



	# saving plot
	plt.savefig(plot_path + 'blade_short.png', bbox_inches='tight')
	plt.close()	









	# figure 3	

	plt.close()
	f1 = plt.figure(num=1, figsize=(18, 12))


	ax1 = f1.add_subplot(4,1,1)
	line1 = ax1.plot(aux[:,7])
	ax1.set_ylabel('ambient temperature [degC]')
	ax1.grid()
	ax1.set_xticklabels('')


	ax1 = f1.add_subplot(4,1,2)
	line1 = ax1.plot( 20*np.log10(ac[0:-1, 60])  - 20*np.log10(mac[60])  + 4 * 0.1, label='110 MHz' )   
	line2 = ax1.plot( 20*np.log10(ac[0:-1, 80])  - 20*np.log10(mac[80])  + 3 * 0.1, label='130 MHz' ) 
	line3 = ax1.plot( 20*np.log10(ac[0:-1, 100]) - 20*np.log10(mac[100]) + 2 * 0.1, label='150 MHz' )
	line4 = ax1.plot( 20*np.log10(ac[0:-1, 120]) - 20*np.log10(mac[120]) + 1 * 0.1, label='170 MHz' )
	line5 = ax1.plot( 20*np.log10(ac[0:-1, 140]) - 20*np.log10(mac[140]) + 0 * 0.1, label='190 MHz' )

	ladded = line1+line2+line3+line4+line5
	lab = [k.get_label() for k in ladded]
	ax1.legend(ladded, lab, bbox_to_anchor=(1, 1.2), ncol=5)

	ax1.set_ylim([-0.05, 0.45])
	ax1.set_yticks([-0.05, 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45])
	ax1.set_yticklabels(['','','','','','','','','','',''])
	ax1.grid()
	ax1.set_ylabel('corrected antenna [dB]')
	ax1.set_xticklabels('')


	ax2 = f1.add_subplot(4,1,3)
	dy = 2
	line1 = ax2.plot( 20*np.log10(l[0:-1, 60])  - 20*np.log10(ml[60])  + 4 * dy, label='110 MHz' )   
	line2 = ax2.plot( 20*np.log10(l[0:-1, 80])  - 20*np.log10(ml[80])  + 3 * dy, label='130 MHz' ) 
	line3 = ax2.plot( 20*np.log10(l[0:-1, 100]) - 20*np.log10(ml[100]) + 2 * dy, label='150 MHz' )
	line4 = ax2.plot( 20*np.log10(l[0:-1, 120]) - 20*np.log10(ml[120]) + 1 * dy, label='170 MHz' )
	line5 = ax2.plot( 20*np.log10(l[0:-1, 140]) - 20*np.log10(ml[140]) + 0 * dy, label='190 MHz' )


	ax2.set_ylim([-1, 9])
	#ax2.set_yticks([-0.25, 0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25])
	ax2.set_yticklabels(['','','','','','','','','','',''])
	ax2.grid()
	ax2.set_ylabel('raw match [dB]')
	ax2.set_xticklabels('')


	ax3 = f1.add_subplot(4,1,4)
	dy = 0.1
	line1 = ax3.plot( dl[0:-1, 60]  - mdl[60]  + 4 * dy, label='110 MHz' )   
	line2 = ax3.plot( dl[0:-1, 80]  - mdl[80]  + 3 * dy, label='130 MHz' ) 
	line3 = ax3.plot( dl[0:-1, 100] - mdl[100] + 2 * dy, label='150 MHz' )
	line4 = ax3.plot( dl[0:-1, 120] - mdl[120] + 1 * dy, label='170 MHz' )
	line5 = ax3.plot( dl[0:-1, 140] - mdl[140] + 0 * dy, label='190 MHz' )


	ax3.set_ylim([-0.05, 0.45])
	#ax3.set_yticks([-0.0001, -0.0001, 0, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008])
	ax3.set_yticklabels([''])
	ax3.grid()
	ax3.set_ylabel('derivative raw match [dB]')	
	ax3.set_xlabel('trace number')



	# saving plot
	plt.savefig(plot_path + 'blade_match.png', bbox_inches='tight')
	plt.close()	







	# figure 4	

	plt.close()
	f1 = plt.figure(num=1, figsize=(18, 12))


	ax1 = f1.add_subplot(4,1,1)
	line1 = ax1.plot(aux[:,7])
	ax1.set_ylabel('ambient temperature [degC]')
	ax1.grid()
	ax1.set_xticklabels('')


	ax1 = f1.add_subplot(4,1,2)
	line1 = ax1.plot( 20*np.log10(ac[0:-1, 60])  - 20*np.log10(mac[60])  + 4 * 0.1, label='110 MHz' )   
	line2 = ax1.plot( 20*np.log10(ac[0:-1, 80])  - 20*np.log10(mac[80])  + 3 * 0.1, label='130 MHz' ) 
	line3 = ax1.plot( 20*np.log10(ac[0:-1, 100]) - 20*np.log10(mac[100]) + 2 * 0.1, label='150 MHz' )
	line4 = ax1.plot( 20*np.log10(ac[0:-1, 120]) - 20*np.log10(mac[120]) + 1 * 0.1, label='170 MHz' )
	line5 = ax1.plot( 20*np.log10(ac[0:-1, 140]) - 20*np.log10(mac[140]) + 0 * 0.1, label='190 MHz' )

	ladded = line1+line2+line3+line4+line5
	lab = [k.get_label() for k in ladded]
	ax1.legend(ladded, lab, bbox_to_anchor=(1, 1.2), ncol=5)

	ax1.set_ylim([-0.05, 0.45])
	ax1.set_yticks([-0.05, 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45])
	ax1.set_yticklabels(['','','','','','','','','','',''])
	ax1.grid()
	ax1.set_ylabel('corrected antenna [dB]')
	ax1.set_xticklabels('')


	ax2 = f1.add_subplot(4,1,3)
	dy = 2
	line1 = ax2.plot( 20*np.log10(a[0:-1, 60])  - 20*np.log10(ma[60])  + 4 * dy, label='110 MHz' )   
	line2 = ax2.plot( 20*np.log10(a[0:-1, 80])  - 20*np.log10(ma[80])  + 3 * dy, label='130 MHz' ) 
	line3 = ax2.plot( 20*np.log10(a[0:-1, 100]) - 20*np.log10(ma[100]) + 2 * dy, label='150 MHz' )
	line4 = ax2.plot( 20*np.log10(a[0:-1, 120]) - 20*np.log10(ma[120]) + 1 * dy, label='170 MHz' )
	line5 = ax2.plot( 20*np.log10(a[0:-1, 140]) - 20*np.log10(ma[140]) + 0 * dy, label='190 MHz' )


	#ax2.set_ylim([-1, 9])
	#ax2.set_yticks([-0.25, 0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25])
	ax2.set_yticklabels(['','','','','','','','','','',''])
	ax2.grid()
	ax2.set_ylabel('raw antenna [dB]')
	ax2.set_xticklabels('')


	ax3 = f1.add_subplot(4,1,4)
	dy = 0.06
	line1 = ax3.plot( da[0:-1, 60]  - mda[60]  + 4 * dy, label='110 MHz' )   
	line2 = ax3.plot( da[0:-1, 80]  - mda[80]  + 3 * dy, label='130 MHz' ) 
	line3 = ax3.plot( da[0:-1, 100] - mda[100] + 2 * dy, label='150 MHz' )
	line4 = ax3.plot( da[0:-1, 120] - mda[120] + 1 * dy, label='170 MHz' )
	line5 = ax3.plot( da[0:-1, 140] - mda[140] + 0 * dy, label='190 MHz' )


	ax3.set_ylim([-0.03, 0.27])
	#ax3.set_yticks([-0.0001, -0.0001, 0, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008])
	ax3.set_yticklabels([''])
	ax3.grid()
	ax3.set_ylabel('derivative raw antenna [dB]')	
	ax3.set_xlabel('trace number')



	# saving plot
	plt.savefig(plot_path + 'blade_antenna.png', bbox_inches='tight')
	plt.close()	















	# Fourpoint
	o = np.genfromtxt(root_path + '2015_157_03_51/open_raw_dataset_2015_157_03_51_magnitude_linear_50-200MHz.txt')
	s = np.genfromtxt(root_path + '2015_157_03_51/short_raw_dataset_2015_157_03_51_magnitude_linear_50-200MHz.txt')
	l = np.genfromtxt(root_path + '2015_157_03_51/load_raw_dataset_2015_157_03_51_magnitude_linear_50-200MHz.txt')
	a = np.genfromtxt(root_path + '2015_157_03_51/ant_raw_dataset_2015_157_03_51_magnitude_linear_50-200MHz.txt')

	aux = np.genfromtxt(root_path + '2015_157_03_51/dataset_2015_157_03_51_UTCDateTime_Tswitch_Tamb_Hamb_Tdp.txt')
	ac = np.genfromtxt(root_path + '2015_157_03_51/dataset_2015_157_03_51_magnitude_linear_50-200MHz.txt')


	do = np.ones((len(o[:,0]) - 1, len(o[1,:])))
	ds = np.ones((len(s[:,0]) - 1, len(s[1,:])))
	dl = np.ones((len(l[:,0]) - 1, len(l[1,:])))
	da = np.ones((len(a[:,0]) - 1, len(a[1,:])))

	for i in range(len(o[:,1])-1):
		do[i,:] = 20*np.log10(o[i+1,:]) - 20*np.log10(o[i,:])
		ds[i,:] = 20*np.log10(s[i+1,:]) - 20*np.log10(s[i,:])
		dl[i,:] = 20*np.log10(l[i+1,:]) - 20*np.log10(l[i,:])
		da[i,:] = 20*np.log10(a[i+1,:]) - 20*np.log10(a[i,:])







	mo   = np.mean(o[1000:1600,:], axis=0)
	ms   = np.mean(s[1000:1600,:], axis=0)
	ml   = np.mean(l[1000:1600,:], axis=0)
	ma   = np.mean(a[1000:1600,:], axis=0)
	mac  = np.mean(ac[1000:1600,:], axis=0)

	mdo  = np.mean(do[1000:1600,:], axis=0)	
	mds  = np.mean(ds[1000:1600,:], axis=0)	
	mdl  = np.mean(dl[1000:1600,:], axis=0)	
	mda  = np.mean(da[1000:1600,:], axis=0)











	# figure 1	

	plt.close()
	f1 = plt.figure(num=1, figsize=(18, 12))


	ax1 = f1.add_subplot(4,1,1)
	line1 = ax1.plot(aux[:,7])
	ax1.set_ylabel('ambient temperature [degC]')
	ax1.grid()
	ax1.set_xticklabels('')


	ax1 = f1.add_subplot(4,1,2)
	line1 = ax1.plot( 20*np.log10(ac[0:-1, 60])  - 20*np.log10(mac[60])  + 4 * 0.1, label='110 MHz' )   
	line2 = ax1.plot( 20*np.log10(ac[0:-1, 80])  - 20*np.log10(mac[80])  + 3 * 0.1, label='130 MHz' ) 
	line3 = ax1.plot( 20*np.log10(ac[0:-1, 100]) - 20*np.log10(mac[100]) + 2 * 0.1, label='150 MHz' )
	line4 = ax1.plot( 20*np.log10(ac[0:-1, 120]) - 20*np.log10(mac[120]) + 1 * 0.1, label='170 MHz' )
	line5 = ax1.plot( 20*np.log10(ac[0:-1, 140]) - 20*np.log10(mac[140]) + 0 * 0.1, label='190 MHz' )

	ladded = line1+line2+line3+line4+line5
	lab = [k.get_label() for k in ladded]
	ax1.legend(ladded, lab, bbox_to_anchor=(1, 1.2), ncol=5)

	ax1.set_ylim([-0.05, 0.45])
	ax1.set_yticks([-0.05, 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45])
	ax1.set_yticklabels(['','','','','','','','','','',''])
	ax1.grid()
	ax1.set_ylabel('corrected antenna [dB]')
	ax1.set_xticklabels('')


	ax2 = f1.add_subplot(4,1,3)
	dy = 0.5
	line1 = ax2.plot( 20*np.log10(o[0:-1, 60])  - 20*np.log10(mo[60])  + 4 * dy, label='110 MHz' )   
	line2 = ax2.plot( 20*np.log10(o[0:-1, 80])  - 20*np.log10(mo[80])  + 3 * dy, label='130 MHz' ) 
	line3 = ax2.plot( 20*np.log10(o[0:-1, 100]) - 20*np.log10(mo[100]) + 2 * dy, label='150 MHz' )
	line4 = ax2.plot( 20*np.log10(o[0:-1, 120]) - 20*np.log10(mo[120]) + 1 * dy, label='170 MHz' )
	line5 = ax2.plot( 20*np.log10(o[0:-1, 140]) - 20*np.log10(mo[140]) + 0 * dy, label='190 MHz' )


	ax2.set_ylim([-0.25, 2.25])
	ax2.set_yticks([-0.25, 0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25])
	ax2.set_yticklabels(['','','','','','','','','','',''])
	ax2.grid()
	ax2.set_ylabel('raw open [dB]')
	ax2.set_xticklabels('')


	ax3 = f1.add_subplot(4,1,4)
	dy = 0.03
	line1 = ax3.plot( do[0:-1, 60]  - mdo[60]  + 4 * dy, label='110 MHz' )   
	line2 = ax3.plot( do[0:-1, 80]  - mdo[80]  + 3 * dy, label='130 MHz' ) 
	line3 = ax3.plot( do[0:-1, 100] - mdo[100] + 2 * dy, label='150 MHz' )
	line4 = ax3.plot( do[0:-1, 120] - mdo[120] + 1 * dy, label='170 MHz' )
	line5 = ax3.plot( do[0:-1, 140] - mdo[140] + 0 * dy, label='190 MHz' )


	ax3.set_ylim([-0.015, 0.135])
	#ax3.set_yticks([-0.0001, -0.0001, 0, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008])
	ax3.set_yticklabels([''])
	ax3.grid()
	ax3.set_ylabel('derivative raw open [dB]')	
	ax3.set_xlabel('trace number')



	# saving plot
	plt.savefig(plot_path + 'fourpoint_open.png', bbox_inches='tight')
	plt.close()	







	# figure 2	

	plt.close()
	f1 = plt.figure(num=1, figsize=(18, 12))


	ax1 = f1.add_subplot(4,1,1)
	line1 = ax1.plot(aux[:,7])
	ax1.set_ylabel('ambient temperature [degC]')
	ax1.grid()
	ax1.set_xticklabels('')


	ax1 = f1.add_subplot(4,1,2)
	line1 = ax1.plot( 20*np.log10(ac[0:-1, 60])  - 20*np.log10(mac[60])  + 4 * 0.1, label='110 MHz' )   
	line2 = ax1.plot( 20*np.log10(ac[0:-1, 80])  - 20*np.log10(mac[80])  + 3 * 0.1, label='130 MHz' ) 
	line3 = ax1.plot( 20*np.log10(ac[0:-1, 100]) - 20*np.log10(mac[100]) + 2 * 0.1, label='150 MHz' )
	line4 = ax1.plot( 20*np.log10(ac[0:-1, 120]) - 20*np.log10(mac[120]) + 1 * 0.1, label='170 MHz' )
	line5 = ax1.plot( 20*np.log10(ac[0:-1, 140]) - 20*np.log10(mac[140]) + 0 * 0.1, label='190 MHz' )

	ladded = line1+line2+line3+line4+line5
	lab = [k.get_label() for k in ladded]
	ax1.legend(ladded, lab, bbox_to_anchor=(1, 1.2), ncol=5)

	ax1.set_ylim([-0.05, 0.45])
	ax1.set_yticks([-0.05, 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45])
	ax1.set_yticklabels(['','','','','','','','','','',''])
	ax1.grid()
	ax1.set_ylabel('corrected antenna [dB]')
	ax1.set_xticklabels('')


	ax2 = f1.add_subplot(4,1,3)
	dy = 0.5
	line1 = ax2.plot( 20*np.log10(s[0:-1, 60])  - 20*np.log10(ms[60])  + 4 * dy, label='110 MHz' )   
	line2 = ax2.plot( 20*np.log10(s[0:-1, 80])  - 20*np.log10(ms[80])  + 3 * dy, label='130 MHz' ) 
	line3 = ax2.plot( 20*np.log10(s[0:-1, 100]) - 20*np.log10(ms[100]) + 2 * dy, label='150 MHz' )
	line4 = ax2.plot( 20*np.log10(s[0:-1, 120]) - 20*np.log10(ms[120]) + 1 * dy, label='170 MHz' )
	line5 = ax2.plot( 20*np.log10(s[0:-1, 140]) - 20*np.log10(ms[140]) + 0 * dy, label='190 MHz' )


	ax2.set_ylim([-0.25, 2.25])
	ax2.set_yticks([-0.25, 0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25])
	ax2.set_yticklabels(['','','','','','','','','','',''])
	ax2.grid()
	ax2.set_ylabel('raw short [dB]')
	ax2.set_xticklabels('')


	ax3 = f1.add_subplot(4,1,4)
	dy = 0.03
	line1 = ax3.plot( ds[0:-1, 60]  - mds[60]  + 4 * dy, label='110 MHz' )   
	line2 = ax3.plot( ds[0:-1, 80]  - mds[80]  + 3 * dy, label='130 MHz' ) 
	line3 = ax3.plot( ds[0:-1, 100] - mds[100] + 2 * dy, label='150 MHz' )
	line4 = ax3.plot( ds[0:-1, 120] - mds[120] + 1 * dy, label='170 MHz' )
	line5 = ax3.plot( ds[0:-1, 140] - mds[140] + 0 * dy, label='190 MHz' )


	ax3.set_ylim([-0.015, 0.135])
	#ax3.set_yticks([-0.0001, -0.0001, 0, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008])
	ax3.set_yticklabels([''])
	ax3.grid()
	ax3.set_ylabel('derivative raw short [dB]')	
	ax3.set_xlabel('trace number')



	# saving plot
	plt.savefig(plot_path + 'fourpoint_short.png', bbox_inches='tight')
	plt.close()	









	# figure 3	

	plt.close()
	f1 = plt.figure(num=1, figsize=(18, 12))


	ax1 = f1.add_subplot(4,1,1)
	line1 = ax1.plot(aux[:,7])
	ax1.set_ylabel('ambient temperature [degC]')
	ax1.grid()
	ax1.set_xticklabels('')


	ax1 = f1.add_subplot(4,1,2)
	line1 = ax1.plot( 20*np.log10(ac[0:-1, 60])  - 20*np.log10(mac[60])  + 4 * 0.1, label='110 MHz' )   
	line2 = ax1.plot( 20*np.log10(ac[0:-1, 80])  - 20*np.log10(mac[80])  + 3 * 0.1, label='130 MHz' ) 
	line3 = ax1.plot( 20*np.log10(ac[0:-1, 100]) - 20*np.log10(mac[100]) + 2 * 0.1, label='150 MHz' )
	line4 = ax1.plot( 20*np.log10(ac[0:-1, 120]) - 20*np.log10(mac[120]) + 1 * 0.1, label='170 MHz' )
	line5 = ax1.plot( 20*np.log10(ac[0:-1, 140]) - 20*np.log10(mac[140]) + 0 * 0.1, label='190 MHz' )

	ladded = line1+line2+line3+line4+line5
	lab = [k.get_label() for k in ladded]
	ax1.legend(ladded, lab, bbox_to_anchor=(1, 1.2), ncol=5)

	ax1.set_ylim([-0.05, 0.45])
	ax1.set_yticks([-0.05, 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45])
	ax1.set_yticklabels(['','','','','','','','','','',''])
	ax1.grid()
	ax1.set_ylabel('corrected antenna [dB]')
	ax1.set_xticklabels('')


	ax2 = f1.add_subplot(4,1,3)
	dy = 4
	line1 = ax2.plot( 20*np.log10(l[0:-1, 60])  - 20*np.log10(ml[60])  + 4 * dy, label='110 MHz' )   
	line2 = ax2.plot( 20*np.log10(l[0:-1, 80])  - 20*np.log10(ml[80])  + 3 * dy, label='130 MHz' ) 
	line3 = ax2.plot( 20*np.log10(l[0:-1, 100]) - 20*np.log10(ml[100]) + 2 * dy, label='150 MHz' )
	line4 = ax2.plot( 20*np.log10(l[0:-1, 120]) - 20*np.log10(ml[120]) + 1 * dy, label='170 MHz' )
	line5 = ax2.plot( 20*np.log10(l[0:-1, 140]) - 20*np.log10(ml[140]) + 0 * dy, label='190 MHz' )


	ax2.set_ylim([-2, 18])
	#ax2.set_yticks([-0.25, 0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25])
	ax2.set_yticklabels(['','','','','','','','','','',''])
	ax2.grid()
	ax2.set_ylabel('raw match [dB]')
	ax2.set_xticklabels('')


	ax3 = f1.add_subplot(4,1,4)
	dy = 0.1
	line1 = ax3.plot( dl[0:-1, 60]  - mdl[60]  + 4 * dy, label='110 MHz' )   
	line2 = ax3.plot( dl[0:-1, 80]  - mdl[80]  + 3 * dy, label='130 MHz' ) 
	line3 = ax3.plot( dl[0:-1, 100] - mdl[100] + 2 * dy, label='150 MHz' )
	line4 = ax3.plot( dl[0:-1, 120] - mdl[120] + 1 * dy, label='170 MHz' )
	line5 = ax3.plot( dl[0:-1, 140] - mdl[140] + 0 * dy, label='190 MHz' )


	ax3.set_ylim([-0.05, 0.45])
	#ax3.set_yticks([-0.0001, -0.0001, 0, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008])
	ax3.set_yticklabels([''])
	ax3.grid()
	ax3.set_ylabel('derivative raw match [dB]')	
	ax3.set_xlabel('trace number')



	# saving plot
	plt.savefig(plot_path + 'fourpoint_match.png', bbox_inches='tight')
	plt.close()	







	# figure 4	

	plt.close()
	f1 = plt.figure(num=1, figsize=(18, 12))


	ax1 = f1.add_subplot(4,1,1)
	line1 = ax1.plot(aux[:,7])
	ax1.set_ylabel('ambient temperature [degC]')
	ax1.grid()
	ax1.set_xticklabels('')


	ax1 = f1.add_subplot(4,1,2)
	line1 = ax1.plot( 20*np.log10(ac[0:-1, 60])  - 20*np.log10(mac[60])  + 4 * 0.1, label='110 MHz' )   
	line2 = ax1.plot( 20*np.log10(ac[0:-1, 80])  - 20*np.log10(mac[80])  + 3 * 0.1, label='130 MHz' ) 
	line3 = ax1.plot( 20*np.log10(ac[0:-1, 100]) - 20*np.log10(mac[100]) + 2 * 0.1, label='150 MHz' )
	line4 = ax1.plot( 20*np.log10(ac[0:-1, 120]) - 20*np.log10(mac[120]) + 1 * 0.1, label='170 MHz' )
	line5 = ax1.plot( 20*np.log10(ac[0:-1, 140]) - 20*np.log10(mac[140]) + 0 * 0.1, label='190 MHz' )

	ladded = line1+line2+line3+line4+line5
	lab = [k.get_label() for k in ladded]
	ax1.legend(ladded, lab, bbox_to_anchor=(1, 1.2), ncol=5)

	ax1.set_ylim([-0.05, 0.45])
	ax1.set_yticks([-0.05, 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45])
	ax1.set_yticklabels(['','','','','','','','','','',''])
	ax1.grid()
	ax1.set_ylabel('corrected antenna [dB]')
	ax1.set_xticklabels('')


	ax2 = f1.add_subplot(4,1,3)
	dy = 2
	line1 = ax2.plot( 20*np.log10(a[0:-1, 60])  - 20*np.log10(ma[60])  + 4 * dy, label='110 MHz' )   
	line2 = ax2.plot( 20*np.log10(a[0:-1, 80])  - 20*np.log10(ma[80])  + 3 * dy, label='130 MHz' ) 
	line3 = ax2.plot( 20*np.log10(a[0:-1, 100]) - 20*np.log10(ma[100]) + 2 * dy, label='150 MHz' )
	line4 = ax2.plot( 20*np.log10(a[0:-1, 120]) - 20*np.log10(ma[120]) + 1 * dy, label='170 MHz' )
	line5 = ax2.plot( 20*np.log10(a[0:-1, 140]) - 20*np.log10(ma[140]) + 0 * dy, label='190 MHz' )


	#ax2.set_ylim([-1, 9])
	#ax2.set_yticks([-0.25, 0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25])
	ax2.set_yticklabels(['','','','','','','','','','',''])
	ax2.grid()
	ax2.set_ylabel('raw antenna [dB]')
	ax2.set_xticklabels('')


	ax3 = f1.add_subplot(4,1,4)
	dy = 0.1
	line1 = ax3.plot( da[0:-1, 60]  - mda[60]  + 4 * dy, label='110 MHz' )   
	line2 = ax3.plot( da[0:-1, 80]  - mda[80]  + 3 * dy, label='130 MHz' ) 
	line3 = ax3.plot( da[0:-1, 100] - mda[100] + 2 * dy, label='150 MHz' )
	line4 = ax3.plot( da[0:-1, 120] - mda[120] + 1 * dy, label='170 MHz' )
	line5 = ax3.plot( da[0:-1, 140] - mda[140] + 0 * dy, label='190 MHz' )


	ax3.set_ylim([-0.05, 0.45])
	#ax3.set_yticks([-0.0001, 0, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008])
	ax3.set_yticklabels([''])
	ax3.grid()
	ax3.set_ylabel('derivative raw antenna [dB]')	
	ax3.set_xlabel('trace number')



	# saving plot
	plt.savefig(plot_path + 'fourpoint_antenna.png', bbox_inches='tight')
	plt.close()		


	return o, do, s, l, a, ac, aux






def spectral_fit(version, year, day, plot_ylim_K=10):

	# Path
	path_root       = '/media/WORK'
	path_data       = path_root + '/EDGES/data/level2/high_band/' + version + '/'
	path_plot_save  = path_root + '/EDGES/analysis/20151007_first_order_fit/'



	# Loading data
	d = np.genfromtxt(path_data +  year + '_' + day + '_LST_data_' + version + '.txt')


	# Selecting data above 110 MHz
	start_index = 3280 # approx 110 MHz


	# Obtain frequency from array
	v  = d[start_index:-1, 0]
	v0 = 150



	for l in [2,3,4,5,6]:

		# Print iteration
		print('Plot: ' + str(l) + ' terms')

		# Initialize figure
		size_x = 14
		size_y = 10
		f1 = plt.figure(1, figsize=(size_x, size_y))


		# number of fit terms
		nterms = l

		# For 24 LST times
		for j in range(24):

			# Only 1 spectrum per hour
			i = 3*j  # first 20 minutes

			# Temperature spectrum at each LST time
			T = d[start_index:-1, i+1]


			# Remove zeros
			TT = np.zeros(0)
			vv = np.zeros(0)

			for k in range(len(T)):
				if (T[k] > 0) or (T[k] < 0):
					TT = np.append(TT, T[k])
					vv = np.append(vv, v[k])


			# Mode and terms
			if (len(TT)>100) and (len(vv)>100):

				model_type = 'log'
				if model_type == 'log':		
					logT      = np.log(TT)
					logv      = np.log(vv/v0)

					fit       = eg.fit_polynomial_fourier('polynomial', logv, logT, nterms, plot='no')
					model_log = fit[1]
					model     = np.exp(model_log)


				if model_type == 'polynomial':		
					fit    = eg.fit_polynomial_fourier('polynomial', vv, TT, nterms, plot='no')
					model  = fit[1]

			if (len(TT)<100) and (len(vv)<100):

				model = 1000*np.ones(len(TT))


			# Plots
			if (j<12):
				ax = f1.add_subplot(12, 2, 2*j+1)
				ax.plot(vv,TT - model)
				plt.ylim([-plot_ylim_K, plot_ylim_K])
				ax.set_yticklabels('')
				ax.set_yticks([])
				plt.ylabel(str(int(j)))
				plt.xlim([110,190])
				ax.set_xticks(np.arange(110,200,10))

			if (j>=12) and (j<24):
				ax = f1.add_subplot(12, 2, 2*(j-11))
				ax.plot(vv,TT - model)			
				plt.ylim([-plot_ylim_K, plot_ylim_K])
				ax.set_yticklabels('')
				ax.set_yticks([])
				plt.ylabel(str(int(j)))
				plt.xlim([110,190])
				ax.set_xticks(np.arange(110,200,10))

			if (j != 11) and (j != 23):
				ax.set_xticklabels('')
			if (j==11) or (j==23):
				plt.xlabel('frequency [MHz]')


		plt.suptitle('Nterms: ' + str(nterms) + ',   Date: ' + year + '-' + day + '-' + version + ',   Scale: ' + str(2*plot_ylim_K) + ' K/Div', y=0.94, fontsize=16)
		plt.savefig(path_plot_save + version + '_' + 'nterms_' + str(nterms) + '_' + year + '_' + day + '.png', bbox_inches='tight')
		plt.close()		

	return 1










def RMS_results_MC_high_band():

	# Analysis of residuals for the uncertainty propagation of High-Band receiver.

	# 95% out of 5000
	NN = 4750


	# Ambient Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/tamb/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')	
	print('Amb Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Ambient Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/tamb/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Amb Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Ambient Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/tamb/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Amb Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	












	# Hot Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/thot/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Hot Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Hot Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/thot/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Hot Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Hot Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/thot/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Hot Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))







	# Open Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/topen/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))

	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))
	print('-------------------------------------------------------------------------------------------')
	print('Open Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	



	# Open Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/topen/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Open Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))



	# Open Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/topen/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Open Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	






	# Shorted Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/tshorted/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Shorted Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Shorted Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/tshorted/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Shorted Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Shorted Temperature
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/tshorted/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Shorted Temp: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))















	# Ambient Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/spec_amb/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Ambient Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Ambient Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/spec_amb/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Ambient Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Ambient Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/spec_amb/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Ambient Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	





	# Hot Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/spec_hot/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Hot Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Hot Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/spec_hot/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Hot Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))



	# Hot Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/spec_hot/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Hot Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))





	# Open Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/spec_open/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Open Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Open Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/spec_open/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Open Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Open Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/spec_open/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Open Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))




	# Shorted Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/spec_shorted/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Shorted Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Shorted Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/spec_shorted/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Shorted Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Shorted Spectrum
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/spec_shorted/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Shorted Spectrum: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))
























	# Ambient S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_amb_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Ambient S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Ambient S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_amb_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Ambient S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Ambient S11 Mag
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/loud_sky_polynomials_edges/s11_amb_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Ambient S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))











	# Ambient S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_amb_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Ambient S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Ambient S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_amb_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Ambient S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Ambient S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_amb_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Ambient S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))






















	# Hot S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_hot_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Hot S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Hot S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_hot_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Hot S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Hot S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_hot_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Hot S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))











	# Hot S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_hot_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Hot S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Hot S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_hot_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Hot S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Hot S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_hot_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Hot S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))













	# Open S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_open_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Open S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))



	# Open S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_open_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Open S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))



	# Open S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_open_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Open S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))






	# Open S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_open_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Open S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))



	# Open S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_open_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Open S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))



	# Open S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_open_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Open S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))
















	# Shorted S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_shorted_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Shorted S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Shorted S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_shorted_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Shorted S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Shorted S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_shorted_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Shorted S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))







	# Shorted S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_shorted_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('Shorted S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Shorted S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_shorted_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Shorted S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# Shorted S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_shorted_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Shorted S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))




















	# LNA S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_LNA_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('LNA S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))



	# LNA S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_LNA_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('LNA S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))



	# LNA S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_LNA_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('LNA S11 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))	








	# LNA S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_LNA_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('LNA S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# LNA S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_LNA_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('LNA S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# LNA S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_LNA_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('LNA S11 Ang: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))









	# SR S12S21 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s12s21_sr_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('-------------------------------------------------------------------------------------------')
	print('SR S12S21 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# SR S12S21 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s12s21_sr_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('SR S12S21 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))


	# SR S12S21 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s12s21_sr_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('SR S12S21 Mag: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))















	# Antenna S11 Mag
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_antenna_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Mag TRAD poly QUIET: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))






	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_antenna_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Mag EDGES poly QUIET: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))





	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_antenna_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Mag EDGES poly LOUD: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))













	# Antenna S11 Ang
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_traditional/s11_antenna_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Ang TRAD poly QUIET: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))





	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/polynomials_edges/s11_antenna_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Ang EDGES poly QUIET: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))





	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/loud_sky_polynomials_edges/s11_antenna_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Ang EDGES poly LOUD: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))





































	# -------------------------------------------------------------------
	# All Effects -------------------------------------------------------
	# -------------------------------------------------------------------


	# All effects: Poly Trad, Quiet Sky, Uncorrelated
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_01/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_02/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_03/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_04/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_05/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_06/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)	


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_07/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_08/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)	


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_09/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)	


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_10/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)	


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_11/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)	


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_12/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)	


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_13/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)



	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_14/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)



	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_15/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_16/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_17/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_18/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_19/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_poly_quiet_sky_uncorr_REP_20/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)




	NN = int(0.95*len(D[0,:]))
	print(NN)
	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('All effects: Poly Trad, Quiet Sky, Uncorrelated: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))





















	# All effects: Poly EDGES, Quiet Sky, Uncorrelated
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_01/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_02/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_03/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_04/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)	


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_05/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_06/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_07/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_08/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_09/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_10/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)	


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_11/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_12/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_13/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_14/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_15/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_16/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_17/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_18/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_19/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_quiet_sky_uncorr_REP_20/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)		



	NN = int(0.95*len(D[0,:]))
	print(NN)
	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('All effects: Poly EDGES, Quiet Sky, Uncorrelated: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))











	# All effects: Poly EDGES, Loud Sky, Uncorrelated
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_01/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_02/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_03/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_04/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_05/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_06/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_07/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_08/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_09/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_10/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_11/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_12/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_13/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_14/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_15/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_16/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_17/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_18/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_19/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/all_effects/all_edges_poly_loud_sky_uncorr_REP_20/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)	



	NN = int(0.95*len(D[0,:]))
	print(NN)
	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('All effects: Poly EDGES, Loud Sky, Uncorrelated: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))
























	# All effects: Poly Trad, Quiet Sky, Correlated
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_poly_quiet_sky_corr_REP_01/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_poly_quiet_sky_corr_REP_02/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_poly_quiet_sky_corr_REP_03/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_poly_quiet_sky_corr_REP_04/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)



	NN = int(0.95*len(D[0,:]))
	print(NN)
	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('All effects: Poly Trad, Quiet Sky, Correlated: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))















	# All effects: Poly EDGES, Quiet Sky, Correlated
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_edges_poly_quiet_sky_corr_REP_01/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_edges_poly_quiet_sky_corr_REP_02/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_edges_poly_quiet_sky_corr_REP_03/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_edges_poly_quiet_sky_corr_REP_04/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)



	NN = int(0.95*len(D[0,:]))
	print(NN)
	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('All effects: Poly EDGES, Quiet Sky, Correlated: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))











	# All effects: Poly EDGES, Loud Sky, Correlated
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_edges_poly_loud_sky_corr_REP_01/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_edges_poly_loud_sky_corr_REP_02/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_edges_poly_loud_sky_corr_REP_03/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)


	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/all_effects/all_edges_poly_loud_sky_corr_REP_04/'

	DD  = np.genfromtxt(path + 'DTant.txt')
	DD1 = np.genfromtxt(path + 'DTant_1term.txt')
	DD2 = np.genfromtxt(path + 'DTant_2term.txt')
	DD3 = np.genfromtxt(path + 'DTant_3term.txt')
	DD4 = np.genfromtxt(path + 'DTant_4term.txt')
	DD5 = np.genfromtxt(path + 'DTant_5term.txt')
	DD6 = np.genfromtxt(path + 'DTant_6term.txt')
	DD7 = np.genfromtxt(path + 'DTant_7term.txt')

	D  = np.append(D,  DD,  axis=1)
	D1 = np.append(D1, DD1, axis=1)
	D2 = np.append(D2, DD2, axis=1)
	D3 = np.append(D3, DD3, axis=1)
	D4 = np.append(D4, DD4, axis=1)
	D5 = np.append(D5, DD5, axis=1)
	D6 = np.append(D6, DD6, axis=1)
	D7 = np.append(D7, DD7, axis=1)



	NN = int(0.95*len(D[0,:]))
	print(NN)
	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('All effects: Poly EDGES, Loud Sky, Correlated: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))

























	# ------------------------------------------------
	# TESTS ------------------------------------------
	# ------------------------------------------------


	# Antenna S11 Mag, with LNA Mag -30 dB, 
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/tests/LNA_mag_minus30dB_s11_antenna_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Mag, with LNA -30dB, EDGES poly QUIET: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))




	# Antenna S11 Mag, with Antenna Mag -20 dB, 
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/tests/antenna_mag_minus20dB_s11_antenna_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Mag, with Antenna -20dB, EDGES poly QUIET: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))




	# Antenna S11 Mag, with Good Antenna Phase, 
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/tests/antenna_good_phase_s11_antenna_mag/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Mag, with Good Antenna Phase, EDGES poly QUIET: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))
































	# Antenna S11 Ang, with LNA mag -30 dB, 
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/tests/LNA_mag_minus30dB_s11_antenna_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Ang, with LNA -30dB, EDGES poly QUIET: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))





	# Antenna S11 Ang, with Antenna Mag -20 dB, 
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/tests/antenna_mag_minus20dB_s11_antenna_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Ang, with Antenna -20dB, EDGES poly QUIET: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))






	# Antenna S11 Ang, with Good Antenna Phase, 
	path = '/media/WORK/EDGES/analysis/high_band_uncertainty_propagation/data/tests/antenna_good_phase_s11_antenna_ang/'

	f  = np.genfromtxt(path + 'freq.txt')	
	D  = np.genfromtxt(path + 'DTant.txt')
	D1 = np.genfromtxt(path + 'DTant_1term.txt')
	D2 = np.genfromtxt(path + 'DTant_2term.txt')
	D3 = np.genfromtxt(path + 'DTant_3term.txt')
	D4 = np.genfromtxt(path + 'DTant_4term.txt')
	D5 = np.genfromtxt(path + 'DTant_5term.txt')
	D6 = np.genfromtxt(path + 'DTant_6term.txt')
	D7 = np.genfromtxt(path + 'DTant_7term.txt')


	RMS  = int(round(1000 * np.sort(np.sqrt(np.sum(D**2,  axis=0)/len(f)))[NN]))
	RMS1 = int(round(1000 * np.sort(np.sqrt(np.sum(D1**2, axis=0)/len(f)))[NN]))
	RMS2 = int(round(1000 * np.sort(np.sqrt(np.sum(D2**2, axis=0)/len(f)))[NN]))
	RMS3 = int(round(1000 * np.sort(np.sqrt(np.sum(D3**2, axis=0)/len(f)))[NN]))
	RMS4 = int(round(1000 * np.sort(np.sqrt(np.sum(D4**2, axis=0)/len(f)))[NN]))
	RMS5 = int(round(1000 * np.sort(np.sqrt(np.sum(D5**2, axis=0)/len(f)))[NN]))
	RMS6 = int(round(1000 * np.sort(np.sqrt(np.sum(D6**2, axis=0)/len(f)))[NN]))
	RMS7 = int(round(1000 * np.sort(np.sqrt(np.sum(D7**2, axis=0)/len(f)))[NN]))

	print('Antenna S11 Ang, with Good Antenna Phase, EDGES poly QUIET: ' + str(RMS) + ' ' + str(RMS1) + ' ' + str(RMS2) + ' ' + str(RMS3) + ' ' + str(RMS4) + ' ' + str(RMS5) + ' ' + str(RMS6) + ' ' + str(RMS7))





	return 1











def spectral_analysis_high_band_selection(LST_index):

	# f, ta, m, s, w = eg.level3read(home_folder + '/DATA/EDGES/spectra/level3/high_band/high_band_v1.hdf5')
	# index = 12
	# av_ta, av_w    = eg.spectral_averaging(ta[index,:,:], w[index,:,:])
	# fig            = plt.figure(0); av_ta, av_w =  eg.spectral_averaging(ta[index,:,:], w[index,:,:]); im = plt.imshow(ta[index,:,:] - av_ta, interpolation='none', aspect='auto'); im.set_clim([-5, 5]);plt.colorbar()


	if LST_index == 0:
		set1 = np.arange(0, 33, 1)
		set1 = np.append(set1, np.array([34, 35, 36, 37]))
		set1 = np.append(set1, np.arange(38, 78, 1))
		set1 = np.append(set1, np.arange(79, 91, 1))
		set1 = np.append(set1, np.array([93, 94, 95, 96, 97, 99, 100, 101]))

	if LST_index == 1:
		set1 = np.arange(0, 33, 1)
		set1 = np.append(set1, np.array([34, 35, 36, 37]))
		set1 = np.append(set1, np.arange(38, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90]))
		set1 = np.append(set1, np.array([93, 94, 95, 96, 97, 99, 100, 101]))

	if LST_index == 2:
		set1 = np.arange(0, 38, 1)
		set1 = np.append(set1, np.arange(38, 65, 1))
		set1 = np.append(set1, np.array([66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90]))
		set1 = np.append(set1, np.array([93, 94, 95, 96, 97, 99, 100, 101]))

	if LST_index == 3:
		set1 = np.arange(0, 33, 1)
		set1 = np.append(set1, np.array([34, 35, 36, 37]))
		set1 = np.append(set1, np.arange(38, 65, 1))
		set1 = np.append(set1, np.array([66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90]))
		set1 = np.append(set1, np.array([93, 94, 95, 96, 97, 98, 99, 100, 101]))

	if LST_index == 4:
		set1 = np.array([0,1,2,3])
		set1 = np.append(set1, np.arange(6, 33, 1))
		set1 = np.append(set1, np.arange(34, 65, 1))
		set1 = np.append(set1, np.arange(66, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 99, 100, 101]))

	if LST_index == 5:
		set1 = np.array([0,1,2,3])
		set1 = np.append(set1, np.arange(6, 33, 1))
		set1 = np.append(set1, np.arange(34, 65, 1))
		set1 = np.append(set1, np.arange(66, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 93, 94, 95, 96, 97, 99, 100, 101]))

	if LST_index == 6:
		set1 = np.array([0,1,2,3])
		set1 = np.append(set1, np.arange(7, 33, 1))
		set1 = np.append(set1, np.arange(34, 65, 1))
		set1 = np.append(set1, np.array([66, 67, 68]))
		set1 = np.append(set1, np.arange(70, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 89, 90, 93, 94, 95, 96, 97, 99, 100, 101]))
		set1 = np.append(set1, np.arange(103, 110, 1))
		set1 = np.append(set1, np.arange(113, 117, 1))
		set1 = np.append(set1, np.arange(118, 124, 1))
		set1 = np.append(set1, np.arange(126, 161, 1))
		set1 = np.append(set1, np.array([162, 163, 165, 166]))
		set1 = np.append(set1, np.arange(169, 179, 1))


	if LST_index == 7:
		set1 = np.array([0,1,2,3])
		set1 = np.append(set1, np.arange(7, 33, 1))
		set1 = np.append(set1, np.arange(34, 64, 1))
		set1 = np.append(set1, np.array([65, 66, 67, 68]))
		set1 = np.append(set1, np.arange(70, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 93, 94, 95, 96, 97, 99, 100, 101]))
		set1 = np.append(set1, np.arange(103, 117, 1))
		set1 = np.append(set1, np.arange(118, 124, 1))
		set1 = np.append(set1, np.arange(126, 161, 1))
		set1 = np.append(set1, np.array([162, 165, 166, 170, 171, 172, 174, 175, 176, 178]))


	if LST_index == 8:
		set1 = np.array([0,1,2,3])
		set1 = np.append(set1, np.arange(7, 33, 1))
		set1 = np.append(set1, np.arange(34, 64, 1))
		set1 = np.append(set1, np.arange(65, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 93, 94, 95, 96, 97, 99, 100, 101]))
		set1 = np.append(set1, np.array([103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123]))
		set1 = np.append(set1, np.arange(126,161, 1))
		set1 = np.append(set1, np.array([162, 163, 165, 166]))
		set1 = np.append(set1, np.arange(169, 179, 1))




	if LST_index == 9:
		set1 = np.array([0,1,2,3])
		set1 = np.append(set1, np.arange(7, 33, 1))
		set1 = np.append(set1, np.arange(34, 60, 1))
		set1 = np.append(set1, np.array([61, 62, 63]))
		set1 = np.append(set1, np.array([65, 66, 67, 68]))
		set1 = np.append(set1, np.arange(70, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101]))
		set1 = np.append(set1, np.arange(103, 117, 1))
		set1 = np.append(set1, np.array([118, 119, 121, 122, 123]))
		set1 = np.append(set1, np.arange(126, 148, 1))
		set1 = np.append(set1, np.arange(126, 148, 1))
		set1 = np.append(set1, np.array([149, 150, 151]))
		set1 = np.append(set1, np.arange(153, 161, 1))
		set1 = np.append(set1, np.array([162, 163, 165]))
		set1 = np.append(set1, np.arange(170, 179, 1))

	if LST_index == 10:
		set1 = np.arange(0, 33, 1)
		set1 = np.append(set1, np.arange(34, 60, 1))
		set1 = np.append(set1, np.array([61, 62, 63]))
		set1 = np.append(set1, np.arange(65, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101]))
		set1 = np.append(set1, np.arange(102, 113))
		set1 = np.append(set1, np.array([114, 115, 116, 118, 119, 122]))
		set1 = np.append(set1, np.arange(128, 154))
		set1 = np.append(set1, np.array([156, 159, 160, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 178]))



	if LST_index == 11:
		set1 = np.arange(0, 33, 1)
		set1 = np.append(set1, np.arange(39, 60, 1))
		set1 = np.append(set1, np.array([61, 62, 63]))
		set1 = np.append(set1, np.arange(65, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101]))
		set1 = np.append(set1, np.arange(102, 117, 1))
		set1 = np.append(set1, np.array([118, 119, 120, 121, 122]))
		set1 = np.append(set1, np.arange(127, 154, 1))
		set1 = np.append(set1, np.arange(155, 161, 1))
		set1 = np.append(set1, np.array([162, 163, 165]))
		set1 = np.append(set1, np.arange(170, 179, 1))




	if LST_index == 12:
		set1 = np.arange(0, 29, 1)
		set1 = np.append(set1, np.array([30, 31, 32]))
		set1 = np.append(set1, np.arange(34, 60, 1))
		set1 = np.append(set1, np.array([61, 62, 63]))
		set1 = np.append(set1, np.arange(65, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101]))
		set1 = np.append(set1, np.arange(103, 112, 1))
		set1 = np.append(set1, np.arange(113, 124, 1))
		set1 = np.append(set1, np.arange(126, 161, 1))
		set1 = np.append(set1, np.arange(162, 167, 1))
		set1 = np.append(set1, np.arange(169, 179, 1))



	if LST_index == 13:
		set1 = np.arange(0, 10, 1)
		set1 = np.append(set1, np.arange(15, 33, 1))
		set1 = np.append(set1, np.arange(34, 40, 1))
		set1 = np.append(set1, np.arange(42, 60, 1))
		set1 = np.append(set1, np.arange(61, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101]))
		set1 = np.append(set1, np.arange(103, 124, 1))
		set1 = np.append(set1, np.arange(126, 133, 1))
		set1 = np.append(set1, np.arange(134, 152, 1))
		set1 = np.append(set1, np.arange(153, 161, 1))
		set1 = np.append(set1, np.array([162, 163, 165, 166]))
		set1 = np.append(set1, np.arange(169, 179, 1))


	if LST_index == 14:
		set1 = np.arange(0, 10, 1)
		set1 = np.append(set1, np.arange(15, 31, 1))
		set1 = np.append(set1, np.arange(34, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101]))

	if LST_index == 15:
		set1 = np.arange(0, 10, 1)
		set1 = np.append(set1, np.arange(18, 31, 1))
		set1 = np.append(set1, np.arange(35, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101]))

	if LST_index == 16:
		set1 = np.arange(0, 10, 1)
		set1 = np.append(set1, np.arange(18, 31, 1))
		set1 = np.append(set1, np.arange(35, 60, 1))
		set1 = np.append(set1, np.arange(61, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101]))

	if LST_index == 17:
		set1 = np.arange(0, 10, 1)
		set1 = np.append(set1, np.arange(18, 29, 1))
		set1 = np.append(set1, np.arange(35, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101]))

	if LST_index == 18:
		set1 = np.arange(0, 10, 1)
		set1 = np.append(set1, np.arange(18, 29, 1))
		set1 = np.append(set1, np.arange(35, 60, 1))
		set1 = np.append(set1, np.arange(61, 78, 1))
		set1 = np.append(set1, np.arange(79, 89, 1))
		set1 = np.append(set1, np.array([93, 94, 95, 96, 97, 98, 99, 100, 101]))

	if LST_index == 19:
		set1 = np.arange(0, 10, 1)
		set1 = np.append(set1, np.arange(20, 31, 1))
		set1 = np.append(set1, np.arange(36, 40, 1))
		set1 = np.append(set1, np.arange(41, 52, 1))
		set1 = np.append(set1, np.arange(53, 60, 1))
		set1 = np.append(set1, np.arange(61, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101]))

	if LST_index == 20:
		set1 = np.arange(0, 10, 1)		
		set1 = np.append(set1, np.arange(20, 28, 1))
		set1 = np.append(set1, np.arange(36, 40, 1))
		set1 = np.append(set1, np.arange(41, 44, 1))
		set1 = np.append(set1, np.arange(46, 52, 1))
		set1 = np.append(set1, np.arange(53, 60, 1))
		set1 = np.append(set1, np.arange(62, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101]))

	if LST_index == 21:
		set1 = np.arange(0, 10, 1)		
		set1 = np.append(set1, np.arange(19, 28, 1))
		set1 = np.append(set1, np.arange(48, 52, 1))
		set1 = np.append(set1, np.arange(53, 60, 1))
		set1 = np.append(set1, np.arange(63, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101]))

	if LST_index == 22:
		set1 = np.arange(0, 10, 1)		
		set1 = np.append(set1, np.arange(19, 28, 1))
		set1 = np.append(set1, np.arange(42, 45, 1))
		set1 = np.append(set1, np.arange(48, 52, 1))
		set1 = np.append(set1, np.arange(63, 66, 1))
		set1 = np.append(set1, np.arange(67, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101]))

	if LST_index == 23:
		set1 = np.arange(0, 10, 1)
		set1 = np.append(set1, np.arange(19, 28, 1))
		set1 = np.append(set1, np.arange(42, 45, 1))
		set1 = np.append(set1, np.arange(50, 53, 1))
		set1 = np.append(set1, np.arange(63, 66, 1))
		set1 = np.append(set1, np.arange(67, 78, 1))
		set1 = np.append(set1, np.array([79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101]))


	return set1















def spectral_analysis_high_band(version, LST_index, fstart=90, fstop=190, weight_raw=0, nterms_raw=5, weight_binned=0.95):

	# Version
	# 'v3', 'v4', etc.

	# LST 6,  0::  (stronger ripples)
	# LST 7,  0::
	# LST 8,  20:140
	# LST 9,  0::
	# LST 10, 50::
	# LST 11, 0::
	# LST 12, 0::
	# LST 13, 40:100

	# Loading data
	path_file = home_folder + '/DATA/EDGES/spectra/level3/high_band/high_band_' + version + '.hdf5'
	f, ta_all, m_all, s_all, w_all = eg.level3read(path_file)




	# Data from LST_index (it can go between 0 and 71)
	if np.isscalar(LST_index):
		ta_LST = ta_all[LST_index,:,:]
		m_LST  = m_all[LST_index,:,:]
		s_LST  = s_all[LST_index,:,:]
		w_LST  = w_all[LST_index,:,:]

		# Selecting good observations at the desired LST
		index_all = spectral_analysis_high_band_selection(LST_index)
		index = index_all[0::]    # for 10 hours, the good index is 65::,   65:: for 9,  48:: for 11
		print(len(index_all))

		ta_unc_array = ta_LST[index,:]
		m_array      = m_LST[index,:]
		s_array      = s_LST[index,:]
		w_array      = w_LST[index,:]		

	else:
		for i in range(len(LST_index)):

			ta_LST = ta_all[LST_index[i],:,:]
			m_LST  = m_all[LST_index[i],:,:]
			s_LST  = s_all[LST_index[i],:,:]
			w_LST  = w_all[LST_index[i],:,:]

			index = spectral_analysis_high_band_selection(LST_index[i])

			if LST_index[i] == 6:
				index2 = np.arange(0,len(index)-10,1)

			elif LST_index[i] == 7:
				index2 = np.arange(0,len(index)-10,1)

			elif LST_index[i] == 8:
				index2 = np.arange(0,len(index)-10,1) #np.arange(20,140,1)

			elif LST_index[i] == 9:
				index2 = np.arange(0,len(index)-8,1)

			elif LST_index[i] == 10:
				index2 = np.arange(50,len(index)-8,1)

			elif LST_index[i] == 11:
				index2 = np.arange(0,len(index)-8,1)

			elif LST_index[i] == 12:
				index2 = np.arange(0,len(index)-8,1)

			elif LST_index[i] == 13:
				index2 = np.arange(40,100,1)			



			if i == 0:

				ta_unc_array = ta_LST[index[index2],:]
				m_array      = m_LST[index[index2],:]
				s_array      = s_LST[index[index2],:]
				w_array      = w_LST[index[index2],:]

			elif i > 0:

				tt = ta_LST[index[index2],:]
				mm = m_LST[index[index2],:]
				ss = s_LST[index[index2],:]
				ww = w_LST[index[index2],:]

				ta_unc_array = np.append(ta_unc_array, tt, axis=0)
				m_array      = np.append(m_array,      mm, axis=0)
				s_array      = np.append(s_array,      ss, axis=0)
				w_array      = np.append(w_array,      ww, axis=0)





	# Calibrating raw good data
	ta_cal_array = eg.data_calibration('high_band', ta_unc_array)

	print(len(ta_unc_array[:,0]))


	##
	#bin_size_MHz = 0.4
	#flag = 0
	#for i in range(50): # len(index)
		#print(i)
		#if np.sum(w_array[i,:]) > 0:
			#W = np.diag(w_array[i,:])
			#pp, mm, rr, cc = eg.fit_polynomial_fourier('EDGES_polynomial', f/200, ta_cal_array[i,:], 4, Weights=W)

			## Spectral binning (400 KHz bins)
			#fb, delta_tab, wb = eg.spectral_binning_fixed_frequency(fstart + bin_size_MHz/2, fstop - bin_size_MHz/2, bin_size_MHz, f, ta_cal_array[i,:] - mm, w_array[i,:])			
			#print(rr)
			#if flag == 0:			
				#DT = delta_tab.reshape(1,-1)				
				#flag = 1

			#elif flag == 1:				
				#DT = np.append(DT, delta_tab.reshape(1,-1), axis=0)




	# Averaging calibrated good data 
	ta, w = eg.spectral_averaging(ta_cal_array, w_array)







	# Finding index of start and stop frequency 
	if fstart > 90:
		for i in range(len(f)-1):
			if (f[i] < fstart) and (f[i+1] >= fstart):
				index_fstart = i+1
	if fstop < 190:
		for i in range(len(f)-1):
			if (f[i] <= fstop) and (f[i+1] > fstop):
				index_fstop = i



	# Frequency range
	if (fstart > 90) and (fstop == 190):
		f_new  = f[index_fstart::]
		ta_new = ta[index_fstart::]
		w_new  = w[index_fstart::]

	elif (fstart == 90) and (fstop < 190):
		f_new  = f[::index_fstop]
		ta_new = ta[::index_fstop]
		w_new  = w[::index_fstop]

	elif (fstart > 90) and (fstop < 190):
		f_new  = f[index_fstart:index_fstop]
		ta_new = ta[index_fstart:index_fstop]
		w_new  = w[index_fstart:index_fstop]

	elif (fstart == 90) and (fstop == 190):
		f_new  = f
		ta_new = ta
		w_new  = w





	# Removing sections with heavy RFI
	fc, tac, wc = eg.RFI_manual_cuts(f_new, ta_new, w_new)



	# Removing zeros
	f_nz, ta_nz, w_nz = eg.spectral_zero_removal(fc, tac, wc, 90, 190, weight=weight_raw) 



	# Fitting model at raw frequency
	W = np.diag(w_nz)
	par_nz, model_nz, rms_nz, cov_nz = eg.fit_polynomial_fourier('EDGES_polynomial', f_nz/200, ta_nz, nterms_raw, Weights=W)



	# Spectral binning (400 KHz bins)
	bin_size_MHz = 0.4
	fb, delta_tab, wb = eg.spectral_binning_fixed_frequency(fstart + bin_size_MHz/2, fstop - bin_size_MHz/2, bin_size_MHz, f_nz, ta_nz-model_nz, w_nz)



	# Removing zeros
	fb_nz, delta_tab_nz, wb_nz = eg.spectral_zero_removal(fb, delta_tab, wb, fstart, fstop, weight=weight_binned)






	# import itertools as it
	# ll = [1,2,3,4]
	# xx = list(it.combinations(ll,2))
	# print(xx)
	# [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
	# (1, 2)



	return fb_nz, delta_tab_nz, wb_nz, f_nz, ta_nz, model_nz, w_nz, ta_cal_array, ta, m_array     #, DT




















def plots_spectral_analysis_high_band(ta_all = 'no', residuals_raw = 'no', residuals_binned = 'no'):




	# Plotting
	plt.close()
	#plt.close()
	#plt.close()
	#plt.close()
	#plt.close()
	#plt.close()
	#plt.close()
	#plt.close()
	#plt.close()



	if ta_all == 'yes':
		LST_index = 10
		fb, tab, mb, wb, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', LST_index, weight_raw=0, fstart=138)

		fig1 = plt.figure(1)

		flag = 0
		for i in range(len(tall[:,0])):
			if (flag == 0) and (np.sum(tall[i,:]) > 0):
				ta_plot = tall[i,:].reshape(1,-1)
				flag    = 1
				print(ta_plot.shape)

			elif (flag == 1) and (np.sum(tall[i,:]) > 0):
				ta_temp = tall[i,:].reshape(1,-1)
				ta_plot = np.append(ta_plot, ta_temp, axis=0)
				print(i)

		im = plt.imshow(ta_plot - av_tall, cmap=cm.jet, interpolation='none', aspect='auto', extent=[90, 190, len(ta_plot[:,0]), 0]); 
		im.set_clim([-5, 5]);
		cbar = plt.colorbar()
		cbar.set_label('$\Delta$T [K]',size=18)
		plt.xlabel('frequency [MHz]')
		plt.ylabel('number of spectra')

		if np.isscalar(LST_index):
			plt.title('LST: ' + str(round(LST_index*(1/3) + 1/6, 3)) + ' hours')





	if residuals_raw == 'yes':

		fb, tab, mb, wb, fnz0,  tnz0,  mnz0,  wnz0,  tall, av_tall = spectral_analysis_high_band('v3', 0,  weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz2,  tnz2,  mnz2,  wnz2,  tall, av_tall = spectral_analysis_high_band('v3', 2,  weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz4,  tnz4,  mnz4,  wnz4,  tall, av_tall = spectral_analysis_high_band('v3', 4,  weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz6,  tnz6,  mnz6,  wnz6,  tall, av_tall = spectral_analysis_high_band('v3', 6,  weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz8,  tnz8,  mnz8,  wnz8,  tall, av_tall = spectral_analysis_high_band('v3', 8,  weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz10, tnz10, mnz10, wnz10, tall, av_tall = spectral_analysis_high_band('v3', 10, weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz12, tnz12, mnz12, wnz12, tall, av_tall = spectral_analysis_high_band('v3', 12, weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz14, tnz14, mnz14, wnz14, tall, av_tall = spectral_analysis_high_band('v3', 14, weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz16, tnz16, mnz16, wnz16, tall, av_tall = spectral_analysis_high_band('v3', 16, weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz18, tnz18, mnz18, wnz18, tall, av_tall = spectral_analysis_high_band('v3', 18, weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz20, tnz20, mnz20, wnz20, tall, av_tall = spectral_analysis_high_band('v3', 20, weight_raw=0.97, fstart=138)
		fb, tab, mb, wb, fnz22, tnz22, mnz22, wnz22, tall, av_tall = spectral_analysis_high_band('v3', 22, weight_raw=0.97, fstart=138)

		#fig1 = plt.figure(1)

		fig1, axes = plt.subplots(nrows=6, ncols=2)

		plt.subplot(6,2,1)
		plt.plot(fnz0, tnz0 - mnz0, 'b.')
		plt.ylim([-1,1])
		plt.ylabel('[K]')

		plt.subplot(6,2,3)
		plt.plot(fnz2, tnz2 - mnz2, 'b.')
		plt.ylim([-1,1])
		plt.ylabel('[K]')

		plt.subplot(6,2,5)
		plt.plot(fnz4, tnz4 - mnz4, 'b.')
		plt.ylim([-1,1])
		plt.ylabel('[K]')

		plt.subplot(6,2,7)
		plt.plot(fnz6, tnz6 - mnz6, 'b.')
		plt.ylim([-1,1])
		plt.ylabel('[K]')

		plt.subplot(6,2,9)
		plt.plot(fnz8, tnz8 - mnz8, 'b.')
		plt.ylim([-1,1])
		plt.ylabel('[K]')

		plt.subplot(6,2,11)
		plt.plot(fnz10, tnz10 - mnz10, 'b.')
		plt.ylim([-1,1])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[K]')

		plt.subplot(6,2,2)
		plt.plot(fnz12, tnz12 - mnz12, 'b.')
		plt.ylim([-1,1])

		plt.subplot(6,2,4)
		plt.plot(fnz14, tnz14 - mnz14, 'b.')
		plt.ylim([-1,1])

		plt.subplot(6,2,6)
		plt.plot(fnz16, tnz16 - mnz16, 'b.')
		plt.ylim([-1,1])

		plt.subplot(6,2,8)
		plt.plot(fnz18, tnz18 - mnz18, 'b.')
		plt.ylim([-1,1])

		plt.subplot(6,2,10)
		plt.plot(fnz20, tnz20 - mnz20, 'b.')
		plt.ylim([-1,1])

		plt.subplot(6,2,12)
		plt.plot(fnz22, tnz22 - mnz22, 'b.')
		plt.ylim([-1,1])
		plt.xlabel('frequency [MHz]')


		#plt.sca(axes[1,1])
		#plt.yticks([-0.5, 0.5])


	if residuals_binned == 'yes':

		fb0_v3,  tab0_v3,  mb0_v3,  wb0_v3,  fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 0,  weight_raw=0, fstart=138)
		fb2_v3,  tab2_v3,  mb2_v3,  wb2_v3,  fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 2,  weight_raw=0, fstart=138)
		fb4_v3,  tab4_v3,  mb4_v3,  wb4_v3,  fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 4,  weight_raw=0, fstart=138)
		fb6_v3,  tab6_v3,  mb6_v3,  wb6_v3,  fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 6,  weight_raw=0, fstart=138)
		fb8_v3,  tab8_v3,  mb8_v3,  wb8_v3,  fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 8,  weight_raw=0, fstart=138)
		fb10_v3, tab10_v3, mb10_v3, wb10_v3, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 10, weight_raw=0, fstart=138)
		fb12_v3, tab12_v3, mb12_v3, wb12_v3, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 12, weight_raw=0, fstart=138)
		fb14_v3, tab14_v3, mb14_v3, wb14_v3, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 14, weight_raw=0, fstart=138)
		fb16_v3, tab16_v3, mb16_v3, wb16_v3, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 16, weight_raw=0, fstart=138)
		fb18_v3, tab18_v3, mb18_v3, wb18_v3, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 18, weight_raw=0, fstart=138)
		fb20_v3, tab20_v3, mb20_v3, wb20_v3, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 20, weight_raw=0, fstart=138)
		fb22_v3, tab22_v3, mb22_v3, wb22_v3, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v3', 22, weight_raw=0, fstart=138)


		fb0_v4,  tab0_v4,  mb0_v4,  wb0_v4,  fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 0,  weight_raw=0, fstart=138)
		fb2_v4,  tab2_v4,  mb2_v4,  wb2_v4,  fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 2,  weight_raw=0, fstart=138)
		fb4_v4,  tab4_v4,  mb4_v4,  wb4_v4,  fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 4,  weight_raw=0, fstart=138)
		fb6_v4,  tab6_v4,  mb6_v4,  wb6_v4,  fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 6,  weight_raw=0, fstart=138)
		fb8_v4,  tab8_v4,  mb8_v4,  wb8_v4,  fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 8,  weight_raw=0, fstart=138)
		fb10_v4, tab10_v4, mb10_v4, wb10_v4, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 10, weight_raw=0, fstart=138)
		fb12_v4, tab12_v4, mb12_v4, wb12_v4, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 12, weight_raw=0, fstart=138)
		fb14_v4, tab14_v4, mb14_v4, wb14_v4, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 14, weight_raw=0, fstart=138)
		fb16_v4, tab16_v4, mb16_v4, wb16_v4, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 16, weight_raw=0, fstart=138)
		fb18_v4, tab18_v4, mb18_v4, wb18_v4, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 18, weight_raw=0, fstart=138)
		fb20_v4, tab20_v4, mb20_v4, wb20_v4, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 20, weight_raw=0, fstart=138)
		fb22_v4, tab22_v4, mb22_v4, wb22_v4, fnz, tnz, mnz, wnz, tall, av_tall = spectral_analysis_high_band('v5', 22, weight_raw=0, fstart=138)		



		size_x = 11.5
		size_y = 7.5
		x0 = 0.07
		y0 = 0.1
		dx = 0.44
		dy = 0.145


		f1  = plt.figure(num=1, figsize=(size_x, size_y))		


		ax = f1.add_axes([1*x0, 1*y0 + 5*dy, dx, dy])
		ax.plot(fb0_v3, tab0_v3-mb0_v3,'b')
		ax.plot(fb0_v4, tab0_v4-mb0_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		ax.set_xticklabels('')
		plt.ylim([-0.08,0.08])
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['$-$40' ,'0', '$+$40'])
		plt.ylabel('$\Delta$T [mK]', fontsize=12)
		plt.text(130, 0.0, '0.17LST', fontweight='bold')
		plt.grid()


		ax = f1.add_axes([1.3*x0 + dx, 1*y0 + 5*dy, dx, dy])
		ax.plot(fb12_v3, tab12_v3-mb12_v3,'b')
		ax.plot(fb12_v4, tab12_v4-mb12_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		ax.set_xticklabels('')
		plt.ylim([-0.08,0.08])
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['' ,'', ''])
		#plt.ylabel('$\Delta$ [mK]', fontsize=12)
		plt.text(130, 0.0, '4.17LST', fontweight='bold')
		plt.grid()





		ax = f1.add_axes([1*x0, 1*y0 + 4*dy, dx, dy])
		ax.plot(fb2_v3, tab2_v3-mb2_v3,'b')
		ax.plot(fb2_v4, tab2_v4-mb2_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		ax.set_xticklabels('')
		plt.ylim([-0.08,0.08])
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['$-$40' ,'0', '$+$40'])
		plt.ylabel('$\Delta$T [mK]', fontsize=12)
		plt.text(130, 0.0, '0.83LST', fontweight='bold')
		plt.grid()


		ax = f1.add_axes([1.3*x0 + dx, 1*y0 + 4*dy, dx, dy])
		ax.plot(fb14_v3, tab14_v3-mb14_v3,'b')
		ax.plot(fb14_v4, tab14_v4-mb14_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		ax.set_xticklabels('')
		plt.ylim([-0.08,0.08])
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['' ,'', ''])
		#plt.ylabel('$\Delta$ [mK]', fontsize=12)
		plt.text(130, 0.0, '4.83LST', fontweight='bold')
		plt.grid()		





		ax = f1.add_axes([1*x0, 1*y0 + 3*dy, dx, dy])
		ax.plot(fb4_v3, tab4_v3-mb4_v3,'b')
		ax.plot(fb4_v4, tab4_v4-mb4_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		ax.set_xticklabels('')
		plt.ylim([-0.08,0.08])
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['$-$40' ,'0', '$+$40'])
		plt.ylabel('$\Delta$T [mK]', fontsize=12)
		plt.text(130, 0.0, '1.5LST', fontweight='bold')
		plt.grid()


		ax = f1.add_axes([1.3*x0 + dx, 1*y0 + 3*dy, dx, dy])
		ax.plot(fb16_v3, tab16_v3-mb16_v3,'b')
		ax.plot(fb16_v4, tab16_v4-mb16_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		ax.set_xticklabels('')
		plt.ylim([-0.08,0.08])
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['' ,'', ''])
		#plt.ylabel('$\Delta$ [mK]', fontsize=12)
		plt.text(130, 0.0, '5.5LST', fontweight='bold')
		plt.grid()






		ax = f1.add_axes([1*x0, 1*y0 + 2*dy, dx, dy])
		ax.plot(fb6_v3, tab6_v3-mb6_v3,'b')
		ax.plot(fb6_v4, tab6_v4-mb6_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		ax.set_xticklabels('')
		plt.ylim([-0.08,0.08])
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['$-$40' ,'0', '$+$40'])
		plt.ylabel('$\Delta$T [mK]', fontsize=12)
		plt.text(130, 0.0, '2.17LST', fontweight='bold')
		plt.grid()


		ax = f1.add_axes([1.3*x0 + dx, 1*y0 + 2*dy, dx, dy])
		ax.plot(fb18_v3, tab18_v3-mb18_v3,'b')
		ax.plot(fb18_v4, tab18_v4-mb18_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		ax.set_xticklabels('')
		plt.ylim([-0.08,0.08])		
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['' ,'', ''])
		#plt.ylabel('$\Delta$ [mK]', fontsize=12)
		plt.text(130, 0.0, '6.17LST', fontweight='bold')
		plt.grid()







		ax = f1.add_axes([1*x0, 1*y0 + 1*dy, dx, dy])
		ax.plot(fb8_v3, tab8_v3-mb8_v3,'b')
		ax.plot(fb8_v4, tab8_v4-mb8_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		ax.set_xticklabels('')
		plt.ylim([-0.08,0.08])
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['$-$40' ,'0', '$+$40'])
		plt.ylabel('$\Delta$T [mK]', fontsize=12)
		plt.text(130, 0.0, '2.83LST', fontweight='bold')
		plt.grid()


		ax = f1.add_axes([1.3*x0 + dx, 1*y0 + 1*dy, dx, dy])
		ax.plot(fb20_v3, tab20_v3-mb20_v3,'b')
		ax.plot(fb20_v4, tab20_v4-mb20_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		ax.set_xticklabels('')
		plt.ylim([-0.08,0.08])		
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['' ,'', ''])
		#plt.ylabel('$\Delta$ [mK]', fontsize=12)
		plt.text(130, 0.0, '6.83LST', fontweight='bold')
		plt.grid()





		ax = f1.add_axes([1*x0, 1*y0 + 0*dy, dx, dy])
		ax.plot(fb10_v3, tab10_v3-mb10_v3,'b')
		ax.plot(fb10_v4, tab10_v4-mb10_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		plt.ylim([-0.08,0.08])		
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['$-$40' ,'0', '$+$40'])
		plt.ylabel('$\Delta$T [mK]', fontsize=12)
		plt.xlabel('frequency [MHz]')
		plt.text(130, 0.0, '3.5LST', fontweight='bold')
		plt.grid()


		ax = f1.add_axes([1.3*x0 + dx, 1*y0 + 0*dy, dx, dy])
		ax.plot(fb22_v3, tab22_v3-mb22_v3,'b')
		ax.plot(fb22_v4, tab22_v4-mb22_v4,'r')
		plt.xlim([130, 200])
		ax.set_xticks(np.arange(140,200,10))
		plt.ylim([-0.08,0.08])
		ax.set_yticks([-0.04, 0, 0.04])
		ax.set_yticklabels(['' ,'', ''])
		#plt.ylabel('$\Delta$ [mK]', fontsize=12)
		plt.xlabel('frequency [MHz]')
		plt.text(130, 0.0, '7.5LST', fontweight='bold')
		plt.grid()			




	return 1
































def plot_low_band():


	# Reflection coefficients
	d = np.genfromtxt(home_folder + '/DATA/EDGES/s11/low_band/corrected/2015_289_21_27/average_2015_289_21_27.txt')
	f = d[:,0]/1e6


	ff, il, ih = eg.frequency_edges(50,100)
	rl, c1, c2, lt, tc, ts = eg.models_LNA('low_band', ff[il:ih+1])


	f1 = plt.figure(1)
	h1, = plt.plot(f, 20*np.log10(np.abs(d[:,1]+1j*d[:,2])),'b', linewidth=2)
	h2, = plt.plot(ff[il:ih+1], 20*np.log10(np.abs(rl)),'r', linewidth=2)

	plt.xlim([50,100])
	plt.ylim([-40, 0])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.legend([h1, h2], ['antenna','LNA'])







	# 2D Antenna temperature
	path_data_high_band = home_folder + '/DATA/EDGES/spectra/level2/low_band/v1/'
	d = np.genfromtxt(path_data_high_band + '2015_288_00_LST_data_v1.txt')

	f2 = plt.figure(2)
	im = plt.imshow(d[:,1:-1].T, interpolation='none', aspect='auto', extent=[50,100, 23.83, 0.16]);im.set_clim([0, 12000]);
	cbar = plt.colorbar()

	plt.xlabel('Frequency [MHz]')
	plt.ylabel('Local Sidereal Time [Hr]')
	cbar.set_label('Antenna Temperature [K]', rotation=90)


	return 0










def plots_low_band_s11_2015_342_03_14():

	path           = home_folder + '/DATA/EDGES/s11/low_band/corrected/2015_342_03_14/'
	path289        = home_folder + '/DATA/EDGES/s11/low_band/corrected/2015_289_21_27/'
	path_plot_save = home_folder + '/WORK/EDGES/misc/reports/20151210/plots/'


	aux0  = np.genfromtxt(path + 'dataset_2015_342_03_14_UTCDateTime_Tswitch_Tamb_Hamb_Tdp.txt')
	av    = np.genfromtxt(path + 'average_2015_342_03_14.txt')
	av289 = np.genfromtxt(path289 + 'average_2015_289_21_27.txt')
	m0    = np.genfromtxt(path + 'dataset_2015_342_03_14_magnitude_linear_50-200MHz.txt')
	p0    = np.genfromtxt(path + 'dataset_2015_342_03_14_phase_deg_50-200MHz.txt')


	i0 = 126
	aux = aux0[i0:-1,:]
	m   = m0[i0:-1,:]
	p   = p0[i0:-1,:]



	h  = np.arange(0,24,24/len(aux[:,0]))


	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()



	plt.figure(0, figsize=(9,5))
	h1, = plt.plot(h, aux[:, 6])
	h2, = plt.plot(h, aux[:, 7])
	h3, = plt.plot(h, aux[:, 8])
	h4, = plt.plot(h, aux[:, 9])
	plt.xlim([0, 24])
	plt.ylim([-15, 35])
	plt.xlabel('time [hrs]')
	plt.ylabel('temperature [degC], relative humidity [%]')
	plt.grid()

	plt.legend([h1, h2, h3, h4],['switch temperature','ambient temperature','ambient humidity','dew point temperature'], loc=0)

	plt.savefig(path_plot_save + 'weather.pdf', bbox_inches='tight')
	plt.close()








	plt.figure(1, figsize=(7,6))	
	plt.subplot(2,1,1)
	h1, = plt.plot(av[:,0]/1e6, 20*np.log10(np.abs(av[:,1]+1j*av[:,2])))
	plt.xlim([50, 100])
	plt.ylim([-16, -6])
	plt.ylabel('magnitude [dB]')
	plt.grid()

	plt.subplot(2,1,2)
	h2, = plt.plot(av[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(av[:,1]+1j*av[:,2])))
	plt.xlim([50, 100])
	plt.ylim([-600, 100])
	plt.ylabel('phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.grid()

	plt.savefig(path_plot_save + 'average.pdf', bbox_inches='tight')
	plt.close()






	plt.figure(2, figsize=(12,5))
	im = plt.imshow((20*np.log10(m[:,0:51]) - 20*np.log10(np.abs(av[0:51,1]+1j*av[0:51,2]))).T, interpolation='none', aspect='auto', extent=[0,24, 100, 50]);
	im.set_clim([-0.05, 0.05]); 
	cbar = plt.colorbar()
	cbar.set_label('$\Delta$ [dB]', rotation=90)
	plt.xlabel('time [hrs]')
	plt.ylabel('frequency [MHz]')

	plt.savefig(path_plot_save + 'magnitude.pdf', bbox_inches='tight')
	plt.close()





	plt.figure(3, figsize=(12,5))
	im = plt.imshow((p[:,0:51] - (180/np.pi)*np.unwrap(np.angle(av[0:51,1]+1j*av[0:51,2]))).T, interpolation='none', aspect='auto', extent=[0,24, 100, 50]);
	im.set_clim([-0.5, 0.5]); 
	cbar = plt.colorbar()
	cbar.set_label('$\Delta$ [deg]', rotation=90)
	plt.xlabel('time [hrs]')
	plt.ylabel('frequency [MHz]')

	plt.savefig(path_plot_save + 'phase.pdf', bbox_inches='tight')
	plt.close()




	plt.figure(4, figsize=(7,6))
	#im = plt.imshow((20*np.log10(m[:,0:51]) - 20*np.log10(np.abs(av[0:51,1]+1j*av[0:51,2]))).T, interpolation='none', aspect='auto');
	#im.set_clim([-0.05, 0.05]); 
	#cbar = plt.colorbar()
	#cbar.set_label('$\Delta$ [dB]', rotation=90)
	#plt.xlabel('time from start of measurements [hrs]')
	#plt.ylabel('frequency [MHz]')

	plt.subplot(2,1,1)
	plt.plot(av[0:51, 0]/1e6, (20*np.log10(m[888,0:51])  - 20*np.log10(np.abs(av[0:51,1]+1j*av[0:51,2]))).T)
	plt.plot(av[0:51, 0]/1e6, (20*np.log10(m[2475,0:51]) - 20*np.log10(np.abs(av[0:51,1]+1j*av[0:51,2]))).T)
	plt.grid()
	plt.ylim([-0.06, 0.06])
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('$\Delta$ magnitude [dB]')


	plt.subplot(2,1,2)
	h1, = plt.plot(av[0:51, 0]/1e6, (p[888,0:51]  - (180/np.pi)*np.unwrap(np.angle(av[0:51,1]+1j*av[0:51,2]))).T)
	h2, = plt.plot(av[0:51, 0]/1e6, (p[2475,0:51] - (180/np.pi)*np.unwrap(np.angle(av[0:51,1]+1j*av[0:51,2]))).T)
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('$\Delta$ phase [deg]')
	plt.ylim([-0.8, 0.8])
	plt.legend([h1, h2], ['$\sim$ 8.4 hours','$\sim$ 23.5 hours'])

	plt.savefig(path_plot_save + 'delta1.pdf', bbox_inches='tight')
	plt.close()







	plt.figure(5, figsize=(7,6))

	plt.subplot(2,1,1)
	plt.plot(av[0:51, 0]/1e6, 20*np.log10(np.abs(av[0:51,1]+1j*av[0:51,2])) - 20*np.log10(np.abs(av289[0:51,1]+1j*av289[0:51,2])))
	plt.grid()
	plt.ylim([-0.06, 0.06])
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('$\Delta$ magnitude [dB]')


	plt.subplot(2,1,2)
	plt.plot(av[0:51, 0]/1e6, (180/np.pi)*np.unwrap(np.angle(av[0:51,1]+1j*av[0:51,2])) - (180/np.pi)*np.unwrap(np.angle(av289[0:51,1]+1j*av289[0:51,2])))
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('$\Delta$ phase [deg]')
	plt.ylim([-0.8, 0.8])

	plt.savefig(path_plot_save + 'delta2.pdf', bbox_inches='tight')
	plt.close()

	return










def batch_high_band_uncertainty_propagation_residual_correction():



	# Ambient Spectrum

	effect = 'spec_amb'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)






	# Hot Spectrum

	effect = 'spec_hot'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)




	# Open Spectrum

	effect = 'spec_open'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)




	# Shorted Spectrum

	effect = 'spec_shorted'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)











	# Temp Amb

	effect = 'tamb'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)




	# Temp Hot

	effect = 'thot'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)




	# Temp Open

	effect = 'topen'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)







	# Temp Shorted

	effect = 'tshorted'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)







	# Ambient S11 Mag

	effect = 's11_amb_mag'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)



	# Ambient S11 Ang

	effect = 's11_amb_ang'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)





	# Hot S11 Mag

	effect = 's11_hot_mag'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)





	# Hot S11 Ang

	effect = 's11_hot_ang'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)










	# Open S11 Mag

	effect = 's11_open_mag'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)





	# Open S11 Ang

	effect = 's11_open_ang'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)






	# Shorted S11 Mag

	effect = 's11_shorted_mag'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)





	# Shorted S11 Ang

	effect = 's11_shorted_ang'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)












	# LNA S11 Mag

	effect = 's11_LNA_mag'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)




	# LNA S11 Ang

	effect = 's11_LNA_ang'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)






	# s12s21 SR Mag

	effect = 's12s21_sr_mag'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)








	# S11 Antenna Mag

	effect = 's11_antenna_mag'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)




	# S11 Antenna Ang

	effect = 's11_antenna_ang'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'polynomials_edges/' + effect)

	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'loud_sky_polynomials_edges/' + effect)












	# All Quiet Sky

	effect = 'all_edges_poly_quiet_sky_uncorr_REP_01'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_02'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_03'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_04'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_05'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_06'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_07'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_08'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_09'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_10'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_11'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_12'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_13'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_14'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_15'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_16'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_17'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_18'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_19'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_20'

	print(effect)
	print('QUIET SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_quiet_sky/' + effect)





















	# All Loud Sky

	effect = 'all_edges_poly_loud_sky_uncorr_REP_01'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_02'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_03'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_04'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_05'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_06'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_07'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_08'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_09'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_10'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_11'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_12'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_13'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_14'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_15'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_16'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_17'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_18'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_19'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)



	effect = 'all_edges_poly_loud_sky_uncorr_REP_20'

	print(effect)
	print('LOUD SKY')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'all_loud_sky/' + effect)

















	# Tests of improving impedance match

	effect = 'LNA_mag_minus30dB_s11_LNA_mag'

	print(effect)
	print('Test Extra')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)	



	effect = 'LNA_mag_minus30dB_s11_antenna_mag'

	print(effect)
	print('Case (b)')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)	



	effect = 'antenna_mag_minus20dB_s11_antenna_mag'

	print(effect)
	print('Case (c)')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)	



	effect = 'antenna_good_phase_s11_antenna_mag'

	print(effect)
	print('Case (d)')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)



	effect = 'LNA_mag_minus30dB_antenna_mag_minus20dB_s11_antenna_mag'

	print(effect)
	print('Case (e)')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)



	effect = 'LNA_mag_minus30dB_antenna_mag_minus20dB_antenna_good_phase_s11_antenna_mag'

	print(effect)
	print('Case (f)')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)













	effect = 'LNA_mag_minus30dB_s11_LNA_ang'

	print(effect)
	print('Test Extra')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)	



	effect = 'LNA_mag_minus30dB_s11_antenna_ang'

	print(effect)
	print('Case (b)')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)	



	effect = 'antenna_mag_minus20dB_s11_antenna_ang'

	print(effect)
	print('Case (c)')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)	



	effect = 'antenna_good_phase_s11_antenna_ang'

	print(effect)
	print('Case (d)')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)	



	effect = 'LNA_mag_minus30dB_antenna_mag_minus20dB_s11_antenna_ang'

	print(effect)
	print('Case (e)')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)



	effect = 'LNA_mag_minus30dB_antenna_mag_minus20dB_antenna_good_phase_s11_antenna_ang'

	print(effect)
	print('Case (f)')
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/tests/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'tests/' + effect)














	# Reduced uncertainties
	effect = 'V2_reduced_spec_amb_5term_loud_sky'
	print(effect)
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/reduced_uncertainty/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'reduced_uncertainty/' + effect)


	effect = 'V2_reduced_spec_hot_5term_loud_sky'
	print(effect)
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/reduced_uncertainty/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'reduced_uncertainty/' + effect)












	effect = 'reduced_s11_LNA_mag_5term_quiet_sky'
	print(effect)
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/reduced_uncertainty/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'reduced_uncertainty/' + effect)



	effect = 'reduced_s11_LNA_mag_5term_loud_sky'
	print(effect)
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/reduced_uncertainty/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'reduced_uncertainty/' + effect)







	effect = 'V2_reduced_s11_LNA_ang_5term_quiet_sky'
	print(effect)
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/reduced_uncertainty/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'reduced_uncertainty/' + effect)


	effect = 'V2_reduced_s11_LNA_ang_5term_loud_sky'
	print(effect)
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/reduced_uncertainty/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'reduced_uncertainty/' + effect)	






	effect = 'reduced_s11_antenna_mag_5term_quiet_sky'
	print(effect)
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/reduced_uncertainty/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'reduced_uncertainty/' + effect)


	effect = 'reduced_s11_antenna_mag_5term_loud_sky'
	print(effect)
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/reduced_uncertainty/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'reduced_uncertainty/' + effect)






	effect = 'reduced_s11_antenna_ang_5term_quiet_sky'
	print(effect)
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/reduced_uncertainty/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'reduced_uncertainty/' + effect)


	effect = 'reduced_s11_antenna_ang_5term_loud_sky'
	print(effect)
	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/reduced_uncertainty/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'reduced_uncertainty/' + effect)
















	# ----------------------------------------------------------------
	#  RESIDUALS IN RANGE 110 - 190 MHz
	# ----------------------------------------------------------------


	# Spectrum Ambient

	effect = 'spec_amb'

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_quiet', flow_110MHz = 'YES')

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_loud', flow_110MHz = 'YES')




	# Spectrum Hot

	effect = 'spec_hot'

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_quiet', flow_110MHz = 'YES')

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_loud', flow_110MHz = 'YES')












	# LNA S11 Mag

	effect = 's11_LNA_mag'

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_quiet', flow_110MHz = 'YES')

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_loud', flow_110MHz = 'YES')




	# LNA S11 Ang

	effect = 's11_LNA_ang'

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_quiet', flow_110MHz = 'YES')

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_loud', flow_110MHz = 'YES')










	# S11 Antenna Mag

	effect = 's11_antenna_mag'

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_quiet', flow_110MHz = 'YES')

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_loud', flow_110MHz = 'YES')




	# S11 Antenna Ang

	effect = 's11_antenna_ang'

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_quiet', flow_110MHz = 'YES')

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/loud_sky_polynomials_edges/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect + '_loud', flow_110MHz = 'YES')









	# All effects QUIET

	effect = 'all_edges_poly_quiet_sky_uncorr_REP_01'

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect, flow_110MHz = 'YES')



	effect = 'all_edges_poly_quiet_sky_uncorr_REP_02'

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect, flow_110MHz = 'YES')




	# All effects LOUD

	effect = 'all_edges_poly_loud_sky_uncorr_REP_01'

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect, flow_110MHz = 'YES')


	effect = 'all_edges_poly_loud_sky_uncorr_REP_02'

	path = home_folder + '/DATA/EDGES/uncertainty_propagation/high_band/original_residuals/all_effects/' + effect + '/'
	o = eg.MC_high_band_correction_of_residuals(path, 'EDGES_polynomial', 'range_110_190_MHz/' + effect, flow_110MHz = 'YES')





	return 1







def s11_verification_box(plot = 'no'):

	"""
	# Don't use this file anymore. Use the file with the same name but in edges module
	"""

	# Data paths
	# ---------------------------------------
	path_data  = home_folder + '/DATA/EDGES/s11/verification_box/characterization/'
	path_data1 = path_data + 'E5061A_rep1/'
	path_data2 = path_data + 'E5061A_rep2/'
	path_data3 = path_data + 'E5072A_rep1/'



	# Data loading
	# ---------------------------------------

	# E5061A Repetition 1
	d1_oo = rc.s1p_read(path_data1 + 'DUT_OPEN_SP4T_OPEN_7372_E5061A.s1p')[0]
	d1_os = rc.s1p_read(path_data1 + 'DUT_OPEN_SP4T_SHORT_7333_E5061A.s1p')[0]
	d1_ol = rc.s1p_read(path_data1 + 'DUT_OPEN_SP4T_LOAD_7255_E5061A.s1p')[0]
	d1_od = rc.s1p_read(path_data1 + 'DUT_OPEN_SP4T_DUT_7237_E5061A.s1p')[0]

	d1_so = rc.s1p_read(path_data1 + 'DUT_SHORT_SP4T_OPEN_7200_E5061A.s1p')[0]
	d1_ss = rc.s1p_read(path_data1 + 'DUT_SHORT_SP4T_SHORT_7182_E5061A.s1p')[0]
	d1_sl = rc.s1p_read(path_data1 + 'DUT_SHORT_SP4T_LOAD_7115_E5061A.s1p')[0]
	d1_sd = rc.s1p_read(path_data1 + 'DUT_SHORT_SP4T_DUT_7211_E5061A.s1p')[0]

	d1_lo = rc.s1p_read(path_data1 + 'DUT_LOAD_SP4T_OPEN_7113_E5061A.s1p')[0]
	d1_ls = rc.s1p_read(path_data1 + 'DUT_LOAD_SP4T_SHORT_7096_E5061A.s1p')[0]
	d1_ll = rc.s1p_read(path_data1 + 'DUT_LOAD_SP4T_LOAD_7066_E5061A.s1p')[0]
	d1_ld = rc.s1p_read(path_data1 + 'DUT_LOAD_SP4T_DUT_7060_E5061A.s1p')[0]




	# E5061A Repetition 2
	d2_oo = rc.s1p_read(path_data2 + 'DUT_OPEN_SP4T_OPEN_7230_E5061A.s1p')[0]
	d2_os = rc.s1p_read(path_data2 + 'DUT_OPEN_SP4T_SHORT_7212_E5061A.s1p')[0]
	d2_ol = rc.s1p_read(path_data2 + 'DUT_OPEN_SP4T_LOAD_7083_E5061A.s1p')[0]
	d2_od = rc.s1p_read(path_data2 + 'DUT_OPEN_SP4T_DUT_7166_E5061A.s1p')[0]

	d2_so = rc.s1p_read(path_data2 + 'DUT_SHORT_SP4T_OPEN_7237_E5061A.s1p')[0]
	d2_ss = rc.s1p_read(path_data2 + 'DUT_SHORT_SP4T_SHORT_7208_E5061A.s1p')[0]
	d2_sl = rc.s1p_read(path_data2 + 'DUT_SHORT_SP4T_LOAD_7003_E5061A.s1p')[0]
	d2_sd = rc.s1p_read(path_data2 + 'DUT_SHORT_SP4T_DUT_7166_E5061A.s1p')[0]

	d2_lo = rc.s1p_read(path_data2 + 'DUT_LOAD_SP4T_OPEN_7235_E5061A.s1p')[0]
	d2_ls = rc.s1p_read(path_data2 + 'DUT_LOAD_SP4T_SHORT_7189_E5061A.s1p')[0]
	d2_ll = rc.s1p_read(path_data2 + 'DUT_LOAD_SP4T_LOAD_7012_E5061A.s1p')[0]
	d2_ld = rc.s1p_read(path_data2 + 'DUT_LOAD_SP4T_DUT_7200_E5061A.s1p')[0]




	# E5072A Repetition 1
	d3_oo = rc.s1p_read(path_data3 + 'DUT_OPEN_SP4T_OPEN_7105_E5072A.S1P')[0]
	d3_os = rc.s1p_read(path_data3 + 'DUT_OPEN_SP4T_SHORT_7105_E5072A.S1P')[0]
	d3_ol = rc.s1p_read(path_data3 + 'DUT_OPEN_SP4T_LOAD_7085_E5072A.S1P')[0]
	d3_od = rc.s1p_read(path_data3 + 'DUT_OPEN_SP4T_DUT_7089_E5072A.S1P')[0]

	d3_so = rc.s1p_read(path_data3 + 'DUT_SHORT_SP4T_OPEN_7192_E5072A.S1P')[0]
	d3_ss = rc.s1p_read(path_data3 + 'DUT_SHORT_SP4T_SHORT_7153_E5072A.S1P')[0]
	d3_sl = rc.s1p_read(path_data3 + 'DUT_SHORT_SP4T_LOAD_7217_E5072A.S1P')[0]
	d3_sd = rc.s1p_read(path_data3 + 'DUT_SHORT_SP4T_DUT_7220_E5072A.S1P')[0]

	d3_lo = rc.s1p_read(path_data3 + 'DUT_LOAD_SP4T_OPEN_7224_E5072A.S1P')[0]
	d3_ls = rc.s1p_read(path_data3 + 'DUT_LOAD_SP4T_SHORT_7145_E5072A.S1P')[0]
	d3_ll = rc.s1p_read(path_data3 + 'DUT_LOAD_SP4T_LOAD_7132_E5072A.S1P')[0]
	d3_ld = rc.s1p_read(path_data3 + 'DUT_LOAD_SP4T_DUT_7147_E5072A.S1P')[0]


	# Frequencies
	f = np.arange(1,251)







	# Calibrating at the SP4T switch
	# ------------------------------------------------

	oa_switch = ( 1 + 0j)*np.ones(len(f))
	sa_switch = (-1 + 0j)*np.ones(len(f))
	la_switch = ( 0 + 0j)*np.ones(len(f))



	oc1, s11o, s12s21o, s22o = rc.de_embed(oa_switch, sa_switch, la_switch, d1_oo, d1_os, d1_ol, d1_od)
	sc1, s11s, s12s21s, s22s = rc.de_embed(oa_switch, sa_switch, la_switch, d1_so, d1_ss, d1_sl, d1_sd)
	lc1, s11l, s12s21l, s22l = rc.de_embed(oa_switch, sa_switch, la_switch, d1_lo, d1_ls, d1_ll, d1_ld)


	oc2, s11o, s12s21o, s22o = rc.de_embed(oa_switch, sa_switch, la_switch, d2_oo, d2_os, d2_ol, d2_od)
	sc2, s11s, s12s21s, s22s = rc.de_embed(oa_switch, sa_switch, la_switch, d2_so, d2_ss, d2_sl, d2_sd)
	lc2, s11l, s12s21l, s22l = rc.de_embed(oa_switch, sa_switch, la_switch, d2_lo, d2_ls, d2_ll, d2_ld)	


	oc3, s11o, s12s21o, s22o = rc.de_embed(oa_switch, sa_switch, la_switch, d3_oo, d3_os, d3_ol, d3_od)
	sc3, s11s, s12s21s, s22s = rc.de_embed(oa_switch, sa_switch, la_switch, d3_so, d3_ss, d3_sl, d3_sd)
	lc3, s11l, s12s21l, s22l = rc.de_embed(oa_switch, sa_switch, la_switch, d3_lo, d3_ls, d3_ll, d3_ld)	






	# Computing S-parameters of verification box
	# ------------------------------------------------

	oa, sa, la = rc.agilent_85033E(f, 50.02, 1)

	XX, s11_r1, s12s21_r1, s22_r1 = rc.de_embed(oa, sa, la, oc1, sc1, lc1, oc1)
	XX, s11_r2, s12s21_r2, s22_r2 = rc.de_embed(oa, sa, la, oc2, sc2, lc2, oc2)
	XX, s11_r3, s12s21_r3, s22_r3 = rc.de_embed(oa, sa, la, oc3, sc3, lc3, oc3)








	# Naive test
	test_reflection = (0.1778 + 0j)*np.ones(len(f))  # -15 dB

	test_shifted1 = rc.gamma_shifted(s11_r1, s12s21_r1, s22_r1, test_reflection)
	test_shifted2 = rc.gamma_shifted(s11_r2, s12s21_r2, s22_r2, test_reflection)
	test_shifted3 = rc.gamma_shifted(s11_r3, s12s21_r3, s22_r3, test_reflection)












	if plot == 'yes':

		# Plotting and comparing measurements
		# ----------------------------------------------

		plt.close()
		plt.close()
		plt.close()




		fig1 = plt.figure(1)

		plt.subplot(1,3,1)
		plt.plot(f, 20*np.log10(np.abs(oc1)))
		plt.plot(f, 20*np.log10(np.abs(oc2)))
		plt.plot(f, 20*np.log10(np.abs(oc3)))

		plt.subplot(1,3,2)
		plt.plot(f, 20*np.log10(np.abs(sc1)))
		plt.plot(f, 20*np.log10(np.abs(sc2)))
		plt.plot(f, 20*np.log10(np.abs(sc3)))

		plt.subplot(1,3,3)
		plt.plot(f, 20*np.log10(np.abs(lc1)))
		plt.plot(f, 20*np.log10(np.abs(lc2)))
		plt.plot(f, 20*np.log10(np.abs(lc3)))





		fig2 = plt.figure(2)

		plt.subplot(1,3,1)
		plt.plot(f, 20*np.log10(np.abs(s11_r1)))
		plt.plot(f, 20*np.log10(np.abs(s11_r2)))
		plt.plot(f, 20*np.log10(np.abs(s11_r3)))

		plt.subplot(1,3,2)
		plt.plot(f, 20*np.log10(np.abs(s12s21_r1)))
		plt.plot(f, 20*np.log10(np.abs(s12s21_r2)))
		plt.plot(f, 20*np.log10(np.abs(s12s21_r3)))

		plt.subplot(1,3,3)
		plt.plot(f, 20*np.log10(np.abs(s22_r1)))
		plt.plot(f, 20*np.log10(np.abs(s22_r2)))
		plt.plot(f, 20*np.log10(np.abs(s22_r3)))	





		fig3 = plt.figure(3)
		plt.plot(f, 20*np.log10(np.abs(test_shifted1)))
		plt.plot(f, 20*np.log10(np.abs(test_shifted2)))
		plt.plot(f, 20*np.log10(np.abs(test_shifted3)))


		fig4 = plt.figure(4)
		plt.plot(f, (180/np.pi)*np.unwrap(np.angle(test_shifted1)))
		plt.plot(f, (180/np.pi)*np.unwrap(np.angle(test_shifted2)))
		plt.plot(f, (180/np.pi)*np.unwrap(np.angle(test_shifted3)))



	return s11_r1, s12s21_r1, s22_r1  #f, oc1, sc1, lc1, oc2, sc2, lc2, oc3, sc3, lc3

















def s11_verification_box_2(simulator=1):

	# Don't use this file anymore. Use the file with the same name but in edges module


	s11, s12s21, s22 = s11_verification_box(plot='no')



	if simulator == 1:
		path_data  = home_folder + '/DATA/EDGES/s11/verification_box/verification/long_cable_E5072A/antenna_simulator_1/'
		path_test  = home_folder + '/DATA/EDGES/s11/verification_box/verification/short_cable_E5061A/antenna_simulator_1/'
		path_test2 = home_folder + '/DATA/EDGES/s11/verification_box/verification/short_cable_E5072A/antenna_simulator_1/'

		to_t1 = rc.s1p_read(path_test + 'DUT_ANT1_SP4T_OPEN_7171_MEAS2_E5061A.s1p')[0]
		ts_t1 = rc.s1p_read(path_test + 'DUT_ANT1_SP4T_SHORT_7151_MEAS2_E5061A.s1p')[0]
		tl_t1 = rc.s1p_read(path_test + 'DUT_ANT1_SP4T_LOAD_7136_MEAS2_E5061A.s1p')[0]
		td_t1 = rc.s1p_read(path_test + 'DUT_ANT1_SP4T_DUT_7158_MEAS2_E5061A.s1p')[0]

		#to_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_OPEN_7627_Cycle1_E5072A.s1p')[0]
		#ts_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_SHORT_7497_Cycle1_E5072A.s1p')[0]
		#tl_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_LOAD_7369_Cycle1_E5072A.s1p')[0]
		#td_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_DUT_7270_Cycle1_E5072A.s1p')[0]

		#to_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_OPEN_7181_Cycle2_E5072A.s1p')[0]
		#ts_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_SHORT_7157_Cycle2_E5072A.s1p')[0]
		#tl_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_LOAD_7110_Cycle2_E5072A.s1p')[0]
		#td_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_DUT_7065_Cycle2_E5072A.s1p')[0]

		to_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_OPEN_7051_Cycle3_E5072A.s1p')[0]
		ts_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_SHORT_7050_Cycle3_E5072A.s1p')[0]
		tl_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_LOAD_7017_Cycle3_E5072A.s1p')[0]
		td_t2 = rc.s1p_read(path_test2 + 'DUT_ANT1_SP4T_DUT_6989_Cycle3_E5072A.s1p')[0]		

		# Resistance of antenna simulator
		DC = 85.3205032



	elif simulator == 2:
		path_data  = home_folder + '/DATA/EDGES/s11/verification_box/verification/long_cable_E5072A/antenna_simulator_2/'
		path_test  = home_folder + '/DATA/EDGES/s11/verification_box/verification/short_cable_E5061A/antenna_simulator_2/'
		path_test2 = home_folder + '/DATA/EDGES/s11/verification_box/verification/short_cable_E5072A/antenna_simulator_2/'

		to_t1 = rc.s1p_read(path_test + 'DUT_ANT2_SP4T_OPEN_7162_MEAS2_E5061A.s1p')[0]
		ts_t1 = rc.s1p_read(path_test + 'DUT_ANT2_SP4T_SHORT_7135_MEAS2_E5061A.s1p')[0]
		tl_t1 = rc.s1p_read(path_test + 'DUT_ANT2_SP4T_LOAD_7119_MEAS2_E5061A.s1p')[0]
		td_t1 = rc.s1p_read(path_test + 'DUT_ANT2_SP4T_DUT_7115_MEAS2_E5061A.s1p')[0]


		to_t2 = rc.s1p_read(path_test2 + 'DUT_ANT2_SP4T_OPEN_6989_Cycle1_E5072A.s1p')[0]
		ts_t2 = rc.s1p_read(path_test2 + 'DUT_ANT2_SP4T_SHORT_7001_Cycle1_E5072A.s1p')[0]
		tl_t2 = rc.s1p_read(path_test2 + 'DUT_ANT2_SP4T_LOAD_6976_Cycle1_E5072A.s1p')[0]
		td_t2 = rc.s1p_read(path_test2 + 'DUT_ANT2_SP4T_DUT_6947_Cycle1_E5072A.s1p')[0]	

		# Resistance of antenna simulator
		DC = 85.1367416




	# Frequencies
	f = 1e8*np.arange(1,251)


	# Calibrating at the SP4T switch
	# ------------------------------------------------

	oa_switch = ( 1 + 0j)*np.ones(len(f))
	sa_switch = (-1 + 0j)*np.ones(len(f))
	la_switch = ( 0 + 0j)*np.ones(len(f))


	# Listing files to be processed
	full_list = listdir(path_data)

	l1 = []
	l2 = []
	l3 = []
	l4 = []	

	for i in range(len(full_list)):

		if "SP4T_OPEN" in full_list[i]:
			l1.append(full_list[i])

		if "SP4T_SHORT" in full_list[i]:
			l2.append(full_list[i])

		if "SP4T_LOAD" in full_list[i]:
			l3.append(full_list[i])	

		if "SP4T_DUT" in full_list[i]:
			l4.append(full_list[i])		

	l1_sorted = []
	l2_sorted = []
	l3_sorted = []
	l4_sorted = []	

	for j in range(len(l1)):

		for i in range(len(l1)):
			if "MEAS" + str(j+1) + '_' in l1[i]:
				l1_sorted.append(l1[i])


			if "MEAS" + str(j+1) + '_' in l2[i]:
				l2_sorted.append(l2[i])


			if "MEAS" + str(j+1) + '_' in l3[i]:
				l3_sorted.append(l3[i])


			if "MEAS" + str(j+1) + '_' in l4[i]:
				l4_sorted.append(l4[i])


	l = min([len(l1_sorted), len(l2_sorted), len(l3_sorted), len(l4_sorted)])				

	oraw_array = np.zeros([l, 250]) + 0j
	sraw_array = np.zeros([l, 250]) + 0j
	lraw_array = np.zeros([l, 250]) + 0j
	araw_array = np.zeros([l, 250]) + 0j				




	dd2_all    = np.zeros([l, 250]) + 0j
	dd3_all    = np.zeros([l, 250]) + 0j

	for i in range(len(l1_sorted)):

		print('Correcting measurement ' + str(i+1) + ' of ' + str(len(l1_sorted)) + '.' )

		# Reading measurements from ith cycle
		oi, f = rc.s1p_read(path_data + l1_sorted[i])
		si, f = rc.s1p_read(path_data + l2_sorted[i])
		li, f = rc.s1p_read(path_data + l3_sorted[i])
		ai, f = rc.s1p_read(path_data + l4_sorted[i])


		# Appending measurements to arrays
		oraw_array[i,:] = oi
		sraw_array[i,:] = si
		lraw_array[i,:] = li
		araw_array[i,:] = ai


		dd2, x1, x2, x3 = rc.de_embed(oa_switch, sa_switch, la_switch, oi, si, li, ai)
		dd2_all[i,:] = dd2


		# Fully calibrated measurements
		dd3 = rc.gamma_de_embed(s11, s12s21, s22, dd2)
		dd3_all[i,:] = dd3



	# Correcting test measurements
	# ----------------------------
	td_t1c, x1, x2, x3 = rc.de_embed(oa_switch, sa_switch, la_switch, to_t1, ts_t1, tl_t1, td_t1)
	td_t2c, x1, x2, x3 = rc.de_embed(oa_switch, sa_switch, la_switch, to_t2, ts_t2, tl_t2, td_t2)

	td_t1cc = rc.gamma_de_embed(s11, s12s21, s22, td_t1c)
	td_t2cc = rc.gamma_de_embed(s11, s12s21, s22, td_t2c)


	# Expectation from DC resistance
	# ------------------------------
	gamma_DC = np.ones(len(f))*rc.impedance2gamma(DC, 50)






	# Plotting
	# ----------------------------
	mm         = np.mean(np.abs(dd3_all), axis=0)
	ms         = np.std(np.abs(dd3_all),  axis=0)

	m_td_t1cc  = np.abs(td_t1cc)
	m_td_t2cc  = np.abs(td_t2cc)

	m_mean = np.mean(np.array([mm, m_td_t1cc, m_td_t2cc]), axis=0)





	pm = np.mean((180/np.pi)*np.unwrap(np.angle(dd3_all)), axis=0)
	ps = np.std((180/np.pi)*np.unwrap(np.angle(dd3_all)), axis=0)	

	p_td_t1cc = (180/np.pi)*np.unwrap(np.angle(td_t1cc))
	p_td_t2cc = (180/np.pi)*np.unwrap(np.angle(td_t2cc))

	p_mean = np.mean(np.array([pm, p_td_t1cc, p_td_t2cc]), axis=0)






	plt.subplot(2,1,1)
	plt.plot(f/1e6, 20*np.log10(m_td_t1cc) - 20*np.log10(m_mean), 'b', linewidth=1, label = 'DAY 1, single measurement')
	plt.plot(f/1e6, 20*np.log10(mm) - 20*np.log10(m_mean), 'k', label = 'DAY 2, average and STD of long measurement (300 traces)')
	plt.plot(f/1e6, 20*np.log10(mm+ms) - 20*np.log10(m_mean), 'k--')
	plt.plot(f/1e6, 20*np.log10(mm-ms) - 20*np.log10(m_mean), 'k--')
	plt.plot(f/1e6, 20*np.log10(m_td_t2cc) - 20*np.log10(m_mean), 'r', linewidth=1, label = 'DAY 3, single measurement')
	#plt.plot(f/1e6, 20*np.log10(gamma_DC) - 20*np.log10(m_mean), 'g', linewidth=1, label = 'DAY 3, single measurement')

	plt.xlim([50, 200])
	plt.ylim([-0.03, 0.03])
	plt.grid()
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.legend(loc=0)






	plt.subplot(2,1,2)
	plt.plot(f/1e6, p_td_t1cc - p_mean, 'b', linewidth=1)
	plt.plot(f/1e6, pm - p_mean, 'k')
	plt.plot(f/1e6, pm+ps - p_mean, 'k--')
	plt.plot(f/1e6, pm-ps - p_mean, 'k--')
	plt.plot(f/1e6, p_td_t2cc - p_mean, 'r', linewidth=1)

	plt.xlim([50, 200])
	plt.ylim([-0.3, 0.3])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase [deg]')	



	return 1
























def batch_high_band_level1_to_level2(set_number, version, flag):


	# Fourpoint Antenna
	#if set_number == 1:
		#o = eg.level1_to_level2('high_band', '2015', '109_11', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '110_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '111_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '112_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '113_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '113_09', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '114_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '115_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '116_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '117_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '118_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '119_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '119_13', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '120_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '120_14', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '121_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '122_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '122_05', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '122_08', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '123_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '123_08', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '123_15', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '124_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '124_13', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '125_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '125_05', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '125_08', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '126_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '127_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '128_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '129_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '130_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '131_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '132_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '132_04', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '133_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '134_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '135_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '136_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '137_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '138_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '139_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '140_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '141_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '142_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '143_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '144_00', version, flag, save='yes')


	#if set_number == 2:
		#o = eg.level1_to_level2('high_band', '2015', '145_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '146_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '147_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '148_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '149_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '150_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '151_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '152_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '153_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '154_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '155_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '156_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '157_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '161_18', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '162_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '163_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '164_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '165_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '166_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '167_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '168_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '169_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '170_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '171_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '172_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '173_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '174_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '175_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '176_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '177_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '178_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '179_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '180_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '181_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '182_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '183_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '184_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '185_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '186_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '187_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '188_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '189_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '190_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '191_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '192_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '192_18', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '193_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '194_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '195_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '198_00', version, flag, save='yes')
















	# Blade Antenna

	if set_number == 1:
		#o = eg.level1_to_level2('high_band', '2015', '206_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '207_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '208_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '209_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '210_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '210_03', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '211_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '211_18', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '212_00', version, flag, save='yes')


		#o = eg.level1_to_level2('high_band', '2015', '215_08', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '216_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '216_18', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '217_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '218_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '219_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '220_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '221_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '222_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '223_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '224_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '225_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '226_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '227_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '228_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '229_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '230_00', version, flag, save='yes')


		#o = eg.level1_to_level2('high_band', '2015', '231_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '232_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '233_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '234_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '235_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '236_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '237_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '238_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '239_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '240_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '241_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '242_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '243_00', version, flag, save='yes')


		#o = eg.level1_to_level2('high_band', '2015', '245_00', version, flag, save='yes')


		#o = eg.level1_to_level2('high_band', '2015', '250_15', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '251_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '251_21', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '252_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '253_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '254_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '255_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '256_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '257_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '258_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '259_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '260_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '261_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '262_00', version, flag, save='yes')


		#o = eg.level1_to_level2('high_band', '2015', '265_19', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '266_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '267_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '268_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '269_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '270_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '271_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '272_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '273_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '274_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '275_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '276_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '277_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '278_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '279_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '280_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '281_17', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '282_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '283_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '284_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '285_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '286_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '287_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '288_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '289_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '290_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '291_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '292_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '293_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '294_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '295_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '296_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '297_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '298_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '299_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '300_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '301_00', version, flag, save='yes')

		#o = eg.level1_to_level2('high_band', '2016', '039_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '040_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '041_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '042_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '043_00', version, flag, save='yes')

		o = eg.level1_to_level2('high_band', '2016', '050_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '051_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '052_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '053_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '055_07', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '056_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '057_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '058_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '059_00', version, flag, save='yes')



	if set_number == 2:	
		#o = eg.level1_to_level2('high_band', '2015', '302_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '303_00', version, flag, save='yes')


		#o = eg.level1_to_level2('high_band', '2015', '310_18', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '311_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '312_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '313_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '314_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '315_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '316_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '317_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '318_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '319_00', version, flag, save='yes')


		#o = eg.level1_to_level2('high_band', '2015', '320_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '321_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '322_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '323_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '324_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '325_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '326_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '327_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '328_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '329_00', version, flag, save='yes')	

		#o = eg.level1_to_level2('high_band', '2015', '330_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '331_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '332_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '333_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '334_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '335_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '336_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '337_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '338_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '339_00', version, flag, save='yes')

		#o = eg.level1_to_level2('high_band', '2015', '340_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '341_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '342_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '343_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '344_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '345_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '346_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '347_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '348_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '349_00', version, flag, save='yes')	

		#o = eg.level1_to_level2('high_band', '2015', '350_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '351_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '352_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '353_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '354_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '355_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '356_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '357_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '358_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '359_00', version, flag, save='yes')		

		#o = eg.level1_to_level2('high_band', '2015', '360_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '361_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '362_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '363_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '364_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2015', '365_00', version, flag, save='yes')	

		#o = eg.level1_to_level2('high_band', '2016', '001_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '002_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '003_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '004_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '005_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '006_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '007_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '008_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '009_00', version, flag, save='yes')	

		#o = eg.level1_to_level2('high_band', '2016', '010_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '011_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '012_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '013_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '014_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '015_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '016_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '017_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '018_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '019_00', version, flag, save='yes')

		#o = eg.level1_to_level2('high_band', '2016', '020_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '027_20', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '028_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '029_00', version, flag, save='yes')

		#o = eg.level1_to_level2('high_band', '2016', '030_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '031_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '032_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '033_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '034_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '035_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '036_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '037_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '038_00', version, flag, save='yes')

		#o = eg.level1_to_level2('high_band', '2016', '044_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '045_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '046_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '047_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '048_00', version, flag, save='yes')
		#o = eg.level1_to_level2('high_band', '2016', '049_00', version, flag, save='yes')

		o = eg.level1_to_level2('high_band', '2016', '060_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '061_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '062_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '063_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '064_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '065_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '066_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '067_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '068_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '069_00', version, flag, save='yes')




	if set_number == 3:

		o = eg.level1_to_level2('high_band', '2016', '070_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '071_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '072_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '073_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '074_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '075_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '076_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '077_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '078_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '079_00', version, flag, save='yes')



	if set_number == 4:	

		o = eg.level1_to_level2('high_band', '2016', '080_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '081_00', version, flag, save='yes')
		o = eg.level1_to_level2('high_band', '2016', '082_00', version, flag, save='yes')






	return 1	









































def batch_high_band_level1_to_level2_v2(antenna, set_number):


	# Fourpoint Antenna
	if (antenna == 'fourpoint') and (set_number == 1):
		o = eg.level1_to_level2_v2('high_band', '2015', '109_11')

		o = eg.level1_to_level2_v2('high_band', '2015', '110_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '111_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '112_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '113_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '113_09')
		o = eg.level1_to_level2_v2('high_band', '2015', '114_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '115_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '116_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '117_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '118_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '119_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '119_13')

		o = eg.level1_to_level2_v2('high_band', '2015', '120_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '120_14')
		o = eg.level1_to_level2_v2('high_band', '2015', '121_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '122_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '122_05')
		o = eg.level1_to_level2_v2('high_band', '2015', '122_08')
		o = eg.level1_to_level2_v2('high_band', '2015', '123_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '123_08')
		o = eg.level1_to_level2_v2('high_band', '2015', '123_15')
		o = eg.level1_to_level2_v2('high_band', '2015', '124_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '124_13')
		o = eg.level1_to_level2_v2('high_band', '2015', '125_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '125_05')
		o = eg.level1_to_level2_v2('high_band', '2015', '125_08')
		o = eg.level1_to_level2_v2('high_band', '2015', '126_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '127_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '128_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '129_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '130_00')		
		o = eg.level1_to_level2_v2('high_band', '2015', '131_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '132_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '132_04')
		o = eg.level1_to_level2_v2('high_band', '2015', '133_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '134_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '135_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '136_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '137_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '138_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '139_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '140_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '141_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '142_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '143_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '144_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '145_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '146_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '147_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '148_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '149_00')

	if (antenna == 'fourpoint') and (set_number == 2):
		o = eg.level1_to_level2_v2('high_band', '2015', '150_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '151_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '152_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '153_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '154_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '155_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '156_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '157_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '161_18')
		o = eg.level1_to_level2_v2('high_band', '2015', '162_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '163_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '164_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '165_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '166_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '167_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '168_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '169_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '170_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '171_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '172_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '173_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '174_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '175_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '176_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '177_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '178_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '179_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '180_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '181_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '182_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '183_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '184_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '185_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '186_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '187_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '188_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '189_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '190_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '191_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '192_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '192_18')
		o = eg.level1_to_level2_v2('high_band', '2015', '193_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '194_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '195_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '198_00')
















	# Blade Antenna

	if (antenna == 'blade') and (set_number == 1):
		o = eg.level1_to_level2_v2('high_band', '2015', '206_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '207_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '208_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '209_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '210_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '210_03')
		o = eg.level1_to_level2_v2('high_band', '2015', '211_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '211_18')
		o = eg.level1_to_level2_v2('high_band', '2015', '212_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '215_08')
		o = eg.level1_to_level2_v2('high_band', '2015', '216_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '216_18')		
		o = eg.level1_to_level2_v2('high_band', '2015', '217_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '218_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '219_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '220_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '221_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '222_00')		
		o = eg.level1_to_level2_v2('high_band', '2015', '223_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '224_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '225_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '226_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '227_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '228_00')	
		o = eg.level1_to_level2_v2('high_band', '2015', '229_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '230_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '231_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '232_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '233_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '234_00')	
		o = eg.level1_to_level2_v2('high_band', '2015', '235_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '236_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '237_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '238_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '239_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '240_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '241_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '242_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '243_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '245_00')



	if (antenna == 'blade') and (set_number == 2):
		o = eg.level1_to_level2_v2('high_band', '2015', '250_15')
		o = eg.level1_to_level2_v2('high_band', '2015', '251_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '251_21')
		o = eg.level1_to_level2_v2('high_band', '2015', '252_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '253_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '254_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '255_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '256_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '257_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '258_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '259_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '260_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '261_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '262_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '265_19')
		o = eg.level1_to_level2_v2('high_band', '2015', '266_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '267_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '268_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '269_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '270_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '271_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '272_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '273_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '274_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '275_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '276_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '277_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '278_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '279_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '280_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '281_17')
		o = eg.level1_to_level2_v2('high_band', '2015', '282_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '283_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '284_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '285_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '286_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '287_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '288_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '289_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '290_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '291_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '292_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '293_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '294_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '295_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '296_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '297_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '298_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '299_00')



	if (antenna == 'blade') and (set_number == 3):	
		o = eg.level1_to_level2_v2('high_band', '2015', '300_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '301_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '302_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '303_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '310_18')
		o = eg.level1_to_level2_v2('high_band', '2015', '311_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '312_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '313_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '314_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '315_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '316_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '317_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '318_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '319_00')	

		o = eg.level1_to_level2_v2('high_band', '2015', '320_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '321_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '322_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '323_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '324_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '325_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '326_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '327_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '328_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '329_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '330_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '331_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '332_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '333_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '334_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '335_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '336_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '337_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '338_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '339_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '340_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '341_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '342_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '343_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '344_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '345_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '346_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '347_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '348_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '349_00')



	if (antenna == 'blade') and (set_number == 4):
		o = eg.level1_to_level2_v2('high_band', '2015', '350_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '351_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '352_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '353_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '354_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '355_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '356_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '357_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '358_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '359_00')

		o = eg.level1_to_level2_v2('high_band', '2015', '360_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '361_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '362_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '363_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '364_00')
		o = eg.level1_to_level2_v2('high_band', '2015', '365_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '001_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '002_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '003_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '004_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '005_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '006_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '007_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '008_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '009_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '010_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '011_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '012_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '013_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '014_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '015_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '016_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '017_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '018_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '019_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '020_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '027_20')
		o = eg.level1_to_level2_v2('high_band', '2016', '028_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '029_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '030_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '031_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '032_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '033_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '034_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '035_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '036_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '037_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '038_00')



	if (antenna == 'blade') and (set_number == 5):
		o = eg.level1_to_level2_v2('high_band', '2016', '039_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '040_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '041_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '042_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '043_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '044_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '045_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '046_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '047_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '048_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '049_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '050_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '051_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '052_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '053_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '056_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '057_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '058_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '059_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '060_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '061_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '062_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '063_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '064_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '065_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '066_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '067_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '068_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '069_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '070_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '071_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '072_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '073_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '074_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '075_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '076_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '077_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '078_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '079_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '080_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '081_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '082_00')




	if (antenna == 'blade') and (set_number == 6):		
		o = eg.level1_to_level2_v2('high_band', '2016', '083_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '084_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '085_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '086_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '087_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '088_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '089_00')		

		o = eg.level1_to_level2_v2('high_band', '2016', '090_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '091_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '092_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '093_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '094_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '095_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '096_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '097_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '098_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '099_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '100_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '101_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '102_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '103_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '104_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '107_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '108_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '109_00')


	if (antenna == 'blade') and (set_number == 7):		
		o = eg.level1_to_level2_v2('high_band', '2016', '110_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '111_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '112_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '113_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '114_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '115_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '116_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '117_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '118_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '123_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '124_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '125_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '126_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '127_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '128_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '129_00')		

		o = eg.level1_to_level2_v2('high_band', '2016', '130_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '131_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '132_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '133_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '134_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '135_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '136_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '137_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '138_00')		
		o = eg.level1_to_level2_v2('high_band', '2016', '139_00')


	if (antenna == 'blade') and (set_number == 8):
		o = eg.level1_to_level2_v2('high_band', '2016', '140_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '141_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '142_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '143_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '144_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '145_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '146_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '147_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '148_00')		
		o = eg.level1_to_level2_v2('high_band', '2016', '149_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '150_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '151_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '152_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '153_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '154_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '155_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '156_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '157_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '158_00')		
		o = eg.level1_to_level2_v2('high_band', '2016', '159_00')


	if (antenna == 'blade') and (set_number == 9):		
		o = eg.level1_to_level2_v2('high_band', '2016', '160_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '161_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '162_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '163_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '164_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '165_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '166_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '167_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '168_00')		
		o = eg.level1_to_level2_v2('high_band', '2016', '169_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '170_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '171_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '172_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '173_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '174_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '175_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '176_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '177_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '178_00')		
		o = eg.level1_to_level2_v2('high_band', '2016', '179_00')


	if (antenna == 'blade') and (set_number == 10):	
		o = eg.level1_to_level2_v2('high_band', '2016', '180_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '181_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '182_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '183_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '184_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '185_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '186_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '187_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '188_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '189_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '190_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '191_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '192_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '193_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '194_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '195_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '196_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '197_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '198_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '199_00')


	if (antenna == 'blade') and (set_number == 11):		
		o = eg.level1_to_level2_v2('high_band', '2016', '200_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '201_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '202_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '203_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '204_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '205_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '206_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '207_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '208_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '209_00')		

		o = eg.level1_to_level2_v2('high_band', '2016', '210_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '210_08')
		o = eg.level1_to_level2_v2('high_band', '2016', '211_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '212_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '213_00')



	if (antenna == 'blade') and (set_number == 12):
		o = eg.level1_to_level2_v2('high_band', '2016', '213_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '216_16')
		o = eg.level1_to_level2_v2('high_band', '2016', '217_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '218_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '219_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '220_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '221_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '223_18')
		o = eg.level1_to_level2_v2('high_band', '2016', '224_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '225_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '226_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '227_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '228_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '229_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '230_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '236_09')
		o = eg.level1_to_level2_v2('high_band', '2016', '237_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '239_00')



	if (antenna == 'blade') and (set_number == 13):
		o = eg.level1_to_level2_v2('high_band', '2016', '240_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '241_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '242_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '243_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '244_07')
		o = eg.level1_to_level2_v2('high_band', '2016', '245_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '246_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '247_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '248_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '248_06')
		o = eg.level1_to_level2_v2('high_band', '2016', '249_00')

		o = eg.level1_to_level2_v2('high_band', '2016', '250_02')
		o = eg.level1_to_level2_v2('high_band', '2016', '251_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '252_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '253_13')
		o = eg.level1_to_level2_v2('high_band', '2016', '254_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '254_09')
		o = eg.level1_to_level2_v2('high_band', '2016', '255_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '256_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '257_00')
		o = eg.level1_to_level2_v2('high_band', '2016', '258_00')

	return 1	



























































def batch_low_band_level1_to_level2(set_number, version, flag):


	if set_number == 1:
		#o = eg.level1_to_level2('low_band', '2015', '282_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '283_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '284_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '285_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '285_14', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '286_02', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '287_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '288_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '289_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2015', '291_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '292_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '293_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '294_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '295_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '296_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '297_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '298_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '299_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2015', '300_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '301_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '302_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '303_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2015', '310_18', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '311_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '312_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '313_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '314_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '315_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '316_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '317_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '318_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '319_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2015', '320_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '321_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '322_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '323_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '324_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '325_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '326_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '327_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '328_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '329_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2015', '330_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '331_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '332_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '333_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '334_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '335_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '336_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '337_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '338_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '339_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2015', '340_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '341_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '342_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '343_14', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '344_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '344_21', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '345_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '346_00', version, flag, save='yes')

		o = eg.level1_to_level2('low_band', '2016', '049_00', version, flag, save='yes')

		o = eg.level1_to_level2('low_band', '2016', '050_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '051_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '052_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '053_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '055_21', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '056_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '057_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '058_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '059_00', version, flag, save='yes')





	if set_number == 2:
		#o = eg.level1_to_level2('low_band', '2015', '347_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '348_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '349_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2015', '350_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '351_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '352_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '353_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '354_00', version, flag, save='yes')
		####### o = eg.level1_to_level2('low_band', '2015', '355_00', version, flag, save='yes')

		####### o = eg.level1_to_level2('low_band', '2015', '361_16', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '362_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '363_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '364_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2015', '365_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2016', '001_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '002_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '003_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '004_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '005_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '006_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '007_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '008_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '009_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2016', '010_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '011_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '012_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '013_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '014_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '015_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '016_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '017_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '018_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '019_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2016', '020_00', version, flag, save='yes')
		########  o = eg.level1_to_level2('low_band', '2016', '022_16', version, flag, save='yes')
		########  o = eg.level1_to_level2('low_band', '2016', '023_00', version, flag, save='yes')
		########  o = eg.level1_to_level2('low_band', '2016', '025_05', version, flag, save='yes')
		########  o = eg.level1_to_level2('low_band', '2016', '026_00', version, flag, save='yes')
		########  o = eg.level1_to_level2('low_band', '2016', '027_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '028_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '029_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2016', '030_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '031_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '032_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '033_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '034_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '035_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '036_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '037_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '038_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '039_00', version, flag, save='yes')

		#o = eg.level1_to_level2('low_band', '2016', '040_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '041_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '042_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '043_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '044_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '045_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '046_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '047_00', version, flag, save='yes')
		#o = eg.level1_to_level2('low_band', '2016', '048_00', version, flag, save='yes')

		o = eg.level1_to_level2('low_band', '2016', '060_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '061_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '062_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '063_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '064_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '065_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '066_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '067_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '068_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '069_00', version, flag, save='yes')


	if set_number == 3:	
		o = eg.level1_to_level2('low_band', '2016', '070_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '071_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '072_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '073_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '074_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '075_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '076_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '077_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '078_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '079_00', version, flag, save='yes')


	if set_number == 4:	
		o = eg.level1_to_level2('low_band', '2016', '080_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '081_00', version, flag, save='yes')
		o = eg.level1_to_level2('low_band', '2016', '082_00', version, flag, save='yes')

	return 1















def batch_low_band_level1_to_level2_v2(set_number):


	if set_number == 1:

		# DON'T PROCESS
		#o = eg.level1_to_level2_v2('low_band', '2015', '282_00')
		#o = eg.level1_to_level2_v2('low_band', '2015', '283_00')
		#o = eg.level1_to_level2_v2('low_band', '2015', '284_00')
		#o = eg.level1_to_level2_v2('low_band', '2015', '285_00')
		#o = eg.level1_to_level2_v2('low_band', '2015', '285_14')


		o = eg.level1_to_level2_v2('low_band', '2015', '286_02')
		o = eg.level1_to_level2_v2('low_band', '2015', '287_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '288_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '289_00')

		o = eg.level1_to_level2_v2('low_band', '2015', '291_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '292_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '293_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '294_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '295_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '296_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '297_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '298_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '299_00')

		o = eg.level1_to_level2_v2('low_band', '2015', '300_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '301_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '302_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '303_00')

		o = eg.level1_to_level2_v2('low_band', '2015', '310_18')
		o = eg.level1_to_level2_v2('low_band', '2015', '311_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '312_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '313_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '314_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '315_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '316_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '317_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '318_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '319_00')

		o = eg.level1_to_level2_v2('low_band', '2015', '320_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '321_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '322_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '323_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '324_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '325_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '326_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '327_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '328_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '329_00')

		o = eg.level1_to_level2_v2('low_band', '2015', '330_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '331_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '332_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '333_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '334_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '335_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '336_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '337_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '338_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '339_00')

		o = eg.level1_to_level2_v2('low_band', '2015', '340_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '341_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '342_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '343_14')
		o = eg.level1_to_level2_v2('low_band', '2015', '344_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '344_21')
		o = eg.level1_to_level2_v2('low_band', '2015', '345_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '346_00')

		o = eg.level1_to_level2_v2('low_band', '2015', '347_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '348_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '349_00')

		o = eg.level1_to_level2_v2('low_band', '2015', '350_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '351_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '352_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '353_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '354_00')

		o = eg.level1_to_level2_v2('low_band', '2015', '362_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '363_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '364_00')
		o = eg.level1_to_level2_v2('low_band', '2015', '365_00')





	if set_number == 2:

		o = eg.level1_to_level2_v2('low_band', '2016', '001_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '002_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '003_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '004_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '005_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '006_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '007_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '008_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '009_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '010_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '011_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '012_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '013_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '014_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '015_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '016_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '017_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '018_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '019_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '020_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '028_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '029_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '030_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '031_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '032_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '033_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '034_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '035_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '036_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '037_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '038_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '039_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '040_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '041_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '042_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '043_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '044_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '045_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '046_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '047_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '048_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '049_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '050_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '051_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '052_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '053_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '055_21')
		o = eg.level1_to_level2_v2('low_band', '2016', '056_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '057_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '058_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '059_00')


		o = eg.level1_to_level2_v2('low_band', '2016', '060_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '061_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '062_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '063_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '064_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '065_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '066_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '067_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '068_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '069_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '070_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '071_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '072_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '073_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '074_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '075_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '076_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '077_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '078_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '079_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '080_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '081_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '082_00')





	if set_number == 3:

		o = eg.level1_to_level2_v2('low_band', '2016', '083_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '084_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '085_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '086_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '087_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '088_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '089_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '090_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '091_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '092_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '093_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '094_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '095_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '096_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '097_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '098_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '099_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '100_00')



	if set_number == 4:

		o = eg.level1_to_level2_v2('low_band', '2016', '101_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '102_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '103_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '104_00')
		#o = eg.level1_to_level2_v2('low_band', '2016', '105_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '106_13')
		o = eg.level1_to_level2_v2('low_band', '2016', '107_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '108_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '109_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '110_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '111_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '112_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '113_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '114_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '115_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '116_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '117_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '118_00')		

		o = eg.level1_to_level2_v2('low_band', '2016', '122_16')
		o = eg.level1_to_level2_v2('low_band', '2016', '123_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '124_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '125_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '126_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '127_00')		





	if set_number == 5:

		o = eg.level1_to_level2_v2('low_band', '2016', '128_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '129_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '130_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '131_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '132_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '133_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '134_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '135_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '136_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '137_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '138_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '139_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '140_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '141_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '142_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '143_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '144_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '145_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '146_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '147_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '148_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '149_00')



	if set_number == 6:

		o = eg.level1_to_level2_v2('low_band', '2016', '150_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '151_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '152_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '153_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '154_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '155_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '156_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '157_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '158_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '159_00')


		o = eg.level1_to_level2_v2('low_band', '2016', '160_00')
		#o = eg.level1_to_level2_v2('low_band', '2016', '165_14')
		#o = eg.level1_to_level2_v2('low_band', '2016', '166_00')
		#o = eg.level1_to_level2_v2('low_band', '2016', '166_14')
		o = eg.level1_to_level2_v2('low_band', '2016', '167_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '168_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '169_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '170_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '171_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '172_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '173_00')



	if set_number == 7:

		o = eg.level1_to_level2_v2('low_band', '2016', '180_15')
		o = eg.level1_to_level2_v2('low_band', '2016', '181_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '182_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '183_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '184_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '185_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '186_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '187_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '188_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '189_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '190_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '191_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '192_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '193_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '194_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '195_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '196_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '197_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '198_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '199_00')		

		o = eg.level1_to_level2_v2('low_band', '2016', '200_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '201_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '202_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '203_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '204_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '210_14')
		o = eg.level1_to_level2_v2('low_band', '2016', '211_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '212_00')




	if set_number == 8:

		o = eg.level1_to_level2_v2('low_band', '2016', '217_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '218_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '219_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '220_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '226_19')
		o = eg.level1_to_level2_v2('low_band', '2016', '227_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '228_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '229_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '230_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '238_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '246_07')
		o = eg.level1_to_level2_v2('low_band', '2016', '247_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '248_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '249_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '250_02')
		o = eg.level1_to_level2_v2('low_band', '2016', '251_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '252_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '253_13')
		o = eg.level1_to_level2_v2('low_band', '2016', '254_00')









	if set_number == 9:

		# Low Band with NEW GOOD SWITCH and EXTENDED GROUND PLANE
		#-------------------------------------------------------		
		o = eg.level1_to_level2_v2('low_band', '2016', '258_13')
		o = eg.level1_to_level2_v2('low_band', '2016', '259_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '260_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '261_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '262_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '263_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '264_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '265_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '266_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '267_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '268_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '269_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '270_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '271_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '273_15')
		o = eg.level1_to_level2_v2('low_band', '2016', '274_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '275_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '276_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '277_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '278_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '279_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '280_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '281_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '282_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '283_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '284_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '285_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '286_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '287_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '288_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '289_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '290_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '291_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '292_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '293_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '294_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '295_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '296_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '297_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '298_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '299_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '302_14')
		o = eg.level1_to_level2_v2('low_band', '2016', '303_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '304_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '305_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '314_15')
		o = eg.level1_to_level2_v2('low_band', '2016', '315_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '316_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '317_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '318_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '319_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '320_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '321_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '322_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '323_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '324_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '325_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '326_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '327_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '328_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '329_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '330_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '331_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '332_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '333_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '334_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '335_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '336_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '337_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '338_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '339_00')



	if set_number == 10:

		o = eg.level1_to_level2_v2('low_band', '2016', '340_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '341_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '342_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '343_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '344_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '345_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '346_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '347_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '348_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '349_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '350_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '351_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '352_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '353_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '354_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '355_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '356_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '356_06')
		o = eg.level1_to_level2_v2('low_band', '2016', '357_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '357_07')
		o = eg.level1_to_level2_v2('low_band', '2016', '358_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '359_00')

		o = eg.level1_to_level2_v2('low_band', '2016', '360_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '361_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '362_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '363_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '364_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '365_00')
		o = eg.level1_to_level2_v2('low_band', '2016', '366_00')

		o = eg.level1_to_level2_v2('low_band', '2017', '001_15')
		o = eg.level1_to_level2_v2('low_band', '2017', '002_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '003_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '005_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '006_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '007_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '008_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '009_00')

		o = eg.level1_to_level2_v2('low_band', '2017', '010_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '011_07')
		o = eg.level1_to_level2_v2('low_band', '2017', '012_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '013_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '014_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '015_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '016_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '017_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '018_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '019_00')

		o = eg.level1_to_level2_v2('low_band', '2017', '023_00')

		o = eg.level1_to_level2_v2('low_band', '2017', '077_07')
		o = eg.level1_to_level2_v2('low_band', '2017', '078_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '079_00')

		o = eg.level1_to_level2_v2('low_band', '2017', '080_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '081_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '081_12')
		o = eg.level1_to_level2_v2('low_band', '2017', '082_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '082_08')
		o = eg.level1_to_level2_v2('low_band', '2017', '083_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '084_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '085_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '086_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '087_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '087_21')
		o = eg.level1_to_level2_v2('low_band', '2017', '088_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '089_00')

		o = eg.level1_to_level2_v2('low_band', '2017', '090_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '091_00')


	if set_number == 11:
		o = eg.level1_to_level2_v2('low_band', '2017', '092_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '093_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '093_17')
		o = eg.level1_to_level2_v2('low_band', '2017', '094_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '095_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '095_15')




	if set_number == 12:
		o = eg.level1_to_level2_v2('low_band', '2017', '153_12')
		o = eg.level1_to_level2_v2('low_band', '2017', '154_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '155_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '156_00')

	if set_number == 13:	
		o = eg.level1_to_level2_v2('low_band', '2017', '157_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '158_03')
		o = eg.level1_to_level2_v2('low_band', '2017', '159_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '160_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '161_00')

	if set_number == 14:	
		o = eg.level1_to_level2_v2('low_band', '2017', '162_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '163_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '164_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '165_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '166_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '167_00')

	if set_number == 15:
		o = eg.level1_to_level2_v2('low_band', '2017', '168_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '169_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '170_00')
		o = eg.level1_to_level2_v2('low_band', '2017', '171_00')



	return 1













def batch_low_band2_level1_to_level2_v2(set_number):



	if set_number == 1:

		o = eg.level1_to_level2_v2('low_band2', '2017', '082_03')
		o = eg.level1_to_level2_v2('low_band2', '2017', '082_08')
		o = eg.level1_to_level2_v2('low_band2', '2017', '083_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '084_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '085_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '086_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '086_14')
		o = eg.level1_to_level2_v2('low_band2', '2017', '087_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '087_21')
		o = eg.level1_to_level2_v2('low_band2', '2017', '088_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '089_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '090_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '091_00')		
		o = eg.level1_to_level2_v2('low_band2', '2017', '092_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '093_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '093_17')
		o = eg.level1_to_level2_v2('low_band2', '2017', '094_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '095_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '096_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '097_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '098_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '099_00')		
		o = eg.level1_to_level2_v2('low_band2', '2017', '100_00')


	if set_number == 2:

		o = eg.level1_to_level2_v2('low_band2', '2017', '101_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '102_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '102_15')
		o = eg.level1_to_level2_v2('low_band2', '2017', '103_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '103_15')
		o = eg.level1_to_level2_v2('low_band2', '2017', '104_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '105_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '106_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '107_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '108_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '109_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '110_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '111_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '112_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '113_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '114_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '115_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '116_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '117_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '117_16')
		o = eg.level1_to_level2_v2('low_band2', '2017', '118_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '119_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '120_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '121_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '122_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '123_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '124_00')



	if set_number == 3:

		o = eg.level1_to_level2_v2('low_band2', '2017', '125_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '126_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '127_00')		
		o = eg.level1_to_level2_v2('low_band2', '2017', '128_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '129_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '130_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '131_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '132_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '133_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '134_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '135_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '136_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '137_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '138_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '139_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '140_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '141_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '142_00')		




		# Rotation of antenna to EW
		o = eg.level1_to_level2_v2('low_band2', '2017', '154_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '155_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '156_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '157_01')
		o = eg.level1_to_level2_v2('low_band2', '2017', '158_03')
		o = eg.level1_to_level2_v2('low_band2', '2017', '159_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '160_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '161_00')

	if set_number == 4:	
		o = eg.level1_to_level2_v2('low_band2', '2017', '162_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '163_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '164_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '165_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '166_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '167_00')


	if set_number == 5:
		o = eg.level1_to_level2_v2('low_band2', '2017', '168_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '169_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '170_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '171_00')




	# Removing the Balun Shield
	if set_number == 6:
		o = eg.level1_to_level2_v2('low_band2', '2017', '181_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '182_00')


	if set_number == 7:
		o = eg.level1_to_level2_v2('low_band2', '2017', '183_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '184_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '184_17')
		o = eg.level1_to_level2_v2('low_band2', '2017', '185_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '186_00')


	if set_number == 8:
		o = eg.level1_to_level2_v2('low_band2', '2017', '187_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '188_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '189_00')





	if set_number == 9:
		o = eg.level1_to_level2_v2('low_band2', '2017', '190_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '191_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '192_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '193_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '194_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '195_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '196_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '197_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '198_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '199_00')

		o = eg.level1_to_level2_v2('low_band2', '2017', '200_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '201_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '202_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '203_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '204_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '205_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '206_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '207_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '208_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '209_00')

		o = eg.level1_to_level2_v2('low_band2', '2017', '210_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '211_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '212_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '213_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '214_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '215_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '216_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '217_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '218_16')
		o = eg.level1_to_level2_v2('low_band2', '2017', '219_00')

		o = eg.level1_to_level2_v2('low_band2', '2017', '220_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '221_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '222_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '223_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '224_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '225_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '226_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '227_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '228_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '229_00')
		
		
		
		
	if set_number == 10:

		o = eg.level1_to_level2_v2('low_band2', '2017', '230_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '231_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '232_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '233_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '234_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '235_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '236_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '237_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '238_00')
		o = eg.level1_to_level2_v2('low_band2', '2017', '239_00')


	return 1





















def batch_low_band_level2_to_level3(case):



	# -------------------------------------------------------------------------------------
	if case == 100:
		band              = 'low_band_2015'
		save_folder       = 'original_gp_no_bc_s11_2016_177_switch2017'
		date_list         = eg.data_analysis_date_list(band, 'blade', case=0)  # Files from original ground plane
		#date_list         = ['2015_287_00']



		print('XXX')
		ant_s11           = 177.2   # from 2015
		ant_s11_Nfit      = 9
		low_band_cal_file = 0     # 2015 calibration file, 50-100 MHz, CASE 0: cfit=6, wfit=5, CASE 1: cfit=7, wfit=7, CASE 2 (calibration 2017-05): cfit=7, wfit=7
		beam_correction   = 'no'  # 4: Original ground plane, with scaled Haslam, FROM NIVEDITA,   'no' 

		fgl  = 1                  # 1
		glp  = 2                  # 2 for   2% loss. This is a typical value. original ground plane,  memo 239
		fal  = 1                  # 1   
		fbcl = 1                  # 1

		for i in range(len(date_list)):
			o = eg.low_band_level2_to_level3_FAST(band, date_list[i], save='yes', save_folder=save_folder, save_flag='', sun_el_max=90, moon_el_max=90, amb_hum_max=90, min_receiver_temp=-50, max_receiver_temp=50, ant_s11=ant_s11, ant_s11_Nfit=ant_s11_Nfit, fgl=fgl, glp=glp, fal=fal, fbcl=fbcl, receiver_temperature=25, low_band_cal_file=low_band_cal_file, beam_correction=beam_correction)








	# -------------------------------------------------------------------------------------
	if case == 200:
		band              = 'low_band_2015'
		save_folder       = 'extended_gp_yes_bc_s11_2015_342_switch2015'
		date_list         =  eg.data_analysis_date_list(band, 'blade', case=1)   # Files from extended ground plane
		#date_list        = ['2016_260_00']



		print('YYY')
		ant_s11           = 342   # from 2015 / 2017
		ant_s11_Nfit      = 9
		low_band_cal_file = 0     # 2015 calibration file, 50-100 MHz, CASE 0: cfit=6, wfit=5, CASE 1: cfit=7, wfit=7, CASE 2 (calibration 2017-05): cfit=7, wfit=7
		beam_correction   = 1     # Extended ground plane, with scaled Haslam, FROM NIVEDITA = 1

		fgl  = 1                  # 1
		glp  = 0.5                # 0.5
		fal  = 1                  # 1   
		fbcl = 1                  # 1

		for i in range(len(date_list)):
			o = eg.low_band_level2_to_level3_FAST(band, date_list[i], save='yes', save_folder=save_folder, save_flag='', sun_el_max=90, moon_el_max=90, amb_hum_max=90, min_receiver_temp=-50, max_receiver_temp=50, ant_s11=ant_s11, ant_s11_Nfit=ant_s11_Nfit, fgl=fgl, glp=glp, fal=fal, fbcl=fbcl, receiver_temperature=25, low_band_cal_file=low_band_cal_file, beam_correction=beam_correction)





	# -------------------------------------------------------------------------------------
	if case == 210:
		band              = 'low_band_2015'
		save_folder       = 'original_gp_yes_bc_s11_2015_342_50_120MHz'
		date_list         = eg.data_analysis_date_list(band, 'blade', case=0)   # Case 0: original GP. Case 1: extended ----------  Case 2: Files from extended ground plane, starting with 2017-153
		# date_list         = date_list[0:2]    #['2017_090_00']



		print('YYY')
		ant_s11           = 342   # from 2015
		ant_s11_Nfit      = 11    # 9 is the right number for 50-100 MHz. 11 is the right number for 50-120 MHz
		low_band_cal_file = 3     # 2015 calibration file, 50-100 MHz, CASE 0: cfit=6, wfit=5, CASE 1: cfit=7, wfit=7, CASE 2 (calibration 2017-05): cfit=7, wfit=7, CASE 3 (calibration 2017-05, 50-120 MHz): cfit=7, wfit=8
		beam_correction   = 'no' #2  # Extended ground plane, with scaled Haslam, FROM NIVEDITA = 1.  Other file in range 50-120 MHz is case 2

		fgl  = 1                  # 1
		glp  = 2                  # 2 or 0.5
		fal  = 1                  # 1   
		fbcl = 1                  # 1

		for i in range(len(date_list)):
			o = eg.low_band_level2_to_level3_FAST(band, date_list[i], save='yes', save_folder=save_folder, save_flag='', sun_el_max=90, moon_el_max=90, amb_hum_max=90, min_receiver_temp=-50, max_receiver_temp=50, ant_s11=ant_s11, ant_s11_Nfit=ant_s11_Nfit, fgl=fgl, glp=glp, fal=fal, fbcl=fbcl, receiver_temperature=25, low_band_cal_file=low_band_cal_file, beam_correction=beam_correction)















	# -------------------------------------------------------------------------------------
	if case == 300:
		band              = 'low_band2_2017'
		save_folder       = 'NS_no_gl'
		date_list         =  eg.data_analysis_date_list(band, 'blade', case=1)
		
		
		print('YYY')
		ant_s11              = 87    # 87: NS rotation.     152.1, 152.2, 153.1, 153.2: EW rotation WITH shield.     180: EW rotation NO shield
		ant_s11_Nfit         = 9     
		low_band_cal_file    = 0     # 2017 calibration files, 50-100 MHz.     CASE 0: cfit=6, wfit=5,     CASE 1: cfit=7, wfit=7
		receiver_temperature = 25
		beam_correction      = 1     # 1: NS rotation,    2: EW rotation
		
		fgl  = 0                  #1
		glp  = 0                  #0.5
		fal  = 1                  #1   
		fbcl = 1                  #1		

		for i in range(len(date_list)):
			o = eg.low_band_level2_to_level3_FAST(band, date_list[i], save='yes', save_folder=save_folder, save_flag='', sun_el_max=90, moon_el_max=90, amb_hum_max=90, min_receiver_temp=-50, max_receiver_temp=50, ant_s11=ant_s11, ant_s11_Nfit=ant_s11_Nfit, fgl=fgl, glp=glp, fal=fal, fbcl=fbcl, receiver_temperature=receiver_temperature, low_band_cal_file=low_band_cal_file, beam_correction=beam_correction)





	# -------------------------------------------------------------------------------------
	if case == 400:
		band              = 'low_band2_2017'
		save_folder       = 'EW_with_shield_153_2'
		date_list         =  eg.data_analysis_date_list(band, 'blade', case=2)
		
		
		print('YYY')
		ant_s11              = 153.2 # 87: NS rotation.     152.1, 152.2, 153.1, 153.2: EW rotation WITH shield.     180: EW rotation NO shield
		ant_s11_Nfit         = 9     
		low_band_cal_file    = 0     # 2017 calibration files, 50-100 MHz.     CASE 0: cfit=6, wfit=5,     CASE 1: cfit=7, wfit=7
		receiver_temperature = 25
		beam_correction      = 2     # 1: NS rotation,    2: EW rotation
		
		fgl  = 1                  #1
		glp  = 0.5                #0.5
		fal  = 1                  #1   
		fbcl = 1                  #1		

		for i in range(len(date_list)):
			o = eg.low_band_level2_to_level3_FAST(band, date_list[i], save='yes', save_folder=save_folder, save_flag='', sun_el_max=90, moon_el_max=90, amb_hum_max=90, min_receiver_temp=-50, max_receiver_temp=50, ant_s11=ant_s11, ant_s11_Nfit=ant_s11_Nfit, fgl=fgl, glp=glp, fal=fal, fbcl=fbcl, receiver_temperature=receiver_temperature, low_band_cal_file=low_band_cal_file, beam_correction=beam_correction)







	# -------------------------------------------------------------------------------------
	if case == 500:
		band              = 'low_band2_2017'
		save_folder       = 'EW_with_NO_shield_no_bc'
		date_list         =  eg.data_analysis_date_list(band, 'blade', case=3)
		
		
		print('YYY')
		ant_s11              = 180   # 87: NS rotation.     152.1, 152.2, 153.1, 153.2: EW rotation WITH shield.     180: EW rotation NO shield
		ant_s11_Nfit         = 9     
		low_band_cal_file    = 0     # 2017 calibration files, 50-100 MHz.     CASE 0: cfit=6, wfit=5,     CASE 1: cfit=7, wfit=7
		receiver_temperature = 25
		beam_correction      = 'no'     # 1: NS rotation,    2: EW rotation
		
		fgl  = 1                  #1
		glp  = 0.5                #0.5
		fal  = 1                  #1   
		fbcl = 1                  #1		

		for i in range(len(date_list)):
			o = eg.low_band_level2_to_level3_FAST(band, date_list[i], save='yes', save_folder=save_folder, save_flag='', sun_el_max=90, moon_el_max=90, amb_hum_max=90, min_receiver_temp=-50, max_receiver_temp=50, ant_s11=ant_s11, ant_s11_Nfit=ant_s11_Nfit, fgl=fgl, glp=glp, fal=fal, fbcl=fbcl, receiver_temperature=receiver_temperature, low_band_cal_file=low_band_cal_file, beam_correction=beam_correction)










					

	return 0


















def plot_high_band_analysis_level3(filename_flag, LST_vector = np.array([7,8,9,10,11]), fstart=115, fstop=190, foreground_model='Physical_model', T21=0.03, zr_vec = np.arange(6.5,11.55,0.05), dz_vec = np.arange(0.01,1.55,0.05)): #, EDGES_poly_terms=5, weight_bin=0.7):

	# Loading data
	path_file = home_folder + '/DATA/EDGES/spectra/level5/high_band/high_band_v1.hdf5'
	ff, tt, ww = eg.level5read(path_file)


	# Loading all LSTs requested
	for i in range(len(LST_vector)):

		ttk = tt[LST_vector[i],:]
		wwk = ww[LST_vector[i],:]

		# RFI cleaning
		tc, mc, wc = eg.data_analysis_high_band_level3_extra_RFI_flagging(ff, ttk.reshape(1,-1), np.ones((1,len(ff))), wwk.reshape(1,-1), fit_poly_order=7, section_width=10, N_points_section_threshold=10, N_sigma=3)
		ttt = tc[0,:]
		www = wc[0,:]

		# Appending data
		if i == 0:
			t_all = ttt.reshape(1,-1)
			w_all = www.reshape(1,-1)

		elif i > 0:
			t_all = np.append(t_all, ttt.reshape(1,-1), axis=0)
			w_all = np.append(w_all, www.reshape(1,-1), axis=0)




	# Averaging data in requested LSTs	
	avt0, avw0 = eg.spectral_averaging(t_all, w_all)





	# RFI cleaning
	avt1, mc, avw1 = eg.data_analysis_high_band_level3_extra_RFI_flagging(ff, avt0.reshape(1,-1), np.ones((1,len(ff))), avw0.reshape(1,-1), fit_poly_order=10, section_width=10, N_points_section_threshold=10, N_sigma=3)	
	avt2 = avt1[0,:]
	avw2 = avw1[0,:]


	# RFI cleaning
	avt3, mc, avw3 = eg.data_analysis_high_band_level3_extra_RFI_flagging(ff, avt2.reshape(1,-1), np.ones((1,len(ff))), avw2.reshape(1,-1), fit_poly_order=10, section_width=10, N_points_section_threshold=10, N_sigma=3)	
	avt4 = avt3[0,:]
	avw4 = avw3[0,:]	


	# RFI cleaning
	avt5, mc, avw5 = eg.data_analysis_high_band_level3_extra_RFI_flagging(ff, avt4.reshape(1,-1), np.ones((1,len(ff))), avw4.reshape(1,-1), fit_poly_order=10, section_width=10, N_points_section_threshold=10, N_sigma=3)	
	avt = avt5[0,:]
	avw = avw5[0,:]	




	# Selecting required frequency range
	if fstart > 90:
		for i in range(len(ff)-1):
			if (ff[i] < fstart) and (ff[i+1] >= fstart):
				index_fstart = i+1
	if fstop < 190:
		for i in range(len(ff)-1):
			if (ff[i] <= fstop) and (ff[i+1] > fstop):
				index_fstop = i

	# Frequency range
	if (fstart > 90) and (fstop == 190):
		f = ff[index_fstart::]
		t = avt[index_fstart::]
		w = avw[index_fstart::]

	elif (fstart == 90) and (fstop < 190):
		f = ff[::index_fstop]
		t = avt[::index_fstop]
		w = avw[::index_fstop]

	elif (fstart > 90) and (fstop < 190):
		f = ff[index_fstart:index_fstop]
		t = avt[index_fstart:index_fstop]
		w = avw[index_fstart:index_fstop]

	elif (fstart == 90) and (fstop == 190):
		f = ff
		t = avt
		w = avw




	# More RFI cleaning
	# fk, tk, wk = eg.data_analysis_high_band_level3_extra_RFI_flagging(fb, tb.reshape(1,-1), np.ones((1,len(fb))), wb.reshape(1,-1), fit_poly_order=10, section_width=10, N_points_section_threshold=10, N_sigma=3)



	# Estimating "binned" noise level after removing model at raw resolution
	W                    = np.diag(w)
	par, model, rms, cov = eg.fit_polynomial_fourier('EDGES_polynomial', f/200, t, 10, Weights=W)

	bin_freq       = 0.4 # MHz
	fb0, dtb0, wb0 = eg.spectral_binning_fixed_frequency(fstart, fstop, bin_freq, f, t-model, w)
	fb, dtb, wb    = eg.spectral_zero_removal(fb0, dtb0, wb0, fstart, fstop, weight=0)
	dtbk1, mbk1, wbk1 = eg.data_analysis_high_band_level3_extra_RFI_flagging(fb, dtb.reshape(1,-1),   np.ones((1,len(fb))), wb.reshape(1,-1),   fit_model='polynomial', fit_poly_order=9, section_width=15, N_points_section_threshold=10, N_sigma=3)
	dtbk2, mbk2, wbk2 = eg.data_analysis_high_band_level3_extra_RFI_flagging(fb, dtbk1.reshape(1,-1), np.ones((1,len(fb))), wbk1.reshape(1,-1), fit_model='polynomial', fit_poly_order=9, section_width=15, N_points_section_threshold=10, small_sample_size=7, N_sigma=3)
	dtbk3, mbk3, wbk3 = eg.data_analysis_high_band_level3_extra_RFI_flagging(fb, dtbk2.reshape(1,-1), np.ones((1,len(fb))), wbk2.reshape(1,-1), fit_model='polynomial', fit_poly_order=9, section_width=15, N_points_section_threshold=10, small_sample_size=7, N_sigma=3)
	dtbk = dtbk3[0,:]
	wbk  = wbk3[0,:]

	rms_noise      = np.sqrt(np.sum(wbk*dtbk**2)/np.sum(wbk))







	# Model foregrounds after removing EoR signal
	#T21 = 0.03



	#zr_vec = np.arange(6.5, 6.6, 0.1)
	#dz_vec = np.arange(0.01, 0.11, 0.1)


	chi_square_matrix = np.zeros((len(dz_vec), len(zr_vec)))

	for j in range(len(zr_vec)):
		for i in range(len(dz_vec)):

			W                                     = np.diag(w)
			EoR, xHI, z                           = eg.model_eor(f, T21=T21, zr=zr_vec[j], dz=dz_vec[i])
			par_fore, model_foregrounds, rms, cov = eg.fit_polynomial_fourier(foreground_model, f/200, t-EoR, 5, Weights=W)   # 'Physical_model'
			model_total                           = eg.model_eor_plus_foregrounds(f, par_fore, foreground_model=foreground_model, T21=T21, zr=zr_vec[j], dz=dz_vec[i], v0=200)


			# Binning residuals
			bin_freq                = 0.4 # MHz
			fb1, dtb1, wb1          = eg.spectral_binning_fixed_frequency(fstart, fstop, bin_freq, f, t-model_total, w)
			fb_new, dtb_new, wb_new = eg.spectral_zero_removal(fb1, dtb1, wb1, fstart, fstop, weight=0)


			# RFI removal
			index_nz              = np.nonzero(wbk)[0]
			ones_vector           = np.zeros(len(fb))
			ones_vector[index_nz] = 1
			dtbq = ones_vector*dtb_new
			wbq  = ones_vector*wb_new


			# Zero removal
			fb_new2, dtb_new2, wb_new2 = eg.spectral_zero_removal(fb_new, dtbq, wbq, fstart, fstop, weight=0)


			# RMS residuals for assumed model
			rms_noise_new = np.sqrt(np.sum(wb_new2*dtb_new2**2)/np.sum(wb_new2))
			# print(rms_noise_new)


			Npoints                   = len(np.nonzero(wb_new2)[0])
			#ones_vector_new           = np.zeros(len(fb_new2))
			#ones_vector_new[index_nz] = 1	
			reduced_chi_square = (1/Npoints) * np.sum((dtb_new/rms_noise)**2)			
			chi_square_matrix[i,j] = reduced_chi_square			
			print('zr: ' + str(zr_vec[j]) + ': delta_z: ' + str(dz_vec[i]) + ': chi_sq: ' + str(reduced_chi_square))


			# Cutoff value for the reduced chi square. You would observe values greater than this chi square only 5% of the time.
			#Npoints ~ 185
			#Nparam = 5
			#df = Npoints - Nparam - 1 = 179
			#chi2.ppf(0.95, df)/df  = 1.18



			# Save
			save_file = home_folder + '/DATA/EDGES/spectra/level5/high_band/chi2_' + filename_flag + '.hdf5'	

			with h5py.File(save_file, 'w') as hf:
				hf.create_dataset('zr_vector',   data = zr_vec)
				hf.create_dataset('dz_vector',   data = dz_vec)
				hf.create_dataset('chi2_matrix', data = chi_square_matrix)
				hf.create_dataset('freq',        data = fb_new2)
				hf.create_dataset('dtemp',       data = dtb_new2)





	return fb_new2, dtb_new2, chi_square_matrix






def plots_chi2_high_band():

	path_file1 = home_folder + '/DATA/EDGES/spectra/level5/high_band/chi2_v0_20mK.hdf5'
	path_file2 = home_folder + '/DATA/EDGES/spectra/level5/high_band/chi2_v0_30mK.hdf5'
	path_file3 = home_folder + '/DATA/EDGES/spectra/level5/high_band/chi2_v0_no_EoR.hdf5'

	with h5py.File(path_file1,'r') as hf:
		print([key for key in hf.keys()])

		zr_vector = hf.get('zr_vector')
		zr1       = np.array(zr_vector)

		dz_vector = hf.get('dz_vector')
		dr1       = np.array(dz_vector)

		chi2_matrix = hf.get('chi2_matrix')
		chi21       = np.array(chi2_matrix)


	with h5py.File(path_file2,'r') as hf:
		print([key for key in hf.keys()])

		zr_vector = hf.get('zr_vector')
		zr2       = np.array(zr_vector)

		dz_vector = hf.get('dz_vector')
		dr2       = np.array(dz_vector)

		chi2_matrix = hf.get('chi2_matrix')
		chi22       = np.array(chi2_matrix)


	with h5py.File(path_file3,'r') as hf:
		print([key for key in hf.keys()])

		zr_vector = hf.get('zr_vector')
		zr3       = np.array(zr_vector)

		dz_vector = hf.get('dz_vector')
		dr3       = np.array(dz_vector)

		chi2_matrix = hf.get('chi2_matrix')
		chi23       = np.array(chi2_matrix)

		freq        = hf.get('freq')
		f           = np.array(freq)

		dtemp       = hf.get('dtemp')
		dt          = np.array(dtemp)	


	f1 = plt.figure(1)
	im = plt.imshow(np.fliplr(chi21), interpolation='none', aspect='auto', origin='lower', extent=[zr1[-1], zr1[0], dr1[0], dr1[-1]], label='test');im.set_clim([3,4])#;plt.colorbar()
	plt.ylim([0, 1])
	plt.xlabel('$z_r$', fontsize=16)
	plt.ylabel('$\Delta z$', fontsize=16)
	cbar = plt.colorbar() 
	cbar.set_label('$\chi^2_{red}$',size=16)
	plt.title('Assuming an amplitude $T_{21}=20$ mK')


	f2 = plt.figure(2)
	im = plt.imshow(np.fliplr(chi22), interpolation='none', aspect='auto', origin='lower', extent=[zr2[-1], zr2[0], dr2[0], dr2[-1]]);im.set_clim([3,4])#;plt.colorbar()	
	plt.ylim([0, 1])
	plt.xlabel('$z_r$', fontsize=16)
	plt.ylabel('$\Delta z$', fontsize=16)
	cbar = plt.colorbar() 
	cbar.set_label('$\chi^2_{red}$',size=16)
	plt.title('Assuming an amplitude $T_{21}=30$ mK')


	f3 = plt.figure(3)
	z = eg.frequency2redshift(f)
	print(z)
	plt.plot(z, 1000*dt)
	#plt.plot(z[::-1], 1000*dt-30)
	plt.xlim([zr2[-1], zr2[0]])
	plt.ylim([-60, 60])
	plt.xlabel('$z_r$', fontsize=16)
	plt.ylabel('$\Delta T$ [mK]', fontsize=16)	
	plt.grid()


	return f









def plots_aspen2016():


	# Loading data
	path_file = home_folder + '/DATA/EDGES/spectra/level5/high_band/high_band_v1.hdf5'
	ff, tt, ww = eg.level5read(path_file)

	fl, tl, wl = eg.spectral_zero_removal(ff, tt[10,:], ww[10,:], 90, 190, weight = 0)
	fh, th, wh = eg.spectral_zero_removal(ff, tt[52,:], ww[52,:], 90, 190, weight = 0)

	plt.plot(fh, th, 'r', linewidth=2)
	plt.plot(fl, tl,'b', linewidth=2)
	plt.xlabel('frequency [MHz]')
	plt.ylabel('antenna temperature [K]')
	plt.legend(['LST = 17.8 Hr', 'LST = 3.5 Hr'])
	plt.grid()


	return 1







def plots_receiver_temperature():

	path_file     = home_folder + '/DATA/EDGES/spectra/level3/high_band/high_band_v1_blade.hdf5'
	f, t, m, s, w = eg.level3read(path_file)
	m1 = np.copy(m)



	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()






	f1 = plt.figure(1)

	plt.subplot(3,2,1);index=10;plt.plot(m[index,:,11],'b.');plt.plot(m[index,:,12],'r.');plt.ylim([23.1,28]);plt.ylabel('receiver temperature [C$^{\circ}$]');plt.legend(['thermistor monitoring S11 switch (but system measuring spectra, so switch is OFF)', 'main thermistor, close to cold plate'], fontsize=10);plt.text(140, 23.6, 'LST = 3.5 Hr', fontsize=16)

	plt.xticks([0, 100, 190],['', '', ''])


	plt.subplot(3,2,2);plt.plot(m[index,:,9],'.k');plt.ylim([0.5,50])
	plt.ylabel('ambient temperature [C$^{\circ}$]')
	plt.text(140, 8, 'LST = 3.5 Hr', fontsize=16)
	plt.xticks([0, 100, 190],['', '', ''])




	plt.subplot(3,2,3);index=40;plt.plot(m[index,:,11],'b.');plt.plot(m[index,:,12],'r.');plt.ylim([23.1,28]);plt.ylabel('receiver temperature [C$^{\circ}$]');plt.text(140, 23.6, 'LST = 13.5 Hr', fontsize=16)

	plt.xticks([0, 100, 190],['', '', ''])


	plt.subplot(3,2,4);plt.plot(m[index,:,9],'.k');plt.ylim([0.5,50])
	plt.ylabel('ambient temperature [C$^{\circ}$]')
	plt.text(140, 8, 'LST = 13.5 Hr', fontsize=16)
	plt.xticks([0, 100, 190],['', '', ''])



	plt.subplot(3,2,5);index=60;plt.plot(m[index,:,11],'b.');plt.plot(m[index,:,12],'r.');plt.ylim([23.1,28]);plt.ylabel('receiver temperature [C$^{\circ}$]');plt.xlabel('day number');plt.text(140, 23.6, 'LST = 20.16 Hr', fontsize=16)

	plt.xticks([0, 100, 190],['2015-206', '2015-318', '2016-049'])


	plt.subplot(3,2,6);plt.plot(m[index,:,9],'.k');plt.ylim([0.5,50])
	plt.ylabel('ambient temperature [C$^{\circ}$]')
	plt.text(140, 8, 'LST = 20.16 Hr', fontsize=16)
	plt.xlabel('day number')

	plt.xticks([0, 100, 190],['2015-206', '2015-318', '2016-049'])







	f2 = plt.figure(2)
	im = plt.imshow(m[:,:,11].T-25, interpolation='none', aspect='auto');im.set_clim([-2, 2])
	plt.xticks([0, 36, 71],  ['0', '12', '24'])
	plt.yticks([0, 148, 222],['2015-206', '2016-001', '2016-082'])
	plt.xlabel('LST (Hr)')
	plt.ylabel('Day numbers')
	cbar = plt.colorbar() 
	cbar.set_label('T - 25$^{\circ}$C',size=16)
	plt.title('HIGH-BAND \n Readings from thermistor attached to S11 Switch')


	f3 = plt.figure(3)
	im = plt.imshow(m[:,:,12].T-25, interpolation='none', aspect='auto');im.set_clim([-0.5, 0.5])
	plt.xticks([0, 36, 71],  ['0', '12', '24'])
	plt.yticks([0, 148, 222],['2015-206', '2016-001', '2016-082'])
	plt.xlabel('LST (Hr)')
	plt.ylabel('Day numbers')	
	cbar = plt.colorbar() 
	cbar.set_label('T - 25$^{\circ}$C',size=16)
	plt.title('HIGH-BAND \n Readings from main thermistor close to cold plate')



















	path_file     = home_folder + '/DATA/EDGES/spectra/level3/low_band/low_band_v1.hdf5'
	f, t, m, s, w = eg.level3read(path_file)	
	m2 = np.copy(m)


	f4 = plt.figure(4)

	plt.subplot(3,2,1);index=10;plt.plot(m[index,:,11],'b.');plt.plot(m[index,:,12],'r.');plt.ylim([23.1,28]);plt.ylabel('receiver temperature [C$^{\circ}$]');plt.legend(['thermistor monitoring S11 switch (but system measuring spectra, so switch is OFF)', 'main thermistor, close to cold plate'], fontsize=10);plt.text(80, 23.6, 'LST = 3.5 Hr', fontsize=16)

	plt.xticks([0, 50, 110],['', '', ''])


	plt.subplot(3,2,2);plt.plot(m[index,:,9],'.k');plt.ylim([0.5,50])
	plt.ylabel('ambient temperature [C$^{\circ}$]')
	plt.text(80, 8, 'LST = 3.5 Hr', fontsize=16)
	plt.xticks([0, 50, 110],['', '', ''])




	plt.subplot(3,2,3);index=40;plt.plot(m[index,:,11],'b.');plt.plot(m[index,:,12],'r.');plt.ylim([23.1,28]);plt.ylabel('receiver temperature [C$^{\circ}$]');plt.text(80, 23.6, 'LST = 13.5 Hr', fontsize=16)

	plt.xticks([0, 50, 110],['', '', ''])


	plt.subplot(3,2,4);plt.plot(m[index,:,9],'.k');plt.ylim([0.5,50])
	plt.ylabel('ambient temperature [C$^{\circ}$]')
	plt.text(80, 8, 'LST = 13.5 Hr', fontsize=16)
	plt.xticks([0, 50, 110],['', '', ''])



	plt.subplot(3,2,5);index=60;plt.plot(m[index,:,11],'b.');plt.plot(m[index,:,12],'r.');plt.ylim([23.1,28]);plt.ylabel('receiver temperature [C$^{\circ}$]');plt.xlabel('day number');plt.text(80, 23.6, 'LST = 20.16 Hr', fontsize=16)

	plt.xticks([0, 50, 110],['2015-206', '2015-343', '2016-048'])


	plt.subplot(3,2,6);plt.plot(m[index,:,9],'.k');plt.ylim([0.5,50])
	plt.ylabel('ambient temperature [C$^{\circ}$]')
	plt.text(80, 8, 'LST = 20.16 Hr', fontsize=16)
	plt.xlabel('day number')

	plt.xticks([0, 50, 110],['2015-286', '2015-343', '2016-048'])










	f5 = plt.figure(5)
	im = plt.imshow(m[:,:,11].T-25, interpolation='none', aspect='auto');im.set_clim([-2, 2])
	plt.xticks([0, 36, 71],  ['0', '12', '24'])
	plt.yticks([0, 67, 140],['2015-282', '2016-001', '2016-082'])
	plt.xlabel('LST (Hr)')
	plt.ylabel('Day numbers')
	cbar = plt.colorbar() 
	cbar.set_label('T - 25$^{\circ}$C',size=16)
	plt.title('LOW-BAND \n Readings from thermistor attached to S11 Switch')


	f6 = plt.figure(6)
	im = plt.imshow(m[:,:,12].T-25, interpolation='none', aspect='auto');im.set_clim([-0.5, 0.5])
	plt.xticks([0, 36, 71],  ['0', '12', '24'])
	plt.yticks([0, 67, 140],['2015-282', '2016-001', '2016-082'])
	plt.xlabel('LST (Hr)')
	plt.ylabel('Day numbers')	
	cbar = plt.colorbar() 
	cbar.set_label('T - 25$^{\circ}$C',size=16)
	plt.title('LOW-BAND \n Readings from main thermistor close to cold plate')







	return m1, m2






def plot_spectral_index_Tom():
	file = home_folder + '/DATA/EDGES/beam_convolution/spectral_index/TextFileForRaul.txt'
	d = np.genfromtxt(file)



	plt.plot(d[:,0],d[:,1],'.',markersize=16)
	plt.xlim([0,24])
	plt.ylim([2.47, 2.65])
	plt.grid()
	plt.xlabel('LST [Hr]',fontsize=20)
	plt.ylabel(r'$\beta$',fontsize=35)
	plt.xticks([0, 6, 12, 18, 24], fontsize=20)
	plt.yticks([2.50, 2.54, 2.58, 2.62], fontsize=20)
	return 1






def MWA_polarization_averaging_2():

	path = home_folder + '/DATA/MWA/polarization/'		

	info_P  = fits.getheader(path + 'fr_P.fits')
	info_Q  = fits.getheader(path + 'fr_Q.fits')
	info_U  = fits.getheader(path + 'fr_U.fits')
	info_rm = fits.getheader(path + 'rmval.fits')

	Pjy = fits.getdata(path + 'fr_P.fits')  # in Jy/beam for a 54'x47' beam
	Qjy = fits.getdata(path + 'fr_Q.fits')
	Ujy = fits.getdata(path + 'fr_U.fits')
	rm  = fits.getdata(path + 'rmval.fits') # radians



	# Frequency and wavelength
	v              = 1e6 * np.arange(100,201)   # Hz
	wavelength     = 3e8 / v
	wavelength_139 = wavelength[39]
	length         = len(v)



	# Transformation to temperature units
	sigmax       = (54/60) * np.pi/180 
	sigmay       = (47/60) * np.pi/180	
	solid_angle  = np.pi * sigmax * sigmay / (4*np.log(2))	
	k            = 1.38064852e-23
	flux_density = np.copy(Pjy)*1e-26
	Pk           = ( (wavelength_139**2) / (2*k*solid_angle) ) * flux_density   # the polarization intensity map is assumed to be constant in frequency, equal to its value at 139 MHz, not far from reality



	# Polarization angles
	angle_139 = (1/2) * np.arctan2(Ujy, Qjy)  # units of Q and U not relevant
	angle0    = angle_139 - rm * wavelength_139**2



	# Complex polarization vector
	Pk_complex = np.zeros((length, 480, 480)) + 0*1j
	for i in range(length):
		angle             = angle0 + rm * wavelength[i]**2
		Pk_complex[i,:,:] = Pk * np.exp(2*1j*angle)















	# Plotting
	avQv = np.zeros(length)
	avUv = np.zeros(length)
	avPk = np.zeros(length)

	path_plot_save = home_folder + '/DATA/MWA/png_video/'

	for i in range(length):
		Qv = np.real(Pk_complex[i,:,:]).reshape(1,-1)[0]
		Uv = np.imag(Pk_complex[i,:,:]).reshape(1,-1)[0]

		if i == 0:
			index_nan = np.isnan(Qv*Uv)

		Qv_no_nan = Qv[index_nan==False]
		Uv_no_nan = Uv[index_nan==False]

		avQv[i] = np.mean(Qv_no_nan)
		avUv[i] = np.mean(Uv_no_nan)

		avPk[i] = np.sqrt(avQv[i]**2 + avUv[i]**2)


		# Plots for movie
		size_x = 27.02  # to have even pixels in X
		size_y = 10
		f1 = plt.figure(num=1, figsize=(size_x, size_y))

		plt.subplot2grid((2,4), (0,0))
		im = plt.imshow( np.sqrt(np.imag(Pk_complex[i,:,:])**2 + np.real(Pk_complex[i,:,:])**2), interpolation='none', aspect='auto', extent=[-15, 15, 15, -15]);im.set_clim([0,20])
		plt.xlabel('angle [degrees]')
		plt.ylabel('angle [degrees]')
		plt.title('MWA EoR-0 ---- |P| at ' + str(int(v[i]*1e-6)) + ' MHz')
		#cx=f1.add_axes(mpltr.Bbox([[ .91 , .14 ],[ .93 , .92 ]]))
		cbar = plt.colorbar(ticks=np.arange(0,21,4))
		ax = cbar.ax
		ax.text(-0.1,1.05,'[K]',size=12)
		#cbar.set_label('[K]',size=16)


		plt.subplot2grid((2,4), (0,1))
		im = plt.imshow(np.real(Pk_complex[i,:,:]), interpolation='none', aspect='auto', extent=[-15, 15, 15, -15]);im.set_clim([-10,10])
		plt.xlabel('angle [degrees]')
		plt.ylabel('angle [degrees]')
		plt.title('MWA EoR-0 ---- Q at ' + str(int(v[i]*1e-6)) + ' MHz')
		cbar = plt.colorbar(ticks=np.arange(-10,11,5))
		ax = cbar.ax
		ax.text(-0.1,1.05,'[K]',size=12)		
		#cbar.set_label('[K]',size=16)

		plt.subplot2grid((2,4), (0,2))
		im = plt.imshow(np.imag(Pk_complex[i,:,:]), interpolation='none', aspect='auto', extent=[-15, 15, 15, -15]);im.set_clim([-10,10])
		plt.xlabel('angle [degrees]')
		plt.ylabel('angle [degrees]')
		plt.title('MWA EoR-0 ---- U at ' + str(int(v[i]*1e-6)) + ' MHz')
		cbar = plt.colorbar(ticks=np.arange(-10,11,5))
		ax = cbar.ax
		ax.text(-0.1,1.05,'[K]',size=12)		
		#cbar.set_label('[K]',size=16)


		#xangle = np.arange(-15,15,0.0625)
		#yangle = np.arange(-15,15,0.0625)
		#xx, yy = np.meshgrid(xangle,yangle)
		#plt.quiver(xx,yy,)

		plt.subplot2grid((2,4), (0,3))
		im = plt.imshow( (180/np.pi)*(1/2)*np.arctan2(np.imag(Pk_complex[i,:,:]), np.real(Pk_complex[i,:,:])), interpolation='none', aspect='auto', extent=[-15, 15, 15, -15]);im.set_clim([-91,91])
		plt.xlabel('angle [degrees]')
		plt.ylabel('angle [degrees]')
		plt.title('MWA EoR-0 ---- $\chi$ at ' + str(int(v[i]*1e-6)) + ' MHz')
		cbar = plt.colorbar(ticks=np.arange(-90,91,30))
		ax = cbar.ax
		ax.text(-0.6,1.05,'[deg]',size=12)		
		#cbar.set_label('[deg]',size=16)

		#xangle = np.arange(-15,15,0.0625)
		#yangle = np.arange(-15,15,0.0625)
		#xx, yy = np.meshgrid(xangle,yangle)
		#plt.quiver(xx,yy,)



		plt.subplot2grid((2,4), (1,0), colspan=4)
		plt.plot(v[0:(i+1)]*1e-6, avPk[0:(i+1)]*1000,linewidth=2)
		plt.plot(v[i]*1e-6, avPk[i]*1000, '.k', markersize=20)
		plt.xlim([100, 200])
		plt.ylim([0,500])
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('map-average polarized intensity [mK]')
		plt.text(110,110,r'$\left|\langle P(\nu)\rangle_{\Omega}\right| = \sqrt{ \langle Q(\nu)\rangle_{\Omega}^2   +    \langle U(\nu)\rangle_{\Omega}^2}$', fontsize=26)

		plt.savefig(path_plot_save + 'EoR-0_polarization_1' + str(int(v[i]*1e-6)) + '.png', bbox_inches='tight')
		plt.close()
		plt.close()


	# To make video:
	# linux terminal>>    avconv -f image2 -r 3 -start_number 100 -i /home/raul/Desktop/test/EoR-0_polarization_1%3d.png -vcodec mjpeg -y /home/raul/Desktop/test/EoR-0_polarization.mp4   # replace mjpeg for png for lossless version. -r 3 means three frames per second 




	## Polarization and Rotation Measure Plots
	#f1 = plt.figure(1)
	#im = plt.imshow(Pk, interpolation='none', aspect='auto', extent=[-15, 15, 15, -15])
	#im.set_clim([0, 30])
	#plt.xlabel('angle [degrees]', fontsize=16)
	#plt.ylabel('angle [degrees]', fontsize=16)
	#cbar = plt.colorbar() 
	#cbar.set_label('polarization intensity [K]',fontsize=16)

	#f2 = plt.figure(2)
	#im = plt.imshow(rm, interpolation='none', aspect='auto', extent=[-15, 15, 15, -15])
	#im.set_clim([-5, 5])
	#plt.xlabel('angle [degrees]', fontsize=16)
	#plt.ylabel('angle [degrees]', fontsize=16)
	#cbar = plt.colorbar() 
	#cbar.set_label('rotation measure [rad/$m^2$]',fontsize=16)




	return Pk_complex #avQv, avUv, avPk







def MWA_polarization_averaging(ang0='zero'):

	path = home_folder + '/DATA/MWA/polarization/'

	info_peak = fits.getheader(path + 'peak.fits')
	info_rm   = fits.getheader(path + 'rmval.fits')


	polmap = fits.getdata(path + 'peak.fits')   # in Jy/beam for a 54'x47' beam
	rm     = fits.getdata(path + 'rmval.fits')


	# Transformation to temperature units
	sigmax = (54/60) * np.pi/180 
	sigmay = (47/60) * np.pi/180	
	solid_angle = np.pi * sigmax * sigmay / (4*np.log(2))
	wavelength_150 = 3e8 / 150e6
	k = 1.38064852e-23
	flux_density = np.copy(polmap)*1e-26
	temp_polmap = ((wavelength_150**2) / (2*k*solid_angle)) * flux_density







	# Reference polarization angles, in radians
	if ang0 == 'zero':
		angle0 = 0

	if ang0 == 'random':
		angle0 = np.pi*np.random.uniform(size=(480, 480))


	# Complex polarization map
	wavelength_array = 3e8 / (1e6*np.arange(100, 201)) 
	temp_complex = np.zeros((len(wavelength_array), 480, 480)) + 0*1j
	#angle = np.zeros((len(wavelength_array), 480, 480))
	for i in range(len(wavelength_array)):
		angle               = (angle0 + rm * (wavelength_array[i]**2))
		temp_complex[i,:,:] = temp_polmap * np.exp(2*1j*angle)




	# Computation of averages
	centerx = 240
	centery = 240		
	lw = len(wavelength_array)

	radius0_array = np.array([10, 20, 40, 100, 240, 300])
	lr = len(radius0_array)	

	avQ = np.zeros((lr, lw))
	avU = np.zeros((lr, lw))
	avP = np.zeros((lr, lw))
	avX = np.zeros((lr, lw))
	sum_points = np.zeros(lw)
	beam_map   = np.zeros((lw, 480, 480))



	for w in range(lr):

		radius0 = radius0_array[w]

		for k in range(lw):

			Q = np.real(temp_complex[k,:,:])
			U = np.imag(temp_complex[k,:,:])

			sumQ      = 0
			sumU      = 0
			sum_index = 0
			for j in range(480):
				for i in range(480):

					radius = np.sqrt( ((j-centerx)**2) + ((i-centery)**2) )

					if (radius <= radius0) and (temp_polmap[j,i] > 0):
						sumQ      = sumQ + Q[j,i]
						sumU      = sumU + U[j,i]
						sum_index = sum_index + 1
						beam_map[k,j,i] = 1

			avQ[w, k] = sumQ/sum_index
			avU[w, k] = sumU/sum_index
			avP[w, k] = np.sqrt( (avQ[w, k]**2) + (avU[w, k]**2) )
			avX[w, k] = (1/2) * np.arctan2(avU[w, k], avQ[w, k])
			sum_points[k] = sum_index








	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()


	# Polarization and Rotation Measure Plots
	f1 = plt.figure(1)
	im = plt.imshow(temp_polmap, interpolation='none', aspect='auto', extent=[-15, 15, 15, -15])
	im.set_clim([0, 10])
	plt.xlabel('angle [degrees]', fontsize=16)
	plt.ylabel('angle [degrees]', fontsize=16)
	cbar = plt.colorbar() 
	cbar.set_label('polarization intensity [K]',fontsize=16)
	plt.xlim([-12,12])
	plt.ylim([-12,12])

	f2 = plt.figure(2)
	im = plt.imshow(rm, interpolation='none', aspect='auto', extent=[-15, 15, 15, -15])
	im.set_clim([-5, 5])
	plt.xlabel('angle [degrees]', fontsize=16)
	plt.ylabel('angle [degrees]', fontsize=16)
	cbar = plt.colorbar() 
	cbar.set_label('rotation measure [rad/$m^2$]',fontsize=16)
	plt.xlim([-12,12])
	plt.ylim([-12,12])	
















	# Summary Plot
	f3 = plt.figure(3)
	v = np.arange(100,201)

	plt.subplot(6,2,1)
	index = 0
	co    = 'b'
	plt.plot(v, avQ[index,:], co)
	plt.plot(v, avU[index,:], co+'--')
	plt.plot(v, avP[index,:], co, linewidth=3)
	plt.grid()
	plt.ylabel('T [K]')
	plt.xticks([100,120,140,160,180,200],['','','','','',''])

	if ang0 == 'zero':
		plt.ylim([-5,5])
		plt.text(108, -4,'r=$0.625^{\circ}$')
		plt.text(150, -4,'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.27,0.27])
		plt.text(115, -0.2, 'r=$0.625^{\circ}$')
		plt.text(160, -0.17, 'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')






	plt.subplot(6,2,2)
	index = 0
	par   = np.polyfit(v/200, avP[index,:], 1)
	model = np.polyval(par, v/200)
	plt.plot(v, avP[index,:]-model, co, linewidth=3)	
	plt.grid()
	plt.ylabel('$\Delta$T [K]')
	plt.xticks([100,120,140,160,180,200],['','','','','',''])

	if ang0 == 'zero':
		plt.ylim([-0.58,0.58])
		plt.text(108, -0.4,'r=$0.625^{\circ}$')
		plt.text(130,  0.3, 'RMS=' + str(round(np.std(avP[index,:]-model),2)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.085,0.085])
		plt.text(110, -0.05,'r=$0.625^{\circ}$')
		plt.text(160, -0.05, 'RMS=' + str(round(np.std(avP[index,:]-model),3)) + 'K')




	plt.subplot(6,2,3)
	index = 1
	co    = 'b'
	plt.plot(v, avQ[index,:], co)
	plt.plot(v, avU[index,:], co+'--')
	plt.plot(v, avP[index,:], co, linewidth=3)
	plt.grid()
	plt.ylabel('T [K]')
	plt.xticks([100,120,140,160,180,200],['','','','','',''])

	if ang0 == 'zero':
		plt.ylim([-5,5])
		plt.text(108,-4,'r=$1.25^{\circ}$')
		plt.text(150,-4,'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.27,0.27])
		plt.text(115, -0.2, 'r=$1.25^{\circ}$')
		plt.text(160, -0.17, 'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')





	plt.subplot(6,2,4)
	index = 1
	par   = np.polyfit(v/200, avP[index,:], 1)
	model = np.polyval(par, v/200)
	plt.plot(v, avP[index,:]-model, co, linewidth=3)
	plt.grid()
	plt.ylabel('$\Delta$T [K]')
	plt.xticks([100,120,140,160,180,200],['','','','','',''])

	if ang0 == 'zero':
		plt.ylim([-0.58,0.58])	
		plt.text(108,-0.4,'r=$1.25^{\circ}$')
		plt.text(130,  0.3, 'RMS=' + str(round(np.std(avP[index,:]-model),2)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.085,0.085])	
		plt.text(110, -0.05,'r=$1.25^{\circ}$')
		plt.text(160, -0.05, 'RMS=' + str(round(np.std(avP[index,:]-model),3)) + 'K')




	plt.subplot(6,2,5)
	index = 2
	co    = 'b'
	plt.plot(v, avQ[index,:], co)
	plt.plot(v, avU[index,:], co+'--')
	plt.plot(v, avP[index,:], co, linewidth=3)
	plt.grid()
	plt.ylabel('T [K]')
	plt.xticks([100,120,140,160,180,200],['','','','','',''])

	if ang0 == 'zero':
		plt.ylim([-5,5])
		plt.text(108,-4,'r=$2.5^{\circ}$')
		plt.text(150,-4,'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.27,0.27])
		plt.text(115,-0.2,'r=$2.5^{\circ}$')
		plt.text(160,-0.17,'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')








	plt.subplot(6,2,6)
	index = 2
	par   = np.polyfit(v/200, avP[index,:], 1)
	model = np.polyval(par, v/200)
	plt.plot(v, avP[index,:]-model, co, linewidth=3)
	plt.grid()
	plt.ylabel('$\Delta$T [K]')	
	plt.xticks([100,120,140,160,180,200],['','','','','',''])

	if ang0 == 'zero':
		plt.ylim([-0.58,0.58])	
		plt.text(108,-0.4,'r=$2.5^{\circ}$')
		plt.text(130,  0.3, 'RMS=' + str(round(np.std(avP[index,:]-model),2)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.085,0.085])	
		plt.text(110, -0.05,'r=$2.5^{\circ}$')
		plt.text(160, -0.05, 'RMS=' + str(round(np.std(avP[index,:]-model),3)) + 'K')








	plt.subplot(6,2,7)
	index = 3
	co    = 'b'
	plt.plot(v, avQ[index,:], co)
	plt.plot(v, avU[index,:], co+'--')
	plt.plot(v, avP[index,:], co, linewidth=3)
	plt.grid()
	plt.ylabel('T [K]')
	plt.xticks([100,120,140,160,180,200],['','','','','',''])

	if ang0 == 'zero':
		plt.ylim([-5,5])
		plt.text(108,-4,'r=$6.25^{\circ}$')
		plt.text(150,-4,'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.27,0.27])
		plt.text(115,-0.2,'r=$6.25^{\circ}$')
		plt.text(160,-0.17,'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')








	plt.subplot(6,2,8)
	index = 3
	par   = np.polyfit(v/200, avP[index,:], 1)
	model = np.polyval(par, v/200)
	plt.plot(v, avP[index,:]-model, co, linewidth=3)
	plt.grid()
	plt.ylabel('$\Delta$T [K]')
	plt.xticks([100,120,140,160,180,200],['','','','','',''])

	if ang0 == 'zero':
		plt.ylim([-0.58,0.58])
		plt.text(108,-0.4,'r=$6.25^{\circ}$')
		plt.text(130,  0.3, 'RMS=' + str(round(np.std(avP[index,:]-model),2)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.085,0.085])
		plt.text(110,-0.05,'r=$6.25^{\circ}$')
		plt.text(160, -0.05, 'RMS=' + str(round(np.std(avP[index,:]-model),3)) + 'K')







	plt.subplot(6,2,9)
	index = 4
	co    = 'b'
	plt.plot(v, avQ[index,:], co)
	plt.plot(v, avU[index,:], co+'--')
	plt.plot(v, avP[index,:], co, linewidth=3)
	plt.grid()
	plt.ylabel('T [K]')
	plt.xticks([100,120,140,160,180,200],['','','','','',''])

	if ang0 == 'zero':
		plt.ylim([-5,5])
		plt.text(108,-4,'r=$15^{\circ}$')
		plt.text(150,-4,'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.27,0.27])
		plt.text(115,-0.2,'r=$15^{\circ}$')
		plt.text(160,-0.17,'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')	






	plt.subplot(6,2,10)
	index = 4
	par   = np.polyfit(v/200, avP[index,:], 1)
	model = np.polyval(par, v/200)
	plt.plot(v, avP[index,:]-model, co, linewidth=3)
	plt.grid()
	plt.xticks([100,120,140,160,180,200],['','','','','',''])

	if ang0 == 'zero':
		plt.ylim([-0.58,0.58])
		plt.ylabel('$\Delta$T [K]')
		plt.text(108, -0.4,'r=$15^{\circ}$')
		plt.text(130,  0.3, 'RMS=' + str(round(np.std(avP[index,:]-model),2)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.085,0.085])
		plt.ylabel('$\Delta$T [K]')
		plt.text(110, -0.05,'r=$15^{\circ}$')
		plt.text(160, -0.05, 'RMS=' + str(round(np.std(avP[index,:]-model),3)) + 'K')









	plt.subplot(6,2,11)
	index = 5
	co    = 'b'
	plt.plot(v, avQ[index,:], co)
	plt.plot(v, avU[index,:], co+'--')
	plt.plot(v, avP[index,:], co, linewidth=3)	
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('T [K]')

	if ang0 == 'zero':
		plt.ylim([-5,5])
		plt.text(108,-4,'WHOLE MAP')
		plt.text(150,-4,'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.27,0.27])
		plt.text(115,-0.2,'WHOLE MAP')
		plt.text(160,-0.17,'mean=' + str(round(np.mean(avP[index,:]),3)) + 'K')



	plt.subplot(6,2,12)
	index = 5
	par   = np.polyfit(v/200, avP[index,:], 1)
	model = np.polyval(par, v/200)
	plt.plot(v, avP[index,:]-model, co, linewidth=3)
	plt.grid()
	plt.xlabel('frequency [MHz]')	

	if ang0 == 'zero':
		plt.ylim([-0.58,0.58])	
		plt.ylabel('$\Delta$T [K]')
		plt.text(108, -0.4,'WHOLE MAP')
		plt.text(130,  0.3, 'RMS=' + str(round(np.std(avP[index,:]-model),2)) + 'K')

	if ang0 == 'random':
		plt.ylim([-0.085,0.085])	
		plt.ylabel('$\Delta$T [K]')
		plt.text(110, -0.05, 'WHOLE MAP')
		plt.text(160, -0.05, 'RMS=' + str(round(np.std(avP[index,:]-model),3)) + 'K')








	return avQ, avU, avP, avX, sum_points, beam_map, temp_complex




























def MWA_polarization_averaging_3():


	# Loading data
	path = home_folder + '/DATA/MWA/polarization/'		

	info_P  = fits.getheader(path + 'fr_P.fits')
	info_Q  = fits.getheader(path + 'fr_Q.fits')
	info_U  = fits.getheader(path + 'fr_U.fits')
	info_rm = fits.getheader(path + 'rmval.fits')

	Pjy = fits.getdata(path + 'fr_P.fits')  # in Jy/beam for a 54'x47' beam
	Qjy = fits.getdata(path + 'fr_Q.fits')
	Ujy = fits.getdata(path + 'fr_U.fits')
	rm  = fits.getdata(path + 'rmval.fits') # radians



	# Frequency and wavelength
	v              = 1e6 * np.arange(40,201)   # Hz
	wavelength     = 3e8 / v
	wavelength_139 = wavelength[39]
	length         = len(v)



	# Transformation to temperature units
	sigmax       = (54/60) * np.pi/180         # beamwidth in x
	sigmay       = (47/60) * np.pi/180         # beamwidth in y
	solid_angle  = np.pi * sigmax * sigmay / (4*np.log(2))	
	k            = 1.38064852e-23
	flux_density = np.copy(Pjy)*1e-26
	Pk           = ( (wavelength_139**2) / (2*k*solid_angle) ) * flux_density   # the polarization intensity map is assumed to be constant in frequency, equal to its value at 139 MHz, not far from reality



	# Polarization angles
	angle_139 = (1/2) * np.arctan2(Ujy, Qjy)  # units of Q and U not relevant
	angle0    = angle_139 - rm * wavelength_139**2



	# Coordinates in radians
	x = (np.pi/180)*np.arange(-15+(15/480), 15, 30/480)
	y = (np.pi/180)*np.arange(-15+(15/480), 15, 30/480)
	x_2D, y_2D = np.meshgrid(x, y)


	# Flattening arrays
	Pk_1D = Pk.flatten()
	rm_1D = rm.flatten()
	a0_1D = angle0.flatten()
	x_1D  = x_2D.flatten()
	y_1D  = y_2D.flatten()


	# Eliminating NaNs
	Pn  = Pk_1D[np.isnan(Pk_1D)==0]
	rn  = rm_1D[np.isnan(Pk_1D)==0]
	a0n = a0_1D[np.isnan(Pk_1D)==0]
	xn  = x_1D[np.isnan(Pk_1D)==0]
	yn  = y_1D[np.isnan(Pk_1D)==0]




	# Converting map to Healpix RING format
	nside=512
	pix       = hp.ang2pix(nside, yn+90*(np.pi/180), xn)

	Pall      = np.NAN*np.ones(12*(nside**2))
	Pall[pix] = Pn

	rall      = np.NAN*np.ones(12*(nside**2))
	rall[pix] = rn

	a0all      = np.NAN*np.ones(12*(nside**2))
	a0all[pix] = a0n	


	Pm        = hp.ma(Pall)
	Pm.mask   = np.isnan(Pm)   # masking out pixels with NaNs

	rm        = hp.ma(rall)
	rm.mask   = np.isnan(rm)   # masking out pixels with NaNs

	a0m       = hp.ma(a0all)
	a0m.mask  = np.isnan(a0m)   # masking out pixels with NaNs	



	#mean_Pm  = np.mean(Pm[np.isnan(Pm)==0])
	#mean_rm  = np.mean(rm[np.isnan(rm)==0])
	#mean_a0m = np.mean(a0m[np.isnan(a0m)==0])






	#print(np.mean(Pm[np.isnan(Pm)==0]))

	# Computing angular power spectrum
	cl_Pm  = hp.anafast(Pm)   # - np.mean(Pm[np.isnan(Pm)==0])
	cl_rm  = hp.anafast(rm)
	cl_a0m = hp.anafast(a0m)


	# Producing FULL SKY simulated maps from power spectrum
	sim_Pm  = hp.synfast(cl_Pm, nside)   
	sim_rm  = hp.synfast(cl_rm, nside) 
	sim_a0m = hp.synfast(cl_a0m, nside)


	# Scale and offset of maps, seems to be necessary due to the map being partial
	scale_Pm  = (np.max(Pn[(yn<0) & (yn>-10*(np.pi/180))]) - np.min(Pn[(yn<0) & (yn>-10*(np.pi/180))]))/(np.max(sim_Pm)-np.min(sim_Pm))
	offset_Pm = np.min(Pn[(yn<0) & (yn>-10*(np.pi/180))]) - scale_Pm * np.min(sim_Pm)

	scale_rm  = (np.max(rn[(yn<0) & (yn>-10*(np.pi/180))]) - np.min(rn[(yn<0) & (yn>-10*(np.pi/180))]))/(np.max(sim_rm)-np.min(sim_rm))
	offset_rm = np.min(rn[(yn<0) & (yn>-10*(np.pi/180))]) - scale_rm * np.min(sim_rm)

	scale_a0m  = (np.max(a0n[(yn<0) & (yn>-10*(np.pi/180))]) - np.min(a0n[(yn<0) & (yn>-10*(np.pi/180))]))/(np.max(sim_a0m)-np.min(sim_a0m))
	offset_a0m = np.min(a0n[(yn<0) & (yn>-10*(np.pi/180))]) - scale_a0m * np.min(sim_a0m)




	# Scaling simulated map
	scaled_sim_Pm  = scale_Pm  * sim_Pm  + offset_Pm
	scaled_sim_rm  = scale_rm  * sim_rm  + offset_rm
	scaled_sim_a0m = scale_a0m * sim_a0m + offset_a0m





	# Scaling checks

	print('--------------------------------')
	print(np.min(Pn[(yn<0) & (yn>-10*(np.pi/180))]))
	print(np.max(Pn[(yn<0) & (yn>-10*(np.pi/180))]) )

	print(np.min(scale_Pm*sim_Pm + offset_Pm))
	print(np.max(scale_Pm*sim_Pm + offset_Pm))
	print('--------------------------------')
	print(np.min(rn[(yn<0) & (yn>-10*(np.pi/180))]))
	print(np.max(rn[(yn<0) & (yn>-10*(np.pi/180))]))	

	print(np.min(scaled_sim_rm))
	print(np.max(scaled_sim_rm))
	print('--------------------------------')
	print(np.min(a0n[(yn<0) & (yn>-10*(np.pi/180))]))
	print(np.max(a0n[(yn<0) & (yn>-10*(np.pi/180))]))	

	print(np.min(scaled_sim_a0m))
	print(np.max(scaled_sim_a0m))	
	print('--------------------------------')



	# Plotting Cls

	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()	


	plt.figure(1)

	plt.subplot(3,1,1)
	ell = np.arange(0, len(cl_Pm))
	plt.semilogy(ell, ell*(ell+1)*cl_Pm/(2*np.pi))
	plt.grid()
	plt.xlabel(r'$\ell$')
	plt.ylabel(r'$\ell(\ell+1)C_{\ell}/2\pi$')

	plt.subplot(3,1,2)
	ell = np.arange(0, len(cl_rm))
	plt.semilogy(ell, ell*(ell+1)*cl_rm/(2*np.pi))
	plt.grid()
	plt.xlabel(r'$\ell$')
	plt.ylabel(r'$\ell(\ell+1)C_{\ell}/2\pi$')	

	plt.subplot(3,1,3)
	ell = np.arange(0, len(cl_a0m))
	plt.semilogy(ell, ell*(ell+1)*cl_a0m/(2*np.pi))
	plt.grid()
	plt.xlabel(r'$\ell$')
	plt.ylabel(r'$\ell(\ell+1)C_{\ell}/2\pi$')


	# Plotting original and simulated map
	hp.cartview(Pm, min=0, max=13); hp.graticule()  # ,            min=0, max=10)
	hp.cartview(scaled_sim_Pm, min=0, max=13); hp.graticule()

	hp.cartview(rm)#,            min=0, max=10); hp.graticule()
	hp.cartview(scaled_sim_rm); hp.graticule()

	hp.cartview(a0m)#,            min=0, max=10); hp.graticule()
	hp.cartview(scaled_sim_a0m); hp.graticule()	




	# Plotting



	## Complex polarization vector
	#Pk_complex = np.zeros((length, 480, 480)) + 0*1j
	angle      = np.zeros((length, len(scaled_sim_a0m)))
	Pm_complex = np.zeros((length, len(scaled_sim_a0m))) + 0*1j
	Q          = np.zeros((length, len(scaled_sim_a0m)))
	U          = np.zeros((length, len(scaled_sim_a0m)))



	avQ = np.zeros(length)
	avU = np.zeros(length)
	avP = np.zeros(length)

	PIXEL = 1e5
	wQ    = np.zeros((length, len(scaled_sim_a0m)))
	wU    = np.zeros((length, len(scaled_sim_a0m)))	
	wP    = np.zeros(length)

	for i in range(length):

		print(v[i]/1e6)

		angle[i,:]      = scaled_sim_a0m + scaled_sim_rm * wavelength[i]**2     # angle0 + rm * wavelength[i]**2
		Pm_complex[i,:] = scaled_sim_Pm*(v[i]/139e6)**(-2.5) * np.exp(2*1j*angle[i,:])


		Q[i,:] = np.real(Pm_complex[i,:])
		U[i,:] = np.imag(Pm_complex[i,:])

		avQ[i] = np.mean(Q[i,:])
		avU[i] = np.mean(U[i,:])

		avP[i] = np.sqrt(avQ[i]**2 + avU[i]**2)


		# Smoothing with a Gaussian beam
		wQ[i,:] = hp.smoothing(Q[i,:], fwhm=70*(np.pi/180))
		wU[i,:] = hp.smoothing(U[i,:], fwhm=70*(np.pi/180))

		wP[i] = np.sqrt(wQ[i,PIXEL]**2 + wU[i,PIXEL]**2)



	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()

	plt.figure(10)
	plt.plot(v/1e6, 1000*wP)
	plt.grid()
	plt.ylabel('T [mK]')
	plt.xlabel('frequency [MHz]')
	plt.title(r'$P = \sqrt{Q^2 + U^2}$', fontsize=20)


	return v/1e6, wQ, wU, 1000*wP #Pm, sim_Pm   #  x_nn, y_nn, Pk_nn  #x_nn, y_nn, Pk_nn





























def DRAO_1_4GHz_polarization_map():

	# Loading data
	path = home_folder + '/DATA/DRAO/polarization/'

	filenameQ = path + 'fitq35635.bin'
	filenameU = path + 'fitu35635.bin'

	infoQ = fits.getheader(filenameQ)
	infoU = fits.getheader(filenameU)

	Qraw = fits.getdata(filenameQ)
	Uraw = fits.getdata(filenameU)




	# Revert horizontally maps
	Q = np.fliplr(Qraw[0,:,:])
	U = np.fliplr(Uraw[0,:,:])




	# Coordinate transformation
	RA  = np.arange(-0.25,360,0.25)  # reference point 721 is 180 deg
	DEC = np.arange(-29.25,90,0.25)  # reference point 239 is 30.5 deg

	RA_matrix, DEC_matrix = np.meshgrid(RA, DEC)
	RA_DEC_object         = apc.SkyCoord(RA_matrix, DEC_matrix, unit="deg")
	lb                    = RA_DEC_object.transform_to('galactic')

	l = np.asarray(lb.l)
	b = np.asarray(lb.b)



	# 1D arrays
	Q_array = Q.reshape(1,-1)[0]
	U_array = U.reshape(1,-1)[0]
	l_array = l.reshape(1,-1)[0]
	b_array = b.reshape(1,-1)[0]



	# No NaNs
	NaN = np.isnan(Q_array * U_array) 
	Q_no_nan = Q_array[(NaN==False)]
	U_no_nan = U_array[(NaN==False)]
	l_no_nan = l_array[(NaN==False)]
	b_no_nan = b_array[(NaN==False)]
	len_1D  = len(l_no_nan)



	# Averaging
	gal_lat = np.array([80,70,60,50,40,30,20,10,0, -10, -20, -30, -40, -50, -60, -70, -80, -80, -90])
	l_lat   = len(gal_lat)

	avQ = np.zeros(l_lat)
	avU = np.zeros(l_lat)
	avP = np.zeros(l_lat)
	N   = np.zeros(l_lat)

	for j in range(l_lat):

		print(j)

		Q_lat = Q_no_nan[b_no_nan >= gal_lat[j]]
		U_lat = U_no_nan[b_no_nan >= gal_lat[j]]

		avQ[j] = np.mean(Q_lat)
		avU[j] = np.mean(U_lat)
		avP[j] = np.sqrt(avQ[j]**2 + avU[j]**2)
		N[j]   = len(Q_lat)



	# Plotting
	f1 = plt.figure(1)

	im = plt.scatter(l, b, c=np.sqrt(Q**2 + U**2), linewidths=0)
	im.set_clim([0,500])
	plt.xlim([0,360])
	plt.ylim([-90,90])
	cbar = plt.colorbar() 
	cbar.set_label('polarization intensity [mK]',fontsize=16)
	plt.xlabel('galactic longitude [deg]', fontsize=16)
	plt.ylabel('galactic latitude [deg]', fontsize=16)



	f2 = plt.figure(2)
	plt.plot(gal_lat, avP)
	plt.gca().invert_xaxis()
	plt.xlabel('low-latitude limit [deg]')
	plt.ylabel('average polarization intensity [mK]')
	plt.grid()



	return infoQ, infoU, avQ, avU, avP, N, gal_lat, l_no_nan, b_no_nan, Q_no_nan, U_no_nan  #, Q, U, RA_matrix, DEC_matrix, l, b 

















def plot_spectral_index():

	LST, m1, T1, b1, g1, R1 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_a01_x01_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')
	LST, m2, T2, b2, g2, R2 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_a02_x01_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')
	LST, m3, T3, b3, g3, R3 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_a03_x01_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')

	LST, m4, T4, b4, g4, R4 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_b01_y01_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')
	LST, m5, T5, b5, g5, R5 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_b02_y01_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')
	LST, m6, T6, b6, g6, R6 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_b03_y01_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')


	LST, m7, T7, b7, g7, R7 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_a03_x01_npar_2_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')		
	LST, m8, T8, b8, g8, R8 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_b03_y01_npar_2_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')		


	LST, m9, T9, b9, g9, R9      = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_a03_x01_npar_3_flim_120_180_sun_el_max_-10_RMS_median_1.1.hdf5')		
	LST, m10, T10, b10, g10, R10 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_a03_x01_npar_3_flim_130_170_sun_el_max_-10_RMS_median_1.1.hdf5')

	LST, m11, T11, b11, g11, R11 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_b03_y01_npar_3_flim_120_180_sun_el_max_-10_RMS_median_1.1.hdf5')		
	LST, m12, T12, b12, g12, R12 = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/spectral_index_high_band_b03_y01_npar_3_flim_130_170_sun_el_max_-10_RMS_median_1.1.hdf5')	


	path_beam_factor               = home_folder + '/DATA/EDGES/beam_convolution/beam_factors/'
	filename_beam_factor_fourpoint = 'beam_factor_high_band_fourpoint_band10deg_indices_2.5_2.57_data.txt'
	filename_beam_factor_blade     = 'beam_factor_high_band_blade_band10deg_indices_2.5_2.57_data.txt'
	bf_fourpoint                   = np.genfromtxt(path_beam_factor + filename_beam_factor_fourpoint)
	bf_blade                       = np.genfromtxt(path_beam_factor + filename_beam_factor_blade)



	# Time-averages and scatters

	T1_LST = np.zeros((len(LST),3)); T1_LST[:,0] = LST
	b1_LST = np.zeros((len(LST),3)); b1_LST[:,0] = LST
	g1_LST = np.zeros((len(LST),3)); g1_LST[:,0] = LST

	T2_LST = np.zeros((len(LST),3)); T2_LST[:,0] = LST
	b2_LST = np.zeros((len(LST),3)); b2_LST[:,0] = LST
	g2_LST = np.zeros((len(LST),3)); g2_LST[:,0] = LST	

	T3_LST = np.zeros((len(LST),3)); T3_LST[:,0] = LST
	b3_LST = np.zeros((len(LST),3)); b3_LST[:,0] = LST
	g3_LST = np.zeros((len(LST),3)); g3_LST[:,0] = LST

	T4_LST = np.zeros((len(LST),3)); T4_LST[:,0] = LST
	b4_LST = np.zeros((len(LST),3)); b4_LST[:,0] = LST
	g4_LST = np.zeros((len(LST),3)); g4_LST[:,0] = LST	

	T5_LST = np.zeros((len(LST),3)); T5_LST[:,0] = LST
	b5_LST = np.zeros((len(LST),3)); b5_LST[:,0] = LST
	g5_LST = np.zeros((len(LST),3)); g5_LST[:,0] = LST	

	T6_LST = np.zeros((len(LST),3)); T6_LST[:,0] = LST
	b6_LST = np.zeros((len(LST),3)); b6_LST[:,0] = LST
	g6_LST = np.zeros((len(LST),3)); g6_LST[:,0] = LST

	T7_LST = np.zeros((len(LST),3)); T7_LST[:,0] = LST
	b7_LST = np.zeros((len(LST),3)); b7_LST[:,0] = LST
	g7_LST = np.zeros((len(LST),3)); g7_LST[:,0] = LST

	T8_LST = np.zeros((len(LST),3)); T8_LST[:,0] = LST
	b8_LST = np.zeros((len(LST),3)); b8_LST[:,0] = LST
	g8_LST = np.zeros((len(LST),3)); g8_LST[:,0] = LST

	T9_LST = np.zeros((len(LST),3)); T9_LST[:,0] = LST
	b9_LST = np.zeros((len(LST),3)); b9_LST[:,0] = LST
	g9_LST = np.zeros((len(LST),3)); g9_LST[:,0] = LST

	T10_LST = np.zeros((len(LST),3)); T10_LST[:,0] = LST
	b10_LST = np.zeros((len(LST),3)); b10_LST[:,0] = LST
	g10_LST = np.zeros((len(LST),3)); g10_LST[:,0] = LST

	T11_LST = np.zeros((len(LST),3)); T11_LST[:,0] = LST
	b11_LST = np.zeros((len(LST),3)); b11_LST[:,0] = LST
	g11_LST = np.zeros((len(LST),3)); g11_LST[:,0] = LST

	T12_LST = np.zeros((len(LST),3)); T12_LST[:,0] = LST
	b12_LST = np.zeros((len(LST),3)); b12_LST[:,0] = LST
	g12_LST = np.zeros((len(LST),3)); g12_LST[:,0] = LST



	# Looping over LST
	for i in range(len(LST)):
		T1_LST_array = T1[i,R1[i,:]>0]		
		b1_LST_array = b1[i,R1[i,:]>0]		
		g1_LST_array = g1[i,R1[i,:]>0]

		T2_LST_array = T2[i,R2[i,:]>0]		
		b2_LST_array = b2[i,R2[i,:]>0]		
		g2_LST_array = g2[i,R2[i,:]>0]

		T3_LST_array = T3[i,R3[i,:]>0]		
		b3_LST_array = b3[i,R3[i,:]>0]		
		g3_LST_array = g3[i,R3[i,:]>0]

		T4_LST_array = T4[i,R4[i,:]>0]		
		b4_LST_array = b4[i,R4[i,:]>0]		
		g4_LST_array = g4[i,R4[i,:]>0]	

		T5_LST_array = T5[i,R5[i,:]>0]		
		b5_LST_array = b5[i,R5[i,:]>0]		
		g5_LST_array = g5[i,R5[i,:]>0]	

		T6_LST_array = T6[i,R6[i,:]>0]		
		b6_LST_array = b6[i,R6[i,:]>0]		
		g6_LST_array = g6[i,R6[i,:]>0]	

		T7_LST_array = T7[i,R7[i,:]>0]		
		b7_LST_array = b7[i,R7[i,:]>0]		
		g7_LST_array = g7[i,R7[i,:]>0]

		T8_LST_array = T8[i,R8[i,:]>0]		
		b8_LST_array = b8[i,R8[i,:]>0]		
		g8_LST_array = g8[i,R8[i,:]>0]

		T9_LST_array = T9[i,R9[i,:]>0]		
		b9_LST_array = b9[i,R9[i,:]>0]		
		g9_LST_array = g9[i,R9[i,:]>0]

		T10_LST_array = T10[i,R10[i,:]>0]		
		b10_LST_array = b10[i,R10[i,:]>0]		
		g10_LST_array = g10[i,R10[i,:]>0]

		T11_LST_array = T11[i,R11[i,:]>0]		
		b11_LST_array = b11[i,R11[i,:]>0]		
		g11_LST_array = g11[i,R11[i,:]>0]

		T12_LST_array = T12[i,R12[i,:]>0]		
		b12_LST_array = b12[i,R12[i,:]>0]		
		g12_LST_array = g12[i,R12[i,:]>0]




		# computing mean and standard deviation at each LST if there is more than 1 point
		if len(g1_LST_array) > 1:

			#------------------------------------
			T1_LST[i,1] = np.mean(T1_LST_array)
			T1_LST[i,2] = np.std(T1_LST_array)

			b1_LST[i,1] = np.mean(b1_LST_array)
			b1_LST[i,2] = np.std(b1_LST_array)

			g1_LST[i,1] = np.mean(g1_LST_array)
			g1_LST[i,2] = np.std(g1_LST_array)			


		if len(g2_LST_array) > 1:	
			#------------------------------------
			T2_LST[i,1] = np.mean(T2_LST_array)
			T2_LST[i,2] = np.std(T2_LST_array)

			b2_LST[i,1] = np.mean(b2_LST_array)
			b2_LST[i,2] = np.std(b2_LST_array)

			g2_LST[i,1] = np.mean(g2_LST_array)
			g2_LST[i,2] = np.std(g2_LST_array)


		if len(g3_LST_array) > 1:	
			#------------------------------------
			T3_LST[i,1] = np.mean(T3_LST_array)
			T3_LST[i,2] = np.std(T3_LST_array)

			b3_LST[i,1] = np.mean(b3_LST_array)
			b3_LST[i,2] = np.std(b3_LST_array)

			g3_LST[i,1] = np.mean(g3_LST_array)
			g3_LST[i,2] = np.std(g3_LST_array)		


		if len(g4_LST_array) > 1:	
			#------------------------------------
			T4_LST[i,1] = np.mean(T4_LST_array)
			T4_LST[i,2] = np.std(T4_LST_array)

			b4_LST[i,1] = np.mean(b4_LST_array)
			b4_LST[i,2] = np.std(b4_LST_array)

			g4_LST[i,1] = np.mean(g4_LST_array)
			g4_LST[i,2] = np.std(g4_LST_array)


		if len(g5_LST_array) > 1:	
			#------------------------------------
			T5_LST[i,1] = np.mean(T5_LST_array)
			T5_LST[i,2] = np.std(T5_LST_array)

			b5_LST[i,1] = np.mean(b5_LST_array)
			b5_LST[i,2] = np.std(b5_LST_array)

			g5_LST[i,1] = np.mean(g5_LST_array)
			g5_LST[i,2] = np.std(g5_LST_array)


		if len(g6_LST_array) > 1:	
			#------------------------------------
			T6_LST[i,1] = np.mean(T6_LST_array)
			T6_LST[i,2] = np.std(T6_LST_array)

			b6_LST[i,1] = np.mean(b6_LST_array)
			b6_LST[i,2] = np.std(b6_LST_array)

			g6_LST[i,1] = np.mean(g6_LST_array)
			g6_LST[i,2] = np.std(g6_LST_array)


		if len(g7_LST_array) > 1:	
			#------------------------------------
			T7_LST[i,1] = np.mean(T7_LST_array)
			T7_LST[i,2] = np.std(T7_LST_array)

			b7_LST[i,1] = np.mean(b7_LST_array)
			b7_LST[i,2] = np.std(b7_LST_array)

			g7_LST[i,1] = np.mean(g7_LST_array)
			g7_LST[i,2] = np.std(g7_LST_array)


		if len(g8_LST_array) > 1:	
			#------------------------------------
			T8_LST[i,1] = np.mean(T8_LST_array)
			T8_LST[i,2] = np.std(T8_LST_array)

			b8_LST[i,1] = np.mean(b8_LST_array)
			b8_LST[i,2] = np.std(b8_LST_array)

			g8_LST[i,1] = np.mean(g8_LST_array)
			g8_LST[i,2] = np.std(g8_LST_array)


		if len(g9_LST_array) > 1:	
			#------------------------------------
			T9_LST[i,1] = np.mean(T9_LST_array)
			T9_LST[i,2] = np.std(T9_LST_array)

			b9_LST[i,1] = np.mean(b9_LST_array)
			b9_LST[i,2] = np.std(b9_LST_array)

			g9_LST[i,1] = np.mean(g9_LST_array)
			g9_LST[i,2] = np.std(g9_LST_array)


		if len(g10_LST_array) > 1:	
			#------------------------------------
			T10_LST[i,1] = np.mean(T10_LST_array)
			T10_LST[i,2] = np.std(T10_LST_array)

			b10_LST[i,1] = np.mean(b10_LST_array)
			b10_LST[i,2] = np.std(b10_LST_array)

			g10_LST[i,1] = np.mean(g10_LST_array)
			g10_LST[i,2] = np.std(g10_LST_array)


		if len(g11_LST_array) > 1:	
			#------------------------------------
			T11_LST[i,1] = np.mean(T11_LST_array)
			T11_LST[i,2] = np.std(T11_LST_array)

			b11_LST[i,1] = np.mean(b11_LST_array)
			b11_LST[i,2] = np.std(b11_LST_array)

			g11_LST[i,1] = np.mean(g11_LST_array)
			g11_LST[i,2] = np.std(g11_LST_array)


		if len(g12_LST_array) > 1:	
			#------------------------------------
			T12_LST[i,1] = np.mean(T12_LST_array)
			T12_LST[i,2] = np.std(T12_LST_array)

			b12_LST[i,1] = np.mean(b12_LST_array)
			b12_LST[i,2] = np.std(b12_LST_array)

			g12_LST[i,1] = np.mean(g12_LST_array)
			g12_LST[i,2] = np.std(g12_LST_array)


	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()


	plt.figure(1)

	plt.subplot(2,2,1)
	plt.errorbar(b1_LST[b1_LST[:,1]>0,0], b1_LST[b1_LST[:,1]>0,1], b1_LST[b1_LST[:,1]>0,2], fmt = '.')
	plt.errorbar(b2_LST[b2_LST[:,1]>0,0], b2_LST[b2_LST[:,1]>0,1], b2_LST[b2_LST[:,1]>0,2], fmt = 'r.')
	plt.errorbar(b3_LST[b3_LST[:,1]>0,0], b3_LST[b3_LST[:,1]>0,1], b3_LST[b3_LST[:,1]>0,2], fmt = 'k.')
	plt.xlim([0,24])
	plt.ylim([2.48, 2.64])
	plt.grid()
	#plt.xlabel('LST [Hr]')
	plt.ylabel(r'$\beta$', fontsize=16)
	plt.title('Fourpoint')

	plt.subplot(2,2,2)
	plt.errorbar(g1_LST[np.abs(g1_LST[:,1])>0,0], g1_LST[np.abs(g1_LST[:,1])>0,1], g1_LST[np.abs(g1_LST[:,1])>0,2], fmt = '.')
	plt.errorbar(g2_LST[np.abs(g2_LST[:,1])>0,0], g2_LST[np.abs(g2_LST[:,1])>0,1], g2_LST[np.abs(g2_LST[:,1])>0,2], fmt = 'r.')
	plt.errorbar(g3_LST[np.abs(g3_LST[:,1])>0,0], g3_LST[np.abs(g3_LST[:,1])>0,1], g3_LST[np.abs(g3_LST[:,1])>0,2], fmt = 'k.')	
	plt.xlim([0,24])
	plt.ylim([-0.2, 0.1])
	plt.grid()
	#plt.xlabel('LST [Hr]')
	plt.ylabel(r'$\gamma$', fontsize=16)
	plt.title('Fourpoint')

	plt.subplot(2,2,3)
	plt.errorbar(b4_LST[b4_LST[:,1]>0,0], b4_LST[b4_LST[:,1]>0,1], b4_LST[b4_LST[:,1]>0,2], fmt = '.')
	plt.errorbar(b5_LST[b5_LST[:,1]>0,0], b5_LST[b5_LST[:,1]>0,1], b5_LST[b5_LST[:,1]>0,2], fmt = 'r.')
	plt.errorbar(b6_LST[b6_LST[:,1]>0,0], b6_LST[b6_LST[:,1]>0,1], b6_LST[b6_LST[:,1]>0,2], fmt = 'k.')
	plt.xlim([0,24])
	plt.ylim([2.48, 2.64])
	plt.grid()
	plt.xlabel('LST [Hr]')
	plt.ylabel(r'$\beta$', fontsize=16)
	plt.title('Blade')

	plt.subplot(2,2,4)
	h1 = plt.errorbar(g4_LST[np.abs(g4_LST[:,1])>0,0], g4_LST[np.abs(g4_LST[:,1])>0,1], g4_LST[np.abs(g4_LST[:,1])>0,2], fmt = '.',   label='calibration at 25degC')
	h2 = plt.errorbar(g5_LST[np.abs(g5_LST[:,1])>0,0], g5_LST[np.abs(g5_LST[:,1])>0,1], g5_LST[np.abs(g5_LST[:,1])>0,2], fmt = 'r.',  label='correcting by (Temp2-Temp1) / 2')
	h3 = plt.errorbar(g6_LST[np.abs(g6_LST[:,1])>0,0], g6_LST[np.abs(g6_LST[:,1])>0,1], g6_LST[np.abs(g6_LST[:,1])>0,2], fmt = 'k.',  label='correcting by (Temp2-Temp1)')
	plt.legend(handles=[h1, h2, h3], loc=0)
	plt.xlim([0,24])
	plt.ylim([-0.2, 0.1])
	plt.grid()
	plt.xlabel('LST [Hr]')
	plt.ylabel(r'$\gamma$', fontsize=16)
	plt.title('Blade')











	plt.figure(2)
	plt.subplot(2,1,1)
	plt.errorbar(b3_LST[b3_LST[:,1]>0,0], b3_LST[b3_LST[:,1]>0,1], b3_LST[b3_LST[:,1]>0,2], fmt = 'b.')
	plt.errorbar(b6_LST[b6_LST[:,1]>0,0], b6_LST[b6_LST[:,1]>0,1], b6_LST[b6_LST[:,1]>0,2], fmt = 'r.')
	plt.xlim([0,24])
	plt.ylim([2.48, 2.64])
	plt.grid()
	plt.ylabel(r'$\beta$', fontsize=16)	

	plt.subplot(2,1,2)
	h1 = plt.errorbar(g3_LST[np.abs(g3_LST[:,1])>0,0], g3_LST[np.abs(g3_LST[:,1])>0,1], g3_LST[np.abs(g3_LST[:,1])>0,2], fmt = 'b.',  label='fourpoint')
	h2 = plt.errorbar(g6_LST[np.abs(g6_LST[:,1])>0,0], g6_LST[np.abs(g6_LST[:,1])>0,1], g6_LST[np.abs(g6_LST[:,1])>0,2], fmt = 'r.',  label='blade')
	plt.legend(handles=[h1, h2], loc=0)
	plt.xlim([0,24])
	plt.ylim([-0.2, 0.1])
	plt.grid()
	plt.xlabel('LST [Hr]')
	plt.ylabel(r'$\gamma$', fontsize=16)	










	plt.figure(3)
	h1 = plt.errorbar(b3_LST[b3_LST[:,1]>0,0], b3_LST[b3_LST[:,1]>0,1], b3_LST[b3_LST[:,1]>0,2], fmt = 'b.',  label='fourpoint, 3 param')
	h2 = plt.errorbar(b6_LST[b6_LST[:,1]>0,0], b6_LST[b6_LST[:,1]>0,1], b6_LST[b6_LST[:,1]>0,2], fmt = 'r.',  label='blade, 3 param')

	h3 = plt.errorbar(b7_LST[b7_LST[:,1]>0,0], b7_LST[b7_LST[:,1]>0,1], b7_LST[b7_LST[:,1]>0,2], fmt = 'm.',  label='fourpoint, 2 param')
	h4 = plt.errorbar(b8_LST[b8_LST[:,1]>0,0], b8_LST[b8_LST[:,1]>0,1], b8_LST[b8_LST[:,1]>0,2], fmt = 'g.',  label='blade, 2 param')

	plt.legend(handles=[h1, h3, h2, h4], loc=0)

	plt.xlim([0,24])
	plt.ylim([2.48, 2.64])
	plt.grid()
	plt.ylabel(r'$\beta$', fontsize=16)	
	plt.xlabel('LST [Hr]')







	plt.figure(4)
	plt.subplot(2,1,1)
	plt.errorbar(b3_LST[b3_LST[:,1]>0,0], b3_LST[b3_LST[:,1]>0,1], b3_LST[b3_LST[:,1]>0,2], fmt = 'b.')
	plt.errorbar(b9_LST[b9_LST[:,1]>0,0], b9_LST[b9_LST[:,1]>0,1], b9_LST[b9_LST[:,1]>0,2], fmt = 'm.')

	plt.errorbar(b6_LST[b6_LST[:,1]>0,0], b6_LST[b6_LST[:,1]>0,1], b6_LST[b6_LST[:,1]>0,2], fmt = 'r.')
	plt.errorbar(b11_LST[b11_LST[:,1]>0,0], b11_LST[b11_LST[:,1]>0,1], b11_LST[b11_LST[:,1]>0,2], fmt = 'g.')

	plt.xlim([0,24])
	plt.ylim([2.48, 2.64])
	plt.grid()
	plt.ylabel(r'$\beta$', fontsize=16)	

	plt.subplot(2,1,2)
	h1 = plt.errorbar(g3_LST[np.abs(g3_LST[:,1])>0,0], g3_LST[np.abs(g3_LST[:,1])>0,1], g3_LST[np.abs(g3_LST[:,1])>0,2], fmt = 'b.',  label='fourpoint, 110-190 MHz')
	h2 = plt.errorbar(g9_LST[np.abs(g9_LST[:,1])>0,0], g9_LST[np.abs(g9_LST[:,1])>0,1], g9_LST[np.abs(g9_LST[:,1])>0,2], fmt = 'm.',  label='fourpoint, 120-180 MHz')

	h3 = plt.errorbar(g6_LST[np.abs(g6_LST[:,1])>0,0], g6_LST[np.abs(g6_LST[:,1])>0,1], g6_LST[np.abs(g6_LST[:,1])>0,2], fmt = 'r.',  label='blade, 110-190 MHz')
	h4 = plt.errorbar(g11_LST[np.abs(g11_LST[:,1])>0,0], g11_LST[np.abs(g11_LST[:,1])>0,1], g11_LST[np.abs(g11_LST[:,1])>0,2], fmt = 'g.',  label='blade, 120-180 MHz')

	plt.legend(handles=[h1, h2, h3, h4], loc=0)
	plt.xlim([0,24])
	plt.ylim([-0.2, 0.1])
	plt.grid()
	plt.xlabel('LST [Hr]')
	plt.ylabel(r'$\gamma$', fontsize=16)






	plt.figure(5)
	plt.subplot(2,1,1)
	im1 = plt.imshow(bf_fourpoint[:,4::].T, interpolation='none', aspect='auto', extent=[0, 24, 200, 100])
	im1.set_clim([0.9,1.1])
	plt.colorbar()
	plt.ylabel('frequency [MHz]')
	plt.title('"Beam Factor", Fourpoint')

	plt.subplot(2,1,2)
	im2 = plt.imshow(bf_blade.T, interpolation='none', aspect='auto', extent=[0, 24, 200, 100])
	im2.set_clim([0.9,1.1])
	plt.colorbar()
	plt.ylabel('frequency [MHz]')
	plt.xlabel('LST [Ht]')
	plt.title('"Beam Factor", Blade')
















	#if antenna == 'fourpoint':
		#in1 = 2; in2 = 35; in3 = 50; in4 = 60; in5 = 68

	#elif antenna == 'blade':
		#in1 = 6; in2 = 15; in3 = 25; in4 = 60; in5 = 68	




	#plt.subplot2grid((3,4), (2,0), colspan=2)

	#day_number = np.arange(len(beta[0,:]))

	#plt.errorbar(day_number[beta[in1,:]>2.55], beta[in1,  beta[in1,:]>2.55] - np.mean(beta[in1,  beta[in1,:]>2.55]), fmt='b.-', markersize = 10)
	#plt.errorbar(day_number[beta[in2,:]>0],    beta[in2, beta[in2,:]>0] - np.mean(beta[in2, beta[in2,:]>0]),   fmt='r.-', markersize = 10)
	#plt.errorbar(day_number[beta[in3,:]>0],    beta[in3, beta[in3,:]>0] - np.mean(beta[in3, beta[in3,:]>0]),   fmt='g.-', markersize = 10)
	#plt.errorbar(day_number[beta[in4,:]>0],    beta[in4, beta[in4,:]>0] - np.mean(beta[in4, beta[in4,:]>0]),   fmt='k.-', markersize = 10)
	#plt.errorbar(day_number[beta[in5,:]>0],    beta[in5, beta[in5,:]>0] - np.mean(beta[in5, beta[in5,:]>0]),   fmt='m.-', markersize = 10)

	#plt.ylim([-0.02, 0.02])

	#plt.grid()
	#plt.xlabel('day number', fontsize=16)
	#plt.ylabel(r'$\beta$', fontsize=22)










	#plt.subplot2grid((3,4), (2,2), colspan=2)

	#h1 = plt.errorbar(day_number[(np.abs(gamma[in1,:])>0) & (beta[in1,:] > 2.05)],  gamma[in1,  (np.abs(gamma[in1,:])>0) & (beta[in1,:] > 2.05)],  fmt='b.-', markersize = 10, label=str(round((1/6) + 6*(1/3), 1))  + ' Hr')
	#h2 = plt.errorbar(day_number[np.abs(gamma[in2,:])>0], gamma[in2, np.abs(gamma[in2,:])>0], fmt='r.-', markersize = 10, label=str(round((1/6) + 15*(1/3), 1)) + ' Hr')
	#h3 = plt.errorbar(day_number[np.abs(gamma[in3,:])>0], gamma[in3, np.abs(gamma[in3,:])>0], fmt='g.-', markersize = 10, label=str(round((1/6) + 25*(1/3), 1)) + ' Hr')
	#h4 = plt.errorbar(day_number[np.abs(gamma[in4,:])>0], gamma[in4, np.abs(gamma[in4,:])>0], fmt='k.-', markersize = 10, label=str(round((1/6) + 60*(1/3), 1)) + ' Hr')
	#h5 = plt.errorbar(day_number[np.abs(gamma[in5,:])>0], gamma[in5, np.abs(gamma[in5,:])>0], fmt='m.-', markersize = 10, label=str(round((1/6) + 68*(1/3), 1)) + ' Hr')	

	#if antenna == 'fourpoint':
		#plt.ylim([-0.2, 0.1])

	#elif antenna == 'blade':
		#plt.ylim([-0.15, 0.05])

	#plt.grid()
	#plt.xlabel('day number', fontsize=16)
	#plt.ylabel(r'$\gamma$',  fontsize=22)

	#plt.legend(handles=[h1, h2, h3, h4, h5], fontsize=14)


























	return 1 #gamma, beta, T0, RMS, RMS_median, gamma_mean, gamma_std, beta_mean, beta_std, T0_mean, T0_std, RMS_mean, RMS_std





def plot_spectral_index_yes_no_beam_correction():

	# Measurements with no beam correction
	mf1_nbc  = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/data/spectral_index_high_band_a03_x02_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1_no_beam_correction.hdf5')
	mb1_nbc  = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/data/spectral_index_high_band_b03_y02_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1_no_beam_correction.hdf5')


	# Measurements with beam correction
	mf1_bc   = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/data/spectral_index_high_band_a03_x02_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')
	mb1_bc   = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/data/spectral_index_high_band_b03_y02_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')

	mf2_bc   = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/data/spectral_index_high_band_a03_x01_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')
	mb2_bc   = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/data/spectral_index_high_band_b03_y01_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1.hdf5')

	mb3_bc   = eg.spectral_index_read(home_folder + '/DATA/EDGES/spectral_index/high_band/data/spectral_index_high_band_b03_y02_npar_3_flim_110_190_sun_el_max_-10_RMS_median_1.1_extragal_removed.hdf5')




	# Simulations

	# GSM + Fourpoint Infinite Ground Plane
	sf1_nbc = eg.spectral_index_simulated_data('high_band', 'a01', 'x01', npar=3, beam_correction='off', flow=110, fhigh=190)

	# GSM + Blade Infinite Ground Plane
	sb1_nbc = eg.spectral_index_simulated_data('high_band', 'b01', 'y01', npar=3, beam_correction='off', flow=110, fhigh=190)

	# GSM + Blade Finite Ground Plane
	sb2_nbc = eg.spectral_index_simulated_data('high_band', 'b02', 'y01', npar=3, beam_correction='off', flow=110, fhigh=190)

	# GSM + Blade Infinite Ground Plane + Beam at 150 MHz
	sb3_nbc = eg.spectral_index_simulated_data('high_band', 'b03', 'y01', npar=3, beam_correction='off', flow=110, fhigh=190)

	# GSM + Blade Infinite Ground Plane + Beam at 150 MHz
	sb4_nbc = eg.spectral_index_simulated_data('high_band', 'b03', 'y01', npar=2, beam_correction='off', flow=110, fhigh=190)


	# Raul GSM + Blade Finite Plus-Shaped Ground Plane + Beam at 150 MHz + Offset correction
	sb5_nbc = eg.spectral_index_simulated_data('high_band', 'e01', 'x01', npar=2, beam_correction='off', flow=90, fhigh=190)

	# Raul GSM + Blade Finite Plus-Shaped Ground Plane + Beam at 150 MHz + Only 3K correction
	sb6_nbc = eg.spectral_index_simulated_data('high_band', 'e02', 'x01', npar=2, beam_correction='off', flow=90, fhigh=190)

	# Raul GSM + Blade Finite Plus-Shaped Ground Plane + Beam at 150 MHz + Rotated -6 AZ
	sb7_nbc = eg.spectral_index_simulated_data('high_band', 'e03', 'x01', npar=2, beam_correction='off', flow=90, fhigh=190)	



	# Scaled Haslam + Blade Infinite Ground Plane + Blade Beam at 150 MHz, 2.5, 2.57
	shb1_nbc = eg.spectral_index_simulated_data('high_band', 'd01', 'y01', beam_correction='off', flow=110, fhigh=190)

	# Scaled Haslam + Blade Infinite Ground Plane + Blade Beam at 150 MHz, 2.4, 2.6
	shb2_nbc = eg.spectral_index_simulated_data('high_band', 'd02', 'y01', beam_correction='off', flow=110, fhigh=190)





	# GSM + Fourpoint Infinite Ground Plane
	sf1_bc = eg.spectral_index_simulated_data('high_band', 'a01', 'x02', npar=3, beam_correction='on', flow=110, fhigh=190)

	# GSM + Blade Infinite Ground Plane
	sb1_bc = eg.spectral_index_simulated_data('high_band', 'b01', 'y02', npar=3, beam_correction='on', flow=110, fhigh=190)

	# GSM + Blade Finite Ground Plane
	sb2_bc = eg.spectral_index_simulated_data('high_band', 'b02', 'y02', npar=3, beam_correction='on', flow=110, fhigh=190)













	# No beam correction

	# Beta from measurements
	bmf1_nbc = mf1_nbc[7]
	bmb1_nbc = mb1_nbc[7]


	# Beta from simulations
	bsf1_nbc = sf1_nbc[1]
	#bsf2_nbc = sf2_nbc[1]

	bsb1_nbc = sb1_nbc[1]
	bsb2_nbc = sb2_nbc[1]
	bsb3_nbc = sb3_nbc[1]
	bsb4_nbc = sb4_nbc[1]

	bsb5_nbc = sb5_nbc[1]
	bsb6_nbc = sb6_nbc[1]
	bsb7_nbc = sb7_nbc[1]



	bhb1_nbc = shb1_nbc[1]
	bhb2_nbc = shb2_nbc[1]



	# Beta from Alan's fit assuming a sky with spectral index 2.4 on the Galactic plane and 2.6 outside
	GHA         = np.arange(0,23,2)
	BETA_ALAN_0 = np.array([2.499, 2.504, 2.525, 2.580, 2.595, 2.570, 2.547, 2.536, 2.536, 2.538, 2.521, 2.503])
	LST_ALAN_0  = GHA + 17.75
	LST_ALAN_1  = np.copy(LST_ALAN_0)
	LST_ALAN_1[LST_ALAN_1 >= 24] = LST_ALAN_1[LST_ALAN_1 >= 24] - 24
	index = np.argsort(LST_ALAN_1)
	LST_ALAN_2  = LST_ALAN_1[index]
	BETA_ALAN_2 = BETA_ALAN_0[index]

	LST_ALAN = np.append(LST_ALAN_2[-1]-24, LST_ALAN_2)
	LST_ALAN = np.append(LST_ALAN, LST_ALAN_2[0]+24)

	BETA_ALAN = np.append(BETA_ALAN_2[-1], BETA_ALAN_2)
	BETA_ALAN = np.append(BETA_ALAN, BETA_ALAN_2[0])






	# Gamma from measurements
	gmf1_nbc = mf1_nbc[8]
	gmb1_nbc = mb1_nbc[8]


	# Gamma from simulations
	gsf1_nbc = sf1_nbc[2]
	#bsf2_nbc = sf2_nbc[2]

	gsb1_nbc = sb1_nbc[2]
	gsb2_nbc = sb2_nbc[2]	
	gsb3_nbc = sb3_nbc[2]






	# Yes beam correction

	# Beta from measurements
	bmf1_bc = mf1_bc[7]
	bmb1_bc = mb1_bc[7]

	bmf2_bc = mf2_bc[7]
	bmb2_bc = mb2_bc[7]

	bmb3_bc = mb3_bc[7]



	# Beta from simulations
	bsf1_bc = sf1_bc[1]
	#bsf2_bc = sf2_bc[1]

	bsb1_bc = sb1_bc[1]
	bsb2_bc = sb2_bc[1]




	# Gamma from measurements
	gmf1_bc = mf1_bc[8]
	gmb1_bc = mb1_bc[8]


	# Gamma from simulations
	gsf1_bc = sf1_bc[2]
	#bsf2_bc = sf2_bc[2]

	gsb1_bc = sb1_bc[2]
	gsb2_bc = sb2_bc[2]	












	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()	





	# ############################################################


	# No beam correction
	f1 = plt.figure(1)

	plt.subplot(2,1,1)
	h1 = plt.errorbar(bmf1_nbc[:,0], bmf1_nbc[:,1], bmf1_nbc[:,2], fmt='b.', label = 'fourpoint, measurements')
	h2 = plt.errorbar(bmb1_nbc[:,0], bmb1_nbc[:,1], bmb1_nbc[:,2], fmt='r.', label = 'blade, measurements')

	h3, = plt.plot(bsf1_nbc[:,0], bsf1_nbc[:,1], 'b', label = 'fourpoint, GSM, infinite ground plane')
	#h4, = plt.plot(bsf2_nbc[:,0], bsf2_nbc[:,1], 'g--', label = 'blade, GSM, 2 param')

	h5, = plt.plot(bsb1_nbc[:,0], bsb1_nbc[:,1], 'r', label = 'blade, GSM, infinite ground plane')
	h6, = plt.plot(bsb2_nbc[:,0], bsb2_nbc[:,1], 'm', label = 'blade, GSM, finite')

	#plt.legend(handles=[h1, h2, h3, h5, h6], loc=0)
	plt.xlim([0,24])
	plt.ylim([2.35, 2.75])
	plt.grid()
	#plt.xlabel('LST [Hrs]')
	plt.ylabel(r'$\beta$', fontsize=20)





	plt.subplot(2,1,2)
	h1 = plt.errorbar(gmf1_nbc[:,0], gmf1_nbc[:,1], gmf1_nbc[:,2], fmt='b.', label = 'fourpoint, measurements')
	h2 = plt.errorbar(gmb1_nbc[:,0], gmb1_nbc[:,1], gmb1_nbc[:,2], fmt='r.', label = 'blade, measurements')

	h3, = plt.plot(gsf1_nbc[:,0], gsf1_nbc[:,1], 'b', label = 'fourpoint, GSM, infinite ground plane')
	#h4, = plt.plot(bsf2_nbc[:,0], bsf2_nbc[:,1], 'g--', label = 'blade, GSM, 2 param')

	h5, = plt.plot(gsb1_nbc[:,0], gsb1_nbc[:,1], 'r', label = 'blade, GSM, infinite ground plane')
	h6, = plt.plot(gsb2_nbc[:,0], gsb2_nbc[:,1], 'm', label = 'blade, GSM, finite')

	plt.legend(handles=[h1, h2, h3, h5, h6], loc=0)
	plt.xlim([0,24])
	plt.ylim([-0.8, 0.6])
	plt.grid()
	plt.xlabel('LST [Hrs]')
	plt.ylabel(r'$\gamma$', fontsize=20)











	# Yes beam correction
	f2 = plt.figure(2)

	plt.subplot(2,1,1)
	h1 = plt.errorbar(bmf1_bc[:,0], bmf1_bc[:,1], bmf1_bc[:,2], fmt='b.', label = 'fourpoint, measurements')
	h2 = plt.errorbar(bmb1_bc[:,0], bmb1_bc[:,1], bmb1_bc[:,2], fmt='r.', label = 'blade, measurements')

	h3, = plt.plot(bsf1_bc[:,0], bsf1_bc[:,1], 'b', label = 'fourpoint, GSM, infinite ground plane')
	#h4, = plt.plot(bsf2_bc[:,0], bsf2_bc[:,1], 'g--', label = 'blade, GSM, 2 param')

	h5, = plt.plot(bsb1_bc[:,0],  bsb1_bc[:,1],  'r', label = 'blade, GSM, infinite ground plane')
	#h6, = plt.plot(bsb2_bc[:,0],  bsb2_bc[:,1],  'm', label = 'blade, GSM, finite')
	h7, = plt.plot(bsb3_nbc[:,0], bsb3_nbc[:,1], 'k', label = 'blade, GSM, infinite ground plane, Beam at 150 MHz')
	h8, = plt.plot(bsb4_nbc[:,0], bsb4_nbc[:,1], 'g', label = 'blade, GSM, infinite ground plane, Beam at 150 MHz, 2 parameters')
	h9, = plt.plot(LST_ALAN, BETA_ALAN, 'm.-')
	#plt.legend(handles=[h1, h2, h3, h5, h6], loc=0)
	plt.xlim([0,24])
	plt.ylim([2.45, 2.65])
	plt.grid()
	#plt.xlabel('LST [Hrs]')
	plt.ylabel(r'$\beta$', fontsize=20)





	plt.subplot(2,1,2)
	h1 = plt.errorbar(gmf1_bc[:,0], gmf1_bc[:,1], gmf1_bc[:,2], fmt='b.', label = 'fourpoint, measurements')
	h2 = plt.errorbar(gmb1_bc[:,0], gmb1_bc[:,1], gmb1_bc[:,2], fmt='r.', label = 'blade, measurements')

	h3, = plt.plot(gsf1_bc[:,0], gsf1_bc[:,1], 'b', label = 'fourpoint, GSM, infinite ground plane')
	#h4, = plt.plot(bsf2_bc[:,0], bsf2_bc[:,1], 'g--', label = 'blade, GSM, 2 param')

	h5, = plt.plot(gsb1_bc[:,0],  gsb1_bc[:,1],  'r', label = 'blade, GSM, infinite ground plane')
	#h6, = plt.plot(gsb2_bc[:,0],  gsb2_bc[:,1],  'm', label = 'blade, GSM, finite')
	h7, = plt.plot(gsb3_nbc[:,0], gsb3_nbc[:,1], 'k', label = 'blade, GSM, infinite ground plane, Beam at 150 MHz')

	plt.legend(handles=[h1, h2, h3, h5, h7], loc=0)
	plt.xlim([0,24])
	plt.ylim([-0.4, 0.2])
	plt.grid()
	plt.xlabel('LST [Hrs]')
	plt.ylabel(r'$\gamma$', fontsize=20)















	# ############################################################


	res_mf1_nbc                              = mf1_nbc[10]
	typical_res_mf1_nbc                      = res_mf1_nbc[:,96,:]
	typical_res_mf1_nbc[25:41,:]             = res_mf1_nbc[25:41,7,:]
	index_rfi_mf1_nbc                        = np.array([49, 67, 68, 69, 89, 90, 99])
	typical_res_mf1_nbc[:,index_rfi_mf1_nbc] = 0


	res_mb1_nbc = mb1_nbc[10]
	typical_res_mb1_nbc                      = res_mb1_nbc[:,12,:]
	typical_res_mb1_nbc[9:25,:]              = res_mb1_nbc[9:25,111,:]
	typical_res_mb1_nbc[25:49,:]             = res_mb1_nbc[25:49,212,:]
	index_rfi_mb1_nbc                        = np.array([49, 65, 66, 67, 68, 69, 89, 90, 99])
	typical_res_mb1_nbc[:,index_rfi_mb1_nbc] = 0




	res_mf1_bc                             = mf1_bc[10]
	typical_res_mf1_bc                     = res_mf1_bc[:,96,:]
	typical_res_mf1_bc[25:41,:]            = res_mf1_bc[25:41,7,:]
	index_rfi_mf1_bc                       = np.array([49, 67, 68, 69, 89, 90, 99])
	typical_res_mf1_bc[:,index_rfi_mf1_bc] = 0


	res_mb1_bc                             = mb1_bc[10]
	typical_res_mb1_bc                     = res_mb1_bc[:,12,:]
	typical_res_mb1_bc[9:25,:]             = res_mb1_bc[9:25,111,:]
	typical_res_mb1_bc[25:49,:]            = res_mb1_bc[25:49,212,:]
	index_rfi_mb1_bc                       = np.array([49, 65, 66, 67, 68, 69, 89, 90, 99])
	typical_res_mb1_bc[:,index_rfi_mb1_bc] = 0













	f3 = plt.figure(3)

	plt.subplot(1,2,1)
	im = plt.imshow(typical_res_mf1_nbc, interpolation='none', aspect='auto', extent = [110, 190, 24, 0]);im.set_clim([-3, 3])
	plt.xlim([110, 190])
	plt.xticks(np.arange(110, 191, 20))
	plt.xlabel('frequency [MHz]')
	plt.ylabel('LST [Hr]')
	cbar = plt.colorbar(ticks=np.arange(-3,3.1,1), orientation='horizontal')
	ax = cbar.ax
	ax.text(0.47, -2.8, '[K]', size=12)


	plt.subplot(1,2,2)
	im = plt.imshow(sf1_nbc[4], interpolation='none', aspect='auto', extent = [100, 200, 24, 0]);im.set_clim([-3, 3])	
	plt.xlim([110, 190])
	plt.xticks(np.arange(110, 191, 20))
	plt.xlabel('frequency [MHz]')
	#plt.ylabel('LST [Hr]')
	cbar = plt.colorbar(ticks=np.arange(-3,3.1,1), orientation='horizontal')
	ax = cbar.ax
	ax.text(0.47, -2.8, '[K]', size=12)





	f4 = plt.figure(4)

	plt.subplot(1,2,1)
	im = plt.imshow(typical_res_mb1_nbc, interpolation='none', aspect='auto', extent = [110, 190, 24, 0]);im.set_clim([-3, 3])
	plt.xlim([110, 190])
	plt.xticks(np.arange(110, 191, 20))
	plt.xlabel('frequency [MHz]')
	plt.ylabel('LST [Hr]')
	cbar = plt.colorbar(ticks=np.arange(-3,3.1,1), orientation='horizontal')
	ax = cbar.ax
	ax.text(0.47, -2.8, '[K]', size=12)


	plt.subplot(1,2,2)
	im = plt.imshow(sb1_nbc[4], interpolation='none', aspect='auto', extent = [100, 200, 24, 0]);im.set_clim([-3, 3])
	plt.xlim([110, 190])
	plt.xticks(np.arange(110, 191, 20))
	plt.xlabel('frequency [MHz]')
	#plt.ylabel('LST [Hr]')
	cbar = plt.colorbar(ticks=np.arange(-3,3.1,1), orientation='horizontal')
	ax = cbar.ax
	ax.text(0.47, -2.8, '[K]', size=12)







	f5 = plt.figure(5)

	plt.subplot(1,2,1)
	im = plt.imshow(typical_res_mf1_bc, interpolation='none', aspect='auto', extent = [110, 190, 24, 0]);im.set_clim([-1, 1])
	plt.xlim([110, 190])
	plt.xticks(np.arange(110, 191, 20))
	plt.xlabel('frequency [MHz]')
	plt.ylabel('LST [Hr]')
	cbar = plt.colorbar(ticks=np.arange(-3,3.1,1), orientation='horizontal')
	ax = cbar.ax
	ax.text(0.47, -2.8, '[K]', size=12)


	plt.subplot(1,2,2)
	im = plt.imshow(sf1_bc[4], interpolation='none', aspect='auto', extent = [100, 200, 24, 0]);im.set_clim([-1, 1])#;plt.colorbar();	
	plt.xlim([110, 190])
	plt.xticks(np.arange(110, 191, 20))
	plt.xlabel('frequency [MHz]')
	#plt.ylabel('LST [Hr]')
	cbar = plt.colorbar(ticks=np.arange(-3,3.1,1), orientation='horizontal')
	ax = cbar.ax
	ax.text(0.47, -2.8, '[K]', size=12)






	f6 = plt.figure(6)

	plt.subplot(1,2,1)
	im = plt.imshow(typical_res_mb1_bc, interpolation='none', aspect='auto', extent = [110, 190, 24, 0]);im.set_clim([-1, 1])
	plt.xlim([110, 190])
	plt.xticks(np.arange(110, 191, 20))
	plt.xlabel('frequency [MHz]')
	plt.ylabel('LST [Hr]')
	cbar = plt.colorbar(ticks=np.arange(-3,3.1,1), orientation='horizontal')
	ax = cbar.ax
	ax.text(0.47, -2.8, '[K]', size=12)


	plt.subplot(1,2,2)
	im  = plt.imshow(sb1_bc[4], interpolation='none', aspect='auto', extent = [100, 200, 24, 0]);im.set_clim([-1, 1])
	plt.xlim([110, 190])
	plt.xticks(np.arange(110, 191, 20))
	plt.xlabel('frequency [MHz]')
	#plt.ylabel('LST [Hr]')
	cbar = plt.colorbar(ticks=np.arange(-3,3.1,1), orientation='horizontal')
	ax = cbar.ax
	ax.text(0.47, -2.8, '[K]', size=12)











	# Another figure for comparing spectral indices


	rn, dn, gn, pn = spectral_index_infinitesimal_beam(plot='no')
	LST_n = rn/15


	f7 = plt.figure(7)

	h1  = plt.errorbar(bmf1_bc[:,0], bmf1_bc[:,1], bmf1_bc[:,2], fmt='b.', label = 'Fourpoint measurements. Beam factor uses scaled Haslam map with 2.5 and 2.57 betas.')
	h2  = plt.errorbar(bmb1_bc[:,0], bmb1_bc[:,1], bmb1_bc[:,2], fmt='r.', label = 'Blade measurements. Beam factor uses scaled Haslam map with 2.5 and 2.57 betas.')
	#h20 = plt.errorbar(bmb2_bc[:,0], bmb2_bc[:,1], bmb2_bc[:,2], fmt='c.', label = r'Blade measurements. Beam factor uses scaled Haslam map with uniform $\beta$=2.5.')

	#h3, = plt.plot(bsf1_bc[:,0], bsf1_bc[:,1], 'b', label = 'GSM convolved with Fourpoint. Beam factor uses scaled Haslam map with 2.5 and 2.57 betas.')

	#h5,  = plt.plot(bsb1_bc[:,0],  bsb1_bc[:,1],  'r', label = 'GSM convolved with Blade. Beam factor uses scaled Haslam map with 2.5 and 2.57 betas.')

	h7,  = plt.plot(bsb3_nbc[:,0], bsb3_nbc[:,1], 'k', linewidth=3, label = 'GSM convolved with Blade at 150 MHz (achromatic).')
	#h8,  = plt.plot(bsb4_nbc[:,0], bsb4_nbc[:,1], 'g', label = r'GSM convolved with Blade at 150 MHz (achromatic). Two-parameter fit model ($T_{150}$, $\beta$).')
	h10, = plt.plot(bhb1_nbc[:,0], bhb1_nbc[:,1], 'y', label = r'Blade at 150 MHz (achromatic) convolved with scaled Haslam map with 2.5 and 2.57 betas.')
	h9,  = plt.plot(LST_ALAN, BETA_ALAN, 'm.-', markersize=15, label = 'Results from Alan, Blade at 150 MHz (achromatic) convolved with scaled Haslam map with 2.4 and 2.6 betas.')
	h11, = plt.plot(bhb2_nbc[:,0], bhb2_nbc[:,1], 'g', label = r'Blade at 150 MHz (achromatic) convolved with scaled Haslam map with 2.4 and 2.6 betas.')
	h12, = plt.plot(LST_n, -pn[:,1], 'c', label = r'GSM convolved with spatially infinitesimal and achromatic beam.')

	plt.legend(handles=[h1, h2, h7, h10, h11, h9, h12], loc=0)
	plt.xlim([0,24])
	plt.ylim([2.40, 2.65])
	plt.xticks(np.arange(0,25,4))
	plt.grid()
	plt.xlabel('LST [Hrs]')
	plt.ylabel(r'$\beta$', fontsize=20)







	# Another figure for comparing spectral indices
	f8 = plt.figure(8)

	h1  = plt.errorbar(bmb1_bc[:,0], bmb1_bc[:,1], bmb1_bc[:,2], fmt='b.', label = 'Blade measurements applying beam factor, removing CMB.')
	h2  = plt.errorbar(bmb3_bc[:,0], bmb3_bc[:,1], bmb3_bc[:,2], fmt='r.', label = 'Blade measurements applying beam factor, removing CMB and extragalactic spectrum.')
	h3,  = plt.plot(bsb3_nbc[:,0], bsb3_nbc[:,1], 'k', linewidth=3, label = 'GSM convolved with Blade at 150 MHz (achromatic).')
	h4, = plt.plot(LST_n, -pn[:,1], 'c', label = r'GSM convolved with spatially infinitesimal and achromatic beam.')

	plt.legend(handles=[h1, h2, h3, h4], loc=0)
	plt.xlim([0,24])
	plt.ylim([2.40, 2.65])
	plt.xticks(np.arange(0,25,4))
	plt.grid()
	plt.xlabel('LST [Hrs]')
	plt.ylabel(r'$\beta$', fontsize=20)







	# Yet another figure
	f9 = plt.figure(9)

	h2, = plt.plot(bsb6_nbc[:,0], bsb6_nbc[:,1], 'b.-', label = r'beam at 150 MHz pointing North-South')
	h3, = plt.plot(bsb7_nbc[:,0], bsb7_nbc[:,1], 'r.-', label = r'beam at 150 MHz rotated $-6^{\circ}$ from due North')

	plt.legend(handles=[h2, h3], loc=0)
	plt.grid()
	plt.ylim([2.45, 2.65])
	plt.xlim([0, 24])
	plt.xticks(np.arange(0,25,2))
	plt.yticks(np.arange(2.45, 2.65, 0.01))
	plt.xlabel('LST [Hrs]')
	plt.ylabel(r'$\beta$', fontsize=18)

	return 1






















def plot_spectral_index_new_way_old():

	beta_fp, gamma_fp = eg.spectral_index_new_way_old('fourpoint')
	beta_bl, gamma_bl = eg.spectral_index_new_way_old('blade')


	plt.subplot(2,1,1)
	plt.errorbar(beta_fp[np.abs(beta_fp[:,1])>0,0], -beta_fp[np.abs(beta_fp[:,1])>0,1], beta_fp[np.abs(beta_fp[:,1])>0 ,2], fmt='b.');plt.grid()
	plt.errorbar(beta_bl[np.abs(beta_bl[:,1])>0,0], -beta_bl[np.abs(beta_bl[:,1])>0,1], beta_bl[np.abs(beta_bl[:,1])>0 ,2], fmt='r.');plt.grid()
	plt.xlim([0, 24])
	plt.ylim([2.48, 2.64])
	plt.grid()
	plt.ylabel(r'$\beta$', fontsize=20)

	plt.subplot(2,1,2)
	h1 = plt.errorbar(gamma_fp[np.abs(gamma_fp[:,1])>0,0], -gamma_fp[np.abs(gamma_fp[:,1])>0,1], gamma_fp[np.abs(gamma_fp[:,1])>0 ,2], fmt='b.', label='fourpoint infinite');plt.grid()
	h2 = plt.errorbar(gamma_bl[np.abs(gamma_bl[:,1])>0,0], -gamma_bl[np.abs(gamma_bl[:,1])>0,1], gamma_bl[np.abs(gamma_bl[:,1])>0 ,2], fmt='r.', label='blade infinite');plt.grid()
	plt.xlim([0, 24])
	plt.ylim([-0.20, 0.1])
	plt.grid()
	plt.xlabel('LST [Hr]')
	plt.ylabel(r'$\gamma$', fontsize=20)
	plt.legend(handles=[h1, h2], loc=0)

	return 1






def plot_gsm_properties(plot):

	path_file = home_folder + '/DATA/EDGES/beam_convolution/gsm/model_results/model_results.hdf5'
	lon, lat, RA, DEC, freq, par, re = eg.GSM_properties_read(path_file, print_keys='no')

	if plot=='beta':
		hp.mollview(-par[:,1], title='', min=2.3, max=2.6, unit=r'$\beta$')
		hp.graticule()


	if plot=='gamma':
		hp.mollview(-par[:,0], title='', min=0.05, max=0.15, unit=r'$\gamma$')
		hp.graticule()


	if plot=='residuals':
		hp.mollview(np.max(np.abs(re), axis=1), title='', min=0, max=2, unit=r'maximum residuals [K]')
		hp.graticule()


	if plot=='latitude_averages':
		lat_bin, beta_bin,  wb = eg.spectral_binning_fixed_frequency(-90, 90, 1, lat, -par[:,1], np.ones(len(lat)))
		lat_bin, gamma_bin, wb = eg.spectral_binning_fixed_frequency(-90, 90, 1, lat, -par[:,0], np.ones(len(lat)))


		plt.subplot(2,1,1)
		plt.plot( lat_bin[lat_bin >= 0], beta_bin[lat_bin >= 0], 'k')
		plt.plot(-lat_bin[lat_bin <  0], beta_bin[lat_bin <  0], 'r')		
		plt.grid()
		#plt.xlabel('|galactic latitude| [deg]')
		plt.ylabel(r'$\beta$', fontsize=16)


		plt.subplot(2,1,2)
		plt.plot( lat_bin[lat_bin >= 0], gamma_bin[lat_bin >= 0], 'k', label=r'lat $\geq 0^{\circ}$')
		plt.plot(-lat_bin[lat_bin <  0], gamma_bin[lat_bin <  0], 'r', label=r'lat $< 0^{\circ}$')		
		plt.grid()
		plt.xlabel('|galactic latitude| [deg]')
		plt.ylabel(r'$\gamma$', fontsize=16)
		plt.legend()



	return 1







def plots_spectral_index_comparison():

	# Original maps
	beta_file  = home_folder + '/DATA/EDGES/beam_convolution/sky_spectral_indices/sky_spectral_index_original_45_408_MHz_maps_galactic_coordinates_nside_512_ring_3Ksubtracted.hdf5'
	with h5py.File(beta_file, 'r') as hf:
		hf_beta = hf.get('spectral_index')
		beta    = np.array(hf_beta)

	hp.mollview(-beta, min =-2.6, max=-2.3, title='From Original 45,408-MHz maps', unit=r'$\beta$')
	hp.graticule()




	# GSM
	path_file = home_folder + '/DATA/EDGES/beam_convolution/gsm/model_results/model_results.hdf5'
	lon, lat, RA, DEC, freq, par, re = eg.GSM_properties_read(path_file, print_keys='no')

	hp.mollview(par[:,1], min=-2.6, max=-2.3, title='From GSM 45,408-MHz maps', unit=r'$\beta$')
	hp.graticule()


	return 1







def plot_cold_EoR(data='raul'):

	if data == 'raul':
		ff, tt, ww, rr = eg.data_analysis_level3(np.array([4,5,6,7,8,9,10,11,12]))
		binning = 'yes'

	elif data == 'alan':
		d1, d2 = eg.alan_data_averages()
		ff = d2[:,0]
		tt = d2[:,1]
		ww = d2[:,4]
		binning = 'no'


	fb, wb, res, RMS = eg.model_rejection_hyper(ff, tt, ww, Nmodels = 358, fit_type = 'EDGES_polynomial', flow = 110, fhigh = 190, npar = 5, binning = binning, fstep = 0.4)

	wn = wb/np.max(wb)

	if data == 'raul':
		wn[64:71]  = 0
		wn[89]     = 0
		wn[99:102] = 0
		wn[123]    = 0














	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()




	f1 = plt.figure(1)
	cold_EoR   = eg.cold_EoR_read(100, fb)
	plt.plot(fb, cold_EoR)


	f2 = plt.figure(2)
	plt.plot(fb[wn>0], res[1::,wn>0].T,'g')
	plt.plot(fb[wn>0], res[0,wn>0].T,'k', linewidth=3)
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$T [mK]')



	limits = np.zeros((len(RMS)-1,2))
	for i in range(len(RMS)-1):
		limits[i,0] = fb[0]
		temp = eg.cold_EoR_read(i, fb)
		for j in range(len(fb)-2):

			if (temp[j] > temp[j+1]) and (temp[j+1]<temp[j+2]) and (limits[i,1] == 0):
				limits[i,0] = fb[j+1]				

			if (temp[j] < -10) and (temp[j+1]>=-10):
				limits[i,1] = fb[j+1]


	f3 = plt.figure(3)
	plt.hist(RMS[1::],100)
	plt.grid()
	plt.xlabel('RMS residuals [mK]')
	plt.ylabel('number count')
	plt.xlim([0, 60])
	plt.ylim([0, 25])


	f4 = plt.figure(4)			
	plt.plot(limits[:,1]-limits[:,0], RMS[1::]/RMS[0],'r.')
	plt.xlim([0,70]);
	plt.ylim([0, 6]);
	plt.ylabel('rejection significance (sigma)');
	plt.xlabel('transition duration [MHz]');
	plt.grid();
	plt.plot(np.arange(0,71,1), 2*np.ones(71), linewidth=3)





	variance           = np.sum(res[0,:]**2) / len(res[0,:])
	chi_sq             = np.sum(res[1::,:]**2, axis=1) / variance
	degrees_of_freedom = len(res[0,:]) - 5 - 1
	prob               = 100*(1-stats.chi2.cdf(chi_sq, degrees_of_freedom))
	prob_bin           = np.histogram(prob, bins=np.arange(0, 40.001, 0.001))

	f5 = plt.figure(5)			
	plt.plot(limits[:,1]-limits[:,0], chi_sq/degrees_of_freedom, 'r.')
	plt.xlim([0,70]);
	#plt.ylim([0, 6]);
	plt.ylabel(r'reduced $\chi^2$', fontsize=16);
	plt.xlabel('transition duration [MHz]');
	plt.grid();
	plt.plot(np.arange(0,71,1), 2*np.ones(71), linewidth=3)




	f6 = plt.figure(6)
	plt.loglog(prob_bin[1][1::]-(prob_bin[1][1]-prob_bin[1][0])/2, prob_bin[0], '.', markersize=16)
	plt.ylim([0.1,1000])
	plt.grid()
	plt.xlabel('probability [%]')
	plt.ylabel('number count')

	return res





def plot_spectral_index_new_way_residuals():


	b, g, f, res = eg.spectral_index_new_way_old_one_region('blade')
	ron = np.zeros((72, len(f)))

	ron[0:26,:]  = res[0:26, 115, :]
	ron[26:47,:] = res[26:47,205, :]
	ron[46::,:]  = res[46::, 14,  :]

	im = plt.imshow(ron, interpolation='none', aspect='auto', extent=[110, 190, 24, 0]); im.set_clim([-30, 30])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('LST')
	cbar = plt.colorbar()
	cbar.set_label('temperature [K]')
	return f, ron






def plot_alan_data_averages():


	d1 = np.genfromtxt(home_folder + '/DATA/EDGES/spectra/alan_averages/forjudd_5term_only_numbers.txt')
	d2 = np.genfromtxt(home_folder + '/DATA/EDGES/spectra/alan_averages/forjudd_5term_gha8_only_numbers.txt')

	return d1, d2









def airline_verification(sigma_copper_fraction=0.165, md_value_ps=38.8, save_plot='no'):

	"""

	"""

	# Data paths
	# ---------------------------------------
	path_data  = home_folder + '/DATA/EDGES/s11/airline/data/'




	# Data loading
	# ---------------------------------------

	# E5072A
	#name_flag = ''
	#name_flag = '_05062016'
	name_flag = '_MEAS#1_05102016'
	#name_flag = '_MEAS#2_05102016'

	f = rc.s1p_read(path_data + 'OPEN_STD' + name_flag + '.S1P')[1]

	ms_o = rc.s1p_read(path_data + 'OPEN_STD' + name_flag + '.S1P')[0]
	ms_s = rc.s1p_read(path_data + 'SHORT_STD' + name_flag + '.S1P')[0]
	ms_l = rc.s1p_read(path_data + 'LOAD_STD' + name_flag + '.S1P')[0]

	ma_o = rc.s1p_read(path_data + 'AIRLINE_OPEN_STD' + name_flag + '.S1P')[0]
	ma_s = rc.s1p_read(path_data + 'AIRLINE_SHORT_STD' + name_flag + '.S1P')[0]
	ma_l = rc.s1p_read(path_data + 'AIRLINE_LOAD_STD' + name_flag + '.S1P')[0]	




	# Calibrating measurements of airline
	# ------------------------------------------------	

	# Models of the standards
	o, s, l1 = rc.agilent_85033E(f, 50.01, 0)  # No load delay
	o, s, l2 = rc.agilent_85033E(f, 50.01, 1, md_value_ps = md_value_ps)  # Yes load delay, ADJUST !!!!

	# Calibrating airline measurements assuming ZERO delay for LOAD standard
	ma_o1, s11, s12s21, s22 = rc.de_embed(o, s, l1, ms_o, ms_s, ms_l, ma_o)
	ma_s1, s11, s12s21, s22 = rc.de_embed(o, s, l1, ms_o, ms_s, ms_l, ma_s)
	ma_l1, s11, s12s21, s22 = rc.de_embed(o, s, l1, ms_o, ms_s, ms_l, ma_l)

	# Calibrating airline measurements assuming SOME delay for LOAD standard
	ma_o2, s11, s12s21, s22 = rc.de_embed(o, s, l2, ms_o, ms_s, ms_l, ma_o)
	ma_s2, s11, s12s21, s22 = rc.de_embed(o, s, l2, ms_o, ms_s, ms_l, ma_s)
	ma_l2, s11, s12s21, s22 = rc.de_embed(o, s, l2, ms_o, ms_s, ms_l, ma_l)














	# ---------- MODEL OF AIRLINE -----------
	# ---------------------------------------

	# Angular frequency
	w = 2 * np.pi * f   # f in Hz





	# Airline dimensions
	inch2m = 1/39.370            # inch-to-meters conversion
	ric    = (0.05984*inch2m)/2  # radius of outer wall of inner conductor in meters
	roc    = (0.13780*inch2m)/2  # radius of inner wall of outer conductor in meters
	length = 0.1499 - 0.000025   # electrical length in meters. uncertainty is +/-0.000025 m (https://www.maurymw.com/Precision/3.5mm_beadless.php)
					# length uncertainty does not have a great impact, but it could be added to the fit   




	# Permeability
	u0        = 4*np.pi*10**(-7)   # permeability of free space (same for copper, brass, etc., all nonmagnetic materials)
	ur_air    = 1                  # relative permeability of air
	u_air     = u0 * ur_air

	# Permittivity
	c                = 299792458       # speed of light
	e0               = 1/(u0 * c**2)   # permittivity of free space	
	er_air           = 1.07            # why Alan???? shouldn't it be closer to 1 ?
	ep_air           = e0 * er_air
	tan_delta_air    = 0 
	epp_air          = ep_air    * tan_delta_air	







	# Metal conductivity
	sigma_copper = 5.813 * 10**7    # Pozar 3rd edition
	sigma_gold   = 4.1 * 10**7      # Wikipedia
	sigma        = sigma_copper_fraction * sigma_copper


	# Skin Depth
	skin_depth = np.sqrt(2 / (w * u0 * sigma))  # For copper, the skin depth is 3.3e-6 m at 400 MHz,   2.1e-6 m at 1 GHz. For gold it is 3.9e-6 m at 400 MHz,   2.5e-6 m at 1 GHz  

	# For reference:
	# The gold   flushing of the airline is 1e-5*inch2m = 2.5e-7 (about ten times smaller than the skin depth at 1 GHz ??)
	# The copper flushing of the airline is 1e-5*inch2m = 2.5e-7 (about ten times smaller than the skin depth at 1 GHz ??)
	# The actual airline is built from beryllium copper (not the flushing), https://www.maurymw.com/Precision/3.5mm_beadless.php 


	# Surface resistance
	Rs = 1 / (sigma * skin_depth)

	# The actual "equivalent conductivity" has to be a fit parameter.







	# Transmission Line Parameters
	# ----------------------------

	# Inductance per unit length
	L_inner  = u0 * skin_depth / (4 * np.pi * ric)
	L_dielec = (u_air / (2 * np.pi)) * np.log(roc/ric) 
	L_outer  = u0 * skin_depth / (4 * np.pi * roc)
	L        = L_inner + L_dielec + L_outer

	# Capacitance per unit length	
	C = 2 * np.pi * ep_air / np.log(roc/ric)

	# Resistance per unit length
	R = (Rs / (2 * np.pi * ric))   +   (Rs / (2 * np.pi * roc))

	# Conductance per unit length
	G = 2 * np.pi * w * epp_air / np.log(roc/ric)




	# Propagation constant
	gamma = np.sqrt( (R + 1j*w*L) * (G + 1j*w*C) )

	# Complex Cable Impedance
	Zchar = np.sqrt( (R + 1j*w*L) / (G + 1j*w*C) )	







	# Impedance of Agilent terminations
	Zref = 50

	Zo  = rc.gamma2impedance(o, Zref)
	Zs  = rc.gamma2impedance(s, Zref)
	Zl1 = rc.gamma2impedance(l1, Zref)
	Zl2 = rc.gamma2impedance(l2, Zref)



	# Impedance of terminated transmission lines
	Zin_o  = rc.input_impedance_transmission_line(Zchar, gamma, length, Zo)
	Zin_s  = rc.input_impedance_transmission_line(Zchar, gamma, length, Zs)
	Zin_l1 = rc.input_impedance_transmission_line(Zchar, gamma, length, Zl1)
	Zin_l2 = rc.input_impedance_transmission_line(Zchar, gamma, length, Zl2)	



	# Reflection of terminated transmission line
	Rin_o  = rc.impedance2gamma(Zin_o,  Zref)
	Rin_s  = rc.impedance2gamma(Zin_s,  Zref)
	Rin_l1 = rc.impedance2gamma(Zin_l1, Zref)
	Rin_l2 = rc.impedance2gamma(Zin_l2, Zref)	




	# RMS computation
	RMS_open_0ps  = np.sqrt(np.sum((np.abs(ma_o1) - np.abs(Rin_o))**2)/len(f))
	RMS_open_38ps = np.sqrt(np.sum((np.abs(ma_o2) - np.abs(Rin_o))**2)/len(f))

	RMS_short_0ps  = np.sqrt(np.sum((np.abs(ma_s1) - np.abs(Rin_s))**2)/len(f))
	RMS_short_38ps = np.sqrt(np.sum((np.abs(ma_s2) - np.abs(Rin_s))**2)/len(f))

	print('RMS open   0 ps: ' +  str(RMS_open_0ps))
	print('RMS open  38 ps: ' + str(RMS_open_38ps))
	print('RMS short  0 ps: ' +  str(RMS_short_0ps))
	print('RMS short 38 ps: ' + str(RMS_short_38ps))















	# Plots
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()


	#plt.figure(1)
	#plt.subplot(2,1,1)
	#plt.plot(f/1e6, 20*np.log10(np.abs(ma_o1)),'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(ma_o2)),'r')
	#plt.plot(f/1e6, 20*np.log10(np.abs(Rin_o)),'g')
	#plt.ylim([-0.2, 0.05])
	#plt.grid()

	#plt.subplot(2,1,2)
	#plt.plot(f/1e6, 20*np.log10(np.abs(ma_s1)),'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(ma_s2)),'r')
	#plt.plot(f/1e6, 20*np.log10(np.abs(Rin_s)),'g')
	#plt.ylim([-0.2, 0.05])
	#plt.grid()

	#plt.xlabel('frequency [MHz]')



	if save_plot == 'yes':
		size_x = 8.85
		size_y = 11.5	
		f1 = plt.figure(1, figsize=(size_x, size_y))
		plt.subplot(2,1,1)
		plt.plot(f/1e6, 20*np.log10(np.abs(Rin_o)) - 20*np.log10(np.abs(Rin_o)),'k--', label='(model) - (model)', linewidth=2.5)
		plt.plot(f/1e6, 20*np.log10(np.abs(ma_o1)) - 20*np.log10(np.abs(Rin_o)),color='0.6', label='(measurement 0 ps) - (model)', linewidth=1.5)
		plt.plot(f/1e6, 20*np.log10(np.abs(ma_o2)) - 20*np.log10(np.abs(Rin_o)),'k', label='(measurement 38.8 ps) - (model)', linewidth=2.5)
		plt.ylim([-0.02, 0.02])
		plt.ylabel(r'$\Delta |\Gamma|_{\rm{open}}$ (dB)', fontsize=21)
		plt.yticks(np.arange(-0.02,0.021,0.01), fontsize=18)
		plt.xticks(np.arange(0,1001,200), fontsize=18)
		plt.grid()
		#plt.legend(loc=0, fontsize = 16)
		plt.xlabel('(a)', fontsize=20)

		plt.subplot(2,1,2)
		plt.plot(f/1e6, 20*np.log10(np.abs(Rin_s)) - 20*np.log10(np.abs(Rin_s)),'k--', label='(model) - (model)', linewidth=2.5)
		plt.plot(f/1e6, 20*np.log10(np.abs(ma_s1)) - 20*np.log10(np.abs(Rin_s)),color='0.6', label='(measurement 0 ps) - (model)', linewidth=1.5)
		plt.plot(f/1e6, 20*np.log10(np.abs(ma_s2)) - 20*np.log10(np.abs(Rin_s)),'k', label='(measurement 38.8 ps) - (model)', linewidth=2.5)
		plt.ylim([-0.02, 0.02])
		plt.ylabel(r'$\Delta |\Gamma|_{\rm{short}}$ (dB)', fontsize=21)
		plt.yticks(np.arange(-0.02,0.021,0.01), fontsize=18)
		plt.xticks(np.arange(0,1001,200), fontsize=18)
		plt.grid()
		plt.legend(loc=0, fontsize = 15)
		plt.xlabel('frequency (MHz)\n (b)', fontsize=20)




		path_plot_save = home_folder + '/WORK/papers/standards/figures/'
		plt.savefig(path_plot_save + 'verification_airline_v3.pdf', bbox_inches='tight')
		plt.close()	
		plt.close()
		plt.close()
		plt.close()







	#plt.subplot(2,2,2)
	#plt.plot(f/1e6, (np.pi/180)*np.unwrap(np.angle(ma_o2)) - (np.pi/180)*np.unwrap(np.angle(ma_o1)),'r')
	#plt.plot(f/1e6, (np.pi/180)*np.unwrap(np.angle(Rin_o)) - (np.pi/180)*np.unwrap(np.angle(ma_o1)),'g')
	##plt.ylim([-0.2, -0.02])
	#plt.grid()

	#plt.subplot(2,2,4)
	#plt.plot(f/1e6, (np.pi/180)*np.unwrap(np.angle(ma_s2)) - (np.pi/180)*np.unwrap(np.angle(ma_s1)),'r')
	#plt.plot(f/1e6, (np.pi/180)*np.unwrap(np.angle(Rin_s)) - (np.pi/180)*np.unwrap(np.angle(ma_s1)),'g')
	##plt.ylim([-0.2, -0.02])
	#plt.grid()






	return f, ma_o1, ma_o2, ma_s1, ma_s2, ma_l1, ma_l2, Rin_o, Rin_s, Rin_l1, Rin_l2



















def spectral_index_infinitesimal_beam(plot='no'):

	lon, lat, RA, DEC, freq, gsm = eg.GSM_HDF5_read(home_folder + '/DATA/EDGES/beam_convolution/gsm/data_hdf5/GSM_dataset_40_200_MHz.hdf5')

	RA_new  = []
	DEC_new = []
	gsm_new = np.zeros((0,161))

	EDGES_lat_deg  = -26.714778
	for i in range(len(lon)):
		if np.abs(DEC[i] - EDGES_lat_deg) < 0.02:
			RA_new  = np.append(RA_new, RA[i])
			DEC_new = np.append(DEC_new, DEC[i])
			gsm_new = np.append(gsm_new, gsm[i,:].reshape(1,-1), axis=0)


	# Sorting selected data in terms of increasing RA
	index          = np.argsort(RA_new)
	RA_new_sorted  = RA_new[index]
	DEC_new_sorted = DEC_new[index]
	gsm_new_sorted = gsm_new[index,:]



	freq           = np.arange(40,201,1)
	par_new_sorted = np.zeros((0,3))
	for i in range(len(RA_new_sorted)):
		pp             = np.polyfit(np.log(freq[50::]/150), np.log(gsm_new_sorted[i,50::]), 2)
		par_new_sorted = np.append(par_new_sorted, pp.reshape(1,-1), axis=0)






	if plot == 'yes':	
		plt.close()
		plt.close()
		plt.close()
		plt.close()


		plt.figure(1)
		plt.subplot(3,1,1)
		plt.scatter(RA/15, DEC, s=2, c = np.log(gsm[:,100]), linewidth=0, vmin=5.3, vmax=7);plt.ylim([-90, 90]); plt.xlim([0, 24]);plt.xticks(np.arange(0,25,4));plt.yticks(np.arange(-90,91,30));plt.grid()
		LST = np.array([0, 24])
		EL  = EDGES_lat_deg * np.array([1, 1])	
		plt.plot(LST, EL, 'w', linewidth=2)
		plt.ylabel('DEC [deg]')


		plt.subplot(3,1,2)
		plt.plot(RA_new_sorted/15, -par_new_sorted[:,1], 'c')
		plt.grid()
		plt.xlim([0, 24])
		plt.ylabel(r'$\beta$', fontsize=16)
		plt.xticks(np.arange(0,25,4))	

		plt.subplot(3,1,3)
		plt.plot(RA_new_sorted/15, -par_new_sorted[:,0], 'r')
		plt.grid()
		plt.xlim([0, 24])
		plt.xlabel('LST [Hrs]')
		plt.ylabel(r'$\gamma$', fontsize=16)
		plt.xticks(np.arange(0,25,4))


	return RA_new_sorted, DEC_new_sorted, gsm_new_sorted, par_new_sorted


















def plot_model_rejection_hot_eor(prob_all, file_name):

	# First,  run:
	# >> chi_sq, red_chi_sq, prob, T21, zr, dz = eg.model_rejection_hot_eor(flow=115, fit_type='Physical_model')

	# Then, run this function:
	# >> hl.plot_model_rejection_hot_eor(prob, '115_190_MHz_5terms_Physical_polynomial.pdf')




	for i in range(10):
		plt.close()



	size_x = 12
	size_y = 8	
	fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(size_x, size_y))

	i = -1
	for ax in axes.flat:
		i     = i+1
		index = 2*i
		im = ax.imshow(np.fliplr(np.flipud(100-prob_all[index,:,:].T)), interpolation='none', aspect='auto', extent=[13,6,0,1.4], cmap='jet');im.set_clim([68, 100])
		if i >= 2:
			ax.set_xlabel(r'$z_r$',      fontsize=16)

		if (i == 0) or (i == 2):
			ax.set_ylabel(r'$\Delta z$', fontsize=16)

		ax.grid()
		tt = ax.text(8, 1.2, r'$T_{21}$=' + str(10+10*i) + ' mK', fontsize=12)
		tt.set_color('w')		


	fig.subplots_adjust(right=0.85)
	cbar_ax = fig.add_axes([0.9, 0.15, 0.03, 0.7])
	cbar = fig.colorbar(im, cax=cbar_ax)
	cbar.set_ticks([68, 84, 95, 100])
	cbar.set_label('rejection probability [%]')



	path_plot_save = home_folder + '/Desktop/'
	plt.savefig(path_plot_save + file_name, bbox_inches='tight')
	plt.close()	
	plt.close()
	plt.close()
	plt.close()	


	return 1








def plot_EoR_residuals():


	f, d1, d2, w     = eg.alan_data_averages()
	fb1, rb1, wb1, RMS1 = eg.model_rejection(f, d2, w, test_model='no', flow=108, fhigh=190, fit_type='EDGES_polynomial')
	fb2, rb2, wb2, RMS2 = eg.model_rejection(f, d2, w, test_model='no', flow=115, fhigh=190, fit_type='EDGES_polynomial')
	fb3, rb3, wb3, RMS3 = eg.model_rejection(f, d2, w, test_model='no', flow=108, fhigh=190, fit_type='Physical_model')
	fb4, rb4, wb4, RMS4 = eg.model_rejection(f, d2, w, test_model='no', flow=115, fhigh=190, fit_type='Physical_model')


	plt.plot(fb1, rb1)
	plt.plot(fb2, rb2)
	plt.plot(fb3, rb3)
	plt.plot(fb4, rb4)
	plt.ylim([-0.1, 0.1])


	return fb1, rb1, fb2, rb2, fb3, rb3, fb4, rb4








def plot_nevada():

	file_name1 = home_folder + '/DATA/EDGES/nevada/data/EDGES/level1/2014_198_17_ta.mat'
	file_name2 = home_folder + '/DATA/EDGES/nevada/data/EDGES/level1/2014_200_17_ta.mat'
	file_name3 = home_folder + '/DATA/EDGES/nevada/data/EDGES/level1/2014_198_20_ta.mat'



	# loading data and extracting main array
	d1  = sio.loadmat(file_name1)
	d2  = sio.loadmat(file_name2)
	d3  = sio.loadmat(file_name3)

	dd1 = d1['ta']
	dd2 = d2['ta']
	dd3 = d3['ta']

	freq, il, ih = eg.frequency_edges(50, 120)
	freq_low = freq[il:(ih+1)]
	low1     = dd1[:,il:(ih+1)]
	low2     = dd2[:,il:(ih+1)]	
	low = np.concatenate((low1[8:103,:], low1[111:215,:], low2[4:97,:]), axis=0)

	freq, il, ih = eg.frequency_edges(120,199)
	freq_high = freq[il::]
	high1     = dd3[:,il::]
	high = np.concatenate((high1[10:94,:], high1[98::,:]), axis=0)






	low_noRFI = np.zeros((len(low[:,0]), len(low[0,:])))
	low_WW    = np.zeros((len(low[:,0]), len(low[0,:])))
	for i in range(len(low[:,0])):
		print(i)
		low_noRFI[i,:], w1 = eg.RFI_cleaning_std(freq_low, low[i,:], np.ones(len(freq_low)), df_MHz = 20, npar = 4, n_sigma = 3)
		x, w2 = eg.RFI_cleaning_sweep(freq_low, low[i,:], np.ones(len(freq_low)), 25, N_sigma=1.55)

		ww1            = np.copy(w1)
		ww1[6190:9600] = w2[6190:9600]

		low_WW[i,:]        = ww1
		temp_low           = np.copy(low[i,:])
		temp_low[ww1 == 0] = 0
		low_noRFI[i,:]     = temp_low

	occ_low = 100*np.sum(np.abs(low_WW-1)/len(low_WW[:,0]),   axis=0)







	high_noRFI = np.zeros((len(high[:,0]), len(high[0,:])))
	high_WW    = np.zeros((len(high[:,0]), len(high[0,:])))
	for i in range(len(high[:,0])):
		print(i)
		high_noRFI[i,:], high_WW[i,:] = eg.RFI_cleaning_std(freq_high, high[i,:], np.ones(len(freq_high)), df_MHz = 20, npar = 4, n_sigma = 3)	
	occ_high = 100*np.sum(np.abs(high_WW-1)/len(high_WW[:,0]), axis=0)



	pp         = np.polyfit(freq_low[low_WW[40,:] > 0]/200, low_noRFI[40, low_WW[40,:] > 0], 20)
	model_low  = np.polyval(pp, freq_low/200)

	pp         = np.polyfit(freq_high[high_WW[40,:] > 0]/200, high_noRFI[40, high_WW[40,:] > 0], 20)
	model_high = np.polyval(pp, freq_high/200)





	# Plot	
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()

	size_x = 7
	size_y = 5.5
	f1  = plt.figure(num=1, figsize=(size_x, size_y))

	plt.subplot(2,1,1)
	plt.plot(freq_low[low_WW[40,:] > 0],  (low_noRFI[40,:] - model_low)[low_WW[40,:] > 0],   'b')
	plt.plot(freq_high[high_WW[40,:] > 0], (high_noRFI[40,:] - model_high)[high_WW[40,:] > 0], 'r')
	plt.ylim([-100, 100])
	plt.xlim([50,200])
	plt.xticks(np.arange(50,210,25))
	plt.yticks(np.arange(-100,110,25))
	plt.grid()
	plt.ylabel('single-spectrum noise [K]')
	plt.legend(['low-band instrument','high-band instrument'])

	plt.subplot(2,1,2)
	plt.plot(freq_low,  1.02*(occ_low - 2), 'b')
	plt.plot(freq_high, 1.02*(occ_high - 2), 'r')
	plt.xlim([50,200])
	plt.ylim([0, 100])
	plt.xticks(np.arange(50,210,25))
	plt.yticks(np.arange(0,110,20))
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('occupancy [%]')

	path_plot_save = '/home/raul/DATA/EDGES/nevada/data/EDGES/plots/'
	plt.savefig(path_plot_save + 'nevada_occupancy.pdf', bbox_inches='tight')
	plt.close()	
	plt.close()

	return freq_low, freq_high, low_noRFI, high_noRFI, low_WW, high_WW #occ_low, occ_high #0 #freq_low, freq_high, high #av_low, av_high














def plot_low_band_residuals(f, tnr, wnr, dates):


	# First run: f, tnr, wnr, res, tt, rt, wt, dates = eg.low_band_averaging()
	# rejected = [50, 51, 109, 117, 119]

	rejected = []

	models    = np.zeros((len(tnr[:,0]), len(tnr[0,:])))
	residuals = np.zeros((len(tnr[:,0]), len(tnr[0,:])))
	weights   = np.zeros((len(tnr[:,0]), len(tnr[0,:])))

	for i in range(len(tnr[:,0])):


		if (i not in rejected) and (np.sum(wnr[i,:]) > 0):

			# RFI flagging
			tx1, wx1       = eg.low_band_FM_excision_raw_frequency(f, tnr[i,:], wnr[i,:])
			tx2, wx2       = eg.RFI_cleaning_std(f, tx1, wx1, n_sigma = 3.5, df_MHz = 10, npar = 4)

			# Modeling using log-log
			par            = np.polyfit(np.log(f[wx2 > 0]/75), np.log(tx2[wx2 > 0]), 1)
			logModel       = np.polyval(par, np.log(f/75))
			models[i,:]    = np.exp(logModel)
			residuals[i,:] = tx2 - models[i,:]
			weights[i,:]   = wx2

			print(str(int(dates[i, 0])) + '_' + str(int(dates[i, 1])).zfill(3) + '_' + str(int(dates[i, 2])).zfill(2) + ': ' + str(par))






	plt.close()
	plt.close()
	plt.close()
	plt.close()


	K  = 10
	dl = [' ']
	f1 = plt.figure(1)
	for i in range(10): #range(len(residuals[:,0])):
		plt.plot(f[weights[i,:] > 0], residuals[i, weights[i,:] > 0] + K*i)
		year_str = str(int(dates[i,0]))
		day_str  = str(int(dates[i,1])).zfill(3)
		hr_str   = str(int(dates[i,2])).zfill(2)


		dl.append( year_str + '_' + day_str + '_' + hr_str )



	plt.xlim([50, 100])
	#plt.ylim([-10, K*(len(residuals[:,0])+10)])
	plt.grid()	

	plt.xlabel('frequency [MHz]')

	plt.ylim([-10, 100])
	plt.yticks(np.arange(-10,101,10), dl)

	plt.ylabel('')
	plt.title('10 K per vertical division')


	#'2015_206_00', '2015_207_00', '2015_208_00', '2015_209_00', '2015_210_00', '2015_210_03', '2015_211_00', '2015_211_18', '2015_212_00', '2015_215_08'


	return f, models, residuals, dates






def plot_low_band_average_residuals(f, tnr_all, wnr_all):

	#t, w = eg.spectral_averaging(tnr_all[0:80,:], wnr_all[0:80,:])
	#t, w = eg.spectral_averaging(tnr_all[81:158,:], wnr_all[81:158,:])
	#t, w = eg.spectral_averaging(tnr_all[158::,:], wnr_all[158::,:])

	fk = f[(f>= 67) & (f<= 97)]
	tk = tnr_all[:, (f>= 67) & (f<= 97)]
	wk = wnr_all[:, (f>= 67) & (f<= 97)]


	rx_all = np.zeros((len(tk[:,0]), len(tk[0,:])))
	wx_all = np.zeros((len(tk[:,0]), len(tk[0,:])))	
	for i in range(len(tk[:,0])):

		print(i)
		if (np.sum(wk[i,:]) > 0) and (np.sum(np.isnan(tnr_all[i,:])) == 0) and (np.sum(np.isinf(tnr_all[i,:])) == 0):
			tx1, wx1     = eg.low_band_FM_excision_raw_frequency(fk, tk[i,:], wk[i,:])
			tx2, wx2     = eg.RFI_cleaning_std(fk, tx1, wx1, n_sigma = 2.8, df_MHz = 10, npar = 4)

			model_type   = 'EDGES_polynomial'
			pp           = eg.fit_polynomial_fourier(model_type, fk, tx2, 4, Weights=wx2)
			model        = eg.model_evaluate(model_type, pp[0], fk)


			rx_all[i,:] = tx2 - model
			wx_all[i,:] = wx2

	plt.close()
	plt.close()
	plt.close()
	plt.close()


	K = 10
	f1 = plt.figure(1)
	for i in range(len(rx_all[:,0])):
		plt.plot(f[wx_all[i,:]>0], rx_all[i,wx_all[i,:]>0] + K*i)

	#plt.xlim([100, 190])
	plt.xlim([50, 100])
	plt.ylim([-3, K*(len(rx_all[:,0])+3)])
	plt.grid()









#	t, w = eg.spectral_averaging(tnr_all[0:158,:], wnr_all[0:158,:])  # Between days 2015-286 and 2016-099	

	#plt.plot(   fk[wk > 0], (tk - model)[wk > 0]   )
	#plt.ylim([-0.5,0.5])
	#plt.xlim([65, 100])
	#plt.grid()
	#plt.xlabel('frequency [MHz]')
	#plt.ylabel('residuals [K]')


	return fk, rx_all, wx_all 









def plot_high_band_average_residuals(f, tnr_all, wnr_all):

	fl = 108
	fh = 190

	fk = f[  (f>= fl) & (f<= fh)  ]
	tk = tnr_all[:, (f>= fl) & (f<= fh)  ]
	wk = wnr_all[:, (f>= fl) & (f<= fh)  ]	


	tk2 = np.zeros((len(tk[:,0]), len(tk[0,:])))
	wk2 = np.zeros((len(tk[:,0]), len(tk[0,:])))

	for i in range(len(tnr_all[:,0])):
		print(i)
		if (np.sum(wnr_all[i,:]) > 0) and (np.sum(np.isnan(tnr_all[i,:])) == 0) and (np.sum(np.isinf(tnr_all[i,:])) == 0):
			tk2[i,:], wk2[i,:] = eg.RFI_cleaning_std(fk, tk[i,:], wk[i,:], n_sigma = 3.5, df_MHz = 20, npar = 4)



	#tav, wav = eg.spectral_averaging(tk2[0:100,:], wk2[0:100,:])
	#tav, wav = eg.spectral_averaging(tk2[100::,:], wk2[100::,:])
	tav, wav = eg.spectral_averaging(tk2, wk2)




	#tx1, wx1 = eg.low_band_FM_excision_raw_frequency(f, t, w)
	tav2, wav2 = eg.RFI_cleaning_std(fk, tav, wav, n_sigma = 2.6, df_MHz = 20, npar = 5)





	model_type = 'EDGES_polynomial'
	pp    = eg.fit_polynomial_fourier(model_type, fk, tav2, 5, Weights=wav2)
	model = eg.model_evaluate(model_type, pp[0], fk)
	res   = tav2 - model
	fb, rb_1, wb = eg.spectral_binning_fixed_frequency(108, 190, 0.4, fk, res+1, wav2)
	rb = rb_1 - 1



	plt.plot( fk[wav2 > 0], (tav2 - model)[wav2 > 0]+0.8, 'k')
	#plt.plot( fb, rb)
	#plt.ylim([-0.5,0.5])
	plt.xlim([100, 200])
	#plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('residuals [K]')


	return 1






def test_cable_alans_simulator():

	path_folder = home_folder + '/DATA/EDGES/receiver_calibration/calibration_june_2016/LNA/S11/raw/alans_simulator/'

	om,    f = rc.s1p_read(path_folder + 'open.s1p')
	sm,    f = rc.s1p_read(path_folder + 'short.s1p')
	lm,    f = rc.s1p_read(path_folder + 'load_50.110.s1p')

	s1m,   f = rc.s1p_read(path_folder + 'simulator_shake1.s1p')
	s2m,   f = rc.s1p_read(path_folder + 'simulator_shake2.s1p')
	s3m,   f = rc.s1p_read(path_folder + 'simulator_shake3.s1p')


	# Models of standards
	resistance_of_match = 50.110 # male
	md = 1
	oa, sa, la = rc.agilent_85033E(f, resistance_of_match, md)	


	s1c, x1, x2, x3  = rc.de_embed(oa, sa, la, om, sm, lm, s1m)
	s2c, x1, x2, x3  = rc.de_embed(oa, sa, la, om, sm, lm, s2m)
	s3c, x1, x2, x3  = rc.de_embed(oa, sa, la, om, sm, lm, s3m)





	plt.close()
	plt.close()
	plt.close()

	plt.subplot(2,1,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(s1c)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(s2c)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(s3c)), 'k')
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.legend(['Rep1','Rep2','Rep3'])

	plt.subplot(2,1,2)
	plt.plot(f/1e6, 20*np.log10(np.abs(s3c)) - 20*np.log10(np.abs(s1c)), 'k')
	plt.plot(f/1e6, 20*np.log10(np.abs(s2c)) - 20*np.log10(np.abs(s1c)), 'r')
	plt.ylim([-0.02, 0.02])
	plt.grid()
	plt.legend(['Rep2-Rep1','Rep3-Rep1'])

	plt.xlabel('frequency [MHz]')
	plt.ylabel('$\Delta$ magnitude [dB]')


	return s1c, s2c, s3c, f







def calibration_quantities_1_and_2_sigma():

	path_files = home_folder + '/DATA/EDGES/calibration/receiver_calibration/calibration_march_2015/LNA/calibration_files/MC_calibration_files/cterms7_wterms7/'

	C1_1  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set1.txt')
	C1_2  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set2.txt')
	C1_3  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set3.txt')
	C1_4  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set4.txt')
	C1_5  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set5.txt')
	C1_6  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set6.txt')
	C1_7  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set7.txt')
	C1_8  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set8.txt')
	C1_9  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set9.txt')
	C1_10 = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set10.txt')

	C2_1  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set1.txt')
	C2_2  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set2.txt')
	C2_3  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set3.txt')
	C2_4  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set4.txt')
	C2_5  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set5.txt')
	C2_6  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set6.txt')
	C2_7  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set7.txt')
	C2_8  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set8.txt')
	C2_9  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set9.txt')
	C2_10 = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set10.txt')

	TU_1  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set1.txt')
	TU_2  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set2.txt')
	TU_3  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set3.txt')
	TU_4  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set4.txt')
	TU_5  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set5.txt')
	TU_6  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set6.txt')
	TU_7  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set7.txt')
	TU_8  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set8.txt')
	TU_9  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set9.txt')
	TU_10 = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set10.txt')

	TC_1  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set1.txt')
	TC_2  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set2.txt')
	TC_3  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set3.txt')
	TC_4  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set4.txt')
	TC_5  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set5.txt')
	TC_6  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set6.txt')
	TC_7  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set7.txt')
	TC_8  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set8.txt')
	TC_9  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set9.txt')
	TC_10 = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set10.txt')

	TS_1  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set1.txt')
	TS_2  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set2.txt')
	TS_3  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set3.txt')
	TS_4  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set4.txt')
	TS_5  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set5.txt')
	TS_6  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set6.txt')
	TS_7  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set7.txt')
	TS_8  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set8.txt')
	TS_9  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set9.txt')
	TS_10 = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set10.txt')	


	C1 = np.vstack((C1_1, C1_2, C1_3, C1_4, C1_5, C1_6, C1_7, C1_8, C1_9, C1_10))
	C2 = np.vstack((C2_1, C2_2, C2_3, C2_4, C2_5, C2_6, C2_7, C2_8, C2_9, C2_10))
	TU = np.vstack((TU_1, TU_2, TU_3, TU_4, TU_5, TU_6, TU_7, TU_8, TU_9, TU_10))
	TC = np.vstack((TC_1, TC_2, TC_3, TC_4, TC_5, TC_6, TC_7, TC_8, TC_9, TC_10))
	TS = np.vstack((TS_1, TS_2, TS_3, TS_4, TS_5, TS_6, TS_7, TS_8, TS_9, TS_10))

	C1_av = np.mean(C1, axis=0)
	C2_av = np.mean(C2, axis=0)
	TU_av = np.mean(TU, axis=0)
	TC_av = np.mean(TC, axis=0)
	TS_av = np.mean(TS, axis=0)

	C1_std = np.std(C1, axis=0)
	C2_std = np.std(C2, axis=0)
	TU_std = np.std(TU, axis=0)
	TC_std = np.std(TC, axis=0)
	TS_std = np.std(TS, axis=0)


	return C1_av, C1_std








def plots_for_high_band_results_paper(antenna_loss_s11='no', antenna_loss_s11_v2='no', chromaticity_factor='no', calibration_quantities='no', calibration_quantities2='no', calibration_quantities3='no', scan_region='no', nominal_constraints='no', global_signal='no', phenomenological_models='no', residuals='no', residuals_v2='no', residuals2='no', residuals3='no', constraints_gaussian='no', constraints_tanh='no', combined_EoR_constraints='no', combined_EoR_constraints_NO_EDGES='no', constraints_cold_EoR='no', EoR_duration_Planck='no', EoR_duration_SPT ='no', constraints_tanh_injected = 'yes'):




	if antenna_loss_s11 == 'yes':

		# Save folder
		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170311/' #/WORK/papers/EDGES_high-band_results/figures/'


		# Antenna losses
		f, il, ih = eg.frequency_edges(90, 190)
		fe = f[il:ih+1]		

		l_ant = eg.combined_gain('high_band_2015', fe, antenna_s11_day=262, flag_ground_loss = 0, ground_loss_type = 'value', ground_loss_percent = 0.5, flag_antenna_loss = 1, flag_balun_connector_loss = 0)		
		l_bc  = eg.combined_gain('high_band_2015', fe, antenna_s11_day=262, flag_ground_loss = 0, ground_loss_type = 'value', ground_loss_percent = 0.5, flag_antenna_loss = 0, flag_balun_connector_loss = 1)
		l_gnd = eg.combined_gain('high_band_2015', fe, antenna_s11_day=262, flag_ground_loss = 1, ground_loss_type = 'value', ground_loss_percent = 0.5, flag_antenna_loss = 0, flag_balun_connector_loss = 0)



		# Antenna S11
		s11_ant = eg.models_antenna_s11('high_band_2015', 'blade', fe, antenna_s11_day = 262, model_type='polynomial')



		# Antenna S11 stability		
		path_s11   = home_folder + '/DATA/EDGES/calibration/s11/high_band/corrected/2015_262_19_14/'

		# Magnitude
		s11_mag_lt = np.genfromtxt(path_s11 + 'dataset_2015_262_19_14_magnitude_linear_50-200MHz.txt')
		s11_mag_lt[1043:1047,:] = s11_mag_lt[1033:1037,:]

		# Phase
		s11_ang_lt = np.genfromtxt(path_s11 + 'dataset_2015_262_19_14_phase_deg_50-200MHz.txt')
		s11_ang_lt[1043:1047,:] = s11_ang_lt[1033:1037,:]







		# Plot 
		# ---------------------------------------
		f1  = plt.figure(num=1, figsize=(5.5, 10))
		offy = 0.025


		# Nominal S11
		# -----------
		ax  = f1.add_axes([0.11, 0.7+3*offy, 0.73, 0.2])
		h1  = ax.plot(fe, 20*np.log10(np.abs(s11_ant)), 'b', linewidth=2, label='magnitude')
		ax2 = ax.twinx()
		h2  = ax2.plot(fe, (180/np.pi)*np.unwrap(np.angle(s11_ant)), 'r--', linewidth=2, label='phase')

		h      = h1 + h2
		labels = [l.get_label() for l in h]
		ax.legend(h, labels, loc=0, fontsize=12)

		ax.set_xlim([90, 190])
		ax.set_ylim([-17, 2])
		ax.set_yticks(np.arange(-15,1,5))
		ax.set_xticks([90, 110, 130, 150, 170, 190])
		ax.set_xticklabels([])

		ax2.set_ylim([-400-80, 200+80])
		ax2.set_yticks(np.arange(-400,201,200))

		ax.grid()
		ax.set_ylabel('magnitude [dB]', fontsize=14)
		ax2.set_ylabel('phase [degrees]', fontsize=14)
		ax.text(93, -0.5, '(a)', fontsize=18)



		# Stability of S11 magnitude
		# ---------------------------
		ax  = f1.add_axes([0.11, 0.5+2*offy, 0.73, 0.2])

		im = ax.imshow(20*np.log10(s11_mag_lt[1240:1600,40:141]) - 20*np.log10(np.mean(s11_mag_lt[1240:1600,40:141], axis=0)), aspect='auto', interpolation='nearest', extent = [90, 190, 6, 0])
		im.set_clim([-0.03, 0.03])
		ax.set_xlim([90, 190])
		ax.grid()
		cbaxes = f1.add_axes([0.85, 0.5+2*offy+0.02, 0.015, 0.2-0.04])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[-0.03, -0.02, -0.01, 0, 0.01, 0.02, 0.03])
		cb.set_label('$\Delta$ magnitude [dB]', fontsize=14)		

		ax.set_ylabel('time [hours]', fontsize=14)
		ax.set_xticks([90, 110, 130, 150, 170, 190])
		ax.set_xticklabels([])
		ax.text(93, 0.75, '(b)', fontsize=18)



		# Stability of S11 phase
		# -----------------------
		ax = f1.add_axes([0.11, 0.3+1*offy, 0.73, 0.2])			
		im = ax.imshow(s11_ang_lt[1240:1600,40:141] - np.mean(s11_ang_lt[1240:1600,40:141], axis=0), aspect='auto', interpolation='nearest', extent = [90, 190, 6, 0])
		im.set_clim([-0.2, 0.2])
		ax.set_xlim([90, 190])
		ax.grid()
		cbaxes = f1.add_axes([0.85, 0.3+1*offy+0.02, 0.015, 0.2-0.04])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[-0.2, -0.1, 0, 0.1, 0.2])
		cb.set_label('$\Delta$ phase [degrees]', fontsize=14)  #

		ax.set_ylabel('time [hours]', fontsize=14)
		ax.set_xticks([90, 110, 130, 150, 170, 190])
		ax.set_xticklabels([])
		ax.text(93, 0.75, '(c)', fontsize=18)



		# Losses
		# ------
		ax = f1.add_axes([0.11, 0.1, 0.73, 0.2])	
		h1  = ax.plot(fe, 100*(1-l_bc),  'b', linewidth=2, label='balun and connector loss')
		h2  = ax.plot(fe, 100*(1-l_gnd), 'g', linewidth=2, label='ground loss')
		h3  = ax.plot(fe, 100*(1-l_ant), 'r', linewidth=2, label='antenna panel loss')

		h      = h1 + h2 + h3
		labels = [l.get_label() for l in h]
		ax.legend(h, labels, loc=0, fontsize=12)

		ax.set_xlim([90, 190])
		ax.set_ylim([-0.2, 2.2])
		ax.set_xticks([90, 110, 130, 150, 170, 190])
		#ax.set_xticklabels([])

		ax.grid()
		ax.set_ylabel('loss [%]', fontsize=14)
		ax.set_xlabel('frequency [MHz]', fontsize=14)
		ax.text(93, 1.9, '(d)', fontsize=18)



		plt.savefig(path_plot_save + 'antenna_losses_s11.pdf', bbox_inches='tight')
		plt.close()
		plt.close()















	if antenna_loss_s11_v2 == 'yes':

		# Save folder
		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170402/'


		# Antenna losses
		f, il, ih = eg.frequency_edges(90, 190)
		fe = f[il:ih+1]		

		l_ant = eg.combined_gain('high_band_2015', fe, antenna_s11_day=262, flag_ground_loss = 0, ground_loss_type = 'value', ground_loss_percent = 0.5, flag_antenna_loss = 1, flag_balun_connector_loss = 0)		
		l_bc  = eg.combined_gain('high_band_2015', fe, antenna_s11_day=262, flag_ground_loss = 0, ground_loss_type = 'value', ground_loss_percent = 0.5, flag_antenna_loss = 0, flag_balun_connector_loss = 1)
		l_gnd = eg.combined_gain('high_band_2015', fe, antenna_s11_day=262, flag_ground_loss = 1, ground_loss_type = 'value', ground_loss_percent = 0.5, flag_antenna_loss = 0, flag_balun_connector_loss = 0)


		# Antenna S11
		s11_ant = eg.models_antenna_s11('high_band_2015', 'blade', fe, antenna_s11_day = 262, model_type='polynomial')


		# Plot 
		# ---------------------------------------
		f1  = plt.figure(num=1, figsize=(5.5, 6))
		#offy = 0.025


		# Nominal S11
		# -----------
		ax  = f1.add_axes([0.11, 0.1+0.4, 0.73, 0.4])
		h1  = ax.plot(fe, 20*np.log10(np.abs(s11_ant)), 'b', linewidth=2, label='magnitude')
		ax2 = ax.twinx()
		h2  = ax2.plot(fe, (180/np.pi)*np.unwrap(np.angle(s11_ant)), 'r--', linewidth=2, label='phase')

		h      = h1 + h2
		labels = [l.get_label() for l in h]
		ax.legend(h, labels, loc=0, fontsize=12)

		ax.set_xlim([90, 190])
		ax.set_ylim([-17, 2])
		ax.set_yticks(np.arange(-15,1,5))
		ax.set_xticks([90, 110, 130, 150, 170, 190])
		ax.set_xticklabels([])

		ax2.set_ylim([-400-80, 200+80])
		ax2.set_yticks(np.arange(-400,201,200))

		ax.grid()
		ax.set_ylabel('magnitude [dB]', fontsize=14)
		ax2.set_ylabel('phase [degrees]', fontsize=14)
		ax.text(93, -0.5, '(a)', fontsize=18)



		# Losses
		# ------
		ax = f1.add_axes([0.11, 0.1, 0.73, 0.4])	
		h1  = ax.plot(fe, 100*(1-l_bc),  'b', linewidth=2, label='balun and connector loss')
		h2  = ax.plot(fe, 100*(1-l_gnd), 'g', linewidth=2, label='ground loss')
		h3  = ax.plot(fe, 100*(1-l_ant), 'r', linewidth=2, label='antenna panel loss')

		h      = h1 + h2 + h3
		labels = [l.get_label() for l in h]
		ax.legend(h, labels, loc=0, fontsize=12)

		ax.set_xlim([90, 190])
		ax.set_ylim([-0.2, 2.35])
		ax.set_xticks([90, 110, 130, 150, 170, 190])
		#ax.set_xticklabels([])

		ax.grid()
		ax.set_ylabel('loss [%]', fontsize=14)
		ax.set_xlabel('frequency [MHz]', fontsize=14)
		ax.text(93, 2, '(b)', fontsize=18)



		plt.savefig(path_plot_save + 'antenna_losses_s11_v2.pdf', bbox_inches='tight')
		plt.close()
		plt.close()











	if chromaticity_factor == 'yes':

		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170311/'


		# Chromaticity factor
		f, il, ih = eg.frequency_edges(90, 190)
		fe = f[il:ih+1]			

		lst = np.arange(0.26, 6.27, 0.01)
		cf  = eg.antenna_beam_factor_interpolation('high_band_2015', lst, fe)

		f1  = plt.figure(num=1, figsize=(6.5, 4.2))


		size_x  = 11
		size_y  = 9
		x0      = 0.1
		x0_off  = 1.3
		y0      = 0
		dx      = 0.35
		dy_main = 0.25
		dy_res  = 0.01

		FS = 15


		# Plot
		ax2 = f1.add_axes([0.11, 0.3, 0.95, 0.7])
		im = ax2.imshow(cf, aspect='auto', interpolation='nearest', extent = [90, 190, 6.26, 0.26])		
		im.set_clim([1-0.01, 1+0.03])
		ax2.set_xlim([90, 190])


		cbaxes = f1.add_axes([0.34, 0.1, 0.49, 0.03])
		cb = plt.colorbar(im, cax=cbaxes, orientation='horizontal', ticks=[0.99, 1, 1.01, 1.02, 1.03])
		cb.set_label('chromaticity factor', fontsize=14)		

		ax2.set_xlabel('frequency [MHz]', fontsize=14)
		ax2.set_ylabel('local sidereal time [hours]', fontsize=14)
		ax2.set_xticks([90, 110, 130, 150, 170, 190])
		ax2.grid()


		plt.savefig(path_plot_save + 'chromaticity_factor.pdf', bbox_inches='tight')
		plt.close()
		plt.close()

























	if scan_region == 'yes':

		plt.close()
		plt.close()
		plt.close()

		path_data = home_folder + '/DATA/EDGES/calibration/sky/'


		# Loading galactic coordinates (the Haslam map is in NESTED Galactic Coordinates)
		coord              = fits.open(path_data + 'coordinate_maps/pixel_coords_map_nested_galactic_res9.fits')
		coord_array        = coord[1].data
		lon                = coord_array['LONGITUDE']
		lat                = coord_array['LATITUDE']
		GALAC_COORD_object = apc.SkyCoord(lon, lat, frame='galactic', unit='deg')  # defaults to ICRS frame


		# Loading Haslam map
		haslam_map = fits.open(path_data + 'haslam_map/lambda_haslam408_dsds.fits')
		haslam408  = (haslam_map[1].data)['temperature']


		# Spectral index in HEALPix RING Galactic Coordinates, nside=512
		beta_file = path_data + 'spectral_index/sky_spectral_index_original_45_408_MHz_maps_galactic_coordinates_nside_512_ring_3Ksubtracted.hdf5'
		with h5py.File(beta_file, 'r') as hf:			
			hf_beta   = hf.get('spectral_index')
			beta_ring = np.array(hf_beta)


		# Convert beta to NESTED format
		beta = hp.reorder(beta_ring, r2n=True)


		# Loading celestial coordinates to fill in the spectral index hole around the north pole
		coord              = fits.open(path_data + 'coordinate_maps/pixel_coords_map_nested_celestial_res9.fits')
		coord_array        = coord[1].data
		RA                 = coord_array['LONGITUDE']
		DEC                = coord_array['LATITUDE']


		# Filling the hole
		beta[DEC>68] = np.mean(beta[(DEC>60) & (DEC<68)])


		# Remove offsets
		Tcmb = 2.725
		Tzlc = -3.46		
		T408 = haslam408 - 3    # - Tcmb - Tzlc   # Corrections necessary


		# Produce map at 140 MHz
		m140 = T408 * (140/408)**(-beta) + 3






		## Data paths	
		#path_data = home_folder + '/DATA/EDGES/beam_convolution/'


		## Loading galactic coordinates (the Haslam map is in NESTED Galactic Coordinates)
		#coord              = fits.open(path_data + 'coordinate_maps/pixel_coords_map_nested_galactic_res9.fits')
		#coord_array        = coord[1].data
		#lon                = coord_array['LONGITUDE']
		#lat                = coord_array['LATITUDE']


		## Loading Haslam map
		#haslam_map = fits.open(path_data + 'haslam_map/lambda_haslam408_dsds.fits')
		#haslam     = (haslam_map[1].data)['temperature']
		#haslam150  = haslam*(150/408)**(-2.5)


		## LST to RA
		#RA = np.union1d(15*np.arange(23.76, 24, 0.01) - 360, 15*np.arange(0, 3.76, 0.01))
		##RA = np.arange(10,20,1)






		# Plot
		hp.cartview(np.log10(m140), nest='true', coord=('G', 'C'), flip='geo', title='', notext='true', min=2.2, max=3.9, unit=r'log($T_{\mathrm{sky}}$)')   #,  , min=2.2, max=3.9 unit=r'log($T_{sky}$)' title='', min=2.3, max=2.6, unit=r'$\beta$'), , rot=[180,0,0]
		hp.graticule()


		#fig = plt.gcf()
		#ax = plt.gca()
		#image = ax.get_images()[0]
		#image.set_clim([2.2, 3.9])
		#cmap = fig.colorbar(image, ax=ax, orientation='horizontal')
		#cmap.set_label('test')



		#plt.plot(RA, -26.7*np.ones(len(RA)), 'w--', linewidth=2)  # Center to center of the beam on the sky





		beam     = eg.FEKO_high_band_blade_beam_plus_shaped_finite_ground_plane(AZ_antenna_axis=-5)
		beam140  = beam[12,:,:]
		beam140n = beam140/np.max(beam140)

		FWHM = np.zeros((360, 2))
		EL_raw    = np.arange(0,91,1)
		EL_new    = np.arange(0,90.01, 0.01)		

		for j in range(len(beam140[0,:])): # Loop over AZ
			#print(j)

			func      = sci.interp1d(EL_raw, beam140n[:,j])
			beam140n_interp = func(EL_new)

			minDiff = 100
			for i in range(len(EL_new)):	
				Diff    = np.abs(beam140n_interp[i] - 0.5)
				if Diff < minDiff:
					#print(90-EL_new[i])
					minDiff   = np.copy(Diff)
					FWHM[j,0] = j
					FWHM[j,1] = 90 - EL_new[i]








		# Reference location
		EDGES_lat_deg  = -26.714778
		EDGES_lon_deg  = 116.605528 
		EDGES_location = apc.EarthLocation(lat=EDGES_lat_deg*apu.deg, lon=EDGES_lon_deg*apu.deg)


		# Reference observation time. At this time, the LST is 0.1666 (00:10 Hrs LST) at the EDGES location

		#Time_iter_UTC_start  = np.array([2014, 1, 1, 9, 15, 23])  # 23.76  LST, obtained iteratively using LST = eg.utc2lst(Time_iter_UTC_start, EDGES_lon_deg)
		#Time_iter_UTC_middle = np.array([2014, 1, 1, 11, 15, 4])  # 1.76   LST, obtained iteratively using LST = eg.utc2lst(Time_iter_UTC_middle, EDGES_lon_deg)
		#Time_iter_UTC_end    = np.array([2014, 1, 1, 13, 14, 44]) # 3.76   LST, obtained iteratively using LST = eg.utc2lst(Time_iter_UTC_start, EDGES_lon_deg)

		Time_iter_UTC_start  = np.array([2014, 1, 1,  9, 45, 18])  # 0.26   LST, obtained iteratively using LST = eg.utc2lst(Time_iter_UTC_start, EDGES_lon_deg)
		Time_iter_UTC_middle = np.array([2014, 1, 1, 12, 44, 50])  # 3.26   LST, obtained iteratively using LST = eg.utc2lst(Time_iter_UTC_middle, EDGES_lon_deg)
		Time_iter_UTC_end    = np.array([2014, 1, 1, 15, 44, 20])  # 6.26   LST, obtained iteratively using LST = eg.utc2lst(Time_iter_UTC_start, EDGES_lon_deg)		







		Time_iter_UTC_start_dt  = dt.datetime(Time_iter_UTC_start[0], Time_iter_UTC_start[1], Time_iter_UTC_start[2], Time_iter_UTC_start[3], Time_iter_UTC_start[4], Time_iter_UTC_start[5]) 
		Time_iter_UTC_middle_dt = dt.datetime(Time_iter_UTC_middle[0], Time_iter_UTC_middle[1], Time_iter_UTC_middle[2], Time_iter_UTC_middle[3], Time_iter_UTC_middle[4], Time_iter_UTC_middle[5])
		Time_iter_UTC_end_dt    = dt.datetime(Time_iter_UTC_end[0], Time_iter_UTC_end[1], Time_iter_UTC_end[2], Time_iter_UTC_end[3], Time_iter_UTC_end[4], Time_iter_UTC_end[5]) 


		# Converting Beam Contours from Local to Equatorial coordinates
		AltAz_start = apc.SkyCoord(alt = (90-FWHM[:,1])*apu.deg, az = FWHM[:,0]*apu.deg, frame = 'altaz', obstime = apt.Time(Time_iter_UTC_start_dt, format='datetime'), location = EDGES_location)
		RaDec_start = AltAz_start.icrs	
		Ra_start  = np.asarray(RaDec_start.ra)
		Dec_start = np.asarray(RaDec_start.dec)
		RaWrap_start = np.copy(Ra_start)
		RaWrap_start[Ra_start>180] = Ra_start[Ra_start>180] - 360




		AltAz_middle = apc.SkyCoord(alt = (90-FWHM[:,1])*apu.deg, az = FWHM[:,0]*apu.deg, frame = 'altaz', obstime = apt.Time(Time_iter_UTC_middle_dt, format='datetime'), location = EDGES_location)
		RaDec_middle = AltAz_middle.icrs	
		Ra_middle  = np.asarray(RaDec_middle.ra)
		Dec_middle = np.asarray(RaDec_middle.dec)
		RaWrap_middle = np.copy(Ra_middle)
		RaWrap_middle[Ra_middle>180] = Ra_middle[Ra_middle>180] - 360		




		AltAz_end = apc.SkyCoord(alt = (90-FWHM[:,1])*apu.deg, az = FWHM[:,0]*apu.deg, frame = 'altaz', obstime = apt.Time(Time_iter_UTC_end_dt, format='datetime'), location = EDGES_location)
		RaDec_end = AltAz_end.icrs	
		Ra_end  = np.asarray(RaDec_end.ra)
		Dec_end = np.asarray(RaDec_end.dec)
		RaWrap_end = np.copy(Ra_end)
		RaWrap_end[Ra_end>180] = Ra_end[Ra_end>180] - 360		



		plt.plot(np.arange(-180,181,1), -26.7*np.ones(361), 'y--', linewidth=2)

		#plt.plot(RaWrap_start, Dec_start, 'w',     linewidth=3)
		#plt.plot(23.76*(360/24) - 360, -26.7, 'x', color='1', markersize=7, mew=2)

		#plt.plot(RaWrap_middle, Dec_middle, 'w--', linewidth=3)
		#plt.plot(01.76*(360/24), -26.7, 'x', color='1', markersize=7, mew=2)

		#plt.plot(RaWrap_end, Dec_end, 'w:',        linewidth=3)
		#plt.plot(03.76*(360/24), -26.7, 'x', color='1', markersize=7, mew=2)


		plt.plot(RaWrap_start, Dec_start, 'w',     linewidth=3)
		plt.plot(0.26*(360/24), -26.7, 'x', color='1', markersize=5, mew=2)

		plt.plot(RaWrap_middle, Dec_middle, 'w--', linewidth=3)
		plt.plot(3.26*(360/24), -26.7, 'x', color='1', markersize=5, mew=2)

		plt.plot(RaWrap_end, Dec_end, 'w:',        linewidth=3)
		plt.plot(6.26*(360/24), -26.7, 'x', color='1', markersize=5, mew=2)		



		off_x = -4
		off_y = -12
		plt.text(-180+off_x, -90+off_y, '12')
		plt.text(-150+off_x, -90+off_y, '14')
		plt.text(-120+off_x, -90+off_y, '16')
		plt.text( -90+off_x, -90+off_y, '18')
		plt.text( -60+off_x, -90+off_y, '20')
		plt.text( -30+off_x, -90+off_y, '22')
		plt.text(  -0+off_x, -90+off_y, '0')

		plt.text( 30+off_x, -90+off_y, '2')
		plt.text( 60+off_x, -90+off_y, '4')
		plt.text( 90+off_x, -90+off_y, '6')
		plt.text(120+off_x, -90+off_y, '8')
		plt.text(150+off_x, -90+off_y, '10')
		plt.text(180+off_x, -90+off_y, '12')		

		plt.text(-69, -115, 'local sidereal time [hours]')



		off_x1 = -15
		off_x2 = -10
		off_x3 = -19
		off_y  = -3
		plt.text(-180+off_x1,  90+off_y,  '90')
		plt.text(-180+off_x1,  60+off_y,  '60')
		plt.text(-180+off_x1,  30+off_y,  '30')
		plt.text(-180+off_x2,   0+off_y,   '0')
		plt.text(-180+off_x3, -30+off_y, '-30')
		plt.text(-180+off_x3, -60+off_y, '-60')
		plt.text(-180+off_x3, -90+off_y, '-90')

		plt.text(-210, 45, 'declination [degrees]', rotation=90)











	if global_signal == 'yes':

		path_plot_save = home_folder + '/WORK/papers/EDGES_high-band_results/figures/'

		v  = np.arange(40,200.1,0.1)


		# Models from Fialkov (paper 2016-02) (36 total)
		# NOTE: the last 36 models in "model_eor_anastasia" are the same
		da0 = 1e3*eg.model_eor_anastasia_paper_2016_02(0, v, interpolation_kind='cubic')
		da1 = 1e3*eg.model_eor_anastasia_paper_2016_02(1, v, interpolation_kind='cubic')
		da2 = 1e3*eg.model_eor_anastasia_paper_2016_02(2, v, interpolation_kind='cubic')
		da3 = 1e3*eg.model_eor_anastasia_paper_2016_02(3, v, interpolation_kind='cubic')
		da4 = 1e3*eg.model_eor_anastasia_paper_2016_02(4, v, interpolation_kind='cubic')
		da5 = 1e3*eg.model_eor_anastasia_paper_2016_02(5, v, interpolation_kind='cubic')
		da6 = 1e3*eg.model_eor_anastasia_paper_2016_02(6, v, interpolation_kind='cubic')
		da7 = 1e3*eg.model_eor_anastasia_paper_2016_02(7, v, interpolation_kind='cubic')
		da8 = 1e3*eg.model_eor_anastasia_paper_2016_02(8, v, interpolation_kind='cubic')
		da9 = 1e3*eg.model_eor_anastasia_paper_2016_02(9, v, interpolation_kind='cubic')
		da10 = 1e3*eg.model_eor_anastasia_paper_2016_02(10, v, interpolation_kind='cubic')
		da11 = 1e3*eg.model_eor_anastasia_paper_2016_02(11, v, interpolation_kind='cubic')
		da12 = 1e3*eg.model_eor_anastasia_paper_2016_02(12, v, interpolation_kind='cubic')
		da13 = 1e3*eg.model_eor_anastasia_paper_2016_02(13, v, interpolation_kind='cubic')
		da14 = 1e3*eg.model_eor_anastasia_paper_2016_02(14, v, interpolation_kind='cubic')
		da15 = 1e3*eg.model_eor_anastasia_paper_2016_02(15, v, interpolation_kind='cubic')
		da16 = 1e3*eg.model_eor_anastasia_paper_2016_02(16, v, interpolation_kind='cubic')
		da17 = 1e3*eg.model_eor_anastasia_paper_2016_02(17, v, interpolation_kind='cubic')
		da18 = 1e3*eg.model_eor_anastasia_paper_2016_02(18, v, interpolation_kind='cubic')
		da19 = 1e3*eg.model_eor_anastasia_paper_2016_02(19, v, interpolation_kind='cubic')
		da20 = 1e3*eg.model_eor_anastasia_paper_2016_02(20, v, interpolation_kind='cubic')
		da21 = 1e3*eg.model_eor_anastasia_paper_2016_02(21, v, interpolation_kind='cubic')
		da22 = 1e3*eg.model_eor_anastasia_paper_2016_02(22, v, interpolation_kind='cubic')
		da23 = 1e3*eg.model_eor_anastasia_paper_2016_02(23, v, interpolation_kind='cubic')
		da24 = 1e3*eg.model_eor_anastasia_paper_2016_02(24, v, interpolation_kind='cubic')
		da25 = 1e3*eg.model_eor_anastasia_paper_2016_02(25, v, interpolation_kind='cubic')
		da26 = 1e3*eg.model_eor_anastasia_paper_2016_02(26, v, interpolation_kind='cubic')
		da27 = 1e3*eg.model_eor_anastasia_paper_2016_02(27, v, interpolation_kind='cubic')
		da28 = 1e3*eg.model_eor_anastasia_paper_2016_02(28, v, interpolation_kind='cubic')
		da29 = 1e3*eg.model_eor_anastasia_paper_2016_02(29, v, interpolation_kind='cubic')
		da30 = 1e3*eg.model_eor_anastasia_paper_2016_02(30, v, interpolation_kind='cubic')
		da31 = 1e3*eg.model_eor_anastasia_paper_2016_02(31, v, interpolation_kind='cubic')
		da32 = 1e3*eg.model_eor_anastasia_paper_2016_02(32, v, interpolation_kind='cubic')
		da33 = 1e3*eg.model_eor_anastasia_paper_2016_02(33, v, interpolation_kind='cubic')
		da34 = 1e3*eg.model_eor_anastasia_paper_2016_02(34, v, interpolation_kind='cubic')
		da35 = 1e3*eg.model_eor_anastasia_paper_2016_02(35, v, interpolation_kind='cubic')		








		# Models from Mirocha (paper with Furlanetto & Sun) (33 total)
		dj0 = 1e3*eg.model_eor_jordan(0, v)
		dj1 = 1e3*eg.model_eor_jordan(1, v)
		dj2 = 1e3*eg.model_eor_jordan(2, v)
		dj3 = 1e3*eg.model_eor_jordan(3, v)
		dj4 = 1e3*eg.model_eor_jordan(4, v)
		dj5 = 1e3*eg.model_eor_jordan(5, v)
		dj6 = 1e3*eg.model_eor_jordan(6, v)
		dj7 = 1e3*eg.model_eor_jordan(7, v)
		dj8 = 1e3*eg.model_eor_jordan(8, v)
		dj9 = 1e3*eg.model_eor_jordan(9, v)
		dj10 = 1e3*eg.model_eor_jordan(10, v)
		dj11 = 1e3*eg.model_eor_jordan(11, v)
		dj12 = 1e3*eg.model_eor_jordan(12, v)
		dj13 = 1e3*eg.model_eor_jordan(13, v)
		dj14 = 1e3*eg.model_eor_jordan(14, v)
		dj15 = 1e3*eg.model_eor_jordan(15, v)
		dj16 = 1e3*eg.model_eor_jordan(16, v)
		dj17 = 1e3*eg.model_eor_jordan(17, v)
		dj18 = 1e3*eg.model_eor_jordan(18, v)
		dj19 = 1e3*eg.model_eor_jordan(19, v)		
		dj20 = 1e3*eg.model_eor_jordan(20, v)
		dj21 = 1e3*eg.model_eor_jordan(21, v)
		dj22 = 1e3*eg.model_eor_jordan(22, v)
		dj23 = 1e3*eg.model_eor_jordan(23, v)
		dj24 = 1e3*eg.model_eor_jordan(24, v)
		dj25 = 1e3*eg.model_eor_jordan(25, v)
		dj26 = 1e3*eg.model_eor_jordan(26, v)
		dj27 = 1e3*eg.model_eor_jordan(27, v)
		dj28 = 1e3*eg.model_eor_jordan(28, v)
		dj29 = 1e3*eg.model_eor_jordan(29, v)
		dj30 = 1e3*eg.model_eor_jordan(30, v)
		dj31 = 1e3*eg.model_eor_jordan(31, v)
		dj32 = 1e3*eg.model_eor_jordan(32, v)		


		z  = eg.frequency2redshift(v)





		# Models from Mesinger
		path_global = home_folder + '/DATA/EDGES/global_21cm_models/mesinger/21CM_global/'

		dm1 = np.genfromtxt(path_global + 'Tvir1e+04_zetax1e+55_zetaion31.5_Taue0.088_zre9.842_delz2.018')
		dm2 = np.genfromtxt(path_global + 'Tvir1e+04_zetax1e+57_zetaion31.5_Taue0.103_zre11.034_delz2.126')
		dm3 = np.genfromtxt(path_global + 'Tvir1e+04_zetax5e+55_zetaion31.5_Taue0.089_zre9.958_delz2.011')
		dm4 = np.genfromtxt(path_global + 'Tvir1e+04_zetax5e+56_zetaion17.0_Taue0.088_zre9.710_delz2.335')

		dm5 = np.genfromtxt(path_global + 'Tvir1e+05_zetax1e+57_zetaion31.5_Taue0.060_zre7.493_delz1.537')
		dm6 = np.genfromtxt(path_global + 'Tvir1e+05_zetax1e+57_zetaion31.5_Taue0.066_zre7.559_delz1.677_feedback')
		dm7 = np.genfromtxt(path_global + 'Tvir1e+05_zetax1e+59_zetaion31.5_Taue0.108_zre11.767_delz2.738')

		zm1 = dm1[:,0]
		zm2 = dm5[:,0]

		vm1 = eg.redshift2frequency(zm1)
		vm2 = eg.redshift2frequency(zm2)






		# Figure 1  (as a function of frequency)
		# -----------------------------------------------------

		plt.close()
		plt.close()
		plt.close()
		plt.close()
		plt.close()


		size_x = 5
		size_y = 4.5
		x0     = 0.18 #0.05
		y0     = 0.12
		dx     = 0.78
		dy     = 0.78
		x00    = 0.057

		f1     = plt.figure(num=1, figsize=(size_x, size_y))
		ax1 = f1.add_axes([1*x0, y0+0*dy, dx, dy])		


		ax1.plot(vm1, dm1[:,1], 'c')
		ax1.plot(vm1, dm2[:,1], 'c')
		ax1.plot(vm1, dm3[:,1], 'c')
		ax1.plot(vm1, dm4[:,1], 'c')

		ax1.plot(vm2, dm5[:,1], 'c')
		ax1.plot(vm2, dm6[:,1], 'c')
		ax1.plot(vm2, dm7[:,1], 'c')



		ax1.plot(v, da0, 'r')
		ax1.plot(v, da1, 'r')
		ax1.plot(v, da2, 'r')
		#ax1.plot(v, da3, 'r')
		#ax1.plot(v, da4, 'r')
		#ax1.plot(v, da5, 'r')
		ax1.plot(v, da6, 'r')
		ax1.plot(v, da7, 'r')
		#ax1.plot(v, da8, 'r')
		ax1.plot(v, da9, 'r')
		ax1.plot(v, da10, 'r')
		#ax1.plot(v, da11, 'r')
		#ax1.plot(v, da12, 'r')  # crazy one
		ax1.plot(v, da13, 'r')
		#ax1.plot(v, da14, 'r')
		ax1.plot(v, da15, 'r')
		ax1.plot(v, da16, 'r')
		#ax1.plot(v, da17, 'r')
		#ax1.plot(v, da18, 'r')
		ax1.plot(v, da19, 'r')		
		ax1.plot(v, da20, 'r')
		#ax1.plot(v, da21, 'r')
		#ax1.plot(v, da22, 'r')
		#ax1.plot(v, da23, 'r')
		ax1.plot(v, da24, 'r')
		ax1.plot(v, da25, 'r')
		#ax1.plot(v, da26, 'r')
		#ax1.plot(v, da27, 'r')
		#ax1.plot(v, da28, 'r')
		#ax1.plot(v, da29, 'r')		
		#ax1.plot(v, da30, 'r')  # crazy one
		ax1.plot(v, da31, 'r')
		ax1.plot(v, da32, 'r')
		#ax1.plot(v, da33, 'r')
		#ax1.plot(v, da34, 'r')
		#ax1.plot(v, da35, 'r')		


		ax1.plot(v, dj0, 'b')
		ax1.plot(v, dj1, 'b')
		ax1.plot(v, dj2, 'b')
		#ax1.plot(v, dj3, 'g')
		ax1.plot(v, dj4, 'b')
		ax1.plot(v, dj5, 'b')
		ax1.plot(v, dj6, 'b')
		#ax1.plot(v, dj7, 'g')
		ax1.plot(v, dj8, 'b')
		ax1.plot(v, dj9, 'b')
		ax1.plot(v, dj10, 'b')
		#ax1.plot(v, dj11, 'g')
		#ax1.plot(v, dj12, 'g')
		#ax1.plot(v, dj13, 'g')
		#ax1.plot(v, dj14, 'g')
		ax1.plot(v, dj15, 'b')
		#ax1.plot(v, dj16, 'g')
		#ax1.plot(v, dj17, 'g')
		#ax1.plot(v, dj18, 'g')
		#ax1.plot(v, dj19, 'g')		
		#ax1.plot(v, dj20, 'g')
		#ax1.plot(v, dj21, 'g')
		#ax1.plot(v, dj22, 'g')
		ax1.plot(v, dj23, 'b')
		#ax1.plot(v, dj24, 'g')
		#ax1.plot(v, dj25, 'g')
		#ax1.plot(v, dj26, 'g')
		#ax1.plot(v, dj27, 'g')
		ax1.plot(v, dj28, 'b')
		#ax1.plot(v, dj29, 'g')
		#ax1.plot(v, dj30, 'g')
		#ax1.plot(v, dj31, 'g')
		#ax1.plot(v, dj32, 'g')		




		ax1.set_xlabel(r'$\nu$ [MHz]',fontsize=16)
		ax1.set_ylabel(r'$T_{21}$ [mK]',fontsize=16)		









		ax1.set_xlim(40, 200)
		ax1.set_ylim(-270, 70)
		#plt.grid()


		ax2 = ax1.twiny()
		ax2.set_xlabel('$z$',fontsize=22)
		vmin = 40
		ax2.set_xticks(np.array((58, 276, 487, 891, 1375))/len(v))
		ax2.set_xticklabels([int(z[58]), int(z[276]), int(z[487]), int(z[891]), int(z[1375])])


		plt.savefig(path_plot_save + 'global_signal_references_frequency.pdf', bbox_inches='tight')
		plt.close()
		plt.close()



















		# Figure 2  (as a function of redshift)
		# -----------------------------------------------------

		plt.close()
		plt.close()
		plt.close()
		plt.close()
		plt.close()


		size_x = 5.5
		size_y = 4.5
		x0     = 0.18 #0.05
		y0     = 0.12
		dx     = 0.78
		dy     = 0.78
		x00    = 0.057

		f1     = plt.figure(num=1, figsize=(size_x, size_y))
		ax1 = f1.add_axes([1*x0, y0+0*dy, dx, dy])		






		ax1.plot(z, da0, 'c')
		ax1.plot(z, da1, 'c')
		ax1.plot(z, da2, 'c')
		#ax1.plot(z, da3, 'r')
		#ax1.plot(z, da4, 'r')
		#ax1.plot(z, da5, 'r')
		ax1.plot(z, da6, 'c')
		ax1.plot(z, da7, 'c')
		#ax1.plot(z, da8, 'r')
		ax1.plot(z, da9, 'c')
		ax1.plot(z, da10, 'c')
		#ax1.plot(z, da11, 'r')
		#ax1.plot(z, da12, 'r')  # crazy one
		ax1.plot(z, da13, 'c')
		#ax1.plot(z, da14, 'r')
		ax1.plot(z, da15, 'c')
		ax1.plot(z, da16, 'c')
		#ax1.plot(z, da17, 'r')
		#ax1.plot(z, da18, 'r')
		ax1.plot(z, da19, 'c')		
		ax1.plot(z, da20, 'c')
		#ax1.plot(z, da21, 'r')
		#ax1.plot(z, da22, 'r')
		#ax1.plot(z, da23, 'r')
		ax1.plot(z, da24, 'c')
		ax1.plot(z, da25, 'c')
		#ax1.plot(z, da26, 'r')
		#ax1.plot(z, da27, 'r')
		#ax1.plot(z, da28, 'r')
		#ax1.plot(z, da29, 'r')		
		#ax1.plot(z, da30, 'r')  # crazy one
		ax1.plot(z, da31, 'c')
		ax1.plot(z, da32, 'c')
		#ax1.plot(z, da33, 'r')
		#ax1.plot(z, da34, 'r')
		#ax1.plot(z, da35, 'r')		


		ax1.plot(z, dj0, 'r')
		ax1.plot(z, dj1, 'r')
		ax1.plot(z, dj2, 'r')
		#ax1.plot(z, dj3, 'g')
		ax1.plot(z, dj4, 'r')
		ax1.plot(z, dj5, 'r')
		ax1.plot(z, dj6, 'r')
		#ax1.plot(z, dj7, 'g')
		ax1.plot(z, dj8, 'r')
		ax1.plot(z, dj9, 'r')
		ax1.plot(z, dj10, 'r')
		#ax1.plot(z, dj11, 'g')
		#ax1.plot(z, dj12, 'g')
		#ax1.plot(z, dj13, 'g')
		#ax1.plot(z, dj14, 'g')
		ax1.plot(z, dj15, 'r')
		#ax1.plot(z, dj16, 'g')
		#ax1.plot(z, dj17, 'g')
		#ax1.plot(z, dj18, 'g')
		#ax1.plot(z, dj19, 'g')		
		#ax1.plot(z, dj20, 'g')
		#ax1.plot(z, dj21, 'g')
		#ax1.plot(z, dj22, 'g')
		ax1.plot(z, dj23, 'r')
		#ax1.plot(z, dj24, 'g')
		#ax1.plot(z, dj25, 'g')
		#ax1.plot(z, dj26, 'g')
		#ax1.plot(z, dj27, 'g')
		ax1.plot(z, dj28, 'r')
		#ax1.plot(z, dj29, 'g')
		#ax1.plot(z, dj30, 'g')
		#ax1.plot(z, dj31, 'g')
		#ax1.plot(z, dj32, 'g')		



		ax1.plot(zm1, dm1[:,1], 'k')
		ax1.plot(zm1, dm2[:,1], 'k')
		ax1.plot(zm1, dm3[:,1], 'k')
		ax1.plot(zm1, dm4[:,1], 'k')

		ax1.plot(zm2, dm5[:,1], 'k')
		ax1.plot(zm2, dm6[:,1], 'k')
		ax1.plot(zm2, dm7[:,1], 'k')




		ax1.set_xlabel('$z$', fontsize=18)
		ax1.set_ylabel('brightness temperature [mK]', fontsize=12)		





		ax1.set_xlim(27, 6)
		ax1.set_ylim(-270, 70)
		ax1.set_xticks(np.arange(6,27,4))
		#plt.grid()


		ax2 = ax1.twiny()

		ax2.set_xlabel(r'$\nu$ [MHz]',fontsize=14)
		#vmin = 40
		#ax2.set_xticks(np.array((58, 276, 487, 891, 1375))/len(v))
		#ax2.set_xticklabels([int(z[58]), int(z[276]), int(z[487]), int(z[891]), int(z[1375])])



		#ax2.set_xticks(np.array((np.abs(eg.frequency2redshift(90)-14),np.abs(eg.frequency2redshift(80)-30),np.abs(eg.frequency2redshift(110)-30),np.abs(eg.frequency2redshift(140)-30),np.abs(eg.frequency2redshift(170)-30),np.abs(eg.frequency2redshift(200)-30),np.abs(6-30))))
		#ax2.set_xticklabels(['50','80','110','140','170','200',''])


		z0 = 27
		ax2.set_xticks(np.array((np.abs(eg.frequency2redshift(50)-z0), np.abs(eg.frequency2redshift(90)-z0), np.abs(eg.frequency2redshift(190)-z0), np.abs(6-z0))))

		ax2.set_xticklabels(['50','90','190',''])




		plt.savefig(path_plot_save + 'global_signal_references_redshift.pdf', bbox_inches='tight')
		plt.close()
		plt.close()







	# Cosmological models
	# -------------------
	if phenomenological_models == 'yes':











		# Frequency vector
		ff, il, ih = eg.frequency_edges(90,190)
		f = ff[il:(ih+1)]


		# EoR Tanh models
		#T_eor1, xhi, z = eg.model_eor(f, T21=1, model_type='tanh', fr=140, df=10, zr=14, dz=0.5, z_alpha=0)
		T_eor2, xhi, z = eg.model_eor(f, T21=0.028, model_type='tanh', fr=140, df=10, zr=13, dz=1, z_alpha=0)
		#T_eor3, xhi, z = eg.model_eor(f, T21=1, model_type='tanh', fr=140, df=10, zr=12, dz=1.5, z_alpha=0)
		#T_eor4, xhi, z = eg.model_eor(f, T21=1, model_type='tanh', fr=140, df=10, zr=11, dz=2, z_alpha=0)
		T_eor5, xhi, z = eg.model_eor(f, T21=0.028, model_type='tanh', fr=140, df=10, zr=11, dz=2, z_alpha=0)		
		T_eor6, xhi, z = eg.model_eor(f, T21=0.028, model_type='tanh', fr=140, df=10, zr=9, dz=1, z_alpha=0)
		#T_eor7, xhi, z = eg.model_eor(f, T21=1, model_type='tanh', fr=140, df=10, zr=8, dz=1, z_alpha=0)
		T_eor8, xhi, z = eg.model_eor(f, T21=0.028, model_type='tanh', fr=140, df=10, zr=7, dz=0.2, z_alpha=0)


		# Cosmic Dawn models
		T_cd1, xhi, z = eg.model_eor(f, T21=-0.1, model_type='gaussian_redshift', fr=140, df=10, zr=13,   dz=2, z_alpha=-6)
		#T_cd2, xhi, z = eg.model_eor(f, T21=-1, model_type='gaussian_redshift', fr=140, df=10, zr=12.5, dz=2, z_alpha=-3)
		T_cd3, xhi, z = eg.model_eor(f, T21=-0.1, model_type='gaussian_redshift', fr=140, df=10, zr=11,   dz=2, z_alpha=0)
		#T_cd4, xhi, z = eg.model_eor(f, T21=-1, model_type='gaussian_redshift', fr=140, df=10, zr=9.5,  dz=2, z_alpha=3)
		T_cd5, xhi, z = eg.model_eor(f, T21=-0.1, model_type='gaussian_redshift', fr=140, df=10, zr=10,  dz=4, z_alpha=4)
		T_cd6, xhi, z = eg.model_eor(f, T21=-0.1, model_type='gaussian_redshift', fr=140, df=10, zr=8,    dz=2, z_alpha=6)





		# Figure
		plt.close()
		plt.close()



		size_x = 5.5
		size_y = 6.5
		x0     = 0.18 #0.05
		y0     = 0.12
		dx     = 0.78
		dy     = 0.38
		x00    = 0.057

		f1     = plt.figure(num=1, figsize=(size_x, size_y))
		ax1    = f1.add_axes([1*x0, 1*y0 + 2*dy, dx, dy])
		plt.text(14.7, 59,  '(a)', fontsize=18)
		ax2    = f1.add_axes([1*x0, 1*y0 + 1*dy, dx, dy])
		plt.text(14.7, -45, '(b)', fontsize=18)
		ax3    = f1.add_axes([1*x0, 1*y0 + 0*dy, dx, dy])
		plt.text(14.7, 57,  '(c)', fontsize=18)


		# Panel (a)
		ax1.plot(z, 1000*T_eor2, linewidth=2)
		ax1.plot(z, 1000*T_eor5, linewidth=2)
		ax1.plot(z, 1000*T_eor6, linewidth=2)
		ax1.plot(z, 1000*T_eor8, linewidth=2)

		ax1.set_xlim([np.max(z), np.min(z)])
		ax1.set_ylim([-5, 70])
		ax1.set_yticks([0, 20, 40, 60])
		ax1.set_xticks(np.arange(14,6,-1))
		ax1.set_xticklabels([])
		ax1.grid()
		ax1.set_ylabel('temperature [mK]', fontsize=11)
		ax1.legend([r'$z_r=13$, $\Delta z=1$', r'$z_r=11$, $\Delta z=2$', r'$z_r=9$, $\Delta z=1$', r'$z_r=7$, $\Delta z=0.2$'], loc=0, ncol=1, fontsize=10)






		# Panel (b)
		fb, xi_all, model_all, te_all, z0_all, dz_all, zC_all, TC_all, p21_all, dp21_all = eg.read_cold_EoR_least_squares('results_cold_EoR_all_models_20170427.hdf5')

		model_selection = model_all[(dz_all<=4),:]
		z0_sel          = z0_all[(dz_all<=4)]
		dz_sel          = dz_all[(dz_all<=4)]

		print(z0_sel.shape)


		i1 = 9060    # 13.0, 0.2
		i2 = 8303    # 11.0, 0.8
		i3 = 7930    # 10.0, 2.2
		i4 = 400     # 7.0,  0.1



		ax2.plot(eg.frequency2redshift(fb), 1000*model_selection[i1,:], 'b', linewidth=2)
		ax2.plot(eg.frequency2redshift(fb), 1000*model_selection[i2,:], 'g', linewidth=2)
		ax2.plot(eg.frequency2redshift(fb), 1000*model_selection[i3,:], 'r', linewidth=2)
		ax2.plot(eg.frequency2redshift(fb), 1000*model_selection[i4,:], 'c', linewidth=2)
		ax2.set_xlim([np.max(z), np.min(z)])
		ax2.set_ylim([-450, 30])
		ax2.grid()
		ax2.set_yticks([-400, -300, -200, -100, 0])
		ax2.set_ylabel('temperature [mK]', fontsize=11)
		#ax2.set_xlabel('$z$', fontsize=18)
		ax2.set_xticklabels([])
		ax2.legend([r'$z_r=13$, $\Delta z=0.2$', r'$z_r=11$, $\Delta z=0.8$', r'$z_r=10$, $\Delta z=2.2$', r'$z_r=7$, $\Delta z=0.1$'], loc=3, ncol=2, fontsize=10)





		# Panel (c)	
		ax3.plot(z, 1000*T_cd3, linewidth=2, color='k')
		ax3.plot(z, 1000*T_cd1, linewidth=2, color='r')
		ax3.plot(z, 1000*T_cd6, linewidth=2, color='b')

		ax3.set_xlim([np.max(z), np.min(z)])
		ax3.set_ylim([-120, 90]) 
		ax3.set_xticks(np.arange(14,6,-1))
		#ax2.set_xticklabels([])
		ax3.grid()
		ax3.set_ylabel('temperature [mK]', fontsize=11)
		ax3.set_xlabel('$z$', fontsize=18)
		ax3.legend([r'$z_r=11$, $\Delta z=2$, $\phi=0$', r'$z_r=13$, $\Delta z=2$, $\phi=-6$', r'$z_r=8$, $\Delta z=2$, $\phi=+6$'], loc=0, ncol=1, fontsize=10)		# r'$z_r=10$, $\Delta z=4$, $\phi=4$', 













		ax12 = ax1.twiny()

		ax12.set_xlabel('frequency [MHz]',fontsize=12)

		z0 = eg.frequency2redshift(90)
		ax12.set_xticks(np.array((np.abs(eg.frequency2redshift(90)-z0), np.abs(eg.frequency2redshift(110)-z0), np.abs(eg.frequency2redshift(130)-z0), np.abs(eg.frequency2redshift(150)-z0), np.abs(eg.frequency2redshift(170)-z0), np.abs(eg.frequency2redshift(190)-z0))))

		ax12.set_xticklabels(['90', '110', '130', '150', '170', '190'])




		#
		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170506/'
		plt.savefig(path_plot_save + 'phenomenological_models.pdf', bbox_inches='tight')
		plt.close()
		plt.close()













	# Daily residuals and total average
	if residuals == 'yes':
		f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')

		tsel = t
		wsel = w
		dsel = d[:,1]		


		# Computing rms of noise only for average spectrum
		avt, avw = eg.spectral_averaging(tsel, wsel)
		ffx, rrx, wwx, rms, rms110 = eg.data_analysis_residuals_array(f, avt.reshape(1,-1), avw.reshape(1,-1), flow=90, fhigh=190, model_type='EDGES_polynomial', fnorm=140, nfg=16, binning='yes', nsamples=64, rfi_flagging='yes')

		print('RMS of noise alone: ' + str(np.std(rrx[180::])))


		# Plot of residuals for average spectrum
		plt.close()
		plt.close()

		ff, rsel, wsel, rms, rms110 = eg.data_analysis_residuals_array(f, avt.reshape(1,-1), avw.reshape(1,-1), flow=90, fhigh=190, model_type='EDGES_polynomial', fnorm=140, nfg=5, binning='yes', nsamples=64, rfi_flagging='yes')
		plt.figure(num=1, figsize=(7, 4.5))



		# Assigning NaNs to bins with no data
		fff = np.copy(ff)

		rrr = 1000*rsel
		rrr[wsel==0] = np.nan

		plt.subplot(2,1,1)
		plt.plot(fff, rrr, 'b', linewidth=1)
		plt.plot( [fff[121]-(fff[122]-fff[121])/3, fff[121]+(fff[122]-fff[121])/3], [0.98*rrr[121], 1.02*rrr[121]], '-')
		plt.xlim([90, 190])
		plt.xticks(np.arange(90,191,20))
		plt.ylim([-170, 170])
		plt.ylabel('temperature [mK]')
		plt.text(140, 80, 'weighted rms = 17 mK', fontsize=14, fontweight='bold')
		plt.text(92, 110, '(a)', fontsize=18)

		plt.subplot(2,1,2)
		plt.step(ff-(0.9)*(ff[1]-ff[0])/2, np.hstack([wsel[0], wsel[0:-1]])/np.max(wsel), 'b', linewidth=1)  # 
		plt.ylim([0, 1.2])
		plt.xlim([90, 190])
		plt.xticks(np.arange(90,191,20))
		plt.yticks(np.arange(0,1.1,0.5))
		plt.ylim([0, 1.2])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('normalized weights')
		plt.text(92, 1, '(b)', fontsize=18)

		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170311/'
		plt.savefig(path_plot_save + 'nominal_residuals.pdf', bbox_inches='tight')

		plt.close()
		plt.close()		










	if residuals_v2 == 'yes':
		f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')
		#f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_moon_el_0deg.hdf5')
		#f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_full_season_20170325.hdf5')
		#f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_full_season_moon_el_0deg_20170421.hdf5')

		# Full season no moon cut
		#tsel = t[0:70,:]
		#wsel = w[0:70,:]
		#dsel = d[0:70,1]

		## Full season moon cut
		#tsel = t[0:55,:]
		#wsel = w[0:55,:]
		#dsel = d[0:55,1]		

		#Nominal average
		tsel = t
		wsel = w
		dsel = d[:,1]





		avt, avw = eg.spectral_averaging(tsel, wsel)


		FLOW  = 100
		FHIGH = 120
		NFG   = 3

		# Computing rms of noise only for average spectrum
		ffx, rrx, wwx, rms, rms110 = eg.data_analysis_residuals_array(f, avt.reshape(1,-1), avw.reshape(1,-1), flow=FLOW, fhigh=FHIGH, model_type='EDGES_polynomial', fnorm=140, nfg=16, binning='yes', nsamples=64, rfi_flagging='yes')
		print('RMS of noise alone: ' + str(np.std(rrx[180::])))



		# Residuals to 5-term polynomial
		a21=+0.0
		gauss, x1, x2 = eg.model_eor(f, T21=a21, model_type='gaussian_frequency', fr=124, df=10)
		#gauss, x1, x2 = eg.model_eor(f, T21=-0.08, model_type='gaussian_frequency', fr=113, df=10)
		ff, rsel, wsel, rms, rms110 = eg.data_analysis_residuals_array(f, avt.reshape(1,-1)-gauss, avw.reshape(1,-1), flow=FLOW, fhigh=FHIGH, model_type='EDGES_polynomial', fnorm=140, nfg=NFG, binning='yes', nsamples=64, rfi_flagging='yes')
		print('RMS of everything: ' + str(np.std(rsel[wsel>0])))

		# Assigning NaNs to bins with no data
		fff = np.copy(ff)				
		rrr = 1000*rsel
		rrr[wsel==0] = np.nan		



		plt.close()
		plt.close()

		size_x = 6.6
		size_y = 5
		x0     = 0.18
		y0     = 0.12
		dx     = 0.78
		dy     = 0.38
		x00    = 0.057

		f1     = plt.figure(num=1, figsize=(size_x, size_y))
		ax1    = f1.add_axes([1*x0, 1*y0 + 0*dy, dx, dy])
		plt.text(92, 1.06, '(b)', fontsize=18)
		ax2    = f1.add_axes([1*x0, 1*y0 + 1*dy, dx, dy])

		# Bottom panel
		ax1.step(ff-(0.9)*(ff[1]-ff[0])/2, np.hstack([wsel[0], wsel[0:-1]])/np.max(wsel), 'b', linewidth=1)
		ax1.set_xlim([90, 190])
		ax1.set_ylim([0, 1.3])
		ax1.set_xticks(np.arange(90,191,20))
		ax1.set_yticks(np.arange(0,1.1,0.5))
		ax1.set_xlabel('frequency [MHz]')
		ax1.set_ylabel('normalized weights')


		# Top panel
		ax2.plot(fff, rrr, 'b', linewidth=1)
		ax2.set_xlim([90, 190])
		ax2.set_ylim([-180, 180])
		ax2.set_xticks(np.arange(90,191,20))
		ax2.set_yticks(np.arange(-150,151,50))
		ax2.set_xticklabels([])
		ax2.set_ylabel('temperature [mK]')
		plt.text(140, 80, 'weighted rms = 17 mK', fontsize=14, fontweight='bold')
		plt.text(92, 110, '(a)', fontsize=18)


		ax22 = ax2.twiny()	
		ax22.set_xlabel(r'$z$',fontsize=18)
		f0 = 90# eg.redshift2frequency()
		ax22.set_xticks(np.array((np.abs(eg.redshift2frequency(14)-f0), np.abs(eg.redshift2frequency(13)-f0), np.abs(eg.redshift2frequency(12)-f0),  np.abs(eg.redshift2frequency(11)-f0), np.abs(eg.redshift2frequency(10)-f0), np.abs(eg.redshift2frequency(9)-f0), np.abs(eg.redshift2frequency(8)-f0), np.abs(eg.redshift2frequency(7)-f0), np.abs(100))))
		ax22.set_xticklabels(['14', '13', '12', '11', '10', '9', '8', '7', ''])

		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170422/'
		plt.savefig(path_plot_save + 'nominal_residuals_X.pdf', bbox_inches='tight')
		plt.close()
		plt.close()







	if residuals2 == 'yes':

		# Nominal dataset
		#f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')
		f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_full_season_20170325.hdf5')

		t = t[0:70,:]
		w = w[0:70,:]
		d = d[0:70,1]		




		# Random averages
		Ntr     = 35
		Nav     = 10
		avt_all   = np.zeros((Nav+1, len(t[0,:])))
		avw_all   = np.zeros((Nav+1, len(t[0,:])))
		index_all = np.zeros((Nav, Ntr))

		for i in range(Nav):
			index_r        = np.random.choice(np.arange(0,len(t[:,0]),1), Ntr, replace=False)
			avt_r, avw_r   = eg.spectral_averaging(t[index_r,:], w[index_r,:])
			avt_all[i,:]   = avt_r
			avw_all[i,:]   = avw_r
			index_all[i,:] = index_r

		avt_x, avw_x   = eg.spectral_averaging(t, w)
		avt_all[Nav,:] = avt_x
		avw_all[Nav,:] = avw_x

		# Saving indices
		np.savetxt(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/indices_30traces.txt', index_all)



		# Computing residuals for averages
		fo, ro, wo, rms, rms110 = eg.data_analysis_residuals_array(f, avt_all, avw_all, flow=90, fhigh=190, model_type='EDGES_polynomial', fnorm=140, nfg=5, binning='yes', nsamples=64, rfi_flagging='yes')


		# Plot of residuals
		dd = np.arange(1,11,1)
		o = eg.plot_spectra_residuals(fo, ro, wo, 'season', dd, K=0.1, rms_offset=-1, flow_lim=85, fhigh_lim=210, xticks_low=90, xticks_high=190, xticks_delta=20, rms_text_freq=195, fontsize=10, size_x_column=6, size_y=4, NSC=11, y_label=' ' + '\n' + 'random average [200 mK per division]', plot_name='yyy')   # for paper: size_x = 7, size_y = 3.8


		#path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170311/'
		#plt.savefig(path_plot_save + 'half_residuals.pdf', bbox_inches='tight')

		#plt.close()
		#plt.close()				










	if residuals3 == 'yes':

		# Nominal dataset
		#f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')
		f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_full_season_20170325.hdf5')

		t = t[0:70,:]
		w = w[0:70,:]
		d = d[0:70,:]				


		# Computing residuals for averages
		fo, ro, wo, rms, rms110 = eg.data_analysis_residuals_array(f, t, w, flow=90, fhigh=190, model_type='EDGES_polynomial', fnorm=140, nfg=5, binning='yes', nsamples=64, rfi_flagging='yes')


		# Plot of residuals
		o = eg.plot_spectra_residuals(fo, ro, wo, 'season', d[:,1], K=0.5, flow_lim=85, fhigh_lim=210, xticks_low=90, xticks_high=190, xticks_delta=20, rms_text_freq=195, fontsize=10, size_x_column=7, size_y=11, NSC=40, y_label=' ' + 'day of year [500 mK per division]', plot_name='daily_residuals')



















	if constraints_gaussian == 'yes':

		# Loading limits from data (files produced using "eg.data_analysis_cube_to_limits")
		Tr1, zr, dz, sm1, p1, dp1, lim1 = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_gaussian_nominal_m0.025.hdf5')
		Tr2, zr, dz, sm2, p2, dp2, lim2 = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_gaussian_nominal_m0.05.hdf5')
		Tr3, zr, dz, sm3, p3, dp3, lim3 = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_gaussian_nominal_m0.1.hdf5')
		Tr4, zr, dz, sm4, p4, dp4, lim4 = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_gaussian_nominal_m0.2.hdf5')

		Tr5, zr, dz, sm5, p5, dp5, lim5 = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_gaussian_minus6_m0.1.hdf5')
		Tr6, zr, dz, sm6, p6, dp6, lim6 = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_gaussian_plus6_m0.1.hdf5')
		#Tr6, zr, dz, sm1, p6, dp6, lim6 = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_gaussian_plus6_m0.05.hdf5')


		# Limits at z=6 for symmetrical Gaussian
		Tlim = -0.005
		f_z6 = eg.redshift2frequency(np.array([6, 14]))
		T21_list = [-0.025, -0.05, -0.1, -0.2]
		dz_lim_z6 = np.zeros((6,2))
		dz_hires = np.arange(0.1,13,0.01)

		for k in range(4):
			for j in range(2):
				if j == 0:
					jj = 0
				elif j == 1:
					jj = -1				

				for i in range(len(dz_hires)-1):

					T1, x1, x2 = eg.model_eor(f_z6, T21=T21_list[k], model_type='gaussian_redshift', zr=zr[jj], dz=dz_hires[i])
					T2, x1, x2 = eg.model_eor(f_z6, T21=T21_list[k], model_type='gaussian_redshift', zr=zr[jj], dz=dz_hires[i+1])
					print(T1[0])
					if (T1[0] >= Tlim) and (T2[0] < Tlim):
						dz_lim_z6[k,j] = dz_hires[i+1]

		#print(dz_lim_z6)





		# Limits at z=6 for Asymmetrical Gaussian
		alpha=[-6,6]
		for k in range(2):
			for j in range(2):
				if j == 0:
					jj = 0
				elif j == 1:
					jj = -1				

				for i in range(len(dz_hires)-1):

					T1, x1, x2 = eg.model_eor(f_z6, T21=-0.1, model_type='gaussian_redshift', zr=zr[jj], dz=dz_hires[i], z_alpha=alpha[k]) # dz_hires[i] zr[jj] alpha[k]
					T2, x1, x2 = eg.model_eor(f_z6, T21=-0.1, model_type='gaussian_redshift', zr=zr[jj], dz=dz_hires[i+1], z_alpha=alpha[k])
					if (T1[0] >= Tlim) and (T2[0] < Tlim):
						dz_lim_z6[k+4,j] = dz_hires[i+1]

		# Limit of dz at zr=14.8 for z_alpha=6
		dz_lim_z6[-1,-1] = 18.5
		#print(dz_lim_z6)















		# Correction of end points in symmetrical Gaussian
		lim1[-26:-1] = -1
		lim3[0:2] = lim3[4]
		lim4[0:2] = lim4[4]
		lim4[-1]  = lim4[-2]		



		# Figure
		plt.close()
		plt.close()

		size_x = 10
		size_y = 4.5
		x0     = 0.18
		y0     = 0.12
		dx     = 0.48
		dy     = 0.88
		x00    = 0.1

		f1     = plt.figure(num=1, figsize=(size_x, size_y))

		ax1    = f1.add_axes([1*x0, 1*y0, dx, dy])
		plt.text(14.65, 10.2, '(a)', fontsize=18)

		ax2    = f1.add_axes([1*x0 + 1*x00 + 1*dx, 1*y0, dx, dy])
		plt.text(14.65, 10.2, '(b)', fontsize=18)




		# Panel (a)
		ax1.plot(zr, lim4, 'm', linewidth=2)
		ax1.plot(zr, lim3, 'k', linewidth=2)
		ax1.plot(zr, lim2, 'y', linewidth=2)
		ax1.plot(zr, lim1, 'g', linewidth=2)

		ax1.plot([zr[0], zr[-1]], [dz_lim_z6[3,0], dz_lim_z6[3,-1]], 'm')
		ax1.plot([zr[0], zr[-1]], [dz_lim_z6[2,0], dz_lim_z6[2,-1]], 'k')
		ax1.plot([zr[0], zr[-1]], [dz_lim_z6[1,0], dz_lim_z6[1,-1]], 'y')
		ax1.plot([zr[0], zr[-1]], [dz_lim_z6[0,0], dz_lim_z6[0,-1]], 'g')


		ax1.set_xlim([np.max(zr), np.min(zr)])
		ax1.set_ylim([0, 11])
		ax1.set_yticks(np.arange(0, 11, 2))
		ax1.set_xticks(np.arange(14,6,-1))
		ax1.grid()

		ax1.set_xlabel(r'$z_r$',      fontsize=15)
		ax1.set_ylabel(r'$\Delta z$', fontsize=15)
		ax1.legend(['200 mK','100 mK','50 mK','25 mK'], loc=0, ncol=1, fontsize=10)

		ax12 = ax1.twiny()
		ax12.set_xlabel('frequency [MHz]', fontsize=12)
		z0 = eg.frequency2redshift(90)
		ax12.set_xticks(np.array((np.abs(eg.frequency2redshift(90)-z0), np.abs(eg.frequency2redshift(110)-z0), np.abs(eg.frequency2redshift(130)-z0), np.abs(eg.frequency2redshift(150)-z0), np.abs(eg.frequency2redshift(170)-z0), np.abs(eg.frequency2redshift(190)-z0))))
		ax12.set_xticklabels(['90', '110', '130', '150', '170', '190'])




		# Panel (b)
		ax2.plot(zr[-140:-1], lim5[-140:-1], 'r', linewidth=2)
		ax2.plot(zr[0:47], lim6[0:47], 'b', linewidth=2)
		ax2.plot(zr, lim3, 'k', linewidth=2)

		ax2.plot([zr[0], zr[-1]], [dz_lim_z6[4,0], dz_lim_z6[4,-1]], 'r')
		ax2.plot([zr[0], zr[-1]], [dz_lim_z6[5,0], dz_lim_z6[5,-1]], 'b')
		ax2.plot([zr[0], zr[-1]], [dz_lim_z6[2,0], dz_lim_z6[2,-1]], 'k')

		ax2.plot([10.62, 6.5], [8, 8], 'r--', linewidth=2)
		ax2.plot([14.8, 7.8], [8.05, 8.05], 'b--', linewidth=2)

		ax2.set_xlim([np.max(zr), np.min(zr)])
		ax2.set_ylim([0, 11])
		ax2.set_yticks(np.arange(0, 11, 2))
		ax2.set_xticks(np.arange(14,6,-1))
		ax2.grid()

		ax2.set_xlabel(r'$z_r$',      fontsize=15)
		ax2.set_ylabel(r'$\Delta z$', fontsize=15)
		ax2.legend([r'100 mK, $\phi=-6$', r'100 mK, $\phi=+6$', r'100 mK, $\phi=0$'], loc=0, ncol=1, fontsize=10)

		ax22 = ax2.twiny()
		ax22.set_xlabel('frequency [MHz]', fontsize=12)
		z0 = eg.frequency2redshift(90)
		ax22.set_xticks(np.array((np.abs(eg.frequency2redshift(90)-z0), np.abs(eg.frequency2redshift(110)-z0), np.abs(eg.frequency2redshift(130)-z0), np.abs(eg.frequency2redshift(150)-z0), np.abs(eg.frequency2redshift(170)-z0), np.abs(eg.frequency2redshift(190)-z0))))
		ax22.set_xticklabels(['90', '110', '130', '150', '170', '190'])





		#
		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170506/'
		plt.savefig(path_plot_save + 'constraints_gaussian.pdf', bbox_inches='tight')
		plt.close()
		plt.close()








	if constraints_tanh == 'yes':

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_tanh_nominal_p0.028.hdf5')

		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), 'constraints_tanh', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))




	if constraints_tanh_injected == 'yes':

		# This is included here just for completeness		
		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr7_dz0.2_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr7_dz0.2_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr7_dz0.4_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr7_dz0.4_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr7_dz0.6_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr7_dz0.6_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))



		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr8_dz0.2_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr8_dz0.2_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))		

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr8_dz0.4_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr8_dz0.4_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))	

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr8_dz0.6_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr8_dz0.6_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr8_dz0.8_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr8_dz0.8_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr8_dz1.0_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr8_dz1.0_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))



		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr9_dz0.2_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr9_dz0.2_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))		

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr9_dz0.4_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr9_dz0.4_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))	

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr9_dz0.6_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr9_dz0.6_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr9_dz0.8_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr9_dz0.8_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr9_dz1.0_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr9_dz1.0_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))



		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr10_dz0.2_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr10_dz0.2_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr10_dz0.4_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr10_dz0.4_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr10_dz0.6_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr10_dz0.6_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))




		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr11_dz0.2_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr11_dz0.2_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr11_dz0.4_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr11_dz0.4_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr11_dz0.6_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr11_dz0.6_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))




		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr12_dz0.2_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr12_dz0.2_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))		




		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr13_dz0.2_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr13_dz0.2_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))

		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr13_dz0.4_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr13_dz0.4_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))



		Tr, zr, dz, sm, p, dp, lim1s, lim2s = eg.read_least_squares_limits('high_band', 'injection_tests_tanh/limits', 'limits_rejection_results_tanh_injected_zr14_dz0.2_p0.028.hdf5')		
		o = eg.plot_least_squares_map_limits(np.flipud(np.fliplr(sm.T)), np.flipud(np.fliplr(dp.T)), '/injection_tests_tanh/constraints_tanh_injected_zr14_dz0.2_p0.028', extent=[zr[-1], zr[0], 0, 1.4], ylim=[0,1.4], yticks=np.arange(0,1.4,0.2), text_coordinates=[14.7, 1.25], sigma_cbarticks=np.arange(0,21,4))






	if combined_EoR_constraints == 'yes':

		#SPT     = 2.64 # Liu 2013
		SPT2015 = 3 #1.81
		SPT_best_fit = 1.3
		Planck_best_fit = 8.5
		Planck_1sigma_high = 1
		Planck_1sigma_low  = 1.1	
		EDGES_2010 = 0.1


		dd = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/model_rejection/rejection_limits/tanh_EoR_limits_20170520.txt')
		#dd = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_tanh_nominal_p0.028.hdf5')


		z = dd[:,0]
		EDGES_2017_1sigma = dd[:,1]
		EDGES_2017_2sigma = dd[:,2]




		# Constraints# Figure
		plt.close()
		plt.close()

		size_x = 11
		size_y = 7
		x0     = 0.18
		y0     = 0.12
		dx     = 0.9
		dy     = 0.9

		f1     = plt.figure(num=1, figsize=(size_x, size_y))
		ax     = f1.add_axes([1*x0, 1*y0, dx, dy])



		ax.fill([6, 6, 8, 6], [0, 4, 4, 0], fill=True, color='green')   # Gunn-Peterson
		ax.tick_params(axis='x', direction='out')
		ax.tick_params(axis='y', direction='out')
		ax.fill([11, 6, 6, 11], [SPT2015, SPT2015, 4, 4], fill=True, color='red', alpha=0.6)
		#ax.fill([11, 6, 6, 11], [SPT, SPT, 4, 4], fill=True, color='red', alpha=0.6)
		ax.fill([11, Planck_best_fit + Planck_1sigma_high, Planck_best_fit + Planck_1sigma_high, 11], [0, 0, 4, 4], fill=False, color='black', hatch='///', zorder=6) # edgecolor='black', linewidth=2, 
		ax.fill([Planck_best_fit - Planck_1sigma_low, 6, 6, Planck_best_fit - Planck_1sigma_low], [0, 0, 4, 4], fill=False, hatch='///', zorder=6)
		ax.plot([Planck_best_fit, Planck_best_fit],[0, 4], 'k--', linewidth=2, zorder=6)
		ax.plot([11, 6], [SPT_best_fit, SPT_best_fit], 'k--', linewidth=2, zorder=6)
		ax.fill_between(z, EDGES_2017_1sigma, where=EDGES_2017_1sigma>=np.zeros(len(z)), interpolate=False, step='mid', color=[0,0,0.5], zorder=4)
		ax.fill_between(z, EDGES_2017_2sigma, where=EDGES_2017_2sigma>=np.zeros(len(z)), interpolate=False, step='mid', color='blue', zorder=5)
		#ax.step(z, EDGES_2017_2sigma, color=[0.1,0.1,1], linewidth=2, where='mid', zorder=4)
		ax.fill([11, 6, 6, 11], [0, 0, EDGES_2010, EDGES_2010], fill=True, color=[0.25, 0.25, 0.25], zorder=5)


		# Greig & Mesinger 2017
		ax.plot(8.14, (9.21-7.26),  'd', markeredgecolor='k',    markerfacecolor='y', mew=0.5, markersize=12)    # [0.5, 0.5, 0.5]
		ax.plot(7.89, (8.89-7.07), 'xk', markerfacecolor='none', markersize=8, mew=2)
		ax.plot(8.13, (9.21-7.32), 'xk', markerfacecolor='none', markersize=8, mew=2)
		ax.plot(7.76, (8.70-6.94), 'xk', markerfacecolor='none', markersize=8, mew=2)
		ax.plot(8.01, (9.02-7.20), 'xk', markerfacecolor='none', markersize=8, mew=2)	
		ax.plot(7.57, (8.52-6.82), 'xk', markerfacecolor='none', markersize=8, mew=2)	

		# Robertson et al. 2015
		ax.plot(7.4, (8.65-6.7), 'd', markeredgecolor='k', markerfacecolor='m', mew=0.5, markersize=12, zorder=6)

		# Mitra et al. 2015
		ax.plot(8.9, (10-8.4), 'd', markeredgecolor='k', markerfacecolor='c', mew=0.5, markersize=12, zorder=6)





		# Text and arrows
		#plt.text(6.75, 2.3,    r'GP, Ly$\alpha$, GRB', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(7.075, 2.55,   r'Spectra of high-z' + '\n' + 'quasars, galaxies, and'+'\n'+'gamma ray bursts', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(9.14, 3.2,    r'SPT $1\sigma$'+'\n'+'(2015)', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(9.45, 1.35,   r'SPT (2015)', backgroundcolor='white', fontsize=11.5, zorder=5)
		plt.text(9.45, 1.17,   r'$\Delta z=1.3$', backgroundcolor='white', fontsize=14, zorder=5) 
		plt.text(7.2, 0.9,     r'Planck $1\sigma$'+'\n'+'(2016)', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(10.08, 0.9,   r'Planck $1\sigma$'+'\n'+'(2016)', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(8.87, 2.48,    r'$z_r=8.5$', fontsize=14)
		plt.text(8.8, 2.64,    'Planck' +'\n'+ '(2016)', fontsize=11.5, zorder=6)
		plt.text(8.32, 2.07,    'Greig &' + '\n' + 'Mesinger' +'\n'+ '(2017)', fontsize=11.5, zorder=6)
		plt.text(7.68, 2.1,    'Robertson+' + '\n' + '(2015)', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(9.04, 1.72,   'Mitra+' + '\n' + '(2015)', backgroundcolor='white', fontsize=11.5, zorder=5)
		plt.text(10.94, 0.745, 'EDGES $1\sigma$'+'\n'+'(2010)', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.arrow(10.75, 0.67, 0.0, -0.45, fc=[0.5, 0.5, 0.5], ec=[0.5, 0.5, 0.5], head_width=0.1, head_length=0.1, linewidth=4, zorder=6)
		plt.text(8.3, 0.45,    'EDGES'+'\n'+'(2017)', backgroundcolor='white', fontsize=11.5, zorder=6)

		font = FontProperties()
		font.set_weight('bold')
		font.set_size('x-large')
		t = plt.text(8.3, 1.01,  '$1\sigma$', color='w', fontsize=20, zorder=6)  # backgroundcolor='r'
		t.set_bbox(dict(alpha=0))
		t = plt.text(8.3, 0.8,   '$2\sigma$', color='w', fontsize=20, zorder=6)
		t.set_bbox(dict(alpha=0))




		plt.xlim([11, 6])
		plt.ylim([0, 4])
		plt.xlabel('$z_r$', fontsize=20)
		plt.ylabel('$\Delta z$', fontsize=20)

		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170506/combined_EoR_constraints.png', bbox_inches='tight')
		plt.close()














	if combined_EoR_constraints_NO_EDGES == 'yes':

		#SPT     = 2.64 # Liu 2013
		SPT2015 = 3 #1.81
		SPT_best_fit = 1.3
		Planck_best_fit = 8.5
		Planck_1sigma_high = 1
		Planck_1sigma_low  = 1.1	
		EDGES_2010 = 0.1


		dd = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/model_rejection/rejection_limits/tanh_EoR_limits_20170520.txt')
		#dd = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_tanh_nominal_p0.028.hdf5')


		z = dd[:,0]
		EDGES_2017_1sigma = dd[:,1]
		EDGES_2017_2sigma = dd[:,2]




		# Constraints# Figure
		plt.close()
		plt.close()

		size_x = 11
		size_y = 7
		x0     = 0.18
		y0     = 0.12
		dx     = 0.9
		dy     = 0.9

		f1     = plt.figure(num=1, figsize=(size_x, size_y))
		ax     = f1.add_axes([1*x0, 1*y0, dx, dy])



		ax.fill([6, 6, 8, 6], [0, 4, 4, 0], fill=True, color='green')   # Gunn-Peterson
		ax.tick_params(axis='x', direction='out')
		ax.tick_params(axis='y', direction='out')
		ax.fill([11, 6, 6, 11], [SPT2015, SPT2015, 4, 4], fill=True, color='red', alpha=0.6)
		#ax.fill([11, 6, 6, 11], [SPT, SPT, 4, 4], fill=True, color='red', alpha=0.6)
		ax.fill([11, Planck_best_fit + Planck_1sigma_high, Planck_best_fit + Planck_1sigma_high, 11], [0, 0, 4, 4], fill=False, color='black', hatch='///', zorder=6) # edgecolor='black', linewidth=2, 
		ax.fill([Planck_best_fit - Planck_1sigma_low, 6, 6, Planck_best_fit - Planck_1sigma_low], [0, 0, 4, 4], fill=False, hatch='///', zorder=6)
		ax.plot([Planck_best_fit, Planck_best_fit],[0, 4], 'k--', linewidth=2, zorder=6)
		ax.plot([11, 6], [SPT_best_fit, SPT_best_fit], 'k--', linewidth=2, zorder=6)
		#ax.fill_between(z, EDGES_2017_1sigma, where=EDGES_2017_1sigma>=np.zeros(len(z)), interpolate=False, step='mid', color=[0,0,0.5], zorder=4)
		#ax.fill_between(z, EDGES_2017_2sigma, where=EDGES_2017_2sigma>=np.zeros(len(z)), interpolate=False, step='mid', color='blue', zorder=5)
		#ax.step(z, EDGES_2017_2sigma, color=[0.1,0.1,1], linewidth=2, where='mid', zorder=4)
		ax.fill([11, 6, 6, 11], [0, 0, EDGES_2010, EDGES_2010], fill=True, color=[0.25, 0.25, 0.25], zorder=5)


		# Greig & Mesinger 2017
		ax.plot(8.14, (9.21-7.26),  'd', markeredgecolor='k',    markerfacecolor='y', mew=0.5, markersize=12)    # [0.5, 0.5, 0.5]
		ax.plot(7.89, (8.89-7.07), 'xk', markerfacecolor='none', markersize=8, mew=2)
		ax.plot(8.13, (9.21-7.32), 'xk', markerfacecolor='none', markersize=8, mew=2)
		ax.plot(7.76, (8.70-6.94), 'xk', markerfacecolor='none', markersize=8, mew=2)
		ax.plot(8.01, (9.02-7.20), 'xk', markerfacecolor='none', markersize=8, mew=2)	
		ax.plot(7.57, (8.52-6.82), 'xk', markerfacecolor='none', markersize=8, mew=2)	

		# Robertson et al. 2015
		ax.plot(7.4, (8.65-6.7), 'd', markeredgecolor='k', markerfacecolor='m', mew=0.5, markersize=12, zorder=6)

		# Mitra et al. 2015
		ax.plot(8.9, (10-8.4), 'd', markeredgecolor='k', markerfacecolor='c', mew=0.5, markersize=12, zorder=6)

		# Text and arrows
		#plt.text(6.75, 2.3,    r'GP, Ly$\alpha$, GRB', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(7.075, 2.55,   r'Spectra of high-z' + '\n' + 'quasars, galaxies, and'+'\n'+'gamma ray bursts', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(9.14, 3.2,    r'SPT $1\sigma$'+'\n'+'(2015)', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(9.45, 1.35,   r'SPT (2015)', backgroundcolor='white', fontsize=11.5, zorder=5)
		plt.text(9.45, 1.17,   r'$\Delta z=1.3$', backgroundcolor='white', fontsize=14, zorder=5) 
		plt.text(7.2, 0.9,     r'Planck $1\sigma$'+'\n'+'(2016)', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(10.08, 0.9,   r'Planck $1\sigma$'+'\n'+'(2016)', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(8.87, 2.48,    r'$z_r=8.5$', fontsize=14)
		plt.text(8.8, 2.64,    'Planck' +'\n'+ '(2016)', fontsize=11.5, zorder=6)
		plt.text(8.32, 2.07,    'Greig &' + '\n' + 'Mesinger' +'\n'+ '(2017)', fontsize=11.5, zorder=6)
		plt.text(7.68, 2.1,    'Robertson+' + '\n' + '(2015)', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.text(9.04, 1.72,   'Mitra+' + '\n' + '(2015)', backgroundcolor='white', fontsize=11.5, zorder=5)
		plt.text(10.94, 0.745, 'EDGES $1\sigma$'+'\n'+'(2010)', backgroundcolor='white', fontsize=11.5, zorder=6)
		plt.arrow(10.75, 0.67, 0.0, -0.45, fc=[0.5, 0.5, 0.5], ec=[0.5, 0.5, 0.5], head_width=0.1, head_length=0.1, linewidth=4, zorder=6)
		#plt.text(8.3, 0.45,    'EDGES'+'\n'+'(2017)', backgroundcolor='white', fontsize=11.5, zorder=6)

		font = FontProperties()
		font.set_weight('bold')
		font.set_size('x-large')
		t = plt.text(8.3, 1.01,  '$1\sigma$', color='w', fontsize=20, zorder=6)  # backgroundcolor='r'
		t.set_bbox(dict(alpha=0))
		t = plt.text(8.3, 0.8,   '$2\sigma$', color='w', fontsize=20, zorder=6)
		t.set_bbox(dict(alpha=0))


		plt.xlim([11, 6])
		plt.ylim([0, 4])
		plt.xlabel('$z_r$', fontsize=20)
		plt.ylabel('$\Delta z$', fontsize=20)

		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170714/combined_EoR_constraints_NO_EDGES.png', bbox_inches='tight')
		plt.close()














	if constraints_cold_EoR == 'yes':


		fb, xi_all, model_all, te_all, z0_all, dz_all, zC_all, TC_all, p21_all, dp21_all = eg.read_cold_EoR_least_squares('results_cold_EoR_all_models_20170427.hdf5')

		# All values of Tau
		te_min = 0.0
		te_max = 1

		xi    = xi_all[(te_all >= te_min) & (te_all <= te_max),:]
		model = model_all[(te_all >= te_min) & (te_all <= te_max),:]
		te    = te_all[(te_all >= te_min) & (te_all <= te_max)]
		z0    = z0_all[(te_all >= te_min) & (te_all <= te_max)]
		dz    = dz_all[(te_all >= te_min) & (te_all <= te_max)]
		zC    = zC_all[(te_all >= te_min) & (te_all <= te_max)]
		TC    = TC_all[(te_all >= te_min) & (te_all <= te_max)]
		p21   = p21_all[(te_all >= te_min) & (te_all <= te_max)]
		dp21  = dp21_all[(te_all >= te_min) & (te_all <= te_max)]		





		# Applying rejection conditions
		rs     = (1-p21)/dp21
		index  = np.arange(len(z0))
		index2 = index[(np.abs(p21)<=(1/2)) & (rs>=1)]# & (np.abs(p21) <= 2*dp21)]# & ((p21+1) > 2*dp21)]











		#Plot		
		plt.close()
		plt.close()

		size_x = 5.5
		size_y = 4.0
		x0     = 0.1
		y0     = 0.1
		dx     = 0.76
		dy     = 0.8




		# Custom colormap
		cmap        = plt.cm.jet
		cmaplist    = [cmap(i) for i in range(cmap.N)]
		cmaplist2   = np.power(cmaplist,1)  # 30*[(1,1,1,1.0)]
		cmap        = cmap.from_list('Custom cmap', cmaplist2, cmap.N)		
		#bounds      = np.arange(0,11,1)      # Boundary of significance levels
		#norm        = colors.BoundaryNorm(boundaries=bounds, ncolors=cmap.N)


		f1  = plt.figure(num=1, figsize=(size_x, size_y))
		ax1 = f1.add_axes([x0, y0, dx, dy])
		gradient = np.linspace(0, 1, 256)
		im  = ax1.scatter(z0[index2], dz[index2], c=10*np.log10(rs[index2]), s=10, marker='s', edgecolors='none', cmap=cmap, vmin=10*np.log10(1), vmax=10*np.log10(100))  # , vmin=0, vmax=60

		zzr = np.arange(6, 14.8, 0.1)
		ddz = 2*(zzr-6)		
		ax1.plot(zzr, ddz, 'y', linewidth=2)
		ax1.plot([6.0, 14], [0.0, 3.5], 'r', linewidth=2)

		ax1.set_xticks(np.arange(6,14.1,1))
		ax1.set_xlim([14.0, 6.0])
		ax1.set_ylim([0, 4])
		ax1.grid()
		ax1.set_xlabel(r'$z_r$', fontsize=20)
		ax1.set_ylabel(r'$\Delta z$', fontsize=20)
		plt.text(13.5, 0.57, r'$\tau_e$', color='k', fontsize=20, fontweight='bold')


		# Colorbar
		cax1 = f1.add_axes([1.3*x0+dx, y0+0.05, 0.02, 0.87*dy])
		cbar = plt.colorbar(im, cax=cax1, ticks=10*np.log10(np.array([1,2,4,6,8,10,20,40,60,80,100])))
		cbar.ax.set_yticklabels([1,2,4,6,8,10,20,40,60,80,100], fontsize=10)
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=12)



		# Tau_e scale

		# model the duration as a function of tau_e
		par = np.polyfit(te_all[dz_all<0.2], z0_all[dz_all<0.2], 3)

		y13  = np.polyval(par, 0.130)
		y12  = np.polyval(par, 0.120)
		y11  = np.polyval(par, 0.110)
		y10  = np.polyval(par, 0.100)
		y9   = np.polyval(par, 0.090)
		y8   = np.polyval(par, 0.080)
		y7   = np.polyval(par, 0.070)
		y6   = np.polyval(par, 0.060)
		y5   = np.polyval(par, 0.050)
		y4   = np.polyval(par, 0.040)
		y3   = np.polyval(par, 0.030)


		kk  = 0.23
		kk2 = 0.08
		color_line='k'
		ax1.plot([y13, y3], [kk, kk], color=color_line, linewidth=2)
		ax1.plot([y12, y12], [kk-0.04, kk+0.04], color=color_line, linewidth=2)
		ax1.plot([y11, y11], [kk-0.04, kk+0.04], color=color_line, linewidth=2)
		ax1.plot([y10, y10], [kk-0.04, kk+0.04], color=color_line, linewidth=2)
		ax1.plot([y9, y9], [kk-0.04, kk+0.04], color=color_line, linewidth=2)
		ax1.plot([y8, y8], [kk-0.04, kk+0.04], color=color_line, linewidth=2)
		ax1.plot([y7, y7], [kk-0.04, kk+0.04], color=color_line, linewidth=2)
		ax1.plot([y6, y6], [kk-0.04, kk+0.04], color=color_line, linewidth=2)
		ax1.plot([y5, y5], [kk-0.04, kk+0.04], color=color_line, linewidth=2)
		ax1.plot([y4, y4], [kk-0.04, kk+0.04], color=color_line, linewidth=2)

		color_text='k'#[0.9, 0.9, 0.9]
		fs = 9
		ax1.text(y12+0.25, kk+kk2, '0.12', color=color_text, fontsize=fs)
		ax1.text(y11+0.25, kk+kk2, '0.11', color=color_text, fontsize=fs)
		ax1.text(y10+0.25, kk+kk2, '0.10', color=color_text, fontsize=fs)
		ax1.text(y9+0.25, kk+kk2, '0.09', color=color_text, fontsize=fs)
		ax1.text(y8+0.25, kk+kk2, '0.08', color=color_text, fontsize=fs)
		ax1.text(y7+0.25, kk+kk2, '0.07', color=color_text, fontsize=fs)
		ax1.text(y6+0.25, kk+kk2, '0.06', color=color_text, fontsize=fs)
		ax1.text(y5+0.25, kk+kk2, '0.05', color=color_text, fontsize=fs)
		ax1.text(y4+0.45, kk+kk2, '0.04', color=color_text, fontsize=fs)






		ax12 = ax1.twiny()
		ax12.set_xlabel('frequency [MHz]', fontsize=12)
		ax12.set_xticks(np.array((np.abs(eg.frequency2redshift(100)-14), np.abs(eg.frequency2redshift(120)-14), np.abs(eg.frequency2redshift(140)-14), np.abs(eg.frequency2redshift(160)-14), np.abs(eg.frequency2redshift(180)-14), np.abs(eg.frequency2redshift(203)-14))))
		ax12.set_xticklabels(['100', '120', '140', '160', '180', ''])


		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170506/constraints_cold_EoR.pdf', bbox_inches='tight')
		plt.close()





		##Plot		
		#plt.close()
		#plt.close()



		#size_x = 6.5
		#size_y = 4.5
		#x0     = 0.1
		#y0     = 0.1
		#dx     = 0.76
		#dy     = 0.8


		#f1  = plt.figure(num=1, figsize=(size_x, size_y))
		#ax1 = f1.add_axes([x0, y0, dx, dy])	
		#im = ax1.scatter(z0[index2], dz[index2], c=te[index2], s=20, marker='s', edgecolors='none', cmap=plt.cm.jet, vmin=0.04, vmax=0.13)  # 10*np.log10(rs[index2])
		#ax1.set_xticks(np.arange(6,15,1))
		#ax1.set_xlim([15.0, 6.0])
		#ax1.set_ylim([0, 3.5])
		#ax1.grid()
		#ax1.set_xlabel(r'$z_r$', fontsize=20)
		#ax1.set_ylabel(r'$\Delta z$', fontsize=20)



		## Colorbar
		#cax1 = f1.add_axes([1.3*x0+dx, y0+0.05, 0.02, 0.87*dy])
		#cbar = plt.colorbar(im, cax=cax1)  #, ticks=10*np.log10(np.array([1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100])))  #, 
		##cbar.ax.set_yticklabels([1,2,3,4,5,6,7,8,9])   # Tick labels on colorbar
		#cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=12)  # Ylabel





		#f1  = plt.figure(num=2, figsize=(size_x, size_y))
		#ax1 = f1.add_axes([x0, y0, dx, dy])	
		#im = ax1.scatter(z0[index2], dz[index2], c=p21[index2], s=20, marker='s', edgecolors='none', cmap=plt.cm.jet, vmin=-0.3, vmax=0.3)  # 10*np.log10(rs[index2])
		#ax1.set_xticks(np.arange(6,15,1))
		#ax1.set_xlim([15.0, 6.0])
		#ax1.set_ylim([0, 3.5])
		#ax1.grid()
		#ax1.set_xlabel(r'$z_r$', fontsize=20)
		#ax1.set_ylabel(r'$\Delta z$', fontsize=20)



		## Colorbar
		#cax1 = f1.add_axes([1.3*x0+dx, y0+0.05, 0.02, 0.87*dy])
		#cbar = plt.colorbar(im, cax=cax1)  #, ticks=10*np.log10(np.array([1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100])))  #, 
		##cbar.ax.set_yticklabels([1,2,3,4,5,6,7,8,9])   # Tick labels on colorbar
		#cbar.ax.set_ylabel(r'(1-|p21|)/|p21|', fontsize=12)  # Ylabel		









		#f1  = plt.figure(num=3, figsize=(size_x, size_y))
		#ax1 = f1.add_axes([x0, y0, dx, dy])	
		#im = ax1.scatter(z0[index2], dz[index2], c=dp21[index2], s=20, marker='s', edgecolors='none', cmap=plt.cm.jet, vmin=0, vmax=1)  # 10*np.log10(rs[index2])
		#ax1.set_xticks(np.arange(6,15,1))
		#ax1.set_xlim([15.0, 6.0])
		#ax1.set_ylim([0, 3.5])
		#ax1.grid()
		#ax1.set_xlabel(r'$z_r$', fontsize=20)
		#ax1.set_ylabel(r'$\Delta z$', fontsize=20)



		## Colorbar
		#cax1 = f1.add_axes([1.3*x0+dx, y0+0.05, 0.02, 0.87*dy])
		#cbar = plt.colorbar(im, cax=cax1)  #, ticks=10*np.log10(np.array([1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100])))  #, 
		##cbar.ax.set_yticklabels([1,2,3,4,5,6,7,8,9])   # Tick labels on colorbar
		#cbar.ax.set_ylabel(r'dp21', fontsize=12)  # Ylabel	





	if EoR_duration_Planck=='yes':
		d1 = np.genfromtxt(home_folder + '/DATA/EDGES/others/EoR_duration_from_Planck/posterior_Dz_sym.txt')
		d2 = np.genfromtxt(home_folder + '/DATA/EDGES/others/EoR_duration_from_Planck/posterior_Dz_asym.txt')
		d3 = np.genfromtxt(home_folder + '/DATA/EDGES/others/EoR_duration_from_Planck/posterior_Dz_sym_Aksz.txt')


		plt.close()
		plt.close()
		plt.figure(1)

		plt.subplot(1,3,1)
		plt.plot(d1[:,0], d1[:,1], '.-')
		plt.plot(d1[:,0], d1[:,2], '.-')

		plt.subplot(1,3,2)
		plt.plot(d2[:,0], d2[:,1], '.-')
		plt.plot(d2[:,0], d2[:,2], '.-')		

		plt.subplot(1,3,3)
		plt.plot(d3[:,0], d3[:,1], '.-')
		plt.plot(d3[:,0], d3[:,2], '.-')		



	if EoR_duration_SPT == 'yes':
		d = np.genfromtxt(home_folder + '/DATA/EDGES/others/EoR_duration_from_SPT/EoR_duration_SPT.txt')

		plt.close()
		plt.close()
		plt.figure(1)

		dz = np.arange(0,10,0.01)

		f1 = sci.interp1d(d[:,0], d[:,1], kind='cubic')
		f2 = sci.interp1d(d[:,0], d[:,2], kind='cubic')

		d1 = f1(dz)
		d2 = f2(dz)

		d1 = d1/np.max(d1)
		d2 = d2/np.max(d2)


		plt.plot(d[:,0], d[:,1], 'b.')
		plt.plot(dz, d1, 'b')

		plt.plot(d[:,0], d[:,2], 'r.')
		plt.plot(dz, d2, 'r')



		a1 = 0.01*np.sum(d1)
		a2 = 0.01*np.sum(d2)

		for i in range(len(dz)):
			ax1_i   = 0.01*np.sum(d1[0:i]) / a1
			ax1_ip1 = 0.01*np.sum(d1[0:(i+1)]) / a1

			ax2_i   = 0.01*np.sum(d2[0:i]) / a2
			ax2_ip1 = 0.01*np.sum(d2[0:(i+1)]) / a2

			#print(ax1_i)
			if (ax1_i <= 0.95) and (ax1_ip1 > 0.95):
				print('CASE1 95%, : ' + str(dz[i+1]))

			if (ax1_i <= 0.68) and (ax1_ip1 > 0.68):
				print('CASE1 68%, : ' + str(dz[i+1]))


			if (ax2_i <= 0.95) and (ax2_ip1 > 0.95):
				print('CASE2 95%, : ' + str(dz[i+1]))	

			if (ax2_i <= 0.68) and (ax2_ip1 > 0.68):
				print('CASE2 68%, : ' + str(dz[i+1]))			




	return 0 #z0, dz, te #vlr, limit5, limit6   #0 #limit1, limit2, limit3, limit4   #0 #fbb, r0, wb
























def plots_comparison_low_band_antenna_S11():

	path_data    = home_folder + '/DATA/EDGES/s11/low_band/corrected/'
	path_data_hb = home_folder + '/DATA/EDGES/s11/high_band/corrected/'


	d1 = np.genfromtxt(path_data + '2015_289_21_27/average_2015_289_21_27.txt')
	d2 = np.genfromtxt(path_data + '2015_342_03_14/average_2015_342_03_14.txt')
	d3 = np.genfromtxt(path_data + '2016_175_00/average_2016_175_00.txt')
	d4 = np.genfromtxt(path_data + '2016_177_00/average_2016_177_00.txt')

	d5 = np.genfromtxt(path_data_hb + '2015_262_19_14/average_2015_262_19_14.txt')

	# Data arrays
	f    = d1[0:51,0]/1e6  # 50-100 MHz
	fn   = (f-75)/25

	rs11_1 = d1[0:51,1]
	is11_1 = d1[0:51,2]			

	rs11_2 = d2[0:51,1]
	is11_2 = d2[0:51,2]

	rs11_3 = d3[0:51,1]
	is11_3 = d3[0:51,2]	

	rs11_4 = d4[0:51,1]
	is11_4 = d4[0:51,2]	

	rs11_hb = d5[50::,1]
	is11_hb = d5[50::,2]	
	f_hb    = d5[50::,0]/1e6  # 50-100 MHz


	rs11 = np.mean([rs11_1, rs11_2], axis=0)
	is11 = np.mean([is11_1, is11_2], axis=0)


	s11_1 = rs11_1 + 1j*is11_1
	s11_2 = rs11_2 + 1j*is11_2
	s11_3 = rs11_3 + 1j*is11_3
	s11_4 = rs11_4 + 1j*is11_4

	s11_hb = rs11_hb + 1j*is11_hb

	s11   = rs11 + 1j*is11


	plt.figure(1)
	plt.subplot(2,1,1)
	plt.plot(f, 20*np.log10(np.abs(s11_1)), 'r', linewidth=2)
	plt.ylim([-20, 0])
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.text(70, -5, 'Low-Band',fontsize=20)


	plt.subplot(2,1,2)
	plt.plot(f_hb, 20*np.log10(np.abs(s11_hb)), 'b', linewidth=2)
	plt.ylim([-20, 0])
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.text(140, -5, 'High-Band',fontsize=20)
	plt.xlabel(r'$\nu$ [MHz]', fontsize=16)


	plt.figure(2)
	plt.plot(f, 20*np.log10(np.abs(s11_1)) - 20*np.log10(np.abs(s11))) 
	plt.plot(f, 20*np.log10(np.abs(s11_2)) - 20*np.log10(np.abs(s11)))
	plt.plot(f, 20*np.log10(np.abs(s11_3)) - 20*np.log10(np.abs(s11)))
	plt.plot(f, 20*np.log10(np.abs(s11_4)) - 20*np.log10(np.abs(s11)))



	return 1














def plot_high_band_receiver_S11_two_temperatures():

	path_data     = home_folder + '/DATA/EDGES/receiver_calibration/calibration_march_2015/LNA/calibration_files/'
	path_data_low = home_folder + '/DATA/EDGES/receiver_calibration/calibration_august_2015/LNA/calibration_files/'
	d1 = np.genfromtxt(path_data + 'calibration_file_high_band_v1_cterms7_wterms7.txt')
	d2 = np.genfromtxt(path_data + 'calibration_file_high_band_35degC_v1_cterms7_wterms7.txt')	
	dl = np.genfromtxt(path_data_low + 'calibration_file_low_band_v1_cterms7_wterms7.txt')

	f  = d1[:,0]
	s1 = d1[:,1] + 1j*d1[:,2]
	s2 = d2[:,1] + 1j*d2[:,2]

	fl = dl[:,0]
	sl = dl[:,1] + 1j*dl[:,2]





	# Low-band
	plt.close()
	plt.close()
	plt.close()



	plt.figure(1)

	plt.subplot(1,2,1)
	plt.plot(fl, 20*np.log10(np.abs(sl)), 'b', linewidth=2, label=r'$25^{\circ}$C')
	plt.ylim([-40, -30])
	#plt.yticks(np.arange(-23, -17.9, 0.5))
	plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.grid()
	plt.legend(loc=0)

	plt.subplot(1,2,2)
	plt.plot(fl, (180/np.pi)*np.unwrap(np.angle(sl)), 'b', linewidth=2, label=r'$25^{\circ}$C')
	#plt.ylim([-23, -18])
	#plt.yticks(np.arange(-23, -17.9, 0.5))
	plt.xlabel('frequency [MHz]')
	plt.ylabel('phase [deg]')
	plt.grid()
	#plt.legend(loc=0)






	# High-band
	plt.figure(2)	

	plt.subplot(2,2,1)
	plt.plot(f, 20*np.log10(np.abs(s1)), 'b', linewidth=2, label=r'$25^{\circ}$C')
	plt.plot(f, 20*np.log10(np.abs(s2)), 'r--', linewidth=2, label=r'$35^{\circ}$C')
	plt.ylim([-23, -18])
	plt.yticks(np.arange(-23, -17.9, 0.5))
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.grid()
	plt.legend(loc=0)


	plt.subplot(2,2,2)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(s1)), 'b', linewidth=2, label=r'$25^{\circ}$C')
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(s2)), 'r--', linewidth=2, label=r'$35^{\circ}$C')
	#plt.ylim([-23, -18])
	#plt.yticks(np.arange(-23, -17.9, 0.5))
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('phase [deg]')
	plt.grid()
	#plt.legend(loc=0)


	plt.subplot(2,2,3)
	plt.plot(f, 20*np.log10(np.abs(s2)) - 20*np.log10(np.abs(s1)), 'k', linewidth=2, label=r'$25^{\circ}$C')
	#plt.ylim([-23, -18])
	#plt.yticks(np.arange(-23, -17.9, 0.5))
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.grid()
	#plt.legend(loc=0)


	plt.subplot(2,2,4)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(s2)) - (180/np.pi)*np.unwrap(np.angle(s1)), 'k', linewidth=2, label=r'$25^{\circ}$C')
	plt.ylim([-1.5, 1.5])
	#plt.yticks(np.arange(-23, -17.9, 0.5))
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.grid()
	#plt.legend(loc=0)	


	return d1, d2









def plots_long_cable_s11_verification():

	# Processing S11 measurements
	lc6x, f = eg.s11_verification_box_2(long_short_cable = 'long', attenuator_dB = 6)
	lc6     = lc6x[20*np.log10(np.abs(lc6x[:,0]))<-11.66,:]
	lc10, f = eg.s11_verification_box_2(long_short_cable = 'long', attenuator_dB = 10)

	sc6, f   = eg.s11_verification_box_2(long_short_cable = 'short', attenuator_dB = 6)
	sc10x, f = eg.s11_verification_box_2(long_short_cable = 'short', attenuator_dB = 10)
	i1 = np.arange(15,   92, 1)
	i2 = np.arange(93,  103, 1)
	i3 = np.arange(104, 128, 1)
	ii = np.concatenate((i1, i2, i3))
	sc10 = sc10x[ii,:]


	# Expectations at DC
	gamma_6dB        = np.ones(len(f)) * rc.impedance2gamma(85.267, 50)
	gamma_6dB_plus   = np.ones(len(f)) * rc.impedance2gamma(85.267+0.01, 50)
	gamma_6dB_minus  = np.ones(len(f)) * rc.impedance2gamma(85.267-0.01, 50)

	gamma_10dB       = np.ones(len(f)) * rc.impedance2gamma(60.828, 50)
	gamma_10dB_plus  = np.ones(len(f)) * rc.impedance2gamma(60.828+0.01, 50)
	gamma_10dB_minus = np.ones(len(f)) * rc.impedance2gamma(60.828-0.01, 50)







	# For verification	
	path_folder_vna = home_folder + '/DATA/EDGES/receiver_calibration/calibration_june_2016/LNA/S11/raw/reference_attenuators/'	

	o_vna, f_vna = rc.s1p_read(path_folder_vna + 'calibration_male_Open.s1p')
	s_vna, f_vna = rc.s1p_read(path_folder_vna + 'calibration_male_Short.s1p')
	l_vna, f_vna = rc.s1p_read(path_folder_vna + 'calibration_male_Load.s1p')

	a6_vna,  f_vna = rc.s1p_read(path_folder_vna + 'load_06db.s1p')
	a10_vna, f_vna = rc.s1p_read(path_folder_vna + 'load_10db.s1p')


	# Correction of verification measurements at VNA input
	resistance_of_match = 50.11 # male
	md = 1
	oa_vna, sa_vna, la_vna = rc.agilent_85033E(f_vna, resistance_of_match, md)
	a6_vna_c,  xx, xx, xx = rc.de_embed(oa_vna, sa_vna, la_vna, o_vna, s_vna, l_vna, a6_vna)
	a10_vna_c, xx, xx, xx = rc.de_embed(oa_vna, sa_vna, la_vna, o_vna, s_vna, l_vna, a10_vna)













	# Plot
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()



	plt.figure(1)
	plt.subplot(2,1,1)
	plt.plot(f, 20*np.log10(np.abs(lc6[0,:])), 'g')
	plt.plot(f, np.mean(20*np.log10(np.abs(lc6)), axis=0), 'k', linewidth = 2)
	plt.plot(f, 20*np.log10(np.abs(gamma_6dB)), 'r')
	plt.plot(f_vna/1e6, 20*np.log10(np.abs(a6_vna_c)), 'b')
	plt.plot(f, 20*np.log10(np.abs(lc6)).T, 'g')
	plt.plot(f, np.mean(20*np.log10(np.abs(lc6)), axis=0), 'k', linewidth = 2)

	plt.plot(f, 20*np.log10(np.abs(gamma_6dB)), 'r')
	plt.plot(f, 20*np.log10(np.abs(gamma_6dB_plus)), 'r--')
	plt.plot(f, 20*np.log10(np.abs(gamma_6dB_minus)), 'r--')
	plt.plot(f_vna/1e6, 20*np.log10(np.abs(a6_vna_c)), 'b')


	plt.ylim([-11.75,-11.65])
	plt.ylabel('6-dB attenuator\n magnitude [dB]')

	plt.legend(['~2500 single traces','average of traces', 'projection from DC', 'with benchtop VNA'], loc=0)
	plt.xlim([50, 200])	
	plt.grid()

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)	





	plt.subplot(2,1,2)
	plt.plot(f, 20*np.log10(np.abs(lc10[0,:])), 'g')
	plt.plot(f, np.mean(20*np.log10(np.abs(lc10)), axis=0), 'k', linewidth = 2)
	plt.plot(f, 20*np.log10(np.abs(gamma_10dB)), 'r')
	plt.plot(f_vna/1e6, 20*np.log10(np.abs(a10_vna_c)), 'b')
	plt.plot(f, 20*np.log10(np.abs(lc10)).T, 'g')
	plt.plot(f, np.mean(20*np.log10(np.abs(lc10)), axis=0), 'k', linewidth = 2)

	plt.plot(f, 20*np.log10(np.abs(gamma_10dB)), 'r')
	plt.plot(f, 20*np.log10(np.abs(gamma_10dB_plus)), 'r--')
	plt.plot(f, 20*np.log10(np.abs(gamma_10dB_minus)), 'r--')
	plt.plot(f_vna/1e6, 20*np.log10(np.abs(a10_vna_c)), 'b')


	plt.ylim([-20.40,-20.15])
	plt.ylabel('10-dB attenuator\n magnitude [dB]')

	plt.xlim([50, 200])	
	plt.grid()
	plt.xlabel('frequency [MHz]')

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)	









	plt.figure(7)

	plt.subplot(2,1,1)

	interp_model = sci.interp1d(f_vna/1e6, (180/np.pi)*np.unwrap(np.angle(a6_vna_c)), kind='cubic')
	model        = interp_model(f)

	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(lc6[0,:])) - model, 'g')
	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(lc6)), axis=0) - model, 'k', linewidth = 2)
	plt.plot(f, model - model, 'b', linewidth = 2)

	plt.plot(f, ((180/np.pi)*np.unwrap(np.angle(lc6)) - model).T, 'g')
	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(lc6)), axis=0) - model, 'k', linewidth = 2)
	plt.plot(f, model - model, 'b', linewidth = 2)

	plt.ylim([-0.4, 0.4])
	plt.ylabel('6-dB attenuator' + '\n' + r'$\Delta$ phase [deg]')

	plt.legend(['~2500 single traces','average of traces', 'perfect agreement reference'], loc=0)
	plt.xlim([50, 200])	
	plt.grid()

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)	





	plt.subplot(2,1,2)

	interp_model = sci.interp1d(f_vna/1e6, (180/np.pi)*np.unwrap(np.angle(a10_vna_c)), kind='cubic')
	model        = interp_model(f)	

	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(lc10[0,:])) - model, 'g')
	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(lc10)), axis=0) - model, 'k', linewidth = 2)
	plt.plot(f, model - model, 'b', linewidth = 2)

	plt.plot(f, ((180/np.pi)*np.unwrap(np.angle(lc10)) - model).T, 'g')
	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(lc10)), axis=0) - model, 'k', linewidth = 2)
	plt.plot(f, model - model, 'b', linewidth = 2)


	plt.ylim([-0.4, 0.4])
	plt.ylabel('10-dB attenuator' + '\n' + r'$\Delta$ phase [deg]')

	plt.xlim([50, 200])	
	plt.grid()




	plt.xlabel('frequency [MHz]')

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)		

















	plt.figure(2)
	plt.subplot(2,1,1)
	plt.plot(f, 20*np.log10(np.abs(sc6[0,:])), 'g')
	plt.plot(f, np.mean(20*np.log10(np.abs(sc6)), axis=0), 'k', linewidth = 2)
	plt.plot(f, 20*np.log10(np.abs(gamma_6dB)), 'r')
	plt.plot(f_vna/1e6, 20*np.log10(np.abs(a6_vna_c)), 'b')
	plt.plot(f, 20*np.log10(np.abs(sc6)).T, 'g')
	plt.plot(f, np.mean(20*np.log10(np.abs(sc6)), axis=0), 'k', linewidth = 2)

	plt.plot(f, 20*np.log10(np.abs(gamma_6dB)), 'r')
	plt.plot(f, 20*np.log10(np.abs(gamma_6dB_plus)), 'r--')
	plt.plot(f, 20*np.log10(np.abs(gamma_6dB_minus)), 'r--')
	plt.plot(f_vna/1e6, 20*np.log10(np.abs(a6_vna_c)), 'b')


	plt.ylim([-11.75,-11.65])
	plt.ylabel('6-dB attenuator\n magnitude [dB]')

	plt.legend(['~100 single traces','average of traces', 'projection from DC', 'with benchtop VNA'], loc=0)
	plt.xlim([50, 200])	
	plt.grid()

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)	










	plt.subplot(2,1,2)
	plt.plot(f, 20*np.log10(np.abs(sc10[0,:])), 'g')
	plt.plot(f, np.mean(20*np.log10(np.abs(sc10)), axis=0), 'k', linewidth = 2)
	plt.plot(f, 20*np.log10(np.abs(gamma_10dB)), 'r')
	plt.plot(f_vna/1e6, 20*np.log10(np.abs(a10_vna_c)), 'b')
	plt.plot(f, 20*np.log10(np.abs(sc10)).T, 'g')
	plt.plot(f, np.mean(20*np.log10(np.abs(sc10)), axis=0), 'k', linewidth = 2)

	plt.plot(f, 20*np.log10(np.abs(gamma_10dB)), 'r')
	plt.plot(f, 20*np.log10(np.abs(gamma_10dB_plus)), 'r--')
	plt.plot(f, 20*np.log10(np.abs(gamma_10dB_minus)), 'r--')
	plt.plot(f_vna/1e6, 20*np.log10(np.abs(a10_vna_c)), 'b')


	plt.ylim([-20.40,-20.15])
	plt.ylabel('10-dB attenuator\n magnitude [dB]')

	plt.xlim([50, 200])	
	plt.grid()
	plt.xlabel('frequency [MHz]')

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)	











	plt.figure(8)

	plt.subplot(2,1,1)

	interp_model = sci.interp1d(f_vna/1e6, (180/np.pi)*np.unwrap(np.angle(a6_vna_c)), kind='cubic')
	model        = interp_model(f)

	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(sc6[0,:])) - model, 'g')
	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(sc6)), axis=0) - model, 'k', linewidth = 2)
	plt.plot(f, model - model, 'b', linewidth = 2)

	plt.plot(f, ((180/np.pi)*np.unwrap(np.angle(sc6)) - model).T, 'g')
	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(sc6)), axis=0) - model, 'k', linewidth = 2)
	plt.plot(f, model - model, 'b', linewidth = 2)

	plt.ylim([-0.4, 0.4])
	plt.ylabel('6-dB attenuator' + '\n' + r'$\Delta$ phase [deg]')

	plt.legend(['~100 single traces','average of traces', 'perfect agreement reference'], loc=0)
	plt.xlim([50, 200])	
	plt.grid()

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)	



	plt.subplot(2,1,2)

	interp_model = sci.interp1d(f_vna/1e6, (180/np.pi)*np.unwrap(np.angle(a10_vna_c)), kind='cubic')
	model        = interp_model(f)	

	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(sc10[0,:])) - model, 'g')
	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(sc10)), axis=0) - model, 'k', linewidth = 2)
	plt.plot(f, model - model, 'b', linewidth = 2)

	plt.plot(f, ((180/np.pi)*np.unwrap(np.angle(sc10)) - model).T, 'g')
	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(sc10)), axis=0) - model, 'k', linewidth = 2)
	plt.plot(f, model - model, 'b', linewidth = 2)


	plt.ylim([-0.4, 0.4])
	plt.ylabel('10-dB attenuator' + '\n' + r'$\Delta$ phase [deg]')

	plt.xlim([50, 200])	
	plt.grid()




	plt.xlabel('frequency [MHz]')

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)		












	plt.figure(3)

	plt.subplot(2,1,1)
	plt.plot(f, np.mean(20*np.log10(np.abs(lc6)), axis=0), 'k', linewidth = 2)
	plt.plot(f, np.mean(20*np.log10(np.abs(sc6)), axis=0), 'k--', linewidth = 2)
	plt.plot(f, 20*np.log10(np.abs(gamma_6dB)), 'r')
	plt.plot(f_vna/1e6, 20*np.log10(np.abs(a6_vna_c)), 'b')

	plt.plot(f, 20*np.log10(np.abs(gamma_6dB_plus)), 'r--')
	plt.plot(f, 20*np.log10(np.abs(gamma_6dB_minus)), 'r--')


	plt.ylim([-11.75,-11.65])
	plt.ylabel('6-dB attenuator\n magnitude [dB]')

	plt.legend(['average of traces with long cable', 'average of traces with short cable', 'projection from DC', 'with benchtop VNA'], loc=0)
	plt.xlim([50, 200])	
	plt.grid()

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)	




	plt.subplot(2,1,2)
	plt.plot(f, np.mean(20*np.log10(np.abs(lc10)), axis=0), 'k', linewidth = 2)
	plt.plot(f, np.mean(20*np.log10(np.abs(sc10)), axis=0), 'k--', linewidth = 2)
	plt.plot(f, 20*np.log10(np.abs(gamma_10dB)), 'r')
	plt.plot(f_vna/1e6, 20*np.log10(np.abs(a10_vna_c)), 'b')

	plt.plot(f, 20*np.log10(np.abs(gamma_10dB_plus)), 'r--')
	plt.plot(f, 20*np.log10(np.abs(gamma_10dB_minus)), 'r--')


	plt.ylim([-20.40,-20.15])
	plt.ylabel('10-dB attenuator\n magnitude [dB]')

	#plt.legend(['average of traces with long cable', 'average of traces with short cable', 'projection from DC', 'with benchtop VNA'], loc=0)
	plt.xlim([50, 200])	
	plt.grid()
	plt.xlabel('frequency [MHz]')

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)	











	plt.figure(9)

	plt.subplot(2,1,1)

	interp_model = sci.interp1d(f_vna/1e6, (180/np.pi)*np.unwrap(np.angle(a6_vna_c)), kind='cubic')
	model        = interp_model(f)


	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(lc6)), axis=0) - model, 'k', linewidth = 2)
	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(sc6)), axis=0) - model, 'k--', linewidth = 2)
	plt.plot(f, model - model, 'b', linewidth = 2)

	plt.ylim([-0.4, 0.4])
	plt.ylabel('6-dB attenuator' + '\n' + r'$\Delta$ phase [deg]')

	plt.legend(['average of traces with long cable','average of traces with short cable', 'perfect agreement reference'], loc=0)
	plt.xlim([50, 200])	
	plt.grid()

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)	




	plt.subplot(2,1,2)

	interp_model = sci.interp1d(f_vna/1e6, (180/np.pi)*np.unwrap(np.angle(a10_vna_c)), kind='cubic')
	model        = interp_model(f)	

	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(lc10)), axis=0) - model, 'k', linewidth = 2)
	plt.plot(f, np.mean((180/np.pi)*np.unwrap(np.angle(sc10)), axis=0) - model, 'k--', linewidth = 2)
	plt.plot(f, model - model, 'b', linewidth = 2)

	plt.ylim([-0.4, 0.4])
	plt.ylabel('10-dB attenuator' + '\n' + r'$\Delta$ phase [deg]')

	plt.xlim([50, 200])	
	plt.grid()

	plt.xlabel('frequency [MHz]')

	ax = plt.gca()
	ax.ticklabel_format(useOffset=False)		
















	plt.figure(4)

	plt.subplot(1,2,1)
	im = plt.imshow(20*np.log10(np.abs(lc6)) - np.mean(20*np.log10(np.abs(lc6)), axis=0), interpolation='none', aspect='auto', extent=[50, 200, len(lc6[:,0]), 0])
	im.set_clim([-0.015, 0.015])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('trace number')
	plt.title('long cable, 6-dB attenuator')
	cbar = plt.colorbar(ticks=np.array([-0.015, -0.01, -0.005, 0, 0.005, 0.01, 0.015]))
	ax = cbar.ax
	ax.text(0, 1.03, '[dB]', size=12)	


	plt.subplot(1,2,2)
	im = plt.imshow(20*np.log10(np.abs(lc10)) - np.mean(20*np.log10(np.abs(lc10)), axis=0), interpolation='none', aspect='auto', extent=[50, 200, len(lc10[:,0]), 0])
	im.set_clim([-0.015, 0.015])	
	plt.xlabel('frequency [MHz]')
	plt.ylabel('trace number')
	plt.title('long cable, 10-dB attenuator')
	cbar = plt.colorbar(ticks=np.array([-0.015, -0.01, -0.005, 0, 0.005, 0.01, 0.015]))
	ax = cbar.ax
	ax.text(0, 1.03, '[dB]', size=12)




	plt.figure(5)

	plt.subplot(1,2,1)
	im = plt.imshow(20*np.log10(np.abs(sc6)) - np.mean(20*np.log10(np.abs(sc6)), axis=0), interpolation='none', aspect='auto', extent=[50, 200, len(sc6[:,0]), 0])
	im.set_clim([-0.015, 0.015])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('trace number')
	plt.title('short cable, 6-dB attenuator')
	cbar = plt.colorbar(ticks=np.array([-0.015, -0.01, -0.005, 0, 0.005, 0.01, 0.015]))
	ax = cbar.ax
	ax.text(0, 1.03, '[dB]', size=12)	


	plt.subplot(1,2,2)
	im = plt.imshow(20*np.log10(np.abs(sc10)) - np.mean(20*np.log10(np.abs(sc10)), axis=0), interpolation='none', aspect='auto', extent=[50, 200, len(sc10[:,0]), 0])
	im.set_clim([-0.015, 0.015])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('trace number')	
	plt.title('short cable, 10-dB attenuator')
	cbar = plt.colorbar(ticks=np.array([-0.015, -0.01, -0.005, 0, 0.005, 0.01, 0.015]))
	ax = cbar.ax
	ax.text(0, 1.03, '[dB]', size=12)	











	return 1












def covariance_check():

	f, d1, d2, w = eg.alan_data_averages()


	#par1, cov1 = np.polyfit(f[w>0], d2[w>0], 7, cov=True)

	#pp = eg.fit_polynomial_fourier('polynomial', f, d2, 8, Weights=w)
	#par2 = pp[0]
	#cov2 = pp[3]

	dz      = np.arange(0,  1, 0.01)
	zr      = np.arange(6.5, 11, 0.1)
	par_all = np.zeros((len(dz), len(zr)))
	std_all = np.zeros((len(dz), len(zr)))

	for j in range(len(zr)):
		for i in range(len(dz)):
			pp  = eg.fit_polynomial_fourier('Physical_model_plus_tanh', f, d2, 6, Weights=w, zr_tanh=zr[j], dz_tanh=dz[i])
			par = pp[0][5]
			cov = pp[3]
			std = np.sqrt(cov[5,5])

			par_all[i, j] = par
			std_all[i, j] = std



	return dz, zr, par_all, std_all







def plot_comparison_ground_losses():

	file1     = home_folder + '/DATA/EDGES/loss/high_band/ground_loss/Blade_Percentage_Loss_in_field_size.txt'
	f, il, ih = eg.frequency_edges(90,190)
	fe        = f[il:(ih+1)]

	pah1 = eg.ground_loss(file1, 'high_band', fe, nterms=35)
	pah2 = eg.ground_loss_alan(fe)



	plt.close()
	plt.close()
	plt.plot(fe, 100*pah1, 'b', label='from Tom')
	plt.plot(fe, 100*pah2, 'r', label='from Alan')
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('power above horizon [%]')
	plt.legend(loc=0)

	return fe, pah1, pah2













def save_residuals_chi_squares_for_anastasia(model_type='anastasia'):

	"""
	model_type:  anastasia (default) or anastasia_artifacts

	"""

	# Producing data by-products
	rb_all, fb, wb, RMS_all, prob, chi_sq, degrees_of_freedom, model_EoR_all, f = eg.model_rejection_anastasia_hyper(model_type = model_type)

	# Redshift
	zb = eg.frequency2redshift(fb)

	# Output arrays
	basics     = np.hstack((fb.reshape(-1,1), zb.reshape(-1,1), rb_all[0,:].reshape(-1,1)))
	residuals  = rb_all[1::,:].T
	red_chi_sq = (chi_sq/degrees_of_freedom).reshape(-1,1)
	models     = model_EoR_all[1::,:].T


	# Current date
	now = dt.datetime.now()
	yr = str(now.year)
	mo = str(now.month).zfill(2)
	da = str(now.day).zfill(2)


	# Saving
	path_save = home_folder + '/DATA/EDGES/global_21cm_models/fialkov/statistics_' + yr + '_' + mo + '_' + da + '/'

	if not exists(path_save):
		makedirs(path_save)

	np.savetxt( path_save + yr + '_' + mo + '_' + da + '_frequency_redshift_baseline.txt',  basics,     fmt='%1.8f')
	np.savetxt( path_save + yr + '_' + mo + '_' + da + '_residuals.txt',                    residuals,  fmt='%1.8f')
	np.savetxt( path_save + yr + '_' + mo + '_' + da + '_red_chi_sq.txt',                   red_chi_sq, fmt='%1.8f')
	np.savetxt( path_save + yr + '_' + mo + '_' + da + '_models.txt',                       models,     fmt='%1.8f')


	return basics, residuals, red_chi_sq, models










def plot_S11_comparison_low_band_receiver_2016():

	path_files = home_folder + '/DATA/EDGES/receiver_calibration/calibration_june_2016/LNA/S11/corrected/'


	d1 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-09-02-11-10-31_very_first_recvS11_measurement.txt')
	d2 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-09-02-11-11-39_very_second_recvS11_measurement.txt')
	d3 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-17-10-55-58.txt')



	d5 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-25-20-17-13_25Credo_best.txt')	
	d6 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-27-11-01-59_tempcycle_pass6.txt')
	d7 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-27-11-06-02_tempcycle_pass7.txt')
	d8 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-27-11-09-24_tempcycle_pass8.txt')
	d9 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-27-11-12-30_tempcycle_pass9.txt')
	d10 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-27-11-15-13_tempcycle_pass10.txt')
	d11 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-27-11-18-03_tempcycle_pass11.txt')
	d12 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-27-11-22-32_tempcycle_pass12.txt')
	d13 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-27-11-25-29_tempcycle_pass13.txt')
	d14 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-08-27-11-28-20_tempcycle_pass14.txt')
	d15 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-09-02-11-02-08_tempcycle_pass15.txt')
	d16 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-09-02-10-42-49_tempcycle_pass16.txt')
	d17 = np.genfromtxt(path_files + 's11_calibration_low_band_LNA25degC_2016-09-02-10-43-11_tempcycle_pass17.txt')



	# S11s from Temperature Cycling
	tc = low_band_receiver_S11_temperature_cycling(plot='no')









	plt.close()
	plt.close()
	plt.close()
	plt.close()

	plt.figure(1)
	plt.plot(d5[:,0], 20*np.log10(np.abs(d5[:,1] + 1j*d5[:,2])), 'b')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d7[:,1] + 1j*d7[:,2])), 'g')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d10[:,1] + 1j*d10[:,2])), 'c')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d12[:,1] + 1j*d12[:,2])), 'm')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d14[:,1] + 1j*d14[:,2])), 'r')

	plt.plot(d5[:,0], 20*np.log10(np.abs(d8[:,1] + 1j*d8[:,2])), 'g')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d9[:,1] + 1j*d9[:,2])), 'g')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d11[:,1] + 1j*d11[:,2])), 'c')


	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.legend(['25C, just after stopping spectra measurements','30C, no previous spectra measurements (three measurements separated by ~2 hours each)','35C, no previous spectra measurements','35C, just after stopping spectra measurements','back to 25C, just after stopping spectra measurements'])


	plt.figure(2)

	plt.subplot(2,1,1)
	plt.plot(d5[:,0], 20*np.log10(np.abs(d14[:,1] + 1j*d14[:,2])) - 20*np.log10(np.abs(d5[:,1] + 1j*d5[:,2])), 'r')
	plt.grid()
	#plt.xlabel('frequency [MHz]')
	plt.ylabel(r'magnitude [$\Delta$ dB]')

	plt.subplot(2,1,2)
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d14[:,1] + 1j*d14[:,2])) - (180/np.pi)*np.unwrap(np.angle(d5[:,1] + 1j*d5[:,2])), 'r')
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'phase [$\Delta$ deg]')



	plt.figure(3)

	plt.subplot(2,1,1)
	plt.plot(d5[:,0], 20*np.log10(np.abs(d1[:,1] + 1j*d1[:,2])), 'k.-')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d2[:,1] + 1j*d2[:,2])), 'b--')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d3[:,1] + 1j*d3[:,2])), 'r--')


	plt.plot(d5[:,0], 20*np.log10(np.abs(d5[:,1] + 1j*d5[:,2])), 'm')

	plt.plot(d5[:,0], 20*np.log10(np.abs(d16[:,1] + 1j*d16[:,2])), 'c')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d17[:,1] + 1j*d17[:,2])), 'g')
	plt.grid()

	plt.legend(['very first measurement, receiver ON, no switching','second measurement, receiver ON, no switching','third measurement (also labeled "original"), receiver ON, after 14-hours of switching','before and after temperature cycling, with and without switching','after 2 days disconnected, receiver ON, no switching','receiver ON for three hours, no switching'])

	plt.plot(d5[:,0], 20*np.log10(np.abs(d14[:,1] + 1j*d14[:,2])), 'm')	
	plt.plot(d5[:,0], 20*np.log10(np.abs(d15[:,1] + 1j*d15[:,2])), 'm')

	#plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')





	plt.subplot(2,1,2)
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d1[:,1] + 1j*d1[:,2])), 'k.-')
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d2[:,1] + 1j*d2[:,2])), 'b--')
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d3[:,1] + 1j*d3[:,2])), 'r--')


	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d5[:,1] + 1j*d5[:,2])), 'm')

	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d16[:,1] + 1j*d16[:,2])), 'c')
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d17[:,1] + 1j*d17[:,2])), 'g')
	plt.grid()

	#plt.legend(['very first measurement, receiver ON, no switching','second measurement, receiver ON, no switching','third measurement, receiver ON, after 14-hours of switching','before and after temperature cycling','after 2 days disconnected, receiver ON, no switching','receiver ON for three hours, no switching'])

	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d14[:,1] + 1j*d14[:,2])), 'm')	
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d15[:,1] + 1j*d15[:,2])), 'm')

	plt.xlabel('frequency [MHz]')
	plt.ylabel('phase [deg]')















	plt.figure(4)
	plt.subplot(2,1,1)
	plt.plot(d5[:,0], 20*np.log10(np.abs(d1[:,1] + 1j*d1[:,2])), 'c')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d2[:,1] + 1j*d2[:,2])), 'c')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d3[:,1] + 1j*d3[:,2])), 'c')


	plt.plot(d5[:,0], 20*np.log10(np.abs(d5[:,1] + 1j*d5[:,2])), 'c')

	plt.plot(d5[:,0], 20*np.log10(np.abs(d16[:,1] + 1j*d16[:,2])), 'c')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d17[:,1] + 1j*d17[:,2])), 'c')
	plt.grid()

	#plt.legend(['very first measurement, receiver ON, no switching','second measurement, receiver ON, no switching','third measurement (also labeled "original"), receiver ON, after 14-hours of switching','before and after temperature cycling, with and without switching','after 2 days disconnected, receiver ON, no switching','receiver ON for three hours, no switching'])

	plt.plot(d5[:,0], 20*np.log10(np.abs(d14[:,1] + 1j*d14[:,2])), 'c')	
	plt.plot(d5[:,0], 20*np.log10(np.abs(d15[:,1] + 1j*d15[:,2])), 'c')




	plt.plot(tc[0], 20*np.log10(np.abs(tc[1])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[3])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[5])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[8])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[9])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[12])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[13])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[14])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[15])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[16])), 'r')

	plt.plot(d5[:,0], 20*np.log10(np.abs(d5[:,1] + 1j*d5[:,2])), 'k')

	#plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')	
	plt.ylim([-38, -28])








	plt.subplot(2,1,2)
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d1[:,1] + 1j*d1[:,2])), 'c')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[1])), 'r')
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d5[:,1] + 1j*d5[:,2])), 'k')

	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d2[:,1] + 1j*d2[:,2])), 'c')
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d3[:,1] + 1j*d3[:,2])), 'c')


	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d5[:,1] + 1j*d5[:,2])), 'c')

	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d16[:,1] + 1j*d16[:,2])), 'c')
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d17[:,1] + 1j*d17[:,2])), 'c')
	plt.grid()

	#plt.legend(['very first measurement, receiver ON, no switching','second measurement, receiver ON, no switching','third measurement, receiver ON, after 14-hours of switching','before and after temperature cycling','after 2 days disconnected, receiver ON, no switching','receiver ON for three hours, no switching'])

	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d14[:,1] + 1j*d14[:,2])), 'c')	
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d15[:,1] + 1j*d15[:,2])), 'c')




	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[1])), 'r')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[3])), 'r')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[5])), 'r')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[8])), 'r')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[9])), 'r')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[12])), 'r')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[13])), 'r')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[14])), 'r')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[15])), 'r')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[16])), 'r')

	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d5[:,1] + 1j*d5[:,2])), 'k')

	plt.xlabel('frequency [MHz]')
	plt.ylabel('phase [deg]')


	plt.legend(['previous measurements at $25^{\circ}$C','10 recent measurements at $25^{\circ}$C during temperature cycling  (< +/- 0.1 dB AND < +/- $0.5^{\circ}$)', 'measurement that best calibrates the data'])
	plt.ylim([10, 70])




















	plt.figure(5)
	plt.subplot(2,1,1)
	plt.plot(d5[:,0], 20*np.log10(np.abs(d10[:,1] + 1j*d10[:,2])), 'c')
	plt.plot(d5[:,0], 20*np.log10(np.abs(d12[:,1] + 1j*d12[:,2])), 'c')
	plt.grid()

	#plt.legend(['very first measurement, receiver ON, no switching','second measurement, receiver ON, no switching','third measurement (also labeled "original"), receiver ON, after 14-hours of switching','before and after temperature cycling, with and without switching','after 2 days disconnected, receiver ON, no switching','receiver ON for three hours, no switching'])


	plt.plot(tc[0], 20*np.log10(np.abs(tc[2])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[4])), 'r')
	plt.plot(tc[0], 20*np.log10(np.abs(tc[6])), 'r')


	#plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.ylim([-38, -28])









	plt.subplot(2,1,2)
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d10[:,1] + 1j*d10[:,2])), 'c')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[2])), 'r')
	plt.plot(d5[:,0], (180/np.pi)*np.unwrap(np.angle(d12[:,1] + 1j*d12[:,2])), 'c')



	#plt.legend(['very first measurement, receiver ON, no switching','second measurement, receiver ON, no switching','third measurement, receiver ON, after 14-hours of switching','before and after temperature cycling','after 2 days disconnected, receiver ON, no switching','receiver ON for three hours, no switching'])


	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[4])), 'r')
	plt.plot(tc[0], (180/np.pi)*np.unwrap(np.angle(tc[6])), 'r')
	plt.grid()
	plt.ylim([10, 70])


	plt.xlabel('frequency [MHz]')
	plt.ylabel('phase [deg]')


	plt.legend(['previous measurements at $35^{\circ}$C','recent measurements at $35^{\circ}$C during temperature cycling  (difference < $0.2$ dB and < $0.5^{\circ}$)'])





	return 0

































def plot_antenna_S11_comparison():


	# High-band
	d212 = np.genfromtxt('/home/ramo7131/DATA/EDGES/s11/high_band/corrected/2015_212_18_55/average_2015_212_18_55.txt')
	d262 = np.genfromtxt('/home/ramo7131/DATA/EDGES/s11/high_band/corrected/2015_262_19_14/average_2015_262_19_14.txt')
	d242 = np.genfromtxt('/home/ramo7131/DATA/EDGES/s11/high_band/corrected/2016_242/average_2016_242.txt')



	# Low-band
	d289 = np.genfromtxt('/home/ramo7131/DATA/EDGES/s11/low_band/corrected/2015_289_21_27/average_2015_289_21_27.txt')
	d342 = np.genfromtxt('/home/ramo7131/DATA/EDGES/s11/low_band/corrected/2015_342_03_14/average_2015_342_03_14.txt')
	d175 = np.genfromtxt('/home/ramo7131/DATA/EDGES/s11/low_band/corrected/2016_175_00/average_2016_175_00.txt')
	d177 = np.genfromtxt('/home/ramo7131/DATA/EDGES/s11/low_band/corrected/2016_177_00/average_2016_177_00.txt')
	d243 = np.genfromtxt('/home/ramo7131/DATA/EDGES/s11/low_band/corrected/2016_243/average_2016_243.txt')




	plt.close()
	plt.close()
	plt.close()
	plt.close()


	plt.figure(1)
	plt.subplot(2,1,1)
	plt.plot(d212[:,0]/1e6, 20*np.log10(np.abs(d262[:,1]+1j*d262[:,2])) -  20*np.log10(np.abs(d212[:,1]+1j*d212[:,2])))
	plt.plot(d212[:,0]/1e6, 20*np.log10(np.abs(d242[:,1]+1j*d242[:,2])) -  20*np.log10(np.abs(d212[:,1]+1j*d212[:,2])), 'r')
	plt.xlim([90,190])
	plt.ylim([-0.1, 0.1])
	plt.yticks(np.arange(-0.1,0.11,0.02))
	plt.xticks(np.arange(90,191,20))
	plt.grid()
	plt.ylabel(r'$\Delta$ magnitude [dB]')

	plt.subplot(2,1,2)
	plt.plot(d212[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d262[:,1]+1j*d262[:,2])) -  (180/np.pi)*np.unwrap(np.angle(d212[:,1]+1j*d212[:,2])))
	plt.plot(d212[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d242[:,1]+1j*d242[:,2])) -  (180/np.pi)*np.unwrap(np.angle(d212[:,1]+1j*d212[:,2])), 'r')
	plt.xlim([90,190])
	plt.ylim([-1, 1])
	plt.yticks(np.arange(-1,1.1,0.2))
	plt.xticks(np.arange(90,191,20))
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase [degrees]')
	plt.legend(['(2015-262) - (2015-212)','(2016-242) - (2015-212)'])




	plt.figure(2)
	plt.subplot(2,1,1)
	plt.plot(d289[:,0]/1e6, 20*np.log10(np.abs(d342[:,1]+1j*d342[:,2])) -  20*np.log10(np.abs(d289[:,1]+1j*d289[:,2])))
	plt.plot(d289[:,0]/1e6, 20*np.log10(np.abs(d175[:,1]+1j*d175[:,2])) -  20*np.log10(np.abs(d289[:,1]+1j*d289[:,2])), 'r')
	plt.plot(d289[:,0]/1e6, 20*np.log10(np.abs(d177[:,1]+1j*d177[:,2])) -  20*np.log10(np.abs(d289[:,1]+1j*d289[:,2])), 'g')
	plt.plot(d289[:,0]/1e6, 20*np.log10(np.abs(d243[:,1]+1j*d243[:,2])) -  20*np.log10(np.abs(d289[:,1]+1j*d289[:,2])), 'm')
	plt.xlim([50,100])
	plt.ylim([-0.1, 0.1])
	plt.yticks(np.arange(-0.1,0.11,0.02))
	plt.grid()
	plt.ylabel(r'$\Delta$ magnitude [dB]')

	plt.subplot(2,1,2)
	plt.plot(d289[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d342[:,1]+1j*d342[:,2])) -  (180/np.pi)*np.unwrap(np.angle(d289[:,1]+1j*d289[:,2])))
	plt.plot(d289[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d175[:,1]+1j*d175[:,2])) -  (180/np.pi)*np.unwrap(np.angle(d289[:,1]+1j*d289[:,2])), 'r')
	plt.plot(d289[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d177[:,1]+1j*d177[:,2])) -  (180/np.pi)*np.unwrap(np.angle(d289[:,1]+1j*d289[:,2])), 'g')
	plt.plot(d289[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d243[:,1]+1j*d243[:,2])) -  (180/np.pi)*np.unwrap(np.angle(d289[:,1]+1j*d289[:,2])), 'm')
	plt.xlim([50,100])
	plt.ylim([-1, 1])
	plt.yticks(np.arange(-1,1.1,0.2))
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase [degrees]')
	plt.legend(['(2015-342) - (2015-289)','(2016-175) - (2015-289)','(2016-177) - (2015-289)','(2016-243) - (2015-289)'])	




	return 0








def plot_haslam_map_408MHz_remazeilles2014():


	# Data paths
	path_root = home_folder + '/DATA/EDGES/'

	path_data = path_root + 'beam_convolution/'




	# Loading galactic coordinates (the Haslam map is in NESTED Galactic Coordinates)
	coord              = fits.open(path_data + 'coordinate_maps/pixel_coords_map_nested_galactic_res9.fits')
	coord_array        = coord[1].data
	lon                = coord_array['LONGITUDE']
	lat                = coord_array['LATITUDE']
	GALAC_COORD_object = apc.SkyCoord(lon, lat, frame='galactic', unit='deg')  # defaults to ICRS frame





	# Loading 2014 Haslam map (IT IS IN RING FORMAT)
	haslam_map  = fits.open(path_data + 'haslam_map/haslam408_ds_Remazeilles2014.fits')
	haslam_ring = (haslam_map[1].data)['temperature']





	# Plotting
	hr = haslam_ring.flatten()
	hp.mollview(hr, min=0,max=100, unit='[ K ]', title='')
	hp.graticule()






	return hr








def plot_map_45MHz_guzman2010():


	# Data paths
	path_root = home_folder + '/DATA/EDGES/'	
	path_data = path_root + 'beam_convolution/'



	# 45-MHz map. The map is in Plate Caree projection (unprojected, see https://en.wikipedia.org/wiki/Equirectangular_projection)
	map45_fit = fits.open(path_data + 'map_45MHz/wlb45.fits')	
	map45     = map45_fit[0].data
	map45_1D  = map45.flatten() 

	# Coordinate grid
	lat    = np.arange(-90,90.25,0.25)
	lon    = np.arange(180,-180.25,-0.25)
	lat_2D = np.tile(lat.reshape(-1,1), len(map45[0,:]))
	lon_2D = np.tile(lon.reshape(-1,1), len(map45[:,0]))
	lon_2D = lon_2D.T

	# Converting to Healpix Nside=128
	hp_pix_2D = hp.ang2pix(128, (np.pi/180)*(90-lat_2D), (np.pi/180)*lon_2D)
	hp_pix    = hp_pix_2D.flatten()

	# Index for pixels with data, in the format Healpix Nside=128
	unique_hp_pix, unique_hp_pix_index = np.unique(hp_pix, return_index=True)

	# Map in format Healpix Nside=128
	map45_hp = np.zeros(12*128**2)
	map45_hp[unique_hp_pix]   = map45_1D[unique_hp_pix_index]
	map45_hp[map45_hp < 3300] = hp.UNSEEN   # assigning a characteristic value to the hole at high declinations

	# Converting map to format Healpix Nside=512 (same as Haslam map)
	map45_512  = hp.pixelfunc.ud_grade(map45_hp, nside_out=512)



	# Plot
	hp.mollview(map45_512, min=3000, max=20000, title='', unit='[ K ]')
	hp.graticule()


	return 0







def plot_LNA_antenna_S11():


	# Load data
	ald = np.genfromtxt(home_folder + '/DATA/EDGES/s11/low_band/corrected/2016_243/average_2016_243.txt')
	ahd = np.genfromtxt(home_folder + '/DATA/EDGES/s11/high_band/corrected/2016_242/average_2016_242.txt')

	rld = np.genfromtxt(home_folder + '/DATA/EDGES/receiver_calibration/calibration_august_2015/LNA/calibration_files/calibration_file_low_band_v1_cterms7_wterms7.txt')
	rhd = np.genfromtxt(home_folder + '/DATA/EDGES/receiver_calibration/calibration_march_2015/LNA/S11/corrected_delay/calibration_S11_25degC.txt')

	dm = np.genfromtxt(home_folder + '/DATA/EDGES/s11/low_band/corrected/2016_243/dataset_2016_243_magnitude_linear_50-200MHz.txt')
	da = np.genfromtxt(home_folder + '/DATA/EDGES/s11/low_band/corrected/2016_243/dataset_2016_243_phase_deg_50-200MHz.txt')




	fal = ald[:,0]/1e6
	fah = ahd[:,0]/1e6
	frl = rld[:,0]
	frh = rhd[:,0]	

	al = ald[:,1] + 1j*ald[:,2]
	ah = ahd[:,1] + 1j*ahd[:,2]
	rl = rld[:,1] + 1j*rld[:,2]
	rh = rhd[:,1] + 1j*rhd[:,2]


	plt.figure(1)
	plt.subplot(1,2,1)
	plt.plot(fal, 20*np.log10(np.abs(al)), 'b', linewidth=2)
	plt.plot(frl, 20*np.log10(np.abs(rl)), 'r', linewidth=2 )
	plt.xlim([50, 100])
	plt.ylim([-40, -0])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.title('EDGES Low-Band', fontweight='bold')



	plt.subplot(1,2,2)
	plt.plot(fah, 20*np.log10(np.abs(ah)), 'b', linewidth=2)
	plt.plot(frh, 20*np.log10(np.abs(rh)), 'r', linewidth=2)
	plt.xlim([90, 200])
	plt.ylim([-40, -0])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.legend(['antenna','receiver'])
	plt.title('EDGES High-Band', fontweight='bold')




	plt.figure(2)
	plt.subplot(1,2,1)
	im = plt.imshow( 20*np.log10(dm[90:410, 0:50]) - 20*np.log10(np.abs(al[0:50])), interpolation='none', aspect='auto', extent=[50,100,8,0])
	im.set_clim([-0.015, 0.015])
	plt.xlim([48, 102])
	cbar = plt.colorbar(ticks=np.arange(-0.015, 0.016, 0.005))
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('time [hr]')
	plt.title(r'$\Delta$ magnitude [dB]', fontweight='bold')


	plt.subplot(1,2,2)
	im = plt.imshow( da[90:410, 0:50] - (180/np.pi)*np.unwrap(np.angle(al[0:50])), interpolation='none', aspect='auto', extent=[50,100,8,0])
	im.set_clim([-0.3, 0.3])
	plt.xlim([48, 102])
	cbar = plt.colorbar(ticks=np.arange(-0.3,0.31,0.1))
	plt.grid()
	plt.xlabel('frequency [MHz]')
	#plt.ylabel('time [hr]')
	plt.title(r'$\Delta$ phase [degrees]', fontweight='bold')


	return dm, da





def plot_spectra_sample_low_high_band():





	dl, ml, sl, wl = eg.level2read('low_band', 'v1', '2015_311_00')
	fl  = dl[:,0]
	ddl1 = dl[:,10]
	wwl1 = wl[:,10]	
	ddl2 = dl[:,58]
	wwl2 = wl[:,58]


	dh, mh, sh, wh = eg.level2read('high_band', 'v1', '2015_311_00')
	fh  = dh[:,0]
	ddh1 = dh[:,10]
	wwh1 = wh[:,10]	
	ddh2 = dh[:,58]
	wwh2 = wh[:,58]	


	ddlc1 = eg.data_calibration('low_band',  25, ddl1, fl, 'blade', antenna_s11_day = 289, combined_gain = 1, Tambient = 300, low_band_cal_file = 1, high_band_cal_file = 1, beam_factor = 1)
	ddlc2 = eg.data_calibration('low_band',  25, ddl2, fl, 'blade', antenna_s11_day = 289, combined_gain = 1, Tambient = 300, low_band_cal_file = 1, high_band_cal_file = 1, beam_factor = 1)



	ddhc1 = eg.data_calibration('high_band', 25, ddh1, fh, 'blade', antenna_s11_day = 262, combined_gain = 1, Tambient = 300, low_band_cal_file = 1, high_band_cal_file = 1, beam_factor = 1)
	ddhc2 = eg.data_calibration('high_band', 25, ddh2, fh, 'blade', antenna_s11_day = 262, combined_gain = 1, Tambient = 300, low_band_cal_file = 1, high_band_cal_file = 1, beam_factor = 1)





	ddlc_all = eg.data_calibration('low_band', 25, dl[:,1::].T, fl, 'blade', antenna_s11_day = 289, combined_gain = 1, Tambient = 300, low_band_cal_file = 1, high_band_cal_file = 1, beam_factor = 1)
	ddhc_all = eg.data_calibration('high_band', 25, dh[:,1::].T, fh, 'blade', antenna_s11_day = 262, combined_gain = 1, Tambient = 300, low_band_cal_file = 1, high_band_cal_file = 1, beam_factor = 1)







	plt.figure(1)

	plt.subplot(2,2,1)
	plt.imshow(ddlc_all, interpolation='none', aspect='auto', extent=[50, 100, 24, 0])
	plt.xlim([49, 101])
	plt.yticks(np.arange(0,25,4))
	plt.ylabel('LST [hr]')


	plt.subplot(2,2,2)
	plt.imshow(ddhc_all, interpolation='none', aspect='auto', extent=[90, 190, 24, 0])
	plt.xlim([88, 192])
	plt.yticks(np.arange(0,25,4))


	plt.subplot(2,2,3)
	plt.plot(fl[wwl1>0], ddlc1[wwl1>0], 'b')
	plt.plot(fl[wwl2>0], ddlc2[wwl2>0], 'r')
	plt.grid()
	plt.xlim([49, 101])
	plt.ylabel('antenna temperature [K]')
	plt.xlabel('frequency [MHz]')

	plt.subplot(2,2,4)
	plt.plot(fh[wwh1>0], ddhc1[wwh1>0], 'b')
	plt.plot(fh[wwh2>0], ddhc2[wwh2>0], 'r')
	plt.grid()
	plt.xlim([88, 192])
	plt.xlabel('frequency [MHz]')
	plt.legend(['LST = 3.2 hr','LST = 17.8 hr'])








	return 0











def low_band_receiver_S11_temperature_cycling(plot='no'):


	# Data paths
	main_path  = home_folder + '/DATA/EDGES/receiver_calibration/calibration_june_2016/LNA/S11/raw/receiver_input_and_calibration_verification_loads/25Credo/Receiver_S11_temperature_cycling/'

	path_LNA1  = main_path + 'reading01_24hrSoak_at_25C/'
	path_LNA2  = main_path + 'reading02_24hrSoak_at_35C/'
	path_LNA3  = main_path + 'reading03_24hrSoak_at_25C/'
	path_LNA4  = main_path + 'reading04_24hrSoak_at_35C/'
	path_LNA5  = main_path + 'reading05_24hrSoak_at_25C/'
	path_LNA6  = main_path + 'reading06_24hrSoak_at_35C/'
	path_LNA7  = main_path + 'reading07_24hrSoak_at_25C/'
	path_LNA8  = main_path + 'reading08_24hrSoak_at_15C/'
	path_LNA9  = main_path + 'reading09_44hrSoak_at_25C/'
	path_LNA10 = main_path + 'reading10_105minPowerOff_at_25C/'
	path_LNA11 = main_path + 'reading11_330pm/'
	path_LNA12 = main_path + 'reading12_630pm/'
	path_LNA13 = main_path + 'reading13_315_after_weekend/'
	path_LNA14 = main_path + 'reading14_after_calibration/'





	# Receiver reflection coefficient
	# -------------------------------

	# Reading measurements
	o1,    fr = rc.s1p_read(path_LNA1 + 'Open.s1p')
	s1,    fr = rc.s1p_read(path_LNA1 + 'Short.s1p')
	l1,    fr = rc.s1p_read(path_LNA1 + 'Match.s1p')
	LNA1,  fr = rc.s1p_read(path_LNA1 + 'Receiver.s1p')

	o2,    fr = rc.s1p_read(path_LNA2 + 'Open.s1p')
	s2,    fr = rc.s1p_read(path_LNA2 + 'Short.s1p')
	l2,    fr = rc.s1p_read(path_LNA2 + 'Match.s1p')
	LNA2,  fr = rc.s1p_read(path_LNA2 + 'Receiver.s1p')

	o3,    fr = rc.s1p_read(path_LNA3 + 'Open.s1p')
	s3,    fr = rc.s1p_read(path_LNA3 + 'Short.s1p')
	l3,    fr = rc.s1p_read(path_LNA3 + 'Match.s1p')
	LNA3,  fr = rc.s1p_read(path_LNA3 + 'Receiver.s1p')

	o4,    fr = rc.s1p_read(path_LNA4 + 'Open.s1p')
	s4,    fr = rc.s1p_read(path_LNA4 + 'Short.s1p')
	l4,    fr = rc.s1p_read(path_LNA4 + 'Match.s1p')
	LNA4,  fr = rc.s1p_read(path_LNA4 + 'Receiver.s1p')

	o5,    fr = rc.s1p_read(path_LNA5 + 'Open.s1p')
	s5,    fr = rc.s1p_read(path_LNA5 + 'Short.s1p')
	l5,    fr = rc.s1p_read(path_LNA5 + 'Match.s1p')
	LNA5,  fr = rc.s1p_read(path_LNA5 + 'Receiver.s1p')

	o6,    fr = rc.s1p_read(path_LNA6 + 'Open.s1p')
	s6,    fr = rc.s1p_read(path_LNA6 + 'Short.s1p')
	l6,    fr = rc.s1p_read(path_LNA6 + 'Match.s1p')
	LNA6,  fr = rc.s1p_read(path_LNA6 + 'Receiver.s1p')

	o62,    fr = rc.s1p_read(path_LNA6 + 'Open2.s1p')
	s62,    fr = rc.s1p_read(path_LNA6 + 'Short2.s1p')
	l62,    fr = rc.s1p_read(path_LNA6 + 'Match2.s1p')
	LNA62,  fr = rc.s1p_read(path_LNA6 + 'Receiver2.s1p')

	o7,    fr = rc.s1p_read(path_LNA7 + 'Open.s1p')
	s7,    fr = rc.s1p_read(path_LNA7 + 'Short.s1p')
	l7,    fr = rc.s1p_read(path_LNA7 + 'Match.s1p')
	LNA7,  fr = rc.s1p_read(path_LNA7 + 'Receiver.s1p')

	o72,    fr = rc.s1p_read(path_LNA7 + 'Open2.s1p')
	s72,    fr = rc.s1p_read(path_LNA7 + 'Short2.s1p')
	l72,    fr = rc.s1p_read(path_LNA7 + 'Match2.s1p')
	LNA72,  fr = rc.s1p_read(path_LNA7 + 'Receiver2.s1p')

	o8,    fr = rc.s1p_read(path_LNA8 + 'Open.s1p')
	s8,    fr = rc.s1p_read(path_LNA8 + 'Short.s1p')
	l8,    fr = rc.s1p_read(path_LNA8 + 'Match.s1p')
	LNA8,  fr = rc.s1p_read(path_LNA8 + 'Receiver.s1p')

	o82,    fr = rc.s1p_read(path_LNA8 + 'Open2.s1p')
	s82,    fr = rc.s1p_read(path_LNA8 + 'Short2.s1p')
	l82,    fr = rc.s1p_read(path_LNA8 + 'Match2.s1p')
	LNA82,  fr = rc.s1p_read(path_LNA8 + 'Receiver2.s1p')	

	o9,    fr = rc.s1p_read(path_LNA9 + 'Open.s1p')
	s9,    fr = rc.s1p_read(path_LNA9 + 'Short.s1p')
	l9,    fr = rc.s1p_read(path_LNA9 + 'Match.s1p')
	LNA9,  fr = rc.s1p_read(path_LNA9 + 'Receiver.s1p')

	o92,    fr = rc.s1p_read(path_LNA9 + 'Open2.s1p')
	s92,    fr = rc.s1p_read(path_LNA9 + 'Short2.s1p')
	l92,    fr = rc.s1p_read(path_LNA9 + 'Match2.s1p')
	LNA92,  fr = rc.s1p_read(path_LNA9 + 'Receiver2.s1p')	

	o10,    fr = rc.s1p_read(path_LNA10 + 'Open.s1p')
	s10,    fr = rc.s1p_read(path_LNA10 + 'Short.s1p')
	l10,    fr = rc.s1p_read(path_LNA10 + 'Match.s1p')
	LNA10,  fr = rc.s1p_read(path_LNA10 + 'Receiver.s1p')

	o11,    fr = rc.s1p_read(path_LNA11 + 'Open.s1p')
	s11,    fr = rc.s1p_read(path_LNA11 + 'Short.s1p')
	l11,    fr = rc.s1p_read(path_LNA11 + 'Match.s1p')
	LNA11,  fr = rc.s1p_read(path_LNA11 + 'Receiver.s1p')

	o12,    fr = rc.s1p_read(path_LNA12 + 'Open.s1p')
	s12,    fr = rc.s1p_read(path_LNA12 + 'Short.s1p')
	l12,    fr = rc.s1p_read(path_LNA12 + 'Match.s1p')
	LNA12,  fr = rc.s1p_read(path_LNA12 + 'Receiver.s1p')

	o13,    fr = rc.s1p_read(path_LNA13 + 'Open.s1p')
	s13,    fr = rc.s1p_read(path_LNA13 + 'Short.s1p')
	l13,    fr = rc.s1p_read(path_LNA13 + 'Match.s1p')
	LNA13,  fr = rc.s1p_read(path_LNA13 + 'Receiver.s1p')	

	o14,    fr = rc.s1p_read(path_LNA14 + 'Open.s1p')
	s14,    fr = rc.s1p_read(path_LNA14 + 'Short.s1p')
	l14,    fr = rc.s1p_read(path_LNA14 + 'Match.s1p')
	LNA14,  fr = rc.s1p_read(path_LNA14 + 'Receiver.s1p')






	# Models of standards
	resistance_of_match = 49.97 # female
	md = 1
	oa, sa, la = rc.agilent_85033E(fr, resistance_of_match, md)	


	# Correction of measurements
	LNA1c, x1, x2, x3  = rc.de_embed(oa, sa, la, o1, s1, l1, LNA1)
	LNA2c, x1, x2, x3  = rc.de_embed(oa, sa, la, o2, s2, l2, LNA2)
	LNA3c, x1, x2, x3  = rc.de_embed(oa, sa, la, o3, s3, l3, LNA3)
	LNA4c, x1, x2, x3  = rc.de_embed(oa, sa, la, o4, s4, l4, LNA4)
	LNA5c, x1, x2, x3  = rc.de_embed(oa, sa, la, o5, s5, l5, LNA5)

	LNA6c,  x1, x2, x3  = rc.de_embed(oa, sa, la, o6, s6, l6, LNA6)
	LNA62c, x1, x2, x3  = rc.de_embed(oa, sa, la, o62, s62, l62, LNA62)
	LNA7c,  x1, x2, x3  = rc.de_embed(oa, sa, la, o7, s7, l7, LNA7)
	LNA72c, x1, x2, x3  = rc.de_embed(oa, sa, la, o72, s72, l72, LNA72)
	LNA8c,  x1, x2, x3  = rc.de_embed(oa, sa, la, o8, s8, l8, LNA8)
	LNA82c, x1, x2, x3  = rc.de_embed(oa, sa, la, o82, s82, l82, LNA82)
	LNA9c,  x1, x2, x3  = rc.de_embed(oa, sa, la, o9, s9, l9, LNA9)
	LNA92c, x1, x2, x3  = rc.de_embed(oa, sa, la, o92, s92, l92, LNA92)

	LNA10c, x1, x2, x3  = rc.de_embed(oa, sa, la, o10, s10, l10, LNA10)
	LNA11c, x1, x2, x3  = rc.de_embed(oa, sa, la, o11, s11, l11, LNA11)
	LNA12c, x1, x2, x3  = rc.de_embed(oa, sa, la, o12, s12, l12, LNA12)
	LNA13c, x1, x2, x3  = rc.de_embed(oa, sa, la, o13, s13, l13, LNA13)
	LNA14c, x1, x2, x3  = rc.de_embed(oa, sa, la, o14, s14, l14, LNA14)



	# Checking sensitivity to VNA variability
	LNA1d, x1, x2, x3   = rc.de_embed(oa, sa, la, o12, s12, l12, LNA1)
	LNA3d, x1, x2, x3   = rc.de_embed(oa, sa, la, o12, s12, l12, LNA3)
	LNA5d, x1, x2, x3   = rc.de_embed(oa, sa, la, o12, s12, l12, LNA5)
	LNA7d, x1, x2, x3   = rc.de_embed(oa, sa, la, o12, s12, l12, LNA7)
	LNA72d, x1, x2, x3  = rc.de_embed(oa, sa, la, o12, s12, l12, LNA72)
	LNA9d, x1, x2, x3   = rc.de_embed(oa, sa, la, o12, s12, l12, LNA9)
	LNA92d, x1, x2, x3  = rc.de_embed(oa, sa, la, o12, s12, l12, LNA92)
	LNA10d, x1, x2, x3  = rc.de_embed(oa, sa, la, o12, s12, l12, LNA10)
	LNA11d, x1, x2, x3  = rc.de_embed(oa, sa, la, o12, s12, l12, LNA11)
	LNA12d, x1, x2, x3  = rc.de_embed(oa, sa, la, o12, s12, l12, LNA12)
	LNA13d, x1, x2, x3  = rc.de_embed(oa, sa, la, o12, s12, l12, LNA13)
	LNA14d, x1, x2, x3  = rc.de_embed(oa, sa, la, o12, s12, l12, LNA14)















	fr_ff  = fr[((fr/1e6)>=50) & ((fr/1e6)<=100)]/1e6

	LNA_1ff = LNA1c[((fr/1e6)>=50) & ((fr/1e6)<=100)]   # Choosing LNA measurement (best is LNA2c, at 25degC)
	LNA_2ff = LNA2c[((fr/1e6)>=50) & ((fr/1e6)<=100)]
	LNA_3ff = LNA3c[((fr/1e6)>=50) & ((fr/1e6)<=100)] 
	LNA_4ff = LNA4c[((fr/1e6)>=50) & ((fr/1e6)<=100)] 
	LNA_5ff = LNA5c[((fr/1e6)>=50) & ((fr/1e6)<=100)]

	LNA_6ff  = LNA6c[((fr/1e6)>=50) & ((fr/1e6)<=100)]
	LNA_62ff = LNA62c[((fr/1e6)>=50) & ((fr/1e6)<=100)] 

	LNA_7ff  = LNA7c[((fr/1e6)>=50) & ((fr/1e6)<=100)]
	LNA_72ff = LNA72c[((fr/1e6)>=50) & ((fr/1e6)<=100)]

	LNA_8ff  = LNA8c[((fr/1e6)>=50) & ((fr/1e6)<=100)]
	LNA_82ff = LNA82c[((fr/1e6)>=50) & ((fr/1e6)<=100)] 

	LNA_9ff  = LNA9c[((fr/1e6)>=50) & ((fr/1e6)<=100)] 
	LNA_92ff = LNA92c[((fr/1e6)>=50) & ((fr/1e6)<=100)] 

	LNA_10ff  = LNA10c[((fr/1e6)>=50) & ((fr/1e6)<=100)] 
	LNA_11ff  = LNA11c[((fr/1e6)>=50) & ((fr/1e6)<=100)] 
	LNA_12ff  = LNA12c[((fr/1e6)>=50) & ((fr/1e6)<=100)]
	LNA_13ff  = LNA13c[((fr/1e6)>=50) & ((fr/1e6)<=100)] 
	LNA_14ff  = LNA14c[((fr/1e6)>=50) & ((fr/1e6)<=100)]



	LNA_1dff   = LNA1d[((fr/1e6)>=50) & ((fr/1e6)<=100)]   # Choosing LNA measurement (best is LNA2c, at 25degC)
	LNA_3dff   = LNA3d[((fr/1e6)>=50) & ((fr/1e6)<=100)] 
	LNA_5dff   = LNA5d[((fr/1e6)>=50) & ((fr/1e6)<=100)]

	LNA_7dff   = LNA7d[((fr/1e6)>=50) & ((fr/1e6)<=100)]
	LNA_72dff  = LNA72d[((fr/1e6)>=50) & ((fr/1e6)<=100)]

	LNA_9dff   = LNA9d[((fr/1e6)>=50) & ((fr/1e6)<=100)] 
	LNA_92dff  = LNA92d[((fr/1e6)>=50) & ((fr/1e6)<=100)] 

	LNA_10dff  = LNA10d[((fr/1e6)>=50) & ((fr/1e6)<=100)] 
	LNA_11dff  = LNA11d[((fr/1e6)>=50) & ((fr/1e6)<=100)] 
	LNA_12dff  = LNA12d[((fr/1e6)>=50) & ((fr/1e6)<=100)]
	LNA_13dff  = LNA13d[((fr/1e6)>=50) & ((fr/1e6)<=100)]
	LNA_14dff  = LNA14d[((fr/1e6)>=50) & ((fr/1e6)<=100)]






	if plot == 'yes':
		plt.close()
		plt.close()
		plt.close()
		plt.figure(1)

		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_1ff)), 'b')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_2ff)), 'r')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_3ff)), 'b')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_4ff)), 'r')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_5ff)), 'b')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_6ff)), 'r')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_62ff)), 'r')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_7ff)),  'b')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_72ff)), 'b')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_8ff)),  'g')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_82ff)), 'g')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_9ff)),  'b')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_92ff)), 'b')

		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_10ff)), 'b')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_11ff)), 'b')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_12ff)), 'b')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_13ff)), 'm')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_14ff)), 'k')




		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_1dff)),  'c')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_3dff)),  'c')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_5dff)),  'c')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_7dff)),  'c')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_72dff)), 'c')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_9dff)),  'c')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_92dff)), 'c')

		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_10dff)), 'c')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_11dff)), 'c')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_12dff)), 'c')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_13dff)), 'm')
		plt.plot(fr_ff, 20*np.log10(np.abs(LNA_14dff)), 'k')



	#plt.figure(2)

	return fr_ff, LNA_1ff, LNA_2ff, LNA_3ff, LNA_4ff, LNA_5ff, LNA_6ff, LNA_62ff, LNA_7ff, LNA_72ff, LNA_8ff, LNA_82ff, LNA_9ff, LNA_92ff, LNA_10ff, LNA_11ff, LNA_12ff














def plots_for_high_band_results_paper_only_uncertainties():

	path_files = home_folder + '/DATA/EDGES/receiver_calibration/calibration_march_2015/LNA/calibration_files/MC_calibration_files/cterms7_wterms7/'
	C1_MC  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_scale_set1.txt')
	C2_MC  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_offset_set1.txt')
	TU_MC  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TU_set1.txt')
	TC_MC  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TC_set1.txt')
	TS_MC  = np.genfromtxt(path_files + 'calibration_file_high_band_cterms7_wterms7_MC_TS_set1.txt')





	ff, ilow, ihigh = eg.frequency_edges(90, 190)
	fe = ff[(ilow):(ihigh+1)]


	s11_LNA_25, C1_25, C2_25, TU_25, TC_25, TS_25 = eg.receiver_calibration('high_band', fe, receiver_temperature=25, low_band_cal_file=1, high_band_cal_file=1)
	s11_LNA_26, C1_26, C2_26, TU_26, TC_26, TS_26 = eg.receiver_calibration('high_band', fe, receiver_temperature=26, low_band_cal_file=1, high_band_cal_file=1)
	s11_LNA_24, C1_24, C2_24, TU_24, TC_24, TS_24 = eg.receiver_calibration('high_band', fe, receiver_temperature=24, low_band_cal_file=1, high_band_cal_file=1)






	# --------------------------------------------------------------
	f1 = plt.figure(1)



	plt.subplot(7,2,1)

	DELTA_MAG = np.abs(np.abs(s11_LNA_26) - np.abs(s11_LNA_25))
	for i in range(10):
		k1 = np.random.normal()
		plt.plot(fe, 20*np.log10(np.abs(s11_LNA_25) + k1*DELTA_MAG/2) - 20*np.log10(np.abs(s11_LNA_25)), 'r')
		#plt.plot(fe, 20*np.log10(np.abs(s11_LNA_24)) - 20*np.log10(np.abs(s11_LNA_25)) , 'r')

	for i in range(10):
		k2 = np.random.normal()
		plt.plot(fe, 20*np.log10(np.abs(s11_LNA_25)+k2*1e-4) - 20*np.log10(np.abs(s11_LNA_25)), 'b')
	plt.xlim([80, 200])
	plt.xticks(np.arange(80,201,20), ())
	plt.ylabel(r'$|\Gamma_{\rm{rec}}|$' + '  [dB]', fontsize=16)




	plt.subplot(7,2,3)

	nominal_mag = np.abs(s11_LNA_25)
	DELTA_ANG = (180/np.pi)*np.unwrap(np.angle(s11_LNA_26)) - (180/np.pi)*np.unwrap(np.angle(s11_LNA_25))
	for i in range(10):
		k1 = np.random.normal()		
		plt.plot(fe, k1*DELTA_ANG/2, 'r')


	for i in range(10):
		k2          = np.random.normal()
		plt.plot(fe, k2*0.015/nominal_mag, 'b')	
	plt.xlim([80, 200])
	plt.xticks(np.arange(80,201,20), ())
	plt.ylabel(r'$\angle\Gamma_{\rm{rec}}$'+'  [deg]', fontsize=16)


	plt.subplot(7,2,5)
	DELTA_C1 = C1_26 - C1_25
	for i in range(10):
		k1 = np.random.normal()
		plt.plot(fe, 100*k1*DELTA_C1/2, 'r')

	for i in range(10):
		kk = np.random.randint(0,20)
		plt.plot(fe, 100*(C1_MC[kk,:]-C1_25), 'b')		


	plt.xlim([80, 200])
	plt.xticks(np.arange(80,201,20), ())
	plt.ylabel('$C_1$'+'  [%]', fontsize=16)





	plt.subplot(7,2,7)
	DELTA_C2 = C2_26 - C2_25
	for i in range(10):
		k1 = np.random.normal()
		plt.plot(fe, k1*DELTA_C2/2, 'r')

	for i in range(10):
		kk = np.random.randint(0,20)
		plt.plot(fe, (C2_MC[kk,:]-C2_25), 'b')		

	plt.xlim([80, 200])
	plt.xticks(np.arange(80,201,20), ())
	plt.ylabel('$C_2$ [K]', fontsize=16)


	plt.subplot(7,2,9)
	DELTA_TU = TU_26 - TU_25
	for i in range(10):
		k1 = np.random.normal()
		plt.plot(fe, k1*DELTA_TU/2, 'r')

	for i in range(10):
		kk = np.random.randint(0,20)
		plt.plot(fe, (TU_MC[kk,:]-TU_25), 'b')

	plt.xlim([80, 200])
	plt.xticks(np.arange(80,201,20), ())
	plt.ylabel('$T_U$ [K]', fontsize=16)

	plt.subplot(7,2,11)
	DELTA_TC = TC_26 - TC_25
	for i in range(10):
		k1 = np.random.normal()
		plt.plot(fe, k1*DELTA_TC/2, 'r')

	for i in range(10):
		kk = np.random.randint(0,20)
		plt.plot(fe, (TC_MC[kk,:]-TC_25), 'b')	

	plt.xlim([80, 200])
	plt.xticks(np.arange(80,201,20), ())
	plt.ylabel('$T_C$ [K]', fontsize=16)

	plt.subplot(7,2,13)
	DELTA_TS = TS_26 - TS_25
	for i in range(10):
		k1 = np.random.normal()
		plt.plot(fe, k1*DELTA_TS/2, 'r')

	for i in range(10):
		kk = np.random.randint(0,20)
		plt.plot(fe, (TS_MC[kk,:]-TS_25), 'b')	

	plt.xlim([80, 200])
	plt.xlabel(r'$\nu$ [MHz]')
	plt.ylabel('$T_S$ [K]', fontsize=16)














	path_antenna_s11_high_band = home_folder + '/DATA/EDGES/receiver_calibration/calibration_march_2015/antenna/models/parameters/'
	antenna_s11_file_212 = path_antenna_s11_high_band + 'par_antenna_s11_high_band_2015_212_14terms_polynomial.txt'
	antenna_s11_file_262 = path_antenna_s11_high_band + 'par_antenna_s11_high_band_2015_262_14terms_polynomial.txt'
	antenna_s11_file_av  = path_antenna_s11_high_band + 'par_antenna_s11_high_band_blade_average_14terms_polynomial.txt'

	s11_ant_212 = eg.models_antenna_s11(antenna_s11_file_212, 'high_band', fe, model_type='polynomial')
	s11_ant_262 = eg.models_antenna_s11(antenna_s11_file_262, 'high_band', fe, model_type='polynomial')
	s11_ant_av  = eg.models_antenna_s11(antenna_s11_file_av,  'high_band', fe, model_type='polynomial')




	plt.subplot(7,2,2)
	DELTA_MAG = np.abs(np.abs(s11_ant_212) - np.abs(s11_ant_av))
	for i in range(10):
		k1 = np.random.normal()
		plt.plot(fe, 20*np.log10(np.abs(s11_ant_av) + k1*DELTA_MAG/2) - 20*np.log10(np.abs(s11_ant_av)), 'r')
		#plt.plot(fe, 20*np.log10(np.abs(s11_ant_262)) - 20*np.log10(np.abs(s11_ant_av)))

	for i in range(10):
		k2 = np.random.normal()
		plt.plot(fe, 20*np.log10(np.abs(s11_ant_av) + k2*1e-4) - 20*np.log10(np.abs(s11_ant_av)), 'b')
	plt.xticks(np.arange(80,201,20), ())
	plt.xlim([80, 200])
	plt.ylabel(r'$|\Gamma_{\rm{ant}}|$' + '  [dB]', fontsize=16)		


	plt.subplot(7,2,4)

	nominal_mag = np.abs(s11_ant_av)
	DELTA_ANG = (180/np.pi)*np.unwrap(np.angle(s11_ant_212)) - (180/np.pi)*np.unwrap(np.angle(s11_ant_av))
	for i in range(10):
		k1 = np.random.normal()		
		plt.plot(fe, k1*DELTA_ANG/2, 'r')


	for i in range(10):
		k2          = np.random.normal()
		plt.plot(fe, k2*0.015/nominal_mag, 'b')
	plt.xticks(np.arange(80,201,20), ())
	plt.xlim([80, 200])
	plt.ylabel(r'$\angle\Gamma_{\rm{ant}}$' + '  [deg]', fontsize=16)












	plt.subplot(7,2,6)
	plt.xticks(np.arange(80,201,20), ())
	plt.xlim([80, 200])
	plt.ylabel(r'$\eta_a$' + '  [%]', fontsize=16)


	plt.subplot(7,2,8)
	plt.xticks(np.arange(80,201,20), ())
	plt.xlim([80, 200])
	plt.ylabel(r'$\eta_b$' + '  [%]', fontsize=16)


	plt.subplot(7,2,10)
	plt.xticks(np.arange(80,201,20), ())
	plt.xlim([80, 200])	
	plt.ylabel(r'$\eta_c$' + '  [%]', fontsize=16)




	plt.subplot(7,2,12)

	# Ground loss file
	path_ground_loss_high_band = home_folder + '/DATA/EDGES/loss/high_band/ground_loss/'
	ground_loss_file           = path_ground_loss_high_band + 'Blade_Percentage_Loss_in_field_size.txt'
	Gg_tom  = eg.ground_loss(ground_loss_file, 'high_band', fe, nterms = 35)
	Gg_alan = eg.ground_loss_alan(fe)
	Gg_05   = 1 - (0.5/100)

	for i in range(10):
		k1 = np.random.normal()
		plt.plot(fe, 100*k1*(Gg_alan-Gg_05)/2, 'r')

	for i in range(10):
		k1 = np.random.normal()
		plt.plot(fe, 100*k1*(Gg_tom-Gg_05)/2, 'b')

	for i in range(10):
		k1 = np.random.normal()
		plt.plot(fe, 100*k1*0.001*np.ones(len(fe)), 'g')


	plt.xticks(np.arange(80,201,20), ())
	plt.xlim([80, 200])
	plt.ylabel(r'$\eta_d$' + '  [%]', fontsize=16)






	plt.subplot(7,2,14)
	plt.xlim([80, 200])
	plt.xlabel(r'$\nu$ [MHz]')
	plt.ylabel(r'$B_{\rm{factor}}$' + '  [%]', fontsize=16)



	return 0

















def high_band_correlation_rms_vs_temperature():

	# ###############
	FILE_NUMBER = 10
	RECV_TEMP   = '25'
	fin, tc_all, wc_all, wea_all, LST_all          = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                         = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all_25, rms_110_all_25 = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	


	RECV_TEMP   = 'actual'
	fin, tc_all, wc_all, wea_all, LST_all    = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                   = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all, rms_110_all = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	

	WW = np.hstack((we_all, rms_all_25.reshape(-1,1), rms_110_all_25.reshape(-1,1), rms_all.reshape(-1,1), rms_110_all.reshape(-1,1)))
	np.savetxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_0.76.txt', WW)





	# ###############
	FILE_NUMBER = 11
	RECV_TEMP   = '25'
	fin, tc_all, wc_all, wea_all, LST_all          = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                         = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all_25, rms_110_all_25 = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	


	RECV_TEMP   = 'actual'
	fin, tc_all, wc_all, wea_all, LST_all    = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                   = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all, rms_110_all = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	

	WW = np.hstack((we_all, rms_all_25.reshape(-1,1), rms_110_all_25.reshape(-1,1), rms_all.reshape(-1,1), rms_110_all.reshape(-1,1)))
	np.savetxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_1.76.txt', WW)	





	# ###############
	FILE_NUMBER = 12
	RECV_TEMP   = '25'
	fin, tc_all, wc_all, wea_all, LST_all          = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                         = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all_25, rms_110_all_25 = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	


	RECV_TEMP   = 'actual'
	fin, tc_all, wc_all, wea_all, LST_all    = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                   = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all, rms_110_all = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	

	WW = np.hstack((we_all, rms_all_25.reshape(-1,1), rms_110_all_25.reshape(-1,1), rms_all.reshape(-1,1), rms_110_all.reshape(-1,1)))
	np.savetxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_2.76.txt', WW)




	# ###############
	FILE_NUMBER = 13
	RECV_TEMP   = '25'
	fin, tc_all, wc_all, wea_all, LST_all          = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                         = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all_25, rms_110_all_25 = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	


	RECV_TEMP   = 'actual'
	fin, tc_all, wc_all, wea_all, LST_all    = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                   = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all, rms_110_all = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	

	WW = np.hstack((we_all, rms_all_25.reshape(-1,1), rms_110_all_25.reshape(-1,1), rms_all.reshape(-1,1), rms_110_all.reshape(-1,1)))
	np.savetxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_3.76.txt', WW)	




	# ###############
	FILE_NUMBER = 14
	RECV_TEMP   = '25'
	fin, tc_all, wc_all, wea_all, LST_all          = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                         = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all_25, rms_110_all_25 = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	


	RECV_TEMP   = 'actual'
	fin, tc_all, wc_all, wea_all, LST_all    = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                   = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all, rms_110_all = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	

	WW = np.hstack((we_all, rms_all_25.reshape(-1,1), rms_110_all_25.reshape(-1,1), rms_all.reshape(-1,1), rms_110_all.reshape(-1,1)))
	np.savetxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_4.76.txt', WW)





	# ###############
	FILE_NUMBER = 15
	RECV_TEMP   = '25'
	fin, tc_all, wc_all, wea_all, LST_all          = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                         = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all_25, rms_110_all_25 = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	


	RECV_TEMP   = 'actual'
	fin, tc_all, wc_all, wea_all, LST_all    = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                   = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all, rms_110_all = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	

	WW = np.hstack((we_all, rms_all_25.reshape(-1,1), rms_110_all_25.reshape(-1,1), rms_all.reshape(-1,1), rms_110_all.reshape(-1,1)))
	np.savetxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_5.76.txt', WW)	





	# ###############
	FILE_NUMBER = 16
	RECV_TEMP   = '25'
	fin, tc_all, wc_all, wea_all, LST_all          = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                         = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all_25, rms_110_all_25 = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	


	RECV_TEMP   = 'actual'
	fin, tc_all, wc_all, wea_all, LST_all    = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                   = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all, rms_110_all = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	

	WW = np.hstack((we_all, rms_all_25.reshape(-1,1), rms_110_all_25.reshape(-1,1), rms_all.reshape(-1,1), rms_110_all.reshape(-1,1)))
	np.savetxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_6.76.txt', WW)





	# ###############
	FILE_NUMBER = 33
	RECV_TEMP   = '25'
	fin, tc_all, wc_all, wea_all, LST_all          = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                         = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all_25, rms_110_all_25 = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	


	RECV_TEMP   = 'actual'
	fin, tc_all, wc_all, wea_all, LST_all    = eg.data_analysis_calibration('high_band_2015', 'season', season_file_number=FILE_NUMBER, receiver_temperature=RECV_TEMP)
	tx_all, wx_all, we_all                   = eg.data_analysis_daily_spectra_filter('high_band_2015', FILE_NUMBER, tc_all, wc_all, wea_all)
	fb, rb_all, wb_all, rms_all, rms_110_all = eg.data_analysis_residuals_array(fin, tx_all, wx_all, flow=90, fhigh=190, model_type='Physical_model', fnorm=140, nfg=5, fbin=0.4)	

	WW = np.hstack((we_all, rms_all_25.reshape(-1,1), rms_110_all_25.reshape(-1,1), rms_all.reshape(-1,1), rms_110_all.reshape(-1,1)))
	np.savetxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_23.76.txt', WW)



	return 0










def plot_high_band_correlation_rms_vs_temp():


	d0 = np.genfromtxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_0.76.txt')
	d1 = np.genfromtxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_1.76.txt')
	d2 = np.genfromtxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_2.76.txt')
	d3 = np.genfromtxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_3.76.txt')
	d4 = np.genfromtxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_4.76.txt')
	d5 = np.genfromtxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_5.76.txt')
	d6 = np.genfromtxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_6.76.txt')
	d23 = np.genfromtxt('/home/ramo7131/Desktop/correlation_rms_vs_temp/LST_23.76.txt')

	plt.figure(1)

	plt.subplot(8, 3, 1)
	plt.scatter(d23[:,4], 1000*d23[:,7], c=np.arange(0,len(d23[:,0])), linewidths=0)
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))
	plt.grid()
	plt.ylabel('GHA 6 [Hr]\n \n RMS [mK]')

	plt.subplot(8, 3, 2)
	plt.plot(d23[:,4], 1000*d23[:,7], '.')
	plt.plot(d23[:,4], 1000*d23[:,9], 'r.')
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))
	plt.grid()
	plt.legend(['uncorrected','corrected'], fontsize=9, loc=0)

	plt.subplot(8, 3, 3)
	plt.hist(1000*d23[:,7], bins=20, range=[0, 500], orientation='horizontal', histtype='stepfilled', color='blue')
	plt.hist(1000*d23[:,9], bins=20, range=[0, 500], orientation='horizontal', histtype='step', color='red', linewidth=2)
	plt.xlim([0,80])
	plt.grid()
	plt.legend(['uncorrected','corrected'], fontsize=9, loc=0)


	plt.subplot(8, 3, 4)
	plt.scatter(d0[:,4], 1000*d0[:,7], c=np.arange(0,len(d0[:,0])), linewidths=0)
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))
	plt.grid()
	plt.ylabel('GHA 7 [Hr]\n \n RMS [mK]')

	plt.subplot(8, 3, 5)
	plt.plot(d0[:,4], 1000*d0[:,7], '.')
	plt.plot(d0[:,4], 1000*d0[:,9], 'r.')
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))	
	plt.grid()

	plt.subplot(8, 3, 6)
	plt.hist(1000*d0[:,7], bins=20, range=[0, 500], orientation='horizontal', histtype='stepfilled', color='blue')
	plt.hist(1000*d0[:,9], bins=20, range=[0, 500], orientation='horizontal', histtype='step', color='red', linewidth=2)
	plt.xlim([0,80])
	plt.grid()




	plt.subplot(8, 3, 7)
	plt.scatter(d1[:,4], 1000*d1[:,7], c=np.arange(0,len(d1[:,0])), linewidths=0)
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))
	plt.grid()
	plt.ylabel('GHA 8 [Hr]\n \n RMS [mK]')

	plt.subplot(8, 3, 8)
	plt.plot(d1[:,4], 1000*d1[:,7], '.')
	plt.plot(d1[:,4], 1000*d1[:,9], 'r.')
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))
	plt.grid()

	plt.subplot(8, 3, 9)
	plt.hist(1000*d1[:,7], bins=20, range=[0, 500], orientation='horizontal', histtype='stepfilled', color='blue')
	plt.hist(1000*d1[:,9], bins=20, range=[0, 500], orientation='horizontal', histtype='step', color='red', linewidth=2)
	plt.xlim([0,80])
	plt.grid()	




	plt.subplot(8, 3, 10)
	plt.scatter(d2[:,4], 1000*d2[:,7], c=np.arange(0,len(d2[:,0])), linewidths=0)
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))
	plt.grid()
	plt.ylabel('GHA 9 [Hr]\n \n RMS [mK]')

	plt.subplot(8, 3, 11)
	plt.plot(d2[:,4], 1000*d2[:,7], '.')
	plt.plot(d2[:,4], 1000*d2[:,9], 'r.')
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))	
	plt.grid()

	plt.subplot(8, 3, 12)
	plt.hist(1000*d2[:,7], bins=20, range=[0, 500], orientation='horizontal', histtype='stepfilled', color='blue')
	plt.hist(1000*d2[:,9], bins=20, range=[0, 500], orientation='horizontal', histtype='step', color='red', linewidth=2)
	plt.xlim([0,80])
	plt.grid()	




	plt.subplot(8, 3, 13)
	plt.scatter(d3[:,4], 1000*d3[:,7], c=np.arange(0,len(d3[:,0])), linewidths=0)
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))
	plt.grid()
	plt.ylabel('GHA 10 [Hr]\n \n RMS [mK]')

	plt.subplot(8, 3, 14)
	plt.plot(d3[:,4], 1000*d3[:,7], '.')
	plt.plot(d3[:,4], 1000*d3[:,9], 'r.')
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))	
	plt.grid()

	plt.subplot(8, 3, 15)
	plt.hist(1000*d3[:,7], bins=20, range=[0, 500], orientation='horizontal', histtype='stepfilled', color='blue')
	plt.hist(1000*d3[:,9], bins=20, range=[0, 500], orientation='horizontal', histtype='step', color='red', linewidth=2)
	plt.xlim([0,80])
	plt.grid()




	plt.subplot(8, 3, 16)
	plt.scatter(d4[:,4], 1000*d4[:,7], c=np.arange(0,len(d4[:,0])), linewidths=0)
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))
	plt.grid()
	plt.ylabel('GHA 11 [Hr]\n \n RMS [mK]')

	plt.subplot(8, 3, 17)
	plt.plot(d4[:,4], 1000*d4[:,7], '.')
	plt.plot(d4[:,4], 1000*d4[:,9], 'r.')
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))	
	plt.grid()

	plt.subplot(8, 3, 18)
	plt.hist(1000*d4[:,7], bins=20, range=[0, 500], orientation='horizontal', histtype='stepfilled', color='blue')
	plt.hist(1000*d4[:,9], bins=20, range=[0, 500], orientation='horizontal', histtype='step', color='red', linewidth=2)
	plt.xlim([0,80])
	plt.grid()




	plt.subplot(8, 3, 19)
	plt.scatter(d5[:,4], 1000*d5[:,7], c=np.arange(0,len(d5[:,0])), linewidths=0)
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))
	plt.grid()
	plt.ylabel('GHA 12 [Hr]\n \n RMS [mK]')

	plt.subplot(8, 3, 20)
	plt.plot(d5[:,4], 1000*d5[:,7], '.')
	plt.plot(d5[:,4], 1000*d5[:,9], 'r.')
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))	
	plt.grid()

	plt.subplot(8, 3, 21)
	plt.hist(1000*d5[:,7], bins=20, range=[0, 500], orientation='horizontal', histtype='stepfilled', color='blue')
	plt.hist(1000*d5[:,9], bins=20, range=[0, 500], orientation='horizontal', histtype='step', color='red', linewidth=2)
	plt.xlim([0,80])
	plt.grid()




	plt.subplot(8, 3, 22)
	plt.scatter(d6[:,4], 1000*d6[:,7], c=np.arange(0,len(d6[:,0])), linewidths=0)
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))
	plt.grid()
	plt.ylabel('GHA 13 [Hr]\n \n RMS [mK]')
	plt.xlabel('receiver temperature [$^{\circ}$C]')

	plt.subplot(8, 3, 23)
	plt.plot(d6[:,4], 1000*d6[:,7], '.')
	plt.plot(d6[:,4], 1000*d6[:,9], 'r.')
	plt.xlim([18, 27])
	plt.ylim([0, 500])
	plt.yticks(np.arange(0,501,100))	
	plt.grid()
	plt.xlabel('receiver temperature [$^{\circ}$C]')

	plt.subplot(8, 3, 24)
	plt.hist(1000*d6[:,7], bins=20, range=[0, 500], orientation='horizontal', histtype='stepfilled', color='blue')
	plt.hist(1000*d6[:,9], bins=20, range=[0, 500], orientation='horizontal', histtype='step', color='red', linewidth=2)
	plt.xlim([0,80])
	plt.grid()
	plt.xlabel('number of samples')


	return 0








def test_123():

	f, t, w, d  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/high_band_2015_LST_0.26_6.26_all_files_20170123.hdf5')

	tsel = t[0:164,:]
	wsel = w[0:164,:]
	dsel = d[0:164,:]


	avt, avw    =  eg.spectral_averaging(tsel, wsel)
	fb, tb, wb  =  eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')

	fbb, r0, wRMS0, z, dz, res, wRMS, T6, p_rec, dp_rec, dr, dz_line, dr_line = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=fb, tin=tb, win=wb, foreground_model='EDGES_polynomial', nterms_fg=14, signal_model='tanh', T21_K_ref_list=[0.028], flow=110, fhigh=190, z_alpha=0, save='no', save_flag='kkk')


	plt.close()
	#plt.figure(1);plt.subplot(2,1,1);plt.plot(eg.frequency2redshift(fbb), r0);plt.xlim([12, 6]);plt.ylim([-0.04, 0.04]); plt.subplot(2,1,2);plt.plot(z, dr_line);plt.xlim([12, 6]);plt.ylim([0,1])
	#plt.figure(1);plt.subplot(2,1,1);   plt.plot(fbb, r0);plt.xlim([110, 190]);plt.ylim([-0.04, 0.04]);      plt.subplot(2,1,2);plt.plot(eg.redshift2frequency(z), dr_line);plt.xlim([110, 190]);plt.ylim([0,1])

	plt.figure(1);plt.subplot(2,1,1);   plt.plot(fbb, r0);plt.xlim([110, 190]);plt.ylim([-0.04, 0.04]);  plt.subplot(2,1,2);plt.plot(eg.redshift2frequency(z), dz_line);  plt.plot(eg.redshift2frequency(z), dr_line);    plt.xlim([110, 190]);plt.ylim([0,1])


	return wRMS0












def plots_for_report_20170131(figure1='no', figure2='no', figure3='no', figure4='no', figure5='no', figure6='no'):

	v = np.arange(110, 190.2, 0.4)

	if figure1=='yes':

		# Computations
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise1_K, noise_realization1_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr)
		sigma_noise2_K, noise_realization2_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr/4)

		Tant1_K = TantK_no_noise + noise_realization1_K
		Tant2_K = TantK_no_noise + noise_realization2_K



		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec, dp_rec, dr, dz_line1_5terms, dr_line1_5terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant1_K, win=2/(sigma_noise1_K**2), foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')

		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec, dp_rec, dr, dz_line1_14terms, dr_line1_14terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant1_K, win=2/(sigma_noise1_K**2), foreground_model='EDGES_polynomial', nterms_fg=14, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')


		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec, dp_rec, dr, dz_line2_5terms, dr_line2_5terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant2_K, win=2/(sigma_noise2_K**2), foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')

		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec, dp_rec, dr, dz_line2_14terms, dr_line2_14terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant2_K, win=2/(sigma_noise2_K**2), foreground_model='EDGES_polynomial', nterms_fg=14, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')





		# Plots
		plt.close()
		plt.close()
		plt.close()

		plt.figure(1, figsize=[8.5, 7.5])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*noise_realization1_K, 'b')
		plt.plot(v, 1000*noise_realization2_K, 'r')
		plt.plot(v, 1000*noise_realization1_K, 'b')
		plt.xlim([110, 190])
		plt.ylim([-50, 50])
		plt.ylabel('Measurement Noise [mK]')
		plt.legend(['noise 1','noise 2'])



		plt.subplot(2,1,2)
		plt.plot(eg.redshift2frequency(z), dz_line1_5terms, 'b', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dz_line1_14terms, 'r', linewidth=2)

		plt.plot(eg.redshift2frequency(z), dz_line2_5terms, 'b--', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dz_line2_14terms, 'r--', linewidth=2)		

		plt.xlim([110, 190])
		plt.ylim([0, 1.7])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('$\Delta z$', fontsize=18)
		plt.legend(['5 terms, noise 1','14 terms, noise 1', '5 terms, noise 2','14 terms, noise 2'])
		plt.text(112, 1.3, r'constraints from $\sigma_{A_{21}} \leq \frac{28\;\;\mathrm{mK}}{2}$', fontsize=16)






		










	if figure2 == 'yes':

		# Computations
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise1_K, noise_realization1_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr)
		sigma_noise2_K, noise_realization2_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr)
		sigma_noise3_K, noise_realization3_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr)

		Tant1_K = TantK_no_noise + noise_realization1_K
		Tant2_K = TantK_no_noise + noise_realization2_K
		Tant3_K = TantK_no_noise + noise_realization3_K

		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec, dp_rec, dr, dz_line1_5terms, dr_line1_5terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant1_K, win=2/(sigma_noise1_K**2), foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')

		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec, dp_rec, dr, dz_line2_5terms, dr_line2_5terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant2_K, win=2/(sigma_noise1_K**2), foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')

		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec, dp_rec, dr, dz_line3_5terms, dr_line3_5terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant3_K, win=2/(sigma_noise1_K**2), foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')



		# Plots
		plt.close()
		plt.close()
		plt.close()

		plt.figure(1, figsize=[8.5, 7.5])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*(noise_realization1_K)+80, 'r')
		plt.plot(v, 1000*(noise_realization2_K)+40, 'b')
		plt.plot(v, 1000*(noise_realization3_K)-0, 'k')
		plt.xlim([110, 190])
		plt.ylim([-40, 120])
		plt.ylabel('Measurement Noise' + '\n' + '20 mK Per Division')
		plt.yticks(np.arange(-40, 121, 20),[])



		plt.subplot(2,1,2)
		plt.plot(eg.redshift2frequency(z), dz_line1_5terms, 'r--', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dr_line1_5terms, 'r', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dz_line2_5terms, 'b--', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dz_line3_5terms, 'k--', linewidth=2)

		plt.plot(eg.redshift2frequency(z), dr_line1_5terms, 'r', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dr_line2_5terms, 'b', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dr_line3_5terms, 'k', linewidth=2)

		plt.xlim([110, 190])
		plt.ylim([0, 1.7])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('$\Delta z$', fontsize=18)
		plt.legend([r'$2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', r'$\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$'], ncol=2)
		#plt.text(112, 1.3, r'constraints from $\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', fontsize=16)



		# Save plot
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170131/figures/'
		plt.savefig(path_plot_save + 'figure2.pdf', bbox_inches='tight')
		plt.close()
		plt.close()		









	if figure3 == 'yes':

		# Computations
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr)
		sys1 = 0.007*np.cos(10*np.pi* v/np.max(v))
		sys2 = 0.007*np.cos(30*np.pi* v/np.max(v))

		Tant1_K = TantK_no_noise + noise_realization_K
		Tant2_K = TantK_no_noise + noise_realization_K + sys1 + sys2

		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec, dp_rec, dr, dz_line1_5terms, dr_line1_5terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant1_K, win=2/(sigma_noise_K**2), foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')

		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec, dp_rec, dr, dz_line2_5terms, dr_line2_5terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant2_K, win=2/(sigma_noise_K**2), foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')



		# Plots
		plt.close()
		plt.close()
		plt.close()

		plt.figure(1, figsize=[8.5, 7.5])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*(noise_realization_K) + 60, 'r')
		plt.plot(v, 1000*(noise_realization_K  + sys1 + sys2), 'b')
		plt.xlim([110, 190])
		plt.ylim([-40, 100])
		plt.ylabel('Noise and Systematics' + '\n' + '20 mK Per Division')
		plt.yticks(np.arange(-40, 101, 20),[])
		plt.legend(['Noise','Noise + Systematics'], ncol=2)



		plt.subplot(2,1,2)
		plt.plot(eg.redshift2frequency(z), dz_line1_5terms, 'r--', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dr_line1_5terms, 'r', linewidth=2)

		plt.plot(eg.redshift2frequency(z), dz_line2_5terms, 'b--', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dr_line2_5terms, 'b', linewidth=2)
		plt.xlim([110, 190])
		plt.ylim([0, 1.7])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('$\Delta z$', fontsize=18)
		plt.legend([r'N: $2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', r'N: $\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', r'N+S: $2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', r'N+S: $\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$'], ncol=2)
		#plt.text(112, 1.3, r'constraints from $\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', fontsize=16)



		# Save plot
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170131/figures/'
		plt.savefig(path_plot_save + 'figure3.pdf', bbox_inches='tight')
		plt.close()
		plt.close()		










	if figure4 == 'yes':

		# Computations
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr)
		sys1, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=8, dz=0.5, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025)            #0.007*np.cos(10*np.pi* v/np.max(v))
		sys2, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=10, dz=0.2, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025) 

		Tant1_K = TantK_no_noise + noise_realization_K + sys1
		Tant2_K = TantK_no_noise + noise_realization_K + sys2
		Tant3_K = TantK_no_noise + noise_realization_K



		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec1, dp_rec1, dr1, dz_line1_5terms, dr_line1_5terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant1_K, win=2/(sigma_noise_K**2), foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')

		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec2, dp_rec2, dr2, dz_line2_5terms, dr_line2_5terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant2_K, win=2/(sigma_noise_K**2), foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')


		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec3, dp_rec3, dr3, dz_line3_5terms, dr_line3_5terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant3_K, win=2/(sigma_noise_K**2), foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')







		# Plots
		plt.close()
		plt.close()
		plt.close()

		plt.figure(1, figsize=[8.5, 7.5])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*(noise_realization_K + sys1) + 0, 'r')
		plt.plot(v, 1000*(noise_realization_K + sys2) - 20, 'b')
		plt.plot([eg.redshift2frequency(10), eg.redshift2frequency(10)],[-40, 40], 'k--')
		plt.plot([eg.redshift2frequency(8), eg.redshift2frequency(8)],[-40, 40], 'k--')
		plt.xlim([110, 190])
		plt.ylim([-40, 40])
		plt.ylabel('Noise and Signal' + '\n' + '20 mK Per Division')
		plt.yticks(np.arange(-40, 41, 20),[])
		plt.legend(['$z_r=8$, $\Delta z=0.5$','$z_r=10$, $\Delta z=0.2$'], ncol=1, loc=0)
		plt.grid()



		plt.subplot(2,1,2)
		plt.plot(eg.redshift2frequency(z), dz_line1_5terms, 'r--', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dr_line1_5terms, 'r', linewidth=2)

		plt.plot(eg.redshift2frequency(z), dz_line2_5terms, 'b--', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dr_line2_5terms, 'b', linewidth=2)

		plt.plot([eg.redshift2frequency(10), eg.redshift2frequency(10)],[0, 2], 'k--')
		plt.plot([eg.redshift2frequency(8), eg.redshift2frequency(8)],[0, 2], 'k--')		

		plt.xlim([110, 190])
		plt.ylim([0, 1.7])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('$\Delta z$', fontsize=18)
		plt.legend([r'$2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', r'$\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', r'$2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', r'$\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$'], ncol=2)
		#plt.text(112, 1.3, r'constraints from $\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', fontsize=16)



		# Save plot
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170131/figures/'
		plt.savefig(path_plot_save + 'figure4.pdf', bbox_inches='tight')
		plt.close()
		plt.close()















		# Plots
		plt.close()
		plt.close()
		plt.close()



		fig = plt.figure(2, figsize=(14, 14))


		x0 = 0.08
		y0 = 0.05
		dx = 0.25
		dy = 0.23

		dxcb = 0.015



		ax1 = fig.add_axes([x0, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(eg.frequency2redshift(v), 1000*(noise_realization_K), 'b')
		ax1.plot([12, 6.5], [0, 0], 'r')
		plt.ylim([-40, 40])
		plt.xlim([12, 6.5])
		plt.ylabel('Noise and Signal [mK]')
		plt.grid()
		plt.title('Noise Only')


		ax2 = fig.add_axes([x0, y0 + 2*(y0/2) + 2*dy, dx, dy])
		im  = ax2.imshow(np.flipud(np.fliplr(p_rec3))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-2, 2])
		plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlim([12, 6.5])
		plt.grid()
		#cbaxes = fig.add_axes([x0+dx, y0 + 2*(y0/2) + 2*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2])
		#cb.set_label(r'$\hat{A}_{21}/\;28\;\mathrm{mK}$', fontsize=14)			




		ax3 = fig.add_axes([x0, y0 + 1*(y0/2) + dy, dx, dy])
		im  = ax3.imshow(np.flipud(np.fliplr(dp_rec3))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([0, 2])
		plt.ylabel(r'$\Delta z$', fontsize=18)

		ax3.plot(z, dz_line3_5terms, 'w--', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()
		#cbaxes = fig.add_axes([x0+dx, y0 + 1*(y0/2) + 1*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[0, 0.5, 1, 1.5, 2])
		#cb.set_label(r'$\sigma_{A_{21}}/\;28\;\mathrm{mK}$', fontsize=14)




		ax4 = fig.add_axes([x0, y0, dx, dy])
		im  = ax4.imshow(np.flipud(np.fliplr(dr3[:,:,0])), interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-4, 4])
		plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlabel(r'$z$', fontsize=18)

		ax4.plot(z, dz_line3_5terms, 'w--', linewidth=3)
		ax4.plot(z, dr_line3_5terms, 'w', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()
		#cbaxes = fig.add_axes([x0+dx, y0 + 0*(y0/2) + 0*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[-4, -3, -2, -1, 0, 1, 2, 3, 4])
		#cb.set_label(r'# $\sigma_{A_{21}}$', fontsize=14)		












		ax1 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(eg.frequency2redshift(v), 1000*(noise_realization_K + sys1), 'b')
		h1 = ax1.plot(eg.frequency2redshift(v), 1000*(sys1), 'r', label=r'$z_r=8$, $\Delta z =0.5$')
		ax1.set_yticks(np.arange(-40, 41, 10))
		ax1.set_yticklabels(['','','','','','','','',''])
		plt.ylim([-40, 40])
		plt.xlim([12, 6.5])
		#plt.ylabel('Noise and Signal [mK]')
		plt.grid()
		plt.title('Signal 1 + Noise')
		ax1.legend(h1, [r'$z_r=8$, $\Delta z =0.5$'], loc=3, fontsize=18)


		ax2 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 2*(y0/2) + 2*dy, dx, dy])
		im  = ax2.imshow(np.flipud(np.fliplr(p_rec1))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-2, 2])
		ax2.set_yticklabels([])
		ax2.plot(8, 0.5, 'w.', markersize=20)
		plt.xlim([12, 6.5])
		plt.grid()
		#plt.ylabel(r'$\Delta z$', fontsize=18)

		#cbaxes = fig.add_axes([x0+dx + dx + 2*dxcb, y0 + 2*(y0/2) + 2*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2])
		#cb.set_label(r'$\hat{A}_{21}/\;28\;\mathrm{mK}$', fontsize=14)





		ax3 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 1*(y0/2) + dy, dx, dy])
		im  = ax3.imshow(np.flipud(np.fliplr(dp_rec1))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([0, 2])
		ax3.set_yticklabels([])
		ax3.plot(8, 0.5, 'w.', markersize=20)
		#plt.ylabel(r'$\Delta z$', fontsize=18)

		ax3.plot(z, dz_line1_5terms, 'w--', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()
		#cbaxes = fig.add_axes([x0 + dx + dx + 2*dxcb, y0 + 1*(y0/2) + 1*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[0, 0.5, 1, 1.5, 2])
		#cb.set_label(r'$\sigma_{A_{21}}/\;28\;\mathrm{mK}$', fontsize=14)




		ax4 = fig.add_axes([x0 + dx + 1*dxcb, y0, dx, dy])
		im  = ax4.imshow(np.flipud(np.fliplr(dr1[:,:,0])), interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-4, 4])
		ax4.set_yticklabels([])
		ax4.plot(8, 0.5, 'k.', markersize=20)
		#plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlabel(r'$z$', fontsize=18)

		ax4.plot(z, dz_line1_5terms, 'w--', linewidth=3)
		ax4.plot(z, dr_line1_5terms, 'w', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()
		#cbaxes = fig.add_axes([x0 + dx + dx + 2*dxcb, y0 + 0*(y0/2) + 0*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[-4, -3, -2, -1, 0, 1, 2, 3, 4])
		#cb.set_label(r'# $\sigma_{A_{21}}$', fontsize=14)		










		ax1 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(eg.frequency2redshift(v), 1000*(noise_realization_K + sys2), 'b')
		h1 = ax1.plot(eg.frequency2redshift(v), 1000*(sys2), 'r', label=r'$z_r=10$, $\Delta z =0.2$')
		ax1.set_yticks(np.arange(-40, 41, 10))
		ax1.set_yticklabels(['','','','','','','','',''])
		plt.ylim([-40, 40])
		plt.xlim([12, 6.5])
		#plt.ylabel('Noise and Signal [mK]')
		plt.grid()
		plt.title('Signal 2 + Noise')
		ax1.legend(h1, [r'$z_r=10$, $\Delta z =0.2$'], loc=3, fontsize=18)


		ax2 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 2*(y0/2) + 2*dy, dx, dy])
		im  = ax2.imshow(np.flipud(np.fliplr(p_rec2))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-2, 2])
		ax2.set_yticklabels([])
		ax2.plot(10, 0.2, 'w.', markersize=20)
		#plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlim([12, 6.5])
		plt.grid()

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 2*(y0/2) + 2*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2])
		cb.set_label(r'$\hat{A}_{21}/\;28\;\mathrm{mK}$', fontsize=14)





		ax3 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 1*(y0/2) + dy, dx, dy])
		im  = ax3.imshow(np.flipud(np.fliplr(dp_rec2))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([0, 2])
		ax3.set_yticklabels([])
		ax3.plot(10, 0.2, 'w.', markersize=20)
		#plt.ylabel(r'$\Delta z$', fontsize=18)

		ax3.plot(z, dz_line2_5terms, 'w--', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 1*(y0/2) + 1*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[0, 0.5, 1, 1.5, 2])
		cb.set_label(r'$\sigma_{A_{21}}/\;28\;\mathrm{mK}$', fontsize=14)




		ax4 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0, dx, dy])
		im  = ax4.imshow(np.flipud(np.fliplr(dr2[:,:,0])), interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-4, 4])
		ax4.set_yticklabels([])
		ax4.plot(10, 0.2, 'k.', markersize=20)
		#plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlabel(r'$z$', fontsize=18)

		ax4.plot(z, dz_line2_5terms, 'w--', linewidth=3)
		ax4.plot(z, dr_line2_5terms, 'w', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 0*(y0/2) + 0*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[-4, -3, -2, -1, 0, 1, 2, 3, 4])
		cb.set_label(r'# $\sigma_{A_{21}}$', fontsize=14)










		# Save plot

		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170131/figures/'
		plt.savefig(path_plot_save + 'figure4c.pdf', bbox_inches='tight')
		plt.close()
		plt.close()









		# Third figure 
		# ----------------------------------------
		plt.close()
		plt.close()

		index1 = 76    # zr = 8,   158 MHz
		index2 = 176   # zr = 10,  129.1 MHz


		fig = plt.figure(3, figsize=(7, 7))
		plt.subplot(2,1,1)
		plt.errorbar(dz, 1000*p_rec3[:,index1], 1000*dp_rec3[:,index1], fmt='b.', ecolor='b', label='Noise Only')
		plt.errorbar(dz, 1000*p_rec1[:,index1], 1000*dp_rec1[:,index1], fmt='r.', ecolor='r', label='Noise + Signal')
		plt.plot(0.5, 28, 'k.', markersize=20, label='Input')
		plt.legend()
		plt.plot([0, 2], [28, 28], 'k--')
		plt.plot([0.5, 0.5], [-100, 100], 'k--')
		plt.xlim([0, 2])
		plt.ylim([-100, 100])
		plt.ylabel(r'$\hat{A}_{21}$ [mK]')
		plt.text(1.1, -50, '$z_r=8$, $\Delta z=0.5$', fontsize=18, backgroundcolor='w')
		plt.xlabel(r'$\Delta z$')



		plt.subplot(2,1,2)
		plt.errorbar(dz, 1000*p_rec3[:,index2], 1000*dp_rec3[:,index2], fmt='b.', ecolor='b')
		plt.errorbar(dz, 1000*p_rec2[:,index2], 1000*dp_rec2[:,index2], fmt='r.', ecolor='r')
		plt.plot(0.2, 28, 'k.', markersize=20)
		plt.plot([0, 2], [28, 28], 'k--')
		plt.plot([0.2, 0.2], [-100, 100], 'k--')
		plt.xlim([0, 2])
		plt.ylim([-100, 100])
		plt.ylabel(r'$\hat{A}_{21}$ [mK]')
		plt.text(1.1, -50, '$z_r=10$, $\Delta z=0.2$', fontsize=18, backgroundcolor='w')
		plt.xlabel(r'$\Delta z$')



		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170131/figures/'
		plt.savefig(path_plot_save + 'figure4d.pdf', bbox_inches='tight')
		plt.close()
		plt.close()






























	if figure5 == 'yes':

		# Computations
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr)
		sys1, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=8.8, dz=0.3, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025)            #0.007*np.cos(10*np.pi* v/np.max(v))
		sys2, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=10.6, dz=0.2, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025) 

		Tant1_K = TantK_no_noise + noise_realization_K + sys1
		Tant2_K = TantK_no_noise + noise_realization_K + sys2
		Tant3_K = TantK_no_noise + noise_realization_K




		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec1, dp_rec1, dr1, dz_line1_14terms, dr_line1_14terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant1_K, win=2/(sigma_noise_K**2), foreground_model='EDGES_polynomial', nterms_fg=14, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')

		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec2, dp_rec2, dr2, dz_line2_14terms, dr_line2_14terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant2_K, win=2/(sigma_noise_K**2), foreground_model='EDGES_polynomial', nterms_fg=14, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')

		f, r0, wRMS0, z, dz, res, wRMS, T6, p_rec3, dp_rec3, dr3, dz_line3_14terms, dr_line3_14terms = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant3_K, win=2/(sigma_noise_K**2), foreground_model='EDGES_polynomial', nterms_fg=14, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=110, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')





		# Plots


		# First figure 
		# ----------------------------------------
		plt.close()
		plt.close()
		plt.close()

		plt.figure(1, figsize=[8.5, 7.5])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*(noise_realization_K + sys1) + 0, 'r')
		plt.plot(v, 1000*(noise_realization_K + sys2) - 20, 'b')
		plt.plot([eg.redshift2frequency(10.6), eg.redshift2frequency(10.6)],[-40, 40], 'k--')
		plt.plot([eg.redshift2frequency(8.8), eg.redshift2frequency(8.8)],[-40, 40], 'k--')
		plt.xlim([110, 190])
		plt.ylim([-40, 40])
		plt.ylabel('Noise and Signal' + '\n' + '20 mK Per Division')
		plt.yticks(np.arange(-40, 41, 20),[])
		plt.legend(['$z_r=8.8$, $\Delta z=0.3$','$z_r=10.6$, $\Delta z=0.2$'], ncol=1, loc=0)
		plt.grid()



		plt.subplot(2,1,2)
		plt.plot(eg.redshift2frequency(z), dz_line1_14terms, 'r--', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dr_line1_14terms, 'r', linewidth=2)

		plt.plot(eg.redshift2frequency(z), dz_line2_14terms, 'b--', linewidth=2)
		plt.plot(eg.redshift2frequency(z), dr_line2_14terms, 'b', linewidth=2)

		plt.plot([eg.redshift2frequency(10.6), eg.redshift2frequency(10.6)],[0, 2], 'k--')
		plt.plot([eg.redshift2frequency(8.8), eg.redshift2frequency(8.8)],[0, 2], 'k--')		

		plt.xlim([110, 190])
		plt.ylim([0, 1.7])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('$\Delta z$', fontsize=18)
		plt.legend([r'$2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', r'$\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', r'$2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', r'$\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$'], ncol=2)
		#plt.text(112, 1.3, r'constraints from $\hat{A}_{21} + 2\sigma_{A_{21}} \leq 28\;\;\mathrm{mK}$', fontsize=16)



		# Save plot
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170131/figures/'
		plt.savefig(path_plot_save + 'figure5.pdf', bbox_inches='tight')
		plt.close()
		plt.close()		
















		# Plots

		# First figure 
		# ----------------------------------------		
		plt.close()
		plt.close()
		plt.close()



		fig = plt.figure(2, figsize=(14, 14))


		x0 = 0.08
		y0 = 0.05
		dx = 0.25
		dy = 0.23

		dxcb = 0.015



		ax1 = fig.add_axes([x0, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(eg.frequency2redshift(v), 1000*(noise_realization_K), 'b')
		ax1.plot([12, 6.5], [0, 0], 'r')
		plt.ylim([-40, 40])
		plt.xlim([12, 6.5])
		plt.ylabel('Noise and Signal [mK]')
		plt.grid()
		plt.title('Noise Only')


		ax2 = fig.add_axes([x0, y0 + 2*(y0/2) + 2*dy, dx, dy])
		im  = ax2.imshow(np.flipud(np.fliplr(p_rec3))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-2, 2])
		plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlim([12, 6.5])
		plt.grid()
		#cbaxes = fig.add_axes([x0+dx, y0 + 2*(y0/2) + 2*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2])
		#cb.set_label(r'$\hat{A}_{21}/\;28\;\mathrm{mK}$', fontsize=14)			




		ax3 = fig.add_axes([x0, y0 + 1*(y0/2) + dy, dx, dy])
		im  = ax3.imshow(np.flipud(np.fliplr(dp_rec3))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([0, 2])
		plt.ylabel(r'$\Delta z$', fontsize=18)

		ax3.plot(z, dz_line3_14terms, 'w--', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()
		#cbaxes = fig.add_axes([x0+dx, y0 + 1*(y0/2) + 1*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[0, 0.5, 1, 1.5, 2])
		#cb.set_label(r'$\sigma_{A_{21}}/\;28\;\mathrm{mK}$', fontsize=14)




		ax4 = fig.add_axes([x0, y0, dx, dy])
		im  = ax4.imshow(np.flipud(np.fliplr(dr3[:,:,0])), interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-4, 4])
		plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlabel(r'$z$', fontsize=18)

		ax4.plot(z, dz_line3_14terms, 'w--', linewidth=3)
		ax4.plot(z, dr_line3_14terms, 'w', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()
		#cbaxes = fig.add_axes([x0+dx, y0 + 0*(y0/2) + 0*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[-4, -3, -2, -1, 0, 1, 2, 3, 4])
		#cb.set_label(r'# $\sigma_{A_{21}}$', fontsize=14)		












		ax1 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(eg.frequency2redshift(v), 1000*(noise_realization_K + sys1), 'b')
		h1 = ax1.plot(eg.frequency2redshift(v), 1000*(sys1), 'r', label=r'$z_r=8.8$, $\Delta z =0.3$')
		ax1.set_yticks(np.arange(-40, 41, 10))
		ax1.set_yticklabels(['','','','','','','','',''])
		plt.ylim([-40, 40])
		plt.xlim([12, 6.5])
		#plt.ylabel('Noise and Signal [mK]')
		plt.grid()
		plt.title('Signal 1 + Noise')
		ax1.legend(h1, [r'$z_r=8.8$, $\Delta z =0.3$'], loc=3, fontsize=18)


		ax2 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 2*(y0/2) + 2*dy, dx, dy])
		im  = ax2.imshow(np.flipud(np.fliplr(p_rec1))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-2, 2])
		ax2.set_yticklabels([])
		ax2.plot(8.8, 0.3, 'w.', markersize=20)
		plt.xlim([12, 6.5])
		plt.grid()
		#plt.ylabel(r'$\Delta z$', fontsize=18)

		#cbaxes = fig.add_axes([x0+dx + dx + 2*dxcb, y0 + 2*(y0/2) + 2*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2])
		#cb.set_label(r'$\hat{A}_{21}/\;28\;\mathrm{mK}$', fontsize=14)





		ax3 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 1*(y0/2) + dy, dx, dy])
		im  = ax3.imshow(np.flipud(np.fliplr(dp_rec1))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([0, 2])
		ax3.set_yticklabels([])
		ax3.plot(8.8, 0.3, 'w.', markersize=20)
		#plt.ylabel(r'$\Delta z$', fontsize=18)

		ax3.plot(z, dz_line1_14terms, 'w--', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()
		#cbaxes = fig.add_axes([x0 + dx + dx + 2*dxcb, y0 + 1*(y0/2) + 1*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[0, 0.5, 1, 1.5, 2])
		#cb.set_label(r'$\sigma_{A_{21}}/\;28\;\mathrm{mK}$', fontsize=14)




		ax4 = fig.add_axes([x0 + dx + 1*dxcb, y0, dx, dy])
		im  = ax4.imshow(np.flipud(np.fliplr(dr1[:,:,0])), interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-4, 4])
		ax4.set_yticklabels([])
		ax4.plot(8.8, 0.3, 'k.', markersize=20)
		#plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlabel(r'$z$', fontsize=18)

		ax4.plot(z, dz_line1_14terms, 'w--', linewidth=3)
		ax4.plot(z, dr_line1_14terms, 'w', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()
		#cbaxes = fig.add_axes([x0 + dx + dx + 2*dxcb, y0 + 0*(y0/2) + 0*dy, dxcb, dy])
		#cb = plt.colorbar(im, cax=cbaxes, ticks=[-4, -3, -2, -1, 0, 1, 2, 3, 4])
		#cb.set_label(r'# $\sigma_{A_{21}}$', fontsize=14)		










		ax1 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(eg.frequency2redshift(v), 1000*(noise_realization_K + sys2), 'b')
		h1 = ax1.plot(eg.frequency2redshift(v), 1000*(sys2), 'r', label=r'$z_r=10.6$, $\Delta z =0.2$')
		ax1.set_yticks(np.arange(-40, 41, 10))
		ax1.set_yticklabels(['','','','','','','','',''])
		plt.ylim([-40, 40])
		plt.xlim([12, 6.5])
		#plt.ylabel('Noise and Signal [mK]')
		plt.grid()
		plt.title('Signal 2 + Noise')
		ax1.legend(h1, [r'$z_r=10.6$, $\Delta z =0.2$'], loc=3, fontsize=18)


		ax2 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 2*(y0/2) + 2*dy, dx, dy])
		im  = ax2.imshow(np.flipud(np.fliplr(p_rec2))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-2, 2])
		ax2.set_yticklabels([])
		ax2.plot(10.6, 0.2, 'w.', markersize=20)
		#plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlim([12, 6.5])
		plt.grid()

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 2*(y0/2) + 2*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2])
		cb.set_label(r'$\hat{A}_{21}/\;28\;\mathrm{mK}$', fontsize=14)





		ax3 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 1*(y0/2) + dy, dx, dy])
		im  = ax3.imshow(np.flipud(np.fliplr(dp_rec2))/0.028, interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([0, 2])
		ax3.set_yticklabels([])
		ax3.plot(10.6, 0.2, 'w.', markersize=20)
		#plt.ylabel(r'$\Delta z$', fontsize=18)

		ax3.plot(z, dz_line2_14terms, 'w--', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 1*(y0/2) + 1*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[0, 0.5, 1, 1.5, 2])
		cb.set_label(r'$\sigma_{A_{21}}/\;28\;\mathrm{mK}$', fontsize=14)




		ax4 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0, dx, dy])
		im  = ax4.imshow(np.flipud(np.fliplr(dr2[:,:,0])), interpolation='none', aspect='auto', extent=[12, 6.5, 0, 2]); im.set_clim([-4, 4])
		ax4.set_yticklabels([])
		ax4.plot(10.6, 0.2, 'k.', markersize=20)
		#plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlabel(r'$z$', fontsize=18)

		ax4.plot(z, dz_line2_14terms, 'w--', linewidth=3)
		ax4.plot(z, dr_line2_14terms, 'w', linewidth=3)
		plt.xlim([12, 6.5])		
		plt.grid()

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 0*(y0/2) + 0*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[-4, -3, -2, -1, 0, 1, 2, 3, 4])
		cb.set_label(r'# $\sigma_{A_{21}}$', fontsize=14)










		# Save plot

		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170131/figures/'
		plt.savefig(path_plot_save + 'figure5c.pdf', bbox_inches='tight')
		plt.close()
		plt.close()











		# Third figure 
		# ----------------------------------------
		plt.close()
		plt.close()

		index1 = 120   # zr = 8.8,   145 MHz
		index2 = 206   # zr = 10.6,  122.4 MHz


		fig = plt.figure(3, figsize=(7, 7))
		plt.subplot(2,1,1)
		plt.errorbar(dz, 1000*p_rec3[:,index1], 1000*dp_rec3[:,index1], fmt='b.', ecolor='b', label='Noise Only')
		plt.errorbar(dz, 1000*p_rec1[:,index1], 1000*dp_rec1[:,index1], fmt='r.', ecolor='r', label='Noise + Signal')
		plt.plot(0.3, 28, 'k.', markersize=20, label='Input')
		plt.legend()
		plt.plot([0, 2], [28, 28], 'k--')
		plt.plot([0.3, 0.3], [-100, 100], 'k--')
		plt.xlim([0, 2])
		plt.ylim([-100, 100])
		plt.ylabel(r'$\hat{A}_{21}$ [mK]')
		plt.text(1.1, -50, '$z_r=8.8$, $\Delta z=0.3$', fontsize=18, backgroundcolor='w')
		plt.xlabel(r'$\Delta z$')



		plt.subplot(2,1,2)
		plt.errorbar(dz, 1000*p_rec3[:,index2], 1000*dp_rec3[:,index2], fmt='b.', ecolor='b')
		plt.errorbar(dz, 1000*p_rec2[:,index2], 1000*dp_rec2[:,index2], fmt='r.', ecolor='r')
		plt.plot(0.2, 28, 'k.', markersize=20)
		plt.plot([0, 2], [28, 28], 'k--')
		plt.plot([0.2, 0.2], [-100, 100], 'k--')
		plt.xlim([0, 2])
		plt.ylim([-100, 100])
		plt.ylabel(r'$\hat{A}_{21}$ [mK]')
		plt.text(1.1, -50, '$z_r=10.6$, $\Delta z=0.2$', fontsize=18, backgroundcolor='w')
		plt.xlabel(r'$\Delta z$')



		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170131/figures/'
		plt.savefig(path_plot_save + 'figure5d.pdf', bbox_inches='tight')
		plt.close()
		plt.close()








	return 0        #v, z, dr_line3_5terms, dr3   #v, TantK, sigma_noise_K, noise_realization_K, f, r0, z, dz_line, dr_line













def plots_for_report_20170207(figure1and2='no', figure3='no', figure4='no', figure5='no'):  # v, t, w, 


	if figure1and2 == 'yes':


		# Simulated measurement
		v = np.arange(90, 190.1, 0.4)
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr)
		w            = 1 / (sigma_noise_K**2) 
		sys1, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=8, dz=0.5, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025)            #0.007*np.cos(10*np.pi* v/np.max(v))
		sys2, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=10, dz=0.2, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025) 

		Tant1_K = TantK_no_noise + noise_realization_K
		Tant2_K = TantK_no_noise + noise_realization_K + sys1
		Tant3_K = TantK_no_noise + noise_realization_K + sys2





		i1, p1, dp1, dr1, dz_lines1, dr_lines1 = eg.data_analysis_sliding_window(v, Tant1_K, w, Dv=[40], Nfg=[2])
		i2, p2, dp2, dr2, dz_lines2, dr_lines2 = eg.data_analysis_sliding_window(v, Tant2_K, w, Dv=[40], Nfg=[2])
		i3, p3, dp3, dr3, dz_lines3, dr_lines3 = eg.data_analysis_sliding_window(v, Tant3_K, w, Dv=[40], Nfg=[2])


		vx1, r0x1, wRMS0x1, zx1, dzx1, resx1, wRMSx1, T6x1, p_recx1, dp_recx1, drx1, dz_linex1, dr_linex1 = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant1_K, win=w, foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=90, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')		

		vx2, r0x2, wRMS0x2, zx2, dzx2, resx2, wRMSx2, T6x2, p_recx2, dp_recx2, drx2, dz_linex2, dr_linex2 = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant2_K, win=w, foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=90, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')

		vx3, r0x3, wRMS0x3, zx3, dzx3, resx3, wRMSx3, T6x3, p_recx3, dp_recx3, drx3, dz_linex3, dr_linex3 = eg.data_analysis_phenomenological_detection_rejection('high_band', data_or_file='data', filecase=1, fin=v, tin=Tant3_K, win=w, foreground_model='EDGES_polynomial', nterms_fg=5, signal_model='tanh', T21_K_ref_list=[0.028], real_simulated='real', flow=90, fhigh=190, z_alpha=0, sim_time_factor=1, sim_with_gaussian='no', save='no', save_flag='_flag')



		# Plots

		# First figure 
		# ----------------------------------------		
		plt.close()
		plt.close()
		plt.close()



		fig = plt.figure(1, figsize=(14, 14))


		x0 = 0.08
		y0 = 0.05
		dx = 0.25
		dy = 0.23

		dxcb = 0.015



		iDV  = 0
		iNfg = 0



		ax1 = fig.add_axes([x0, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(v, 1000*(noise_realization_K), 'b')
		ax1.plot([90, 190], [0, 0], 'r')
		plt.ylim([-40, 40])
		plt.xlim([90, 190])
		plt.ylabel('Noise and Signal [mK]')
		plt.grid()
		plt.title('Noise Only')


		ax2 = fig.add_axes([x0, y0 + 2*(y0/2) + 2*dy, dx, dy])
		im  = ax2.imshow(np.flipud(p1[iDV,iNfg,:,:].T)/0.028, interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([-2, 2])
		plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlim([90, 190])
		plt.grid()


		ax3 = fig.add_axes([x0, y0 + 1*(y0/2) + dy, dx, dy])
		im  = ax3.imshow(np.flipud(dp1[iDV,iNfg,:,:].T)/0.028, interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([0, 2])
		plt.ylabel(r'$\Delta z$', fontsize=18)
		ax3.plot(eg.redshift2frequency(zx1), dz_linex1, 'r:', linewidth=3)
		ax3.plot(v, dz_lines1[iDV,iNfg,:], 'w:', linewidth=3)
		plt.xlim([90, 190])		
		plt.grid()


		ax4 = fig.add_axes([x0, y0, dx, dy])
		im  = ax4.imshow(np.flipud(dr1[iDV,iNfg,:,:].T), interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([-4, 4])
		plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlabel(r'frequency [MHz]', fontsize=18)
		ax4.plot(eg.redshift2frequency(zx1), dz_linex1, 'r:', linewidth=3)
		ax4.plot(eg.redshift2frequency(zx1), dr_linex1, 'r', linewidth=3)		
		ax4.plot(v, dz_lines1[iDV,iNfg,:], 'w:', linewidth=3)
		ax4.plot(v, dr_lines1[iDV,iNfg,:], 'w',   linewidth=3)
		plt.xlim([90, 190])		
		plt.grid()












		ax1 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(v, 1000*(noise_realization_K + sys1), 'b')
		h1 = ax1.plot(v, 1000*(sys1), 'r')
		ax1.set_yticks(np.arange(-40, 41, 10))
		ax1.set_yticklabels(['','','','','','','','',''])
		plt.ylim([-40, 40])
		plt.xlim([90, 190])
		plt.grid()
		plt.title('Signal 1 + Noise')
		ax1.legend(h1, [r'$z_r=8$, $\Delta z =0.5$'], loc=3, fontsize=18)


		ax2 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 2*(y0/2) + 2*dy, dx, dy])
		im  = ax2.imshow(np.flipud(p2[iDV,iNfg,:,:].T)/0.028, interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([-2, 2])
		ax2.set_yticklabels([])
		plt.xlim([90, 190])
		plt.grid()
		ax2.plot(eg.redshift2frequency(8), 0.5, 'w.', markersize=34)
		ax2.plot(eg.redshift2frequency(8), 0.5, 'k.', markersize=20)


		ax3 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 1*(y0/2) + dy, dx, dy])
		im  = ax3.imshow(np.flipud(dp2[iDV,iNfg,:,:].T)/0.028, interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([0, 2])
		ax3.set_yticklabels([])
		ax3.plot(eg.redshift2frequency(zx2), dz_linex2, 'r:', linewidth=3)
		ax3.plot(v, dz_lines2[iDV,iNfg,:], 'w:', linewidth=3)
		plt.xlim([90, 190])		
		plt.grid()
		ax3.plot(eg.redshift2frequency(8), 0.5, 'w.', markersize=34)
		ax3.plot(eg.redshift2frequency(8), 0.5, 'k.', markersize=20)


		ax4 = fig.add_axes([x0 + dx + 1*dxcb, y0, dx, dy])
		im  = ax4.imshow(np.flipud(dr2[iDV,iNfg,:,:].T), interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([-4, 4])
		ax4.set_yticklabels([])
		plt.xlabel(r'frequency [MHz]', fontsize=18)
		ax4.plot(eg.redshift2frequency(zx2), dz_linex2, 'r:', linewidth=3)
		ax4.plot(eg.redshift2frequency(zx2), dr_linex2, 'r', linewidth=3)		
		ax4.plot(v, dz_lines2[iDV,iNfg,:], 'w:', linewidth=3)
		ax4.plot(v, dr_lines2[iDV,iNfg,:], 'w', linewidth=3)		
		plt.xlim([90, 190])		
		plt.grid()
		ax4.plot(eg.redshift2frequency(8), 0.5, 'w.', markersize=34)
		ax4.plot(eg.redshift2frequency(8), 0.5, 'k.', markersize=20)










		ax1 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(v, 1000*(noise_realization_K + sys2), 'b')
		h1 = ax1.plot(v, 1000*(sys2), 'r')
		ax1.set_yticks(np.arange(-40, 41, 10))
		ax1.set_yticklabels(['','','','','','','','',''])
		plt.ylim([-40, 40])
		plt.xlim([90, 190])
		plt.grid()
		plt.title('Signal 2 + Noise')
		ax1.legend(h1, [r'$z_r=10$, $\Delta z =0.2$'], loc=3, fontsize=18)


		ax2 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 2*(y0/2) + 2*dy, dx, dy])
		im  = ax2.imshow(np.flipud(p3[iDV,iNfg,:,:].T)/0.028, interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([-2, 2])
		ax2.set_yticklabels([])
		plt.xlim([90, 190])
		plt.grid()
		ax2.plot(eg.redshift2frequency(10), 0.2, 'w.', markersize=34)
		ax2.plot(eg.redshift2frequency(10), 0.2, 'k.', markersize=20)

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 2*(y0/2) + 2*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2])
		cb.set_label(r'$\hat{A}_{21}/\;28\;\mathrm{mK}$', fontsize=14)	


		ax3 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 1*(y0/2) + dy, dx, dy])
		im  = ax3.imshow(np.flipud(dp3[iDV,iNfg,:,:].T)/0.028, interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([0, 2])
		ax3.set_yticklabels([])
		ax3.plot(eg.redshift2frequency(zx3), dz_linex3, 'r:', linewidth=3)
		ax3.plot(v, dz_lines3[iDV,iNfg,:], 'w:', linewidth=3)
		plt.xlim([90, 190])		
		plt.grid()
		ax3.plot(eg.redshift2frequency(10), 0.2, 'w.', markersize=34)
		ax3.plot(eg.redshift2frequency(10), 0.2, 'k.', markersize=20)

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 1*(y0/2) + 1*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[0, 0.5, 1, 1.5, 2])
		cb.set_label(r'$\sigma_{A_{21}}/\;28\;\mathrm{mK}$', fontsize=14)



		ax4 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0, dx, dy])
		im  = ax4.imshow(np.flipud(dr3[iDV,iNfg,:,:].T), interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([-4, 4])
		ax4.set_yticklabels([])
		plt.xlabel(r'frequency [MHz]', fontsize=18)
		ax4.plot(eg.redshift2frequency(zx3), dz_linex3, 'r:', linewidth=3)
		ax4.plot(eg.redshift2frequency(zx3), dr_linex3, 'r', linewidth=3)		
		ax4.plot(v, dz_lines3[iDV,iNfg,:], 'w:', linewidth=3)
		ax4.plot(v, dr_lines3[iDV,iNfg,:], 'w',   linewidth=3)			
		plt.xlim([90, 190])		
		plt.grid()
		ax4.plot(eg.redshift2frequency(10), 0.2, 'w.', markersize=34)
		ax4.plot(eg.redshift2frequency(10), 0.2, 'k.', markersize=20)

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 0*(y0/2) + 0*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[-4, -3, -2, -1, 0, 1, 2, 3, 4])
		cb.set_label(r'# $\sigma_{A_{21}}$', fontsize=14)


		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170207/figures/'
		plt.savefig(path_plot_save + 'figure1.pdf', bbox_inches='tight')
		plt.close()
		plt.close()











		fig = plt.figure(2, figsize=[10,8])

		plt.subplot(2,1,1)
		plt.plot(v, v[i3[0,1,:].astype(int)], 'r', linewidth=2)
		plt.plot(v, v, 'k--', linewidth=2)
		plt.plot(v, v[i3[0,0,:].astype(int)], 'm', linewidth=2)	
		plt.xlim([80, 200])
		plt.ylim([80, 200])
		plt.grid()
		plt.xlabel('window reference frequency [MHz]')
		plt.ylabel('frequency [MHz]')
		plt.legend(['window upper limit','window reference frequency', 'window lower limit'], loc=0)

		plt.subplot(2,1,2)
		plt.plot(v, v[i3[0,1,:].astype(int)]-v[i3[0,0,:].astype(int)],'b', linewidth=2)
		plt.ylim([0, 60])
		plt.xlim([80, 200])
		plt.grid()
		plt.xlabel('window reference frequency [MHz]')
		plt.ylabel('window frequency width [MHz]')


		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170207/figures/'
		plt.savefig(path_plot_save + 'figure2.pdf', bbox_inches='tight')
		plt.close()
		plt.close()






	if figure3 == 'yes':

		# Simulated measurement
		v = np.arange(90, 190.1, 0.4)
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise1_K, noise_realization1_K = eg.radiometer_equation(TantK_no_noise, BwMHz, (1/2)*IntTimeHr)
		sigma_noise2_K, noise_realization2_K = eg.radiometer_equation(TantK_no_noise, BwMHz, 1*IntTimeHr/1)
		sigma_noise3_K, noise_realization3_K = eg.radiometer_equation(TantK_no_noise, BwMHz, 2*IntTimeHr)


		Tant1_K = TantK_no_noise + noise_realization1_K
		Tant2_K = TantK_no_noise + noise_realization2_K
		Tant3_K = TantK_no_noise + noise_realization3_K

		w            = 1 / (sigma_noise1_K**2) 

		i1, p1, dp1, dr1, dz_lines1, dr_lines1 = eg.data_analysis_sliding_window(v, Tant1_K, w, Dv=[40], Nfg=[2])
		i2, p2, dp2, dr2, dz_lines2, dr_lines2 = eg.data_analysis_sliding_window(v, Tant2_K, w, Dv=[40], Nfg=[2])
		i3, p3, dp3, dr3, dz_lines3, dr_lines3 = eg.data_analysis_sliding_window(v, Tant3_K, w, Dv=[40], Nfg=[2])






		# Plots
		plt.close()
		plt.close()
		plt.close()

		plt.figure(1, figsize=[8.5, 7.5])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*noise_realization1_K,    'c')
		plt.plot(v, 1000*noise_realization2_K-40, 'b')
		plt.plot(v, 1000*noise_realization3_K-80, 'r')
		plt.xlim([90, 190])
		plt.ylim([-100, 20])
		plt.ylabel('measurement noise' + '\n' + '20 mK per division')
		plt.yticks(np.arange(-100, 21, 20),[])
		#plt.legend(['noise 1','noise 2'])



		plt.subplot(2,1,2)
		plt.plot(v, dz_lines1[0,0,:], 'c', linewidth=2)
		plt.plot(v, dz_lines2[0,0,:], 'b', linewidth=2)
		plt.plot(v, dz_lines3[0,0,:], 'r', linewidth=2)
		plt.legend(['noise 1','noise 2', 'noise 3'], ncol=3, loc=0)


		plt.xlim([90, 190])
		plt.ylim([0, 2])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('$\Delta z$', fontsize=18)
		#plt.legend(['noise 1','noise 2', 'noise 3'])
		#plt.text(112, 1.3, r'constraints from $\sigma_{A_{21}} \leq \frac{28\;\;\mathrm{mK}}{2}$', fontsize=16)





		# Save plot
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170207/figures/'
		plt.savefig(path_plot_save + 'figure3.pdf', bbox_inches='tight')
		plt.close()
		plt.close()








	if figure4 == 'yes':

		# Simulated measurement
		v = np.arange(90, 190.1, 0.4)
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, 1*IntTimeHr)
		#sys, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=8, dz=0.5, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025) 
		sys1 = 0.007*np.cos(10*np.pi* v/np.max(v))
		sys2 = 0.007*np.cos(30*np.pi* v/np.max(v))		
		Tant_K = TantK_no_noise + noise_realization_K + sys1 + sys2
		w      = 1 / (sigma_noise_K**2) 

		i1, p1, dp1, dr1, dz_lines1, dr_lines1 = eg.data_analysis_sliding_window(v, Tant_K, w, Dv=[10], Nfg=[3])
		i2, p2, dp2, dr2, dz_lines2, dr_lines2 = eg.data_analysis_sliding_window(v, Tant_K, w, Dv=[20], Nfg=[3])
		i3, p3, dp3, dr3, dz_lines3, dr_lines3 = eg.data_analysis_sliding_window(v, Tant_K, w, Dv=[30], Nfg=[3])
		i4, p4, dp4, dr4, dz_lines4, dr_lines4 = eg.data_analysis_sliding_window(v, Tant_K, w, Dv=[40], Nfg=[3])
		i5, p5, dp5, dr5, dz_lines5, dr_lines5 = eg.data_analysis_sliding_window(v, Tant_K, w, Dv=[50], Nfg=[3])






		# Plots
		plt.close()
		plt.close()
		plt.close()

		plt.figure(1, figsize=[8.5, 7.5])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*(noise_realization_K + sys1 + sys2), 'b')
		plt.plot(v, 1000*(sys1 + sys2), 'r')
		#plt.plot(v, 1000*noise_realization2_K-40, 'b')
		#plt.plot(v, 1000*noise_realization3_K-80, 'r')
		plt.xlim([90, 190])
		plt.ylim([-40, 40])
		plt.ylabel('noise + signal [mK]')
		#plt.yticks(np.arange(-100, 21, 20),[])
		#plt.legend(['noise 1','noise 2'])



		plt.subplot(2,1,2)
		plt.plot(v, dr_lines1[0,0,:], 'c', linewidth=2)
		plt.plot(v, dr_lines2[0,0,:], 'b', linewidth=2)
		plt.plot(v, dr_lines3[0,0,:], 'r', linewidth=2)
		plt.plot(v, dr_lines4[0,0,:], 'g', linewidth=2)
		plt.plot(v, dr_lines5[0,0,:], 'k', linewidth=2)

		plt.plot(v, dz_lines1[0,0,:], 'c:', linewidth=2)
		plt.plot(v, dr_lines1[0,0,:], 'c', linewidth=2)
		plt.plot(v, dz_lines2[0,0,:], 'b:', linewidth=2)
		plt.plot(v, dr_lines2[0,0,:], 'b', linewidth=2)
		plt.plot(v, dz_lines3[0,0,:], 'r:', linewidth=2)
		plt.plot(v, dr_lines3[0,0,:], 'r', linewidth=2)
		plt.plot(v, dz_lines4[0,0,:], 'g:', linewidth=2)
		plt.plot(v, dr_lines4[0,0,:], 'g', linewidth=2)	
		plt.plot(v, dz_lines5[0,0,:], 'k:', linewidth=2)
		plt.plot(v, dr_lines5[0,0,:], 'k', linewidth=2)			
		plt.legend(['window width = 10 MHz','window width = 20 MHz','window width = 30 MHz', 'window width = 40 MHz', 'window width = 50 MHz'], loc=0, fontsize=12)


		plt.xlim([90, 190])
		plt.ylim([0, 2])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('$\Delta z$', fontsize=18)
		#plt.legend(['noise 1','noise 2', 'noise 3'])
		#plt.text(112, 1.3, r'constraints from $\sigma_{A_{21}} \leq \frac{28\;\;\mathrm{mK}}{2}$', fontsize=16)





		# Save plot
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170207/figures/'
		plt.savefig(path_plot_save + 'figure4.pdf', bbox_inches='tight')
		plt.close()
		plt.close()












	if figure5 == 'yes':

		# Simulated measurement
		v = np.arange(90, 190.1, 0.4)
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, 1*IntTimeHr)
		#sys, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=8, dz=0.5, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025) 
		sys1 = 0.007*np.cos(10*np.pi* v/np.max(v))
		sys2 = 0.007*np.cos(30*np.pi* v/np.max(v))		
		Tant_K = TantK_no_noise + noise_realization_K + sys1 + sys2
		w      = 1 / (sigma_noise_K**2)

		i1, p1, dp1, dr1, dz_lines1, dr_lines1 = eg.data_analysis_sliding_window(v, Tant_K, w, Dv=[30], Nfg=[2])
		i2, p2, dp2, dr2, dz_lines2, dr_lines2 = eg.data_analysis_sliding_window(v, Tant_K, w, Dv=[30], Nfg=[3])
		i3, p3, dp3, dr3, dz_lines3, dr_lines3 = eg.data_analysis_sliding_window(v, Tant_K, w, Dv=[30], Nfg=[4])
		i4, p4, dp4, dr4, dz_lines4, dr_lines4 = eg.data_analysis_sliding_window(v, Tant_K, w, Dv=[30], Nfg=[5])
		i5, p5, dp5, dr5, dz_lines5, dr_lines5 = eg.data_analysis_sliding_window(v, Tant_K, w, Dv=[30], Nfg=[6])






		# Plots
		plt.close()
		plt.close()
		plt.close()

		plt.figure(1, figsize=[8.5, 7.5])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*(noise_realization_K + sys1 + sys2), 'b')
		plt.plot(v, 1000*(sys1 + sys2), 'r')
		#plt.plot(v, 1000*noise_realization2_K-40, 'b')
		#plt.plot(v, 1000*noise_realization3_K-80, 'r')
		plt.xlim([90, 190])
		plt.ylim([-40, 40])
		plt.ylabel('noise + signal [mK]')
		#plt.yticks(np.arange(-100, 21, 20),[])
		#plt.legend(['noise 1','noise 2'])



		plt.subplot(2,1,2)
		plt.plot(v, dr_lines1[0,0,:], 'c', linewidth=2)
		plt.plot(v, dr_lines2[0,0,:], 'b', linewidth=2)
		plt.plot(v, dr_lines3[0,0,:], 'r', linewidth=2)
		plt.plot(v, dr_lines4[0,0,:], 'g', linewidth=2)
		plt.plot(v, dr_lines5[0,0,:], 'k', linewidth=2)

		plt.plot(v, dz_lines1[0,0,:], 'c:', linewidth=2)
		plt.plot(v, dr_lines1[0,0,:], 'c', linewidth=2)
		plt.plot(v, dz_lines2[0,0,:], 'b:', linewidth=2)
		plt.plot(v, dr_lines2[0,0,:], 'b', linewidth=2)
		plt.plot(v, dz_lines3[0,0,:], 'r:', linewidth=2)
		plt.plot(v, dr_lines3[0,0,:], 'r', linewidth=2)
		plt.plot(v, dz_lines4[0,0,:], 'g:', linewidth=2)
		plt.plot(v, dr_lines4[0,0,:], 'g', linewidth=2)	
		plt.plot(v, dz_lines5[0,0,:], 'k:', linewidth=2)
		plt.plot(v, dr_lines5[0,0,:], 'k', linewidth=2)			
		plt.legend(['2 terms','3 terms','4 terms', '5 terms', '6 terms'], loc=0, fontsize=12)


		plt.xlim([90, 190])
		plt.ylim([0, 2])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('$\Delta z$', fontsize=18)
		#plt.legend(['noise 1','noise 2', 'noise 3'])
		#plt.text(112, 1.3, r'constraints from $\sigma_{A_{21}} \leq \frac{28\;\;\mathrm{mK}}{2}$', fontsize=16)





		# Save plot
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170207/figures/'
		plt.savefig(path_plot_save + 'figure5.pdf', bbox_inches='tight')
		plt.close()
		plt.close()















	return v, i1, i2, i3














def plots_for_report_20170216(figure1='no', figure2='no', figure3='no', figure4='no', figure5='no', figure6='no'):  # v, t, w, 


	if figure1 == 'yes':


		# Simulated measurement
		v = np.arange(90, 190.1, 0.4)
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr)
		w            = 1 / (sigma_noise_K**2) 
		sys1, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=8, dz=0.5, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025)            #0.007*np.cos(10*np.pi* v/np.max(v))
		sys2, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=10, dz=0.2, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025) 

		Tant1_K = TantK_no_noise + noise_realization_K
		Tant2_K = TantK_no_noise + noise_realization_K + sys1
		Tant3_K = TantK_no_noise + noise_realization_K + sys2



		line95_1, cube_1, prob95_1, wi_1, r0_1 = eg.data_analysis_sliding_window_redCHIsq(v, Tant1_K, w, Dv=[40], Nfg=[2])
		line95_2, cube_2, prob95_2, wi_2, r0_2 = eg.data_analysis_sliding_window_redCHIsq(v, Tant2_K, w, Dv=[40], Nfg=[2])
		line95_3, cube_3, prob95_3, wi_3, r0_3 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[40], Nfg=[2])


		# Assigning NaNs to pixels with zeros
		#cube_1[np.where(cube_1==0)]=np.nan
		#cube_2[np.where(cube_2==0)]=np.nan
		#cube_3[np.where(cube_3==0)]=np.nan


		# Plots

		# First figure 
		# ----------------------------------------		
		plt.close()
		plt.close()
		plt.close()



		fig = plt.figure(1, figsize=(14, 14))


		x0 = 0.08
		y0 = 0.05
		dx = 0.25
		dy = 0.23

		dxcb = 0.015



		iDV  = 0
		iNfg = 0



		ax1 = fig.add_axes([x0, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(v, 1000*(noise_realization_K), 'b')
		ax1.plot([90, 190], [0, 0], 'r')
		plt.ylim([-40, 40])
		plt.xlim([90, 190])
		plt.ylabel('Noise and Signal [mK]')
		plt.grid()
		plt.title('Noise Only')



		ax2 = fig.add_axes([x0, y0 + 2*(y0/2) + 2*dy, dx, dy])

		mm  = 100-cube_1[10,:,:]
		index = np.arange(0,len(mm[0,:]),1)
		mm[:, index<wi_1[10,0]] = np.nan
		mm[:, index>=wi_1[10,1]] = np.nan

		im  = ax2.imshow(np.flipud(mm), interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([60, 100])
		plt.ylabel(r'$\Delta z$', fontsize=18)
		ax2.plot(v, prob95_1[10,:], 'w:', linewidth=3)		
		plt.xlim([90, 190])
		plt.grid()



		ax3 = fig.add_axes([x0, y0 + 1*(y0/2) + dy, dx, dy])

		mm  = 100-cube_1[50,:,:]
		index = np.arange(0,len(mm[0,:]),1)
		mm[:, index<wi_1[50,0]] = np.nan
		mm[:, index>=wi_1[50,1]] = np.nan		

		im  = ax3.imshow(np.flipud(mm), interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([60, 100])
		plt.ylabel(r'$\Delta z$', fontsize=18)
		ax3.plot(v, prob95_1[50], 'w:', linewidth=3)
		plt.xlim([90, 190])		
		plt.grid()


		ax4 = fig.add_axes([x0, y0, dx, dy])
		ax4.plot(v, prob95_1.T, 'r')
		ax4.plot(v, line95_1[0,0,:], 'k', linewidth=3)
		plt.ylim([0, 2])
		plt.xlim([90, 190])		
		plt.grid()
		plt.ylabel(r'$\Delta z$', fontsize=18)
		plt.xlabel(r'frequency [MHz]', fontsize=18)		










		ax1 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(v, 1000*(noise_realization_K + sys1), 'b')
		h1 = ax1.plot(v, 1000*(sys1), 'r')
		ax1.set_yticks(np.arange(-40, 41, 10))
		ax1.set_yticklabels(['','','','','','','','',''])
		plt.ylim([-40, 40])
		plt.xlim([90, 190])
		plt.grid()
		plt.title('Signal 1 + Noise')
		ax1.legend(h1, [r'$z_r=8$, $\Delta z =0.5$'], loc=3, fontsize=18)


		ax2 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 2*(y0/2) + 2*dy, dx, dy])

		mm  = 100-cube_2[10,:,:]
		index = np.arange(0,len(mm[0,:]),1)
		mm[:, index<wi_2[10,0]] = np.nan
		mm[:, index>=wi_2[10,1]] = np.nan		

		im  = ax2.imshow(np.flipud(mm), interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([60, 100])
		ax2.set_yticklabels([])
		ax2.plot(v, prob95_2[10,:], 'w:', linewidth=3)	
		plt.xlim([90, 190])
		plt.grid()
		ax2.plot(eg.redshift2frequency(8), 0.5, 'w.', markersize=34)
		ax2.plot(eg.redshift2frequency(8), 0.5, 'k.', markersize=20)		



		ax3 = fig.add_axes([x0 + dx + 1*dxcb, y0 + 1*(y0/2) + dy, dx, dy])

		mm  = 100-cube_2[50,:,:]
		index = np.arange(0,len(mm[0,:]),1)
		mm[:, index<wi_2[50,0]] = np.nan
		mm[:, index>=wi_2[50,1]] = np.nan		

		im  = ax3.imshow(np.flipud(mm), interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([60, 100])
		ax3.set_yticklabels([])
		ax3.plot(v, prob95_2[50,:], 'w:', linewidth=3)	
		plt.xlim([90, 190])		
		plt.grid()
		ax3.plot(eg.redshift2frequency(8), 0.5, 'w.', markersize=34)
		ax3.plot(eg.redshift2frequency(8), 0.5, 'k.', markersize=20)


		ax4 = fig.add_axes([x0 + dx + 1*dxcb, y0, dx, dy])
		ax4.plot(v, prob95_2.T, 'r')
		ax4.plot(v, line95_2[0,0,:], 'k', linewidth=3)
		plt.ylim([0, 2])
		plt.xlim([90, 190])
		plt.grid()
		ax4.set_yticklabels([])
		plt.xlabel(r'frequency [MHz]', fontsize=18)
		ax4.plot(eg.redshift2frequency(8), 0.5, 'w.', markersize=34)
		ax4.plot(eg.redshift2frequency(8), 0.5, 'k.', markersize=20)		









		ax1 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 3*(y0/2) + 3*dy, dx, dy])
		ax1.plot(v, 1000*(noise_realization_K + sys2), 'b')
		h1 = ax1.plot(v, 1000*(sys2), 'r')
		ax1.set_yticks(np.arange(-40, 41, 10))
		ax1.set_yticklabels(['','','','','','','','',''])
		plt.ylim([-40, 40])
		plt.xlim([90, 190])
		plt.grid()
		plt.title('Signal 2 + Noise')
		ax1.legend(h1, [r'$z_r=10$, $\Delta z =0.2$'], loc=3, fontsize=18)


		ax2 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 2*(y0/2) + 2*dy, dx, dy])

		mm  = 100-cube_3[10,:,:]
		index = np.arange(0,len(mm[0,:]),1)
		mm[:, index<wi_3[10,0]] = np.nan
		mm[:, index>=wi_3[10,1]] = np.nan		

		im  = ax2.imshow(np.flipud(mm), interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([60, 100])
		ax2.set_yticklabels([])
		ax2.plot(v, prob95_3[10,:], 'w:', linewidth=3)
		plt.xlim([90, 190])
		plt.grid()
		ax2.plot(eg.redshift2frequency(10), 0.2, 'w.', markersize=34)
		ax2.plot(eg.redshift2frequency(10), 0.2, 'k.', markersize=20)

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 2*(y0/2) + 2*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[60, 70, 80, 90, 95, 100])
		cb.set_label(r'rejection probability [%]', fontsize=14)


		ax3 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0 + 1*(y0/2) + dy, dx, dy])

		mm  = 100-cube_3[50,:,:]
		index = np.arange(0,len(mm[0,:]),1)
		mm[:, index<wi_3[50,0]] = np.nan
		mm[:, index>=wi_3[50,1]] = np.nan	

		im  = ax3.imshow(np.flipud(mm), interpolation='none', aspect='auto', extent=[90, 190, 0, 2]); im.set_clim([60, 100])
		ax3.set_yticklabels([])
		ax3.plot(v, prob95_3[50,:], 'w:', linewidth=3)
		plt.xlim([90, 190])
		plt.grid()
		ax3.plot(eg.redshift2frequency(10), 0.2, 'w.', markersize=34)
		ax3.plot(eg.redshift2frequency(10), 0.2, 'k.', markersize=20)

		cbaxes = fig.add_axes([x0 + 3*dx + 2*dxcb, y0 + 1*(y0/2) + 1*dy, dxcb, dy])
		cb = plt.colorbar(im, cax=cbaxes, ticks=[60, 70, 80, 90, 95, 100])
		cb.set_label(r'rejection probability [%]', fontsize=14)


		ax4 = fig.add_axes([x0 + 2*dx + 2*dxcb, y0, dx, dy])
		ax4.plot(v, prob95_3.T, 'r')
		ax4.plot(v, line95_3[0,0,:], 'k', linewidth=3)
		plt.ylim([0, 2])
		plt.xlim([90, 190])
		plt.grid()
		ax4.set_yticklabels([])
		plt.xlabel(r'frequency [MHz]', fontsize=18)
		ax4.plot(eg.redshift2frequency(10), 0.2, 'w.', markersize=34)
		ax4.plot(eg.redshift2frequency(10), 0.2, 'k.', markersize=20)		




		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170216/figures/'
		plt.savefig(path_plot_save + 'figure1.pdf', bbox_inches='tight')
		plt.close()
		plt.close()











	if figure2 == 'yes':


		# Simulated measurement
		v = np.arange(90, 190.1, 0.4)
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, IntTimeHr)
		w            = 1 / (sigma_noise_K**2) 
		sys2, xHI, z = eg.model_eor(v, T21=0.028, model_type='tanh', fr=140, df=10, zr=10, dz=0.2, z_alpha=0, dz_accuracy_skewed_gaussian=0.0025) 
		Tant3_K = TantK_no_noise + noise_realization_K + sys2



		line95, cube, prob95, wi, r0 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[40], Nfg=[2])


		fig = plt.figure(1, figsize=[8,4])

		plt.plot(v, 1000*(sys2), 'r')
		plt.plot(v, 1000*(noise_realization_K + sys2), 'b')
		plt.plot(v, 1000*(sys2), 'r')
		plt.yticks(np.arange(-20, 61, 10))
		plt.ylim([-20, 60])
		plt.xlim([90, 190])
		plt.grid()
		plt.ylabel('brightness temperature [mK]')
		plt.legend([r'$z_r=10$, $\Delta z =0.2$'], loc=0, fontsize=18)
		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170216/figures/'
		plt.savefig(path_plot_save + 'figure2a.pdf', bbox_inches='tight')
		plt.close()
		plt.close()		



		fig = plt.figure(1, figsize=[8,30])
		for i in range(len(wi[:,0])):
			plt.plot(v[wi[i,0]:wi[i,1]], 1000*r0[i,:]+i*20, 'b')

		plt.ylim([-40, (len(wi[:,0]) + 1)*20])
		plt.xlim([90, 190])
		plt.ylabel('residuals'+'\n'+'20 mK per division')
		plt.xlabel('frequency [MHz]')
		plt.yticks(np.arange(-20, (len(wi[:,0]) + 1)*20-1, 20), [])
		plt.grid()



		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170216/figures/'
		plt.savefig(path_plot_save + 'figure2b.pdf', bbox_inches='tight')
		plt.close()
		plt.close()







	if figure3 == 'yes':

		# Simulated measurement
		v = np.arange(90, 190.1, 0.4)
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, 1*IntTimeHr)
		sys1   = 0.014*np.cos(10*np.pi* v/np.max(v))
		Tant1_K = TantK_no_noise + noise_realization_K + sys1
		w      = 1 / (sigma_noise_K**2)

		line95_1, cube_1, prob95_1, wi_1, r0_1 = eg.data_analysis_sliding_window_redCHIsq(v, Tant1_K, w, Dv=[20], Nfg=[2])
		line95_2, cube_2, prob95_2, wi_2, r0_2 = eg.data_analysis_sliding_window_redCHIsq(v, Tant1_K, w, Dv=[20], Nfg=[3])
		line95_3, cube_3, prob95_3, wi_3, r0_3 = eg.data_analysis_sliding_window_redCHIsq(v, Tant1_K, w, Dv=[20], Nfg=[4])

		line95_4, cube_4, prob95_4, wi_4, r0_4 = eg.data_analysis_sliding_window_redCHIsq(v, Tant1_K, w, Dv=[30], Nfg=[2])
		line95_5, cube_5, prob95_5, wi_5, r0_5 = eg.data_analysis_sliding_window_redCHIsq(v, Tant1_K, w, Dv=[30], Nfg=[3])
		line95_6, cube_6, prob95_6, wi_6, r0_6 = eg.data_analysis_sliding_window_redCHIsq(v, Tant1_K, w, Dv=[30], Nfg=[4])

		line95_7, cube_7, prob95_7, wi_7, r0_7 = eg.data_analysis_sliding_window_redCHIsq(v, Tant1_K, w, Dv=[40], Nfg=[2])
		line95_8, cube_8, prob95_8, wi_8, r0_8 = eg.data_analysis_sliding_window_redCHIsq(v, Tant1_K, w, Dv=[40], Nfg=[3])
		line95_9, cube_9, prob95_9, wi_9, r0_9 = eg.data_analysis_sliding_window_redCHIsq(v, Tant1_K, w, Dv=[40], Nfg=[4])


		# Maximum dz for all frequencies and all cases
		# --------------------------------------------
		line95_max = np.zeros(len(v))
		for i in range(len(v)):
			line95_max[i] = np.max([line95_1[0,0,i], line95_2[0,0,i], line95_3[0,0,i], line95_4[0,0,i], line95_5[0,0,i], line95_6[0,0,i], line95_7[0,0,i], line95_8[0,0,i], line95_9[0,0,i]])



		# ----------------------------------
		fig = plt.figure(1, figsize=[10,8])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*sys1, 'r')
		plt.plot(v, 1000*(noise_realization_K + sys1), 'b')
		plt.plot(v, 1000*sys1, 'r')
		plt.yticks(np.arange(-60, 60, 10))
		plt.ylim([-60, 60])
		plt.xlim([90, 190])
		plt.grid()
		plt.ylabel('brightness temperature [mK]')
		#plt.legend([r'$z_r=10$, $\Delta z =0.2$'], loc=0, fontsize=18)


		plt.subplot(2,1,2)
		plt.plot(v, line95_1[0,0,:], 'b')
		plt.plot(v, line95_2[0,0,:], 'b--')
		plt.plot(v, line95_3[0,0,:], 'b:')

		plt.plot(v, line95_4[0,0,:], 'r')
		plt.plot(v, line95_5[0,0,:], 'r--')
		plt.plot(v, line95_6[0,0,:], 'r:')

		plt.plot(v, line95_7[0,0,:], 'g')
		plt.plot(v, line95_8[0,0,:], 'g--')
		plt.plot(v, line95_9[0,0,:], 'g:')

		plt.plot(v, line95_max, 'k', linewidth=3)

		plt.ylim([0, 2])
		plt.xlim([90, 190])
		plt.ylabel(r'$\Delta$ z')
		plt.xlabel('frequency [MHz]')
		plt.grid()
		plt.legend([r'$\Delta\nu$=20 MHz, Nfg=2', r'$\Delta\nu$=20 MHz, Nfg=3', r'$\Delta\nu$=20 MHz, Nfg=4', r'$\Delta\nu$=30 MHz, Nfg=2', r'$\Delta\nu$=30 MHz, Nfg=3', r'$\Delta\nu$=30 MHz, Nfg=4', r'$\Delta\nu$=40 MHz, Nfg=2', r'$\Delta\nu$=40 MHz, Nfg=3', r'$\Delta\nu$=40 MHz, Nfg=4'], ncol=3, loc=0, fontsize=9)



		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170216/figures/'
		plt.savefig(path_plot_save + 'figure3.pdf', bbox_inches='tight')
		plt.close()
		plt.close()









	if figure4 == 'yes':

		# Simulated measurement
		v = np.arange(90, 190.1, 0.4)
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, 1*IntTimeHr)
		sys2    = 0.014*np.cos(30*np.pi* v/np.max(v))
		Tant2_K = TantK_no_noise + noise_realization_K + sys2
		w      = 1 / (sigma_noise_K**2)

		line95_1, cube_1, prob95_1, wi_1, r0_1 = eg.data_analysis_sliding_window_redCHIsq(v, Tant2_K, w, Dv=[20], Nfg=[2])
		line95_2, cube_2, prob95_2, wi_2, r0_2 = eg.data_analysis_sliding_window_redCHIsq(v, Tant2_K, w, Dv=[20], Nfg=[3])
		line95_3, cube_3, prob95_3, wi_3, r0_3 = eg.data_analysis_sliding_window_redCHIsq(v, Tant2_K, w, Dv=[20], Nfg=[4])

		line95_4, cube_4, prob95_4, wi_4, r0_4 = eg.data_analysis_sliding_window_redCHIsq(v, Tant2_K, w, Dv=[30], Nfg=[2])
		line95_5, cube_5, prob95_5, wi_5, r0_5 = eg.data_analysis_sliding_window_redCHIsq(v, Tant2_K, w, Dv=[30], Nfg=[3])
		line95_6, cube_6, prob95_6, wi_6, r0_6 = eg.data_analysis_sliding_window_redCHIsq(v, Tant2_K, w, Dv=[30], Nfg=[4])

		line95_7, cube_7, prob95_7, wi_7, r0_7 = eg.data_analysis_sliding_window_redCHIsq(v, Tant2_K, w, Dv=[40], Nfg=[2])
		line95_8, cube_8, prob95_8, wi_8, r0_8 = eg.data_analysis_sliding_window_redCHIsq(v, Tant2_K, w, Dv=[40], Nfg=[3])
		line95_9, cube_9, prob95_9, wi_9, r0_9 = eg.data_analysis_sliding_window_redCHIsq(v, Tant2_K, w, Dv=[40], Nfg=[4])


		# Maximum dz for all frequencies and all cases
		# --------------------------------------------
		line95_max = np.zeros(len(v))
		for i in range(len(v)):
			line95_max[i] = np.max([line95_1[0,0,i], line95_2[0,0,i], line95_3[0,0,i], line95_4[0,0,i], line95_5[0,0,i], line95_6[0,0,i], line95_7[0,0,i], line95_8[0,0,i], line95_9[0,0,i]])		



		# ----------------------------------
		fig = plt.figure(1, figsize=[10,8])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*sys2, 'r')
		plt.plot(v, 1000*(noise_realization_K + sys2), 'b')
		plt.plot(v, 1000*sys2, 'r')
		plt.yticks(np.arange(-60, 60, 10))
		plt.ylim([-60, 60])
		plt.xlim([90, 190])
		plt.grid()
		plt.ylabel('brightness temperature [mK]')
		#plt.legend([r'$z_r=10$, $\Delta z =0.2$'], loc=0, fontsize=18)


		plt.subplot(2,1,2)
		plt.plot(v, line95_1[0,0,:], 'b')
		plt.plot(v, line95_2[0,0,:], 'b--')
		plt.plot(v, line95_3[0,0,:], 'b:')

		plt.plot(v, line95_4[0,0,:], 'r')
		plt.plot(v, line95_5[0,0,:], 'r--')
		plt.plot(v, line95_6[0,0,:], 'r:')

		plt.plot(v, line95_7[0,0,:], 'g')
		plt.plot(v, line95_8[0,0,:], 'g--')
		plt.plot(v, line95_9[0,0,:], 'g:')

		plt.plot(v, line95_max, 'k', linewidth=3)

		plt.ylim([0, 2])
		plt.xlim([90, 190])
		plt.ylabel(r'$\Delta$ z')
		plt.xlabel('frequency [MHz]')
		plt.grid()
		plt.legend([r'$\Delta\nu$=20 MHz, Nfg=2', r'$\Delta\nu$=20 MHz, Nfg=3', r'$\Delta\nu$=20 MHz, Nfg=4', r'$\Delta\nu$=30 MHz, Nfg=2', r'$\Delta\nu$=30 MHz, Nfg=3', r'$\Delta\nu$=30 MHz, Nfg=4', r'$\Delta\nu$=40 MHz, Nfg=2', r'$\Delta\nu$=40 MHz, Nfg=3', r'$\Delta\nu$=40 MHz, Nfg=4'], ncol=3, loc=0, fontsize=9)



		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170216/figures/'
		plt.savefig(path_plot_save + 'figure4.pdf', bbox_inches='tight')
		plt.close()
		plt.close()





	if figure5 == 'yes':

		# Simulated measurement
		v = np.arange(90, 190.1, 0.4)
		TantK_no_noise = 400*(v/140)**(-2.5)

		BwMHz     = v[1] - v[0]
		IntTimeHr = 4
		sigma_noise_K, noise_realization_K = eg.radiometer_equation(TantK_no_noise, BwMHz, 1*IntTimeHr)
		sys1    = 0.014*np.cos(10*np.pi* v/np.max(v))
		sys2    = 0.007*np.cos(30*np.pi* v/np.max(v))
		Tant3_K = TantK_no_noise + noise_realization_K + sys1 + sys2
		w       = 1 / (sigma_noise_K**2)

		line95_1, cube_1, prob95_1, wi_1, r0_1 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[20], Nfg=[2])
		line95_2, cube_2, prob95_2, wi_2, r0_2 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[20], Nfg=[3])
		line95_3, cube_3, prob95_3, wi_3, r0_3 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[20], Nfg=[4])

		line95_4, cube_4, prob95_4, wi_4, r0_4 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[30], Nfg=[2])
		line95_5, cube_5, prob95_5, wi_5, r0_5 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[30], Nfg=[3])
		line95_6, cube_6, prob95_6, wi_6, r0_6 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[30], Nfg=[4])

		line95_7, cube_7, prob95_7, wi_7, r0_7 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[40], Nfg=[2])
		line95_8, cube_8, prob95_8, wi_8, r0_8 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[40], Nfg=[3])
		line95_9, cube_9, prob95_9, wi_9, r0_9 = eg.data_analysis_sliding_window_redCHIsq(v, Tant3_K, w, Dv=[40], Nfg=[4])


		# Maximum dz for all frequencies and all cases
		# --------------------------------------------
		line95_max = np.zeros(len(v))
		for i in range(len(v)):
			line95_max[i] = np.max([line95_1[0,0,i], line95_2[0,0,i], line95_3[0,0,i], line95_4[0,0,i], line95_5[0,0,i], line95_6[0,0,i], line95_7[0,0,i], line95_8[0,0,i], line95_9[0,0,i]])



		# ----------------------------------
		fig = plt.figure(1, figsize=[10,8])

		plt.subplot(2,1,1)
		plt.plot(v, 1000*(sys1 + sys2), 'r')
		plt.plot(v, 1000*(noise_realization_K + sys1 + sys2), 'b')
		plt.plot(v, 1000*(sys1 + sys2), 'r')
		plt.yticks(np.arange(-60, 60, 10))
		plt.ylim([-60, 60])
		plt.xlim([90, 190])
		plt.grid()
		plt.ylabel('brightness temperature [mK]')
		#plt.legend([r'$z_r=10$, $\Delta z =0.2$'], loc=0, fontsize=18)


		plt.subplot(2,1,2)
		plt.plot(v, line95_1[0,0,:], 'b')
		plt.plot(v, line95_2[0,0,:], 'b--')
		plt.plot(v, line95_3[0,0,:], 'b:')

		plt.plot(v, line95_4[0,0,:], 'r')
		plt.plot(v, line95_5[0,0,:], 'r--')
		plt.plot(v, line95_6[0,0,:], 'r:')

		plt.plot(v, line95_7[0,0,:], 'g')
		plt.plot(v, line95_8[0,0,:], 'g--')
		plt.plot(v, line95_9[0,0,:], 'g:')

		plt.plot(v, line95_max, 'k', linewidth=3)

		plt.ylim([0, 2])
		plt.xlim([90, 190])
		plt.ylabel(r'$\Delta$ z')
		plt.xlabel('frequency [MHz]')
		plt.grid()
		plt.legend([r'$\Delta\nu$=20 MHz, Nfg=2', r'$\Delta\nu$=20 MHz, Nfg=3', r'$\Delta\nu$=20 MHz, Nfg=4', r'$\Delta\nu$=30 MHz, Nfg=2', r'$\Delta\nu$=30 MHz, Nfg=3', r'$\Delta\nu$=30 MHz, Nfg=4', r'$\Delta\nu$=40 MHz, Nfg=2', r'$\Delta\nu$=40 MHz, Nfg=3', r'$\Delta\nu$=40 MHz, Nfg=4'], ncol=3, loc=0, fontsize=9)



		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170216/figures/'
		plt.savefig(path_plot_save + 'figure5.pdf', bbox_inches='tight')
		plt.close()
		plt.close()





	if figure6 == 'yes':
		# Daily residuals and total average
		v, t, w, d              = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/high_band_2015_LST_0.26_6.26_20170118.hdf5')

		# Selecting good days
		tsel = t[25:65,:]
		wsel = w[25:65,:]
		dsel = d[25:65,:]

		# Averaging good days		
		avt, avw = eg.spectral_averaging(tsel, wsel)

		# Binning spectrum 
		vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')

		# Computing rejections
		line95_1, cube_1, prob95_1, wi_1, r0_1 = eg.data_analysis_sliding_window_redCHIsq(vb, tb, wb, Dv=[20], Nfg=[2])
		line95_2, cube_2, prob95_2, wi_2, r0_2 = eg.data_analysis_sliding_window_redCHIsq(vb, tb, wb, Dv=[20], Nfg=[3])
		line95_3, cube_3, prob95_3, wi_3, r0_3 = eg.data_analysis_sliding_window_redCHIsq(vb, tb, wb, Dv=[20], Nfg=[4])

		line95_4, cube_4, prob95_4, wi_4, r0_4 = eg.data_analysis_sliding_window_redCHIsq(vb, tb, wb, Dv=[30], Nfg=[2])
		line95_5, cube_5, prob95_5, wi_5, r0_5 = eg.data_analysis_sliding_window_redCHIsq(vb, tb, wb, Dv=[30], Nfg=[3])
		line95_6, cube_6, prob95_6, wi_6, r0_6 = eg.data_analysis_sliding_window_redCHIsq(vb, tb, wb, Dv=[30], Nfg=[4])

		line95_7, cube_7, prob95_7, wi_7, r0_7 = eg.data_analysis_sliding_window_redCHIsq(vb, tb, wb, Dv=[40], Nfg=[2])
		line95_8, cube_8, prob95_8, wi_8, r0_8 = eg.data_analysis_sliding_window_redCHIsq(vb, tb, wb, Dv=[40], Nfg=[3])
		line95_9, cube_9, prob95_9, wi_9, r0_9 = eg.data_analysis_sliding_window_redCHIsq(vb, tb, wb, Dv=[40], Nfg=[4])	


		# Maximum dz for all frequencies and all cases
		# --------------------------------------------
		line95_max = np.zeros(len(vb))
		for i in range(len(vb)):
			line95_max[i] = np.max([line95_1[0,0,i], line95_2[0,0,i], line95_3[0,0,i], line95_4[0,0,i], line95_5[0,0,i], line95_6[0,0,i], line95_7[0,0,i], line95_8[0,0,i], line95_9[0,0,i]])	



		# ----------------------------------
		fig = plt.figure(1, figsize=[10,8])

		plt.subplot(2,1,1)

		vb2, rsel, wsel, rms, rms110 = eg.data_analysis_residuals_array(v, avt.reshape(1,-1), avw.reshape(1,-1), flow=90, fhigh=190, model_type='EDGES_polynomial', fnorm=140, nfg=5, binning='yes', nsamples=64, rfi_flagging='yes')

		plt.plot(vb2[wsel>0], 1000*rsel[wsel>0], 'b')
		plt.yticks(np.arange(-60, 60, 10))
		plt.ylim([-60, 60])
		plt.xlim([90, 190])
		plt.grid()
		plt.ylabel('brightness temperature [mK]')
		#plt.legend([r'$z_r=10$, $\Delta z =0.2$'], loc=0, fontsize=18)


		plt.subplot(2,1,2)
		plt.plot(vb, line95_1[0,0,:], 'b')
		plt.plot(vb, line95_2[0,0,:], 'b--')
		plt.plot(vb, line95_3[0,0,:], 'b:')

		plt.plot(vb, line95_4[0,0,:], 'r')
		plt.plot(vb, line95_5[0,0,:], 'r--')
		plt.plot(vb, line95_6[0,0,:], 'r:')

		plt.plot(vb, line95_7[0,0,:], 'g')
		plt.plot(vb, line95_8[0,0,:], 'g--')
		plt.plot(vb, line95_9[0,0,:], 'g:')

		plt.plot(vb, line95_max, 'k', linewidth=3)

		plt.ylim([0, 2])
		plt.xlim([90, 190])
		plt.ylabel(r'$\Delta$ z')
		plt.xlabel('frequency [MHz]')
		plt.grid()
		plt.legend([r'$\Delta\nu$=20 MHz, Nfg=2', r'$\Delta\nu$=20 MHz, Nfg=3', r'$\Delta\nu$=20 MHz, Nfg=4', r'$\Delta\nu$=30 MHz, Nfg=2', r'$\Delta\nu$=30 MHz, Nfg=3', r'$\Delta\nu$=30 MHz, Nfg=4', r'$\Delta\nu$=40 MHz, Nfg=2', r'$\Delta\nu$=40 MHz, Nfg=3', r'$\Delta\nu$=40 MHz, Nfg=4'], ncol=3, loc=0, fontsize=9)



		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/WORK/EDGES/reports/20170216/figures/'
		plt.savefig(path_plot_save + 'figure6.pdf', bbox_inches='tight')
		plt.close()
		plt.close()






	return 0


























def plots_high_band_rejections_1(figure1='no', figure2='no', figure3='no', figure4='no', figure5='no', figure6='no'):
	"""
	February 27, 2017
	"""


	# Example of residuals for sample of windows
	# -------------------------------------------
	if figure1 == 'yes':

		producing_data = 1
		if producing_data == 1:
			# Daily residuals and total average
			v, t, w, d              = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/high_band_2015_LST_0.26_6.26_20170118.hdf5')

			# Selecting good days
			tsel = t[25:65,:]
			wsel = w[25:65,:]
			dsel = d[25:65,:]

			# Averaging good days		
			avt, avw = eg.spectral_averaging(tsel, wsel)

			# Binning spectrum 
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			wb[np.abs(10*vb-1457)<1]=0
			wb[np.abs(10*vb-1461)<1]=0

			# Computing rejections
			#o = eg.data_analysis_sliding_window_redCHIsq('high_band', vb, tb, wb, Dv=[20, 30, 40], Nfg=[2, 3, 4], save='yes', flag_save='_preliminary_incomplete')


		# Producing figure
		v, Dv, Nfg, line68, line95, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'rejection_results_preliminary_incomplete.hdf5')




		# Maximum dz for all frequencies and all cases

		v0, Dv0, Nfg0, line68_0, line95_0, cube_prob_0, prob68_0, prob95_0, window_index0, residuals0_0 = eg.read_chi_square_sliding_window('high_band', 'rejection_results_20MHz_3terms.hdf5')



		#fig = plt.figure(2, figsize=[8,20])
		plt.subplot(2,1,1)
		window_step = 13
		Nstep = int(len(window_index0[:,0])/13)

		temp_per_division = 100
		for j in range(Nstep-1):
			i = j*Nstep + 3
			#plt.plot(v[window_index0[i,0]:window_index0[i,1]], 1000*residuals0_0[i,wb[window_index0[i,0]:window_index0[i,1]]>0]+j*temp_per_division, 'b')
			vv = v[window_index0[i,0]:window_index0[i,1]]
			ww = wb[window_index0[i,0]:window_index0[i,1]]
			rr = 1000*residuals0_0[i,:]

			rr[ww==0] = np.nan


			#wb[window_index0[i,0]:window_index0[i,1]]>0
			plt.plot(vv, rr + j*temp_per_division, 'b')

		plt.ylim([-temp_per_division, (Nstep-1)*temp_per_division])
		plt.xlim([90, 190])
		plt.ylabel('baseline residuals'+'\n'+ str(temp_per_division)+ ' mK per vertical division')
		plt.yticks(np.arange(-temp_per_division, (Nstep-1)*temp_per_division, temp_per_division), [])
		plt.grid()



		plt.subplot(2,1,2)
		plt.plot(v, np.max(np.max(line68, axis=0), axis=0), 'k--')
		plt.plot(v, np.max(np.max(line95, axis=0), axis=0), 'k')

		plt.xlim([90, 190])
		plt.ylim([0, 2])
		plt.xlabel('frequency [MHz]')
		plt.ylabel(r'$\Delta$z')


	# Nominal constraints
	# -------------------
	if figure2 == 'yes':

		v, Dv, Nfg, line68g, line95g, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_nominal.hdf5')




		v, Dv, Nfg, line68g2, line95g2, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian2/rejection_results_nominal.hdf5')
		v, Dv, Nfg, line68g3, line95g3, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian3/rejection_results_nominal.hdf5')
		v, Dv, Nfg, line68g4, line95g4, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian4/rejection_results_nominal.hdf5')
		v, Dv, Nfg, line68t, line95t, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_nominal.hdf5')
		z = eg.frequency2redshift(v)


		# Averaging good days


		# Maximum dz for all frequencies and all cases
		# --------------------------------------------

		g68 = np.max(np.max(line68g, axis=0), axis=0)
		g95 = np.max(np.max(line95g, axis=0), axis=0)

		#g68_2 = np.max(np.max(line68g2, axis=0), axis=0)
		#g68_3 = np.max(np.max(line68g3, axis=0), axis=0)

		g95_2 = np.max(np.max(line95g2, axis=0), axis=0)
		g95_3 = np.max(np.max(line95g3, axis=0), axis=0)
		g95_4 = np.max(np.max(line95g4, axis=0), axis=0)

		t68 = np.max(np.max(line68t, axis=0), axis=0)
		t95 = np.max(np.max(line95t, axis=0), axis=0)





		# --------------------------------
		thres = -0.005  # K
		vlr = np.arange(90, 191, 0.5)






		dz  = np.arange(0.2,10,0.2)
		limit1 = np.max(dz)*np.ones(len(vlr))
		for j in range(len(vlr)):
			zr = eg.frequency2redshift(vlr[j])
			t6 = 0
			for i in range(len(dz)):
				t6_old = np.copy(t6)
				#t6 = model_eor(6, zr, dz[i])
				t6, xhi, zz = eg.model_eor(eg.redshift2frequency(6), T21=-0.1, model_type='gaussian_redshift', zr=zr, dz=dz[i])
				if (t6_old >= thres) and (t6 <= thres):
					limit1[j] = dz[i]


		dz  = np.arange(0.2,6,0.2)
		limit2 = np.max(dz)*np.ones(len(vlr))
		for j in range(len(vlr)):
			zr = eg.frequency2redshift(vlr[j])
			t6 = 0
			for i in range(len(dz)):
				t6_old = np.copy(t6)
				#t6 = model_eor(6, zr, dz[i])
				t6, xhi, zz = eg.model_eor(eg.redshift2frequency(6), T21=-0.1, model_type='gaussian_redshift', zr=zr, dz=dz[i], z_alpha=-6)
				if (t6_old >= thres) and (t6 <= thres):
					limit2[j] = dz[i]

				print([zr, dz[i]])

		dz  = np.arange(0.2,14.3,0.2)
		limit3 = np.max(dz)*np.ones(len(vlr))
		for j in range(len(vlr)):
			zr = eg.frequency2redshift(vlr[j])
			t6 = 0
			for i in range(len(dz)):
				t6_old = np.copy(t6)
				#t6 = model_eor(6, zr, dz[i])
				t6, xhi, zz = eg.model_eor(eg.redshift2frequency(6), T21=-0.1, model_type='gaussian_redshift', zr=zr, dz=dz[i], z_alpha=+6)
				if (t6_old >= thres) and (t6 <= thres):
					limit3[j] = dz[i]

				print([zr, dz[i]])


		dz  = np.arange(0.2,10,0.2)
		limit4 = np.max(dz)*np.ones(len(vlr))
		for j in range(len(vlr)):
			zr = eg.frequency2redshift(vlr[j])
			t6 = 0
			for i in range(len(dz)):
				t6_old = np.copy(t6)
				#t6 = model_eor(6, zr, dz[i])
				t6, xhi, zz = eg.model_eor(eg.redshift2frequency(6), T21=-0.2, model_type='gaussian_redshift', zr=zr, dz=dz[i])
				if (t6_old >= thres) and (t6 <= thres):
					limit4[j] = dz[i]



		plt.close()
		plt.close()
		plt.close()
		plt.figure(1, figsize=[16.3,11])

		plt.subplot(2,2,1)
		plt.plot(v, g68, 'k--')
		plt.plot(v, g95, 'k')
		plt.plot(v, g95_2, 'r')
		plt.plot(v, g95_3, 'b')
		plt.plot(v, g95_4, 'm')
		#plt.plot(v, g68_2, 'r--')
		#plt.plot(v, g68_3, 'b--')
		plt.plot(vlr, limit1, 'k:')
		plt.plot(vlr, limit2, 'r:')
		plt.plot(vlr, limit3, 'b:')
		plt.plot(vlr, limit4, 'm:')
		plt.xlim([90, 190])
		plt.ylim([0, 14])
		plt.ylabel(r'$\Delta$z')
		plt.grid()
		plt.title('Constraints for Gaussian') # -100-mK 



		plt.subplot(2,2,2)
		plt.plot(z, g68, 'k--')
		plt.plot(z, g95, 'k')
		plt.plot(z, g95_2, 'r')
		plt.plot(z, g95_3, 'b')
		plt.plot(z, g95_4, 'm')
		#plt.plot(z, g68_2, 'r--')
		#plt.plot(z, g68_3, 'b--')
		plt.plot(eg.frequency2redshift(vlr), limit1, 'k:')
		plt.plot(eg.frequency2redshift(vlr), limit2, 'r:')
		plt.plot(eg.frequency2redshift(vlr), limit3, 'b:')
		plt.plot(eg.frequency2redshift(vlr), limit4, 'm:')
		plt.xlim([14.8, 6.5])
		plt.ylim([0, 14])
		plt.ylabel(r'$\Delta$z')
		plt.grid()
		plt.title('Constraints for Gaussian') # -100-mK
		plt.legend(['sym. gaussian -100 mK: 68%', 'sym. gaussian -100 mK: 95%', r'skewed gaussian -100 mK, $\phi=-6$: 95%', r'skewed gaussian -100 mK, $\phi=+6$: 95%', 'sym. gaussian -200 mK: 95%'], loc=0, fontsize=10)



		plt.subplot(2,2,3)
		plt.plot(v, t68, 'k--')
		plt.plot(v, t95, 'k')
		plt.plot([100, 190], [0.06, 0.06],'g')
		plt.xlim([90, 190])
		plt.ylim([0, 2])
		plt.xlabel('frequency [MHz]')
		plt.ylabel(r'$\Delta$z')
		plt.grid()
		plt.title('Constraints for Tanh')  # 28-mK 



		plt.subplot(2,2,4)
		plt.plot(z, t68, 'k--')
		plt.plot(z, t95, 'k')
		plt.plot(eg.frequency2redshift(np.array([100, 190])), [0.06, 0.06],'g')
		plt.xlim([14.8, 6.5])
		plt.ylim([0, 2])
		plt.xlabel('z')
		plt.ylabel(r'$\Delta$z')
		plt.grid()
		plt.title('Constraints for Tanh')  # 28-mK
		plt.legend(['68%', '95%', '95% from' + '\n' + 'Bowman & Rogers (2010)'], loc=0, fontsize=10)


		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170310/'
		plt.savefig(path_plot_save + 'rejections_20170310.pdf', bbox_inches='tight')
		plt.close()
		plt.close()




		#output = np.array([v, z, t68, t95, g68, g95, g95_2, g95_3])
		#o = output.T
		#np.savetxt(home_folder + '/DATA/EDGES/results/high_band/products/model_rejection/rejection_limits/rejections_20170227.txt', o)










	if figure3 == 'yes':


		plt.figure(1, figsize=[13, 13])

		v, Dv, Nfg, line68g, line95g, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_nominal.hdf5')
		g68 = np.max(np.max(line68g, axis=0), axis=0)
		g95 = np.max(np.max(line95g, axis=0), axis=0)		


		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_beam' + str(i+1)+ '.hdf5')
			g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)

			plt.subplot(4,2,1)			
			plt.plot(v, g68MC, 'c')
			plt.plot(v, g95MC, 'm')
		plt.plot(v, g68, 'k', linewidth=2)
		plt.plot(v, g95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])
		plt.ylim([0, 10])
		plt.ylabel(r'$\Delta$z')
		plt.text(130, 9, 'Beam + Sky Model', fontsize=14, weight='bold')
		plt.text(230, 7, 'Rejections of'+'\n'+'-100-mK Gaussian', fontsize=14)
		plt.text(230, 4, '20 realizations per' + '\n' + 'uncertainty source', fontsize=14)
		plt.text(230, -0, 'Next step is' + '\n' + 'comprehensive MC' + '\n' + 'combining all uncertainties', fontsize=14)



		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_antloss' + str(i+1)+ '.hdf5')
			g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)

			plt.subplot(4,2,3)	
			plt.plot(v, g68MC, 'c')
			plt.plot(v, g95MC, 'm')
		plt.plot(v, g68, 'k', linewidth=2)
		plt.plot(v, g95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])		
		plt.ylim([0, 10])
		plt.ylabel(r'$\Delta$z')
		plt.text(130, 9, 'Antenna Panel Loss', fontsize=14, weight='bold')



		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_bcloss' + str(i+1)+ '.hdf5')
			g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)

			plt.subplot(4,2,5)	
			plt.plot(v, g68MC, 'c')
			plt.plot(v, g95MC, 'm')
		plt.plot(v, g68, 'k', linewidth=2)
		plt.plot(v, g95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])
		plt.ylim([0, 10])
		plt.ylabel(r'$\Delta$z')
		plt.text(130, 9, 'Balun + Connector Loss', fontsize=14, weight='bold')




		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_groundloss' + str(i+1)+ '.hdf5')
			g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)

			plt.subplot(4,2,7)	
			plt.plot(v, g68MC, 'c')
			plt.plot(v, g95MC, 'm')		
		plt.plot(v, g68, 'k', linewidth=2)
		plt.plot(v, g95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])			
		plt.ylim([0, 10])
		plt.xlabel('frequency [MHz]')
		plt.ylabel(r'$\Delta$z')
		plt.text(130, 9, 'Ground Loss', fontsize=14, weight='bold')



		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_ants11mag' + str(i+1)+ '.hdf5')
			g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)

			plt.subplot(4,2,4)			
			plt.plot(v, g68MC, 'c')
			plt.plot(v, g95MC, 'm')
		plt.plot(v, g68, 'k', linewidth=2)
		plt.plot(v, g95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])			
		plt.ylim([0, 10])
		plt.text(130, 9, 'Mag Ant S11', fontsize=14, weight='bold')


		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_ants11ang' + str(i+1)+ '.hdf5')
			g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)

			plt.subplot(4,2,6)
			plt.plot(v, g68MC, 'c')
			plt.plot(v, g95MC, 'm')
		plt.plot(v, g68, 'k', linewidth=2)
		plt.plot(v, g95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])			
		plt.ylim([0, 10])
		plt.text(130, 9, 'Phase Ant S11', fontsize=14, weight='bold')


		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_receiver' + str(i+1)+ '.hdf5')
			g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)

			plt.subplot(4,2,8)
			if i == 0:
				plt.plot(v, g68MC, 'c', label='68%')
				plt.plot(v, g95MC, 'm', label='95%')
			else:
				plt.plot(v, g68MC, 'c')
				plt.plot(v, g95MC, 'm')				
		plt.plot(v, g68, 'k', linewidth=2, label='nominal')
		plt.plot(v, g95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])		
		plt.ylim([0, 10])
		plt.xlabel('frequency [MHz]')
		plt.text(130, 9, 'Receiver', fontsize=14, weight='bold')


		plt.legend(loc=0, fontsize=9)




		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170307/'
		plt.savefig(path_plot_save + 'rejections_20170307.pdf', bbox_inches='tight')
		plt.close()
		plt.close()










	# Tanh
	if figure4 == 'yes':


		plt.figure(1, figsize=[13, 13])

		v, Dv, Nfg, line68t, line95t, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_nominal.hdf5')
		t68 = np.max(np.max(line68t, axis=0), axis=0)
		t95 = np.max(np.max(line95t, axis=0), axis=0)		


		for i in range(6):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_beam' + str(i+1)+ '.hdf5')
			t68MC = np.max(np.max(line68tMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)

			plt.subplot(4,2,1)			
			plt.plot(v, t68MC, 'c')
			plt.plot(v, t95MC, 'm')
		plt.plot(v, t68, 'k', linewidth=2)
		plt.plot(v, t95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])
		plt.ylim([0, 2])
		plt.ylabel(r'$\Delta$z')
		plt.text(130, 1.7, 'Beam + Sky Model', fontsize=14, weight='bold')
		plt.text(230, 1.7, 'Rejections of'+'\n'+'28-mK Tanh', fontsize=14)
		plt.text(230, 1.0, '6 realizations per' + '\n' + 'uncertainty source', fontsize=14)
		plt.text(230, -0, 'Next step is' + '\n' + 'comprehensive MC' + '\n' + 'combining all uncertainties', fontsize=14)



		for i in range(6):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_antloss' + str(i+1)+ '.hdf5')
			t68MC = np.max(np.max(line68tMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)

			plt.subplot(4,2,3)	
			plt.plot(v, t68MC, 'c')
			plt.plot(v, t95MC, 'm')
		plt.plot(v, t68, 'k', linewidth=2)
		plt.plot(v, t95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])		
		plt.ylim([0, 2])
		plt.ylabel(r'$\Delta$z')
		plt.text(130, 1.7, 'Antenna Panel Loss', fontsize=14, weight='bold')



		for i in range(6):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_bcloss' + str(i+1)+ '.hdf5')
			t68MC = np.max(np.max(line68tMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)

			plt.subplot(4,2,5)	
			plt.plot(v, t68MC, 'c')
			plt.plot(v, t95MC, 'm')
		plt.plot(v, t68, 'k', linewidth=2)
		plt.plot(v, t95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])
		plt.ylim([0, 2])
		plt.ylabel(r'$\Delta$z')
		plt.text(130, 1.7, 'Balun + Connector Loss', fontsize=14, weight='bold')




		for i in range(6):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_groundloss' + str(i+1)+ '.hdf5')
			t68MC = np.max(np.max(line68tMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)

			plt.subplot(4,2,7)	
			plt.plot(v, t68MC, 'c')
			plt.plot(v, t95MC, 'm')		
		plt.plot(v, t68, 'k', linewidth=2)
		plt.plot(v, t95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])			
		plt.ylim([0, 2])
		plt.xlabel('frequency [MHz]')
		plt.ylabel(r'$\Delta$z')
		plt.text(130, 1.7, 'Ground Loss', fontsize=14, weight='bold')



		for i in range(6):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_ants11mag' + str(i+1)+ '.hdf5')
			t68MC = np.max(np.max(line68tMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)

			plt.subplot(4,2,4)			
			plt.plot(v, t68MC, 'c')
			plt.plot(v, t95MC, 'm')
		plt.plot(v, t68, 'k', linewidth=2)
		plt.plot(v, t95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])			
		plt.ylim([0, 2])
		plt.text(130, 1.7, 'Mag Ant S11', fontsize=14, weight='bold')


		for i in range(6):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_ants11ang' + str(i+1)+ '.hdf5')
			t68MC = np.max(np.max(line68tMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)

			plt.subplot(4,2,6)
			plt.plot(v, t68MC, 'c')
			plt.plot(v, t95MC, 'm')
		plt.plot(v, t68, 'k', linewidth=2)
		plt.plot(v, t95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])			
		plt.ylim([0, 2])
		plt.text(130, 1.7, 'Phase Ant S11', fontsize=14, weight='bold')


		for i in range(6):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_receiver' + str(i+1)+ '.hdf5')
			t68MC = np.max(np.max(line68tMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)

			plt.subplot(4,2,8)
			if i == 0:
				plt.plot(v, t68MC, 'c', label='68%')
				plt.plot(v, t95MC, 'm', label='95%')
			else:
				plt.plot(v, t68MC, 'c')
				plt.plot(v, t95MC, 'm')				
		plt.plot(v, t68, 'k', linewidth=2, label='nominal')
		plt.plot(v, t95, 'k', linewidth=2)

		plt.grid()
		plt.xlim([90,190])		
		plt.ylim([0, 2])
		plt.xlabel('frequency [MHz]')
		plt.text(130, 1.7, 'Receiver', fontsize=14, weight='bold')


		plt.legend(loc=0, fontsize=9)




		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170307/'
		plt.savefig(path_plot_save + 'rejections_20170307_tanh.pdf', bbox_inches='tight')
		plt.close()
		plt.close()














	if figure5 == 'yes':


		v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')
		avt, avw = eg.spectral_averaging(t, w)
		vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
		p = eg.fit_polynomial_fourier('EDGES_polynomial', vb, tb, 5, Weights=wb)
		rb = tb - p[1]
		rb[wb==0] = 0
		g95r_nominal = np.copy(rb)




		# All
		#g95r_all = np.zeros((100,len(v)))
		for i in range(100):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+1) + '.hdf5')
			avt, avw   = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			p = eg.fit_polynomial_fourier('EDGES_polynomial', vb, tb, 5, Weights=wb)
			rb = tb - p[1]
			rb[wb==0] = 0

			if i == 0:
				g95r_all = np.copy(rb)
				g95w_all = np.copy(wb)
			elif i > 0:
				g95r_all = np.vstack((g95r_all, rb))
				g95w_all = np.vstack((g95w_all, wb))





		v, Dv, Nfg, line68g, line95g, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_nominal.hdf5')
		#g68 = np.max(np.max(line68g, axis=0), axis=0)
		g95 = np.max(np.max(line95g, axis=0), axis=0)			

		#plt.plot(v, g68, 'k', linewidth=2, label='nominal')





		g95MCx_all = np.zeros((100,len(v)))
		for i in range(100):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_MC' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)
			g95MCx_all[i,:] = g95MC


			#if i == 0:
				##plt.plot(v, g68MC-g68, 'c', label='68%')
				#plt.plot(v, g95MC, 'm', label='95%')
			#else:
				##plt.plot(v, g68MC-g68, 'c')
				#plt.plot(v, g95MC, 'm')				

		g95_MC = np.std(g95MCx_all, axis=0)				




		g95MC_all = np.zeros((20,len(v)))
		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_beam' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)
			g95MC_all[i,:] = g95MC

		g95_beam = np.std(g95MC_all, axis=0)




		g95MC_all = np.zeros((20,len(v)))
		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_groundloss' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)
			g95MC_all[i,:] = g95MC

		g95_groundloss = np.std(g95MC_all, axis=0)




		g95MC_all = np.zeros((20,len(v)))
		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_antloss' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)
			g95MC_all[i,:] = g95MC

		g95_antloss = np.std(g95MC_all, axis=0)		




		g95MC_all = np.zeros((20,len(v)))
		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_bcloss' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)
			g95MC_all[i,:] = g95MC

		g95_bcloss = np.std(g95MC_all, axis=0)				




		g95MC_all = np.zeros((20,len(v)))
		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_ants11mag' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)
			g95MC_all[i,:] = g95MC

		g95_ants11mag = np.std(g95MC_all, axis=0)				




		g95MC_all = np.zeros((20,len(v)))
		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_ants11ang' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)
			g95MC_all[i,:] = g95MC

		g95_ants11ang = np.std(g95MC_all, axis=0)			




		g95MC_all = np.zeros((20,len(v)))
		for i in range(20):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_receiver' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)
			g95MC_all[i,:] = g95MC

		g95_receiver = np.std(g95MC_all, axis=0)		
















		# --------------------------------------------------------
		# --------------------------------------------------------
		# Tanh		
		t95MC_all = np.zeros((5,len(v)))
		for i in range(5):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_beam' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)
			t95MC_all[i,:] = t95MC

		t95_beam = np.std(t95MC_all, axis=0)




		t95MC_all = np.zeros((5,len(v)))
		for i in range(5):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_groundloss' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)
			t95MC_all[i,:] = t95MC

		t95_groundloss = np.std(t95MC_all, axis=0)




		t95MC_all = np.zeros((5,len(v)))
		for i in range(5):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_antloss' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)
			t95MC_all[i,:] = t95MC

		t95_antloss = np.std(t95MC_all, axis=0)		




		t95MC_all = np.zeros((5,len(v)))
		for i in range(5):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_bcloss' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)
			t95MC_all[i,:] = t95MC

		t95_bcloss = np.std(t95MC_all, axis=0)				




		t95MC_all = np.zeros((5,len(v)))
		for i in range(5):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_ants11mag' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)
			t95MC_all[i,:] = t95MC

		t95_ants11mag = np.std(t95MC_all, axis=0)				




		t95MC_all = np.zeros((5,len(v)))
		for i in range(5):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_ants11ang' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)
			t95MC_all[i,:] = t95MC

		t95_ants11ang = np.std(t95MC_all, axis=0)			




		t95MC_all = np.zeros((5,len(v)))
		for i in range(5):
			v, Dv, Nfg, line68tMC, line95tMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_receiver' + str(i+1)+ '.hdf5')
			#g68MC = np.max(np.max(line68gMC, axis=0), axis=0)
			t95MC = np.max(np.max(line95tMC, axis=0), axis=0)
			t95MC_all[i,:] = t95MC

		t95_receiver = np.std(t95MC_all, axis=0)		




























		plt.figure(1, figsize=[10, 14])



		plt.subplot(4,1,1)
		for i in range(100):
			plt.plot(vb[g95w_all[i,:]>0], 1000*g95r_all[i,g95w_all[i,:]>0], 'c')

		plt.plot(vb, 1000*g95r_nominal, 'k', linewidth=3)
		plt.xlim([90, 190])
		plt.ylim([-300, 300])
		plt.grid()







		plt.subplot(4,1,3)
		#plt.plot(eg.frequency2redshift(v), (g95MCx_all-g95).T, 'm')
		plt.plot(eg.frequency2redshift(v), g95MCx_all.T, 'm')
		plt.plot(eg.frequency2redshift(v), g95, 'k', linewidth=2)
		plt.ylim([-2,7])
		plt.xlim([14.8, 6.5])


		plt.subplot(4,1,4)

		plt.semilogy(eg.frequency2redshift(v), t95_beam, 'b', linewidth=2)
		plt.semilogy(eg.frequency2redshift(v), np.sqrt(t95_groundloss**2 + t95_bcloss**2 + t95_antloss**2), 'r', linewidth=2)
		#plt.semilogy(v, np.abs(g95_antloss), 'g--', linewidth=3)
		plt.semilogy(eg.frequency2redshift(v), np.sqrt(t95_ants11mag**2 + t95_ants11ang**2), 'g', linewidth=2)
		plt.semilogy(eg.frequency2redshift(v), t95_receiver, 'm', linewidth=2)
		#plt.semilogy(eg.frequency2redshift(v), g95_ants11ang, 'c--', linewidth=2)
		#plt.semilogy(eg.frequency2redshift(v), g95_receiver, 'y--', linewidth=2)
		#plt.semilogy(eg.frequency2redshift(v), t95_MC, 'k', linewidth=4)




		plt.semilogy(eg.frequency2redshift(v), g95_beam, 'b', linewidth=2)
		plt.semilogy(eg.frequency2redshift(v), np.sqrt(g95_groundloss**2 + g95_bcloss**2 + g95_antloss**2), 'r', linewidth=2)
		#plt.semilogy(v, np.abs(g95_antloss), 'g--', linewidth=3)
		plt.semilogy(eg.frequency2redshift(v), np.sqrt(g95_ants11mag**2 + g95_ants11ang**2), 'g', linewidth=2)
		plt.semilogy(eg.frequency2redshift(v), g95_receiver, 'm', linewidth=2)
		#plt.semilogy(eg.frequency2redshift(v), g95_ants11ang, 'c--', linewidth=2)
		#plt.semilogy(eg.frequency2redshift(v), g95_receiver, 'y--', linewidth=2)
		plt.semilogy(eg.frequency2redshift(v), g95_MC, 'k', linewidth=4)		






		plt.xlabel('frequency [MHz]')
		#plt.xlim([90, 190])
		plt.xlim([14.8, 6.5])
		plt.ylim([0.001, 10])
		#plt.text(130, 9, 'Receiver', fontsize=14, weight='bold')


		plt.legend(loc=0, fontsize=9)




		# Save plot
		print('---------------------------------------------')
		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170310/'
		plt.savefig(path_plot_save + 'rejections_uncertainties.pdf', bbox_inches='tight')
		plt.close()
		plt.close()












	# Figure of rejection scatter for 25 mK Gaussian
	if figure6 == 'yes':


		v, Dv, Nfg, line68g, line95g, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian5/rejection_results_nominal.hdf5')
		g95 = np.max(np.max(line95g, axis=0), axis=0)





		g95MCx_all = np.zeros((100,len(v)))
		for i in range(9):
			v, Dv, Nfg, line68gMC, line95gMC, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian5/rejection_results_MC' + str(i+21)+ '.hdf5')
			g95MC = np.max(np.max(line95gMC, axis=0), axis=0)
			g95MCx_all[i,:] = g95MC












	return v, g95, g95MCx_all












def plots_high_band_rejections_2(figure1='no', figure2='no', figure3='no'):



	if figure1 == 'yes':
		v, Dv, Nfg, g68_nominal, g95_nominal, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_nominal.hdf5')
		v, Dv, Nfg, g68_m6, g95_m6, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian2/rejection_results_nominal.hdf5')
		v, Dv, Nfg, g68_p6, g95_p6, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian3/rejection_results_nominal.hdf5')

		gm95_nominal = np.max(np.max(g95_nominal, axis=0), axis=0)
		gm95_m6 = np.max(np.max(g95_m6, axis=0), axis=0)
		gm95_p6 = np.max(np.max(g95_p6, axis=0), axis=0)


		plt.figure(1)
		plt.plot(v, gm95_nominal, 'k', linewidth=2)
		plt.plot(v, gm95_m6, 'b', linewidth=2)
		plt.plot(v, gm95_p6, 'r', linewidth=2)

		plt.xlim([90, 190])
		plt.ylim([0, 10])		
		plt.ylabel(r'$\Delta$z')
		plt.grid()		




	if figure2 == 'yes':

		vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')
		avt, avw = eg.spectral_averaging(t, w)
		vbn, tbn, wbn = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')

		plt.subplot(3,3,1)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_groundloss' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0])

		plt.subplot(3,3,4)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_antloss' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0])

		plt.subplot(3,3,7)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_bcloss' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0])



		plt.subplot(3,3,2)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_groundloss' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			p = eg.fit_polynomial_fourier('EDGES_polynomial', vb, tb, 5, Weights=wb)
			plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0])

		plt.subplot(3,3,5)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_antloss' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			p = eg.fit_polynomial_fourier('EDGES_polynomial', vb, tb, 5, Weights=wb)
			plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0])

		plt.subplot(3,3,8)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_bcloss' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			p = eg.fit_polynomial_fourier('EDGES_polynomial', vb, tb, 5, Weights=wb)
			plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0])



		plt.subplot(3,3,3)
		for i in range(20):
			v, Dv, Nfg, g68, g95, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_groundloss'+str(i+1)+'.hdf5')
			gm95 = np.max(np.max(g95, axis=0), axis=0)
			plt.plot(v, gm95)

		plt.subplot(3,3,6)
		for i in range(20):
			v, Dv, Nfg, g68, g95, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_antloss'+str(i+1)+'.hdf5')
			gm95 = np.max(np.max(g95, axis=0), axis=0)
			plt.plot(v, gm95)

		plt.subplot(3,3,9)
		for i in range(20):
			v, Dv, Nfg, g68, g95, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_bcloss'+str(i+1)+'.hdf5')
			gm95 = np.max(np.max(g95, axis=0), axis=0)
			plt.plot(v, gm95)






	if figure3 == 'yes':


		vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')
		avt, avw = eg.spectral_averaging(t, w)
		vbn, tbn, wbn = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')


		#plt.subplot(4,3,1)
		#for i in [2,3,4,5,6,7,8,9,10,11,21,22,23,24,25,26]:
			#vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_beam' + str(i) + '.hdf5')
			#avt, avw = eg.spectral_averaging(t, w)
			#vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			#if i <=4:
				#plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0], 'b')
			#if (i >=5) and (i <=8):
				#plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0], 'm')
			#if (i >=9) and (i <=11):
				#plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0], 'g')
			#if i >=21:
				#plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0], 'c')



		plt.subplot(4,3,1)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_beam' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0])	




		plt.subplot(4,3,4)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_ants11mag' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0])	


		plt.subplot(4,3,7)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_ants11ang' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0])


		plt.subplot(4,3,10)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_receiver' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			plt.plot(vb[wb>0], tb[wb>0]-tbn[wb>0])








		plt.subplot(4,3,2)
		for i in range(20): #[2,3,4,5,6,7,8,9,10,11,21,22,23,24,25,26]:
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_beam' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			p = eg.fit_polynomial_fourier('EDGES_polynomial', vb, tb, 5, Weights=wb)
			plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0])

			#if i <=4:
				#plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0], 'b')
			#if (i >=5) and (i <=8):
				#plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0], 'm')
			#if (i >=9) and (i <=11):
				#plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0], 'g')
			#if i >=21:
				#plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0], 'c')


		plt.subplot(4,3,5)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_ants11mag' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			p = eg.fit_polynomial_fourier('EDGES_polynomial', vb, tb, 5, Weights=wb)
			plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0])		


		plt.subplot(4,3,8)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_ants11ang' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			p = eg.fit_polynomial_fourier('EDGES_polynomial', vb, tb, 5, Weights=wb)
			plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0])


		plt.subplot(4,3,11)
		for i in range(20):
			vv, t, w, d, at, ah, rc, rm  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_receiver' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(vv, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			p = eg.fit_polynomial_fourier('EDGES_polynomial', vb, tb, 5, Weights=wb)
			plt.plot(vb[wb>0], tb[wb>0]-p[1][wb>0])		






		plt.subplot(4,3,3)
		for i in [2,3,4,5,6,7,8,9,10,11,21,22,23,24,25,26]:
			v, Dv, Nfg, g68, g95, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_beam'+str(i)+'.hdf5')
			gm95 = np.max(np.max(g95, axis=0), axis=0)
			if i <=4:
				plt.plot(v, gm95, 'b')
			if (i >=5) and (i <=8):
				plt.plot(v, gm95, 'm')
			if (i >=9) and (i <=11):
				plt.plot(v, gm95, 'g')
			if i >=21:
				plt.plot(v, gm95, 'c')



		#plt.subplot(4,3,3)
		#for i in range(20):
			#v, Dv, Nfg, g68, g95, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_beam'+str(i+1)+'.hdf5')
			#gm95 = np.max(np.max(g95, axis=0), axis=0)
			#plt.plot(v, gm95)		



		plt.subplot(4,3,6)
		for i in range(20):
			v, Dv, Nfg, g68, g95, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_ants11mag'+str(i+1)+'.hdf5')
			gm95 = np.max(np.max(g95, axis=0), axis=0)
			plt.plot(v, gm95)


		plt.subplot(4,3,9)
		for i in range(20):
			v, Dv, Nfg, g68, g95, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_ants11ang'+str(i+1)+'.hdf5')
			gm95 = np.max(np.max(g95, axis=0), axis=0)
			plt.plot(v, gm95)


		plt.subplot(4,3,12)
		for i in range(20):
			v, Dv, Nfg, g68, g95, x1, x2, x3, x4, x4 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/gaussian1/rejection_results_receiver'+str(i+1)+'.hdf5')
			gm95 = np.max(np.max(g95, axis=0), axis=0)
			plt.plot(v, gm95)


	return 0















def batch_high_band_rejections(model_type, perturbation_case, T21=0.028, gaussian_skewness=0, injecting='no', ij_zr=8.5, ij_dz=0.1):

	# Choosing folder based on 21-cm model
	if (model_type == 'tanh'):
		model_type_folder = 'tanh'
		DV_list  = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
		Nfg_list = [2, 3, 4, 5]		

	if (model_type == 'gaussian_redshift') and (T21 == -0.1) and (gaussian_skewness == 0):
		model_type_folder = 'gaussian1'
		DV_list  = [40, 60, 80, 100]
		Nfg_list = [3, 4]

	if (model_type == 'gaussian_redshift') and (T21 == -0.1) and (gaussian_skewness == -6):
		model_type_folder = 'gaussian2'
		DV_list  = [40, 60, 80, 100]
		Nfg_list = [3, 4]		

	if (model_type == 'gaussian_redshift') and (T21 == -0.1) and (gaussian_skewness == 6):
		model_type_folder = 'gaussian3'
		DV_list  = [40, 60, 80, 100]
		Nfg_list = [3, 4]

	if (model_type == 'gaussian_redshift') and (T21 == -0.2) and (gaussian_skewness == 0):
		model_type_folder = 'gaussian4'
		DV_list  = [40, 60, 80, 100]
		Nfg_list = [3, 4]

	if (model_type == 'gaussian_redshift') and (T21 == -0.025) and (gaussian_skewness == 0):
		model_type_folder = 'gaussian5'
		DV_list  = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
		Nfg_list = [2, 3, 4, 5]

	if (model_type == 'gaussian_redshift') and (T21 == -0.050) and (gaussian_skewness == 0):
		model_type_folder = 'gaussian6'
		DV_list  = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
		Nfg_list = [2, 3, 4, 5]










	# Windows widths and Number of terms

	# Nominal
	if perturbation_case == 'nominal':
		v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')
		avt, avw = eg.spectral_averaging(t, w)
		vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')

		if injecting == 'yes':
			injected_signal, x1, x2 = eg.model_eor(vb, model_type=model_type, T21=T21, zr=ij_zr, dz=ij_dz)  # the amplitude of the injected signal is the same as the nominal amplitude being searched
			tb = tb + injected_signal
			print('SIGNAL INJECTED')
			nominal_file_name = 'rejection_results_nominal_injected_zr' + str(ij_zr) + '_dz' + str(ij_dz)  

		if injecting == 'no':
			nominal_file_name = 'rejection_results_nominal'

		o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/' + nominal_file_name)










	# Beam
	if perturbation_case == 'beam':		
		for i in range(20):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_beam' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')			
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_beam' + str(i+1))


	# Groundloss
	if perturbation_case == 'groundloss':
		for i in range(20):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_groundloss' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')			
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_groundloss' + str(i+1))

	# Antloss
	if perturbation_case == 'antloss':
		for i in range(20):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_antloss' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')			
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_antloss' + str(i+1))


	# Bcloss
	if perturbation_case == 'bcloss':
		for i in range(20):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_bcloss' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')			
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_bcloss' + str(i+1))


	# Ants11mag
	if perturbation_case == 'ants11mag':
		for i in range(20):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_ants11mag' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')			
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_ants11mag' + str(i+1))

	# Ants11ang
	if perturbation_case == 'ants11ang':
		for i in range(20):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_ants11ang' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')			
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_ants11ang' + str(i+1))						
	# Receiver
	if perturbation_case == 'receiver':
		for i in range(20):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_receiver' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')			
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_receiver' + str(i+1))






	# All
	if perturbation_case == 'all_1':
		for i in range(20):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_MC' + str(i+1))


	if perturbation_case == 'all_2':
		for i in range(20):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+21) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_MC' + str(i+21))


	if perturbation_case == 'all_3':
		for i in range(8):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+41) + '.hdf5') # 41
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_MC' + str(i+41))


	if perturbation_case == 'all_4':
		for i in range(8):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+61) + '.hdf5') # 41
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_MC' + str(i+61))


	if perturbation_case == 'all_5':
		for i in range(8):
			v, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+81) + '.hdf5') # 41
			avt, avw = eg.spectral_averaging(t, w)
			vb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(v, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			o = eg.data_analysis_sliding_window_chi_squared('high_band', vb, tb, wb, cosmo_model_type=model_type, T21=T21, gaussian_skewness=gaussian_skewness, Dv=DV_list, Nfg=Nfg_list, save='yes', filename='/results_paper_1/' + model_type_folder + '/rejection_results_MC' + str(i+81))


	return 0













def plots_for_2017_high_band_receiver_S11_tests(figure1='no', figure2='no'):




	if figure1 == 'yes':
		dLNA1a = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-08-14-23-04_LNA1a.txt')

		dLNA2a = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-08-14-23-45_LNA2a.txt')

		dLNA2b = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-08-14-24-20_LNA2b.txt')

		dLNA3a = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-08-14-25-42_LNA3a.txt')

		dLNA3b = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-08-14-25-59_LNA3b.txt')

		dLNA4a = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-13-11-01-28_LNA4a.txt')

		dxR01 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-13-53-40_LNAxR01.txt')

		dxR02 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-13-59-16_LNAxR02.txt')

		dxR03 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-13-59-41_LNAxR03.txt')

		dxR04 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-14-00-24_LNAxR04.txt')

		dxR05 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-14-00-48_LNAxR05.txt')

		dxR06 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-14-01-07_LNAxR06.txt')

		dxR07 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-14-01-25_LNAxR07.txt')

		dxR08 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-14-01-45_LNAxR08.txt')

		dxR09 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-14-02-03_LNAxR09.txt')

		dxR10 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-14-02-23_LNAxR10.txt')

		dxR11 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-15-14-02-42_LNAxR11.txt')






		plt.close()
		plt.close()




		plt.subplot(2,2,1)

		dd = eg.models_calibration_s11('high_band_2015', 25, dLNA1a[:,0])
		d2015 = dd[0,:]

		plt.plot(dLNA1a[:,0], 20*np.log10(np.abs(d2015)), 'r')
		plt.plot(dLNA1a[:,0], 20*np.log10(np.abs(dLNA1a[:,1]+1j*dLNA1a[:,2])), 'b')

		plt.plot(dLNA2a[:,0], 20*np.log10(np.abs(dLNA2a[:,1]+1j*dLNA2a[:,2])), 'k', linewidth=3)
		#plt.plot(dLNA2b[:,0], 20*np.log10(np.abs(dLNA2b[:,1]+1j*dLNA2b[:,2])), 'k--', linewidth=3)

		plt.plot(dLNA3a[:,0], 20*np.log10(np.abs(dLNA3a[:,1]+1j*dLNA3a[:,2])), 'm')
		plt.plot(dLNA3b[:,0], 20*np.log10(np.abs(dLNA3b[:,1]+1j*dLNA3b[:,2])), 'm--')		

		plt.plot(dLNA4a[:,0], 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'c')

		plt.plot(dxR01[:,0], 20*np.log10(np.abs(dxR01[:,1]+1j*dxR01[:,2])), 'g')
		plt.plot(dxR02[:,0], 20*np.log10(np.abs(dxR02[:,1]+1j*dxR02[:,2])), 'g')
		plt.plot(dxR03[:,0], 20*np.log10(np.abs(dxR03[:,1]+1j*dxR03[:,2])), 'g')
		plt.plot(dxR04[:,0], 20*np.log10(np.abs(dxR04[:,1]+1j*dxR04[:,2])), 'g')
		plt.plot(dxR05[:,0], 20*np.log10(np.abs(dxR05[:,1]+1j*dxR05[:,2])), 'g')
		plt.plot(dxR06[:,0], 20*np.log10(np.abs(dxR06[:,1]+1j*dxR06[:,2])), 'g')
		plt.plot(dxR07[:,0], 20*np.log10(np.abs(dxR07[:,1]+1j*dxR07[:,2])), 'g')
		plt.plot(dxR08[:,0], 20*np.log10(np.abs(dxR08[:,1]+1j*dxR08[:,2])), 'g')
		plt.plot(dxR09[:,0], 20*np.log10(np.abs(dxR09[:,1]+1j*dxR09[:,2])), 'g')
		plt.plot(dxR10[:,0], 20*np.log10(np.abs(dxR10[:,1]+1j*dxR10[:,2])), 'g')
		plt.plot(dxR11[:,0], 20*np.log10(np.abs(dxR11[:,1]+1j*dxR11[:,2])), 'g')

		plt.plot(dLNA2a[:,0], 20*np.log10(np.abs(dLNA2a[:,1]+1j*dLNA2a[:,2])), 'k', linewidth=3)
		#plt.plot(dLNA2b[:,0], 20*np.log10(np.abs(dLNA2b[:,1]+1j*dLNA2b[:,2])), 'k--', linewidth=3)

		plt.plot(dLNA3a[:,0], 20*np.log10(np.abs(dLNA3a[:,1]+1j*dLNA3a[:,2])), 'm')
		plt.plot(dLNA3b[:,0], 20*np.log10(np.abs(dLNA3b[:,1]+1j*dLNA3b[:,2])), 'm--')		


		plt.xlim([90, 190])
		plt.ylim([-22.5, -18.5])
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('magnitude [dB]')



		plt.subplot(2,2,3)

		plt.plot(dLNA1a[:,0], 20*np.log10(np.abs(d2015)) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'r')
		plt.plot(dLNA1a[:,0], 20*np.log10(np.abs(dLNA1a[:,1]+1j*dLNA1a[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'b')

		plt.plot(dLNA2a[:,0], 20*np.log10(np.abs(dLNA2a[:,1]+1j*dLNA2a[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'k', linewidth=3)
		#plt.plot(dLNA2b[:,0], 20*np.log10(np.abs(dLNA2b[:,1]+1j*dLNA2b[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'k--', linewidth=3)

		plt.plot(dLNA3a[:,0], 20*np.log10(np.abs(dLNA3a[:,1]+1j*dLNA3a[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'm')
		plt.plot(dLNA3b[:,0], 20*np.log10(np.abs(dLNA3b[:,1]+1j*dLNA3b[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'm--')

		plt.plot(dLNA4a[:,0], 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'c')

		plt.plot(dxR01[:,0], 20*np.log10(np.abs(dxR01[:,1]+1j*dxR01[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g', linewidth=3)
		plt.plot(dxR02[:,0], 20*np.log10(np.abs(dxR02[:,1]+1j*dxR02[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR03[:,0], 20*np.log10(np.abs(dxR03[:,1]+1j*dxR03[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR04[:,0], 20*np.log10(np.abs(dxR04[:,1]+1j*dxR04[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR05[:,0], 20*np.log10(np.abs(dxR05[:,1]+1j*dxR05[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR06[:,0], 20*np.log10(np.abs(dxR06[:,1]+1j*dxR06[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR07[:,0], 20*np.log10(np.abs(dxR07[:,1]+1j*dxR07[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR08[:,0], 20*np.log10(np.abs(dxR08[:,1]+1j*dxR08[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR09[:,0], 20*np.log10(np.abs(dxR09[:,1]+1j*dxR09[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR10[:,0], 20*np.log10(np.abs(dxR10[:,1]+1j*dxR10[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR11[:,0], 20*np.log10(np.abs(dxR11[:,1]+1j*dxR11[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')

		plt.plot(dLNA2a[:,0], 20*np.log10(np.abs(dLNA2a[:,1]+1j*dLNA2a[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'k', linewidth=4)
		#plt.plot(dLNA2b[:,0], 20*np.log10(np.abs(dLNA2b[:,1]+1j*dLNA2b[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'k--', linewidth=4)

		plt.plot(dLNA3a[:,0], 20*np.log10(np.abs(dLNA3a[:,1]+1j*dLNA3a[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'm')
		plt.plot(dLNA3b[:,0], 20*np.log10(np.abs(dLNA3b[:,1]+1j*dLNA3b[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'm--')		



		plt.xlim([90, 190])
		plt.ylim([-0.1, 0.3])
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel(r'$\Delta$ magnitude [dB]')

		plt.legend(['2015','2017-LNA1a', '2017-LNA2a', '2017-LNA3a', '2017-LNA3b','2017-LNA4a','2017-switch test REP1'], ncol=3, loc=0)







		plt.subplot(2,2,2)

		dd = eg.models_calibration_s11('high_band_2015', 25, dLNA1a[:,0])
		d2015 = dd[0,:]

		plt.plot(dLNA1a[:,0], (180/np.pi)*np.unwrap(np.angle(d2015))+720, 'r')
		plt.plot(dLNA1a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA1a[:,1]+1j*dLNA1a[:,2])), 'b')

		plt.plot(dLNA2a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA2a[:,1]+1j*dLNA2a[:,2])), 'k')
		#plt.plot(dLNA2b[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA2b[:,1]+1j*dLNA2b[:,2])), 'k--')

		plt.plot(dLNA3a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA3a[:,1]+1j*dLNA3a[:,2])), 'm')
		plt.plot(dLNA3b[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA3b[:,1]+1j*dLNA3b[:,2])), 'm--')

		plt.plot(dLNA4a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'c')

		plt.plot(dxR01[:,0], (180/np.pi)*np.unwrap(np.angle(dxR01[:,1]+1j*dxR01[:,2])), 'g')
		plt.plot(dxR02[:,0], (180/np.pi)*np.unwrap(np.angle(dxR02[:,1]+1j*dxR02[:,2])), 'g')
		plt.plot(dxR03[:,0], (180/np.pi)*np.unwrap(np.angle(dxR03[:,1]+1j*dxR03[:,2])), 'g')
		plt.plot(dxR04[:,0], (180/np.pi)*np.unwrap(np.angle(dxR04[:,1]+1j*dxR04[:,2])), 'g')
		plt.plot(dxR05[:,0], (180/np.pi)*np.unwrap(np.angle(dxR05[:,1]+1j*dxR05[:,2])), 'g')
		plt.plot(dxR06[:,0], (180/np.pi)*np.unwrap(np.angle(dxR06[:,1]+1j*dxR06[:,2])), 'g')
		plt.plot(dxR07[:,0], (180/np.pi)*np.unwrap(np.angle(dxR07[:,1]+1j*dxR07[:,2])), 'g')
		plt.plot(dxR08[:,0], (180/np.pi)*np.unwrap(np.angle(dxR08[:,1]+1j*dxR08[:,2])), 'g')
		plt.plot(dxR09[:,0], (180/np.pi)*np.unwrap(np.angle(dxR09[:,1]+1j*dxR09[:,2])), 'g')
		plt.plot(dxR10[:,0], (180/np.pi)*np.unwrap(np.angle(dxR10[:,1]+1j*dxR10[:,2])), 'g')
		plt.plot(dxR11[:,0], (180/np.pi)*np.unwrap(np.angle(dxR11[:,1]+1j*dxR11[:,2])), 'g')
		plt.xlim([90, 190])
		plt.ylim([-250, -50])
		plt.grid()

		plt.plot(dLNA2a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA2a[:,1]+1j*dLNA2a[:,2])), 'k')
		#plt.plot(dLNA2b[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA2b[:,1]+1j*dLNA2b[:,2])), 'k--')

		plt.plot(dLNA3a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA3a[:,1]+1j*dLNA3a[:,2])), 'm')
		plt.plot(dLNA3b[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA3b[:,1]+1j*dLNA3b[:,2])), 'm--')		


		#plt.xlabel('frequency [MHz]')
		plt.ylabel('phase [dB]')





		plt.subplot(2,2,4)

		plt.plot(dLNA1a[:,0], (180/np.pi)*np.unwrap(np.angle(d2015)) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2]))+720, 'r')
		plt.plot(dLNA1a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA1a[:,1]+1j*dLNA1a[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'b')
		plt.plot(dLNA4a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'c')

		plt.plot(dLNA2a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA2a[:,1]+1j*dLNA2a[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'k', linewidth=3)
		#plt.plot(dLNA2b[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA2b[:,1]+1j*dLNA2b[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'k--', linewidth=3)

		plt.plot(dLNA3a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA3a[:,1]+1j*dLNA3a[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'm')
		plt.plot(dLNA3b[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA3b[:,1]+1j*dLNA3b[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'm--')

		plt.plot(dxR01[:,0], (180/np.pi)*np.unwrap(np.angle(dxR01[:,1]+1j*dxR01[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g', linewidth=3)
		plt.plot(dxR02[:,0], (180/np.pi)*np.unwrap(np.angle(dxR02[:,1]+1j*dxR02[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR03[:,0], (180/np.pi)*np.unwrap(np.angle(dxR03[:,1]+1j*dxR03[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR04[:,0], (180/np.pi)*np.unwrap(np.angle(dxR04[:,1]+1j*dxR04[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR05[:,0], (180/np.pi)*np.unwrap(np.angle(dxR05[:,1]+1j*dxR05[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR06[:,0], (180/np.pi)*np.unwrap(np.angle(dxR06[:,1]+1j*dxR06[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR07[:,0], (180/np.pi)*np.unwrap(np.angle(dxR07[:,1]+1j*dxR07[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR08[:,0], (180/np.pi)*np.unwrap(np.angle(dxR08[:,1]+1j*dxR08[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR09[:,0], (180/np.pi)*np.unwrap(np.angle(dxR09[:,1]+1j*dxR09[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR10[:,0], (180/np.pi)*np.unwrap(np.angle(dxR10[:,1]+1j*dxR10[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dxR11[:,0], (180/np.pi)*np.unwrap(np.angle(dxR11[:,1]+1j*dxR11[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')

		plt.plot(dLNA2a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA2a[:,1]+1j*dLNA2a[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'k', linewidth=3)
		#plt.plot(dLNA2b[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA2b[:,1]+1j*dLNA2b[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'k--', linewidth=3)

		plt.plot(dLNA3a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA3a[:,1]+1j*dLNA3a[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'm')
		plt.plot(dLNA3b[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA3b[:,1]+1j*dLNA3b[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'm--')		

		plt.xlim([90, 190])
		plt.ylim([-0.5, 1.5])
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel(r'$\Delta$ phase [deg]')













	if figure2 == 'yes':
		dLNA1a = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-08-14-23-04_LNA1a.txt')

		dLNA4a = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-13-11-01-28_LNA4a.txt')



		dyR01 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-30-05_LNAyR01.txt')

		dyR02 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-30-31_LNAyR02.txt')

		dyR03 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-30-55_LNAyR03.txt')

		dyR04 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-31-18_LNAyR04.txt')

		dyR05 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-31-41_LNAyR05.txt')

		dyR06 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-32-02_LNAyR06.txt')

		dyR07 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-32-22_LNAyR07.txt')

		dyR08 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-32-44_LNAyR08.txt')

		dyR09 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-33-05_LNAyR09.txt')

		dyR10 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-36-01_LNAyR10.txt')

		dyR11 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-36-21_LNAyR11.txt')

		dyR12 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-36-43_LNAyR12.txt')

		dyR13 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/calibration_high_band_2017_january/LNA/S11/corrected/s11_calibration_high_band_LNA25degC_2017-02-16-10-37-02_LNAyR13.txt')



		plt.close()
		plt.close()



		plt.subplot(2,2,1)

		dd = eg.models_calibration_s11('high_band_2015', 25, dLNA1a[:,0])
		d2015 = dd[0,:]

		plt.plot(dLNA1a[:,0], 20*np.log10(np.abs(d2015)), 'r')
		plt.plot(dLNA1a[:,0], 20*np.log10(np.abs(dLNA1a[:,1]+1j*dLNA1a[:,2])), 'b')
		plt.plot(dLNA4a[:,0], 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'c')

		plt.plot(dyR01[:,0], 20*np.log10(np.abs(dyR01[:,1]+1j*dyR01[:,2])), 'g')
		plt.plot(dyR02[:,0], 20*np.log10(np.abs(dyR02[:,1]+1j*dyR02[:,2])), 'g')
		plt.plot(dyR03[:,0], 20*np.log10(np.abs(dyR03[:,1]+1j*dyR03[:,2])), 'g')
		plt.plot(dyR04[:,0], 20*np.log10(np.abs(dyR04[:,1]+1j*dyR04[:,2])), 'g')
		plt.plot(dyR05[:,0], 20*np.log10(np.abs(dyR05[:,1]+1j*dyR05[:,2])), 'g')
		plt.plot(dyR06[:,0], 20*np.log10(np.abs(dyR06[:,1]+1j*dyR06[:,2])), 'g')
		plt.plot(dyR07[:,0], 20*np.log10(np.abs(dyR07[:,1]+1j*dyR07[:,2])), 'g')
		plt.plot(dyR08[:,0], 20*np.log10(np.abs(dyR08[:,1]+1j*dyR08[:,2])), 'g')
		plt.plot(dyR09[:,0], 20*np.log10(np.abs(dyR09[:,1]+1j*dyR09[:,2])), 'g')
		plt.plot(dyR10[:,0], 20*np.log10(np.abs(dyR10[:,1]+1j*dyR10[:,2])), 'g')
		plt.plot(dyR11[:,0], 20*np.log10(np.abs(dyR11[:,1]+1j*dyR11[:,2])), 'g')
		plt.plot(dyR12[:,0], 20*np.log10(np.abs(dyR12[:,1]+1j*dyR12[:,2])), 'g')
		plt.plot(dyR13[:,0], 20*np.log10(np.abs(dyR13[:,1]+1j*dyR13[:,2])), 'g')
		plt.xlim([90, 190])
		plt.ylim([-22.5, -18.5])
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('magnitude [dB]')



		plt.subplot(2,2,3)

		plt.plot(dLNA1a[:,0], 20*np.log10(np.abs(d2015)) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'r')
		plt.plot(dLNA1a[:,0], 20*np.log10(np.abs(dLNA1a[:,1]+1j*dLNA1a[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'b')
		plt.plot(dLNA4a[:,0], 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'c')

		plt.plot(dyR01[:,0], 20*np.log10(np.abs(dyR01[:,1]+1j*dyR01[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g', linewidth=3)
		plt.plot(dyR02[:,0], 20*np.log10(np.abs(dyR02[:,1]+1j*dyR02[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR03[:,0], 20*np.log10(np.abs(dyR03[:,1]+1j*dyR03[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR04[:,0], 20*np.log10(np.abs(dyR04[:,1]+1j*dyR04[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR05[:,0], 20*np.log10(np.abs(dyR05[:,1]+1j*dyR05[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR06[:,0], 20*np.log10(np.abs(dyR06[:,1]+1j*dyR06[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR07[:,0], 20*np.log10(np.abs(dyR07[:,1]+1j*dyR07[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR08[:,0], 20*np.log10(np.abs(dyR08[:,1]+1j*dyR08[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR09[:,0], 20*np.log10(np.abs(dyR09[:,1]+1j*dyR09[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR10[:,0], 20*np.log10(np.abs(dyR10[:,1]+1j*dyR10[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR11[:,0], 20*np.log10(np.abs(dyR11[:,1]+1j*dyR11[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR12[:,0], 20*np.log10(np.abs(dyR12[:,1]+1j*dyR12[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR13[:,0], 20*np.log10(np.abs(dyR13[:,1]+1j*dyR13[:,2])) - 20*np.log10(np.abs(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.xlim([90, 190])
		plt.ylim([-0.1, 0.3])
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel(r'$\Delta$ magnitude [dB]')

		plt.legend(['2015','2017-LNA1a','2017-LNA4a','2017-switch test REP2'])







		plt.subplot(2,2,2)

		dd = eg.models_calibration_s11('high_band_2015', 25, dLNA1a[:,0])
		d2015 = dd[0,:]

		plt.plot(dLNA1a[:,0], (180/np.pi)*np.unwrap(np.angle(d2015))+720, 'r')
		plt.plot(dLNA1a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA1a[:,1]+1j*dLNA1a[:,2])), 'b')
		plt.plot(dLNA4a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'c')

		plt.plot(dyR01[:,0], (180/np.pi)*np.unwrap(np.angle(dyR01[:,1]+1j*dyR01[:,2])), 'g')
		plt.plot(dyR02[:,0], (180/np.pi)*np.unwrap(np.angle(dyR02[:,1]+1j*dyR02[:,2])), 'g')
		plt.plot(dyR03[:,0], (180/np.pi)*np.unwrap(np.angle(dyR03[:,1]+1j*dyR03[:,2])), 'g')
		plt.plot(dyR04[:,0], (180/np.pi)*np.unwrap(np.angle(dyR04[:,1]+1j*dyR04[:,2])), 'g')
		plt.plot(dyR05[:,0], (180/np.pi)*np.unwrap(np.angle(dyR05[:,1]+1j*dyR05[:,2])), 'g')
		plt.plot(dyR06[:,0], (180/np.pi)*np.unwrap(np.angle(dyR06[:,1]+1j*dyR06[:,2])), 'g')
		plt.plot(dyR07[:,0], (180/np.pi)*np.unwrap(np.angle(dyR07[:,1]+1j*dyR07[:,2])), 'g')
		plt.plot(dyR08[:,0], (180/np.pi)*np.unwrap(np.angle(dyR08[:,1]+1j*dyR08[:,2])), 'g')
		plt.plot(dyR09[:,0], (180/np.pi)*np.unwrap(np.angle(dyR09[:,1]+1j*dyR09[:,2])), 'g')
		plt.plot(dyR10[:,0], (180/np.pi)*np.unwrap(np.angle(dyR10[:,1]+1j*dyR10[:,2])), 'g')
		plt.plot(dyR11[:,0], (180/np.pi)*np.unwrap(np.angle(dyR11[:,1]+1j*dyR11[:,2])), 'g')
		plt.plot(dyR12[:,0], (180/np.pi)*np.unwrap(np.angle(dyR12[:,1]+1j*dyR12[:,2])), 'g')
		plt.plot(dyR13[:,0], (180/np.pi)*np.unwrap(np.angle(dyR13[:,1]+1j*dyR13[:,2])), 'g')
		plt.xlim([90, 190])
		plt.ylim([-250, -50])
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('phase [dB]')





		plt.subplot(2,2,4)

		plt.plot(dLNA1a[:,0], (180/np.pi)*np.unwrap(np.angle(d2015)) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2]))+720, 'r')
		plt.plot(dLNA1a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA1a[:,1]+1j*dLNA1a[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'b')
		plt.plot(dLNA4a[:,0], (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'c')

		plt.plot(dyR01[:,0], (180/np.pi)*np.unwrap(np.angle(dyR01[:,1]+1j*dyR01[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g', linewidth=3)
		plt.plot(dyR02[:,0], (180/np.pi)*np.unwrap(np.angle(dyR02[:,1]+1j*dyR02[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR03[:,0], (180/np.pi)*np.unwrap(np.angle(dyR03[:,1]+1j*dyR03[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR04[:,0], (180/np.pi)*np.unwrap(np.angle(dyR04[:,1]+1j*dyR04[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR05[:,0], (180/np.pi)*np.unwrap(np.angle(dyR05[:,1]+1j*dyR05[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR06[:,0], (180/np.pi)*np.unwrap(np.angle(dyR06[:,1]+1j*dyR06[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR07[:,0], (180/np.pi)*np.unwrap(np.angle(dyR07[:,1]+1j*dyR07[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR08[:,0], (180/np.pi)*np.unwrap(np.angle(dyR08[:,1]+1j*dyR08[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR09[:,0], (180/np.pi)*np.unwrap(np.angle(dyR09[:,1]+1j*dyR09[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR10[:,0], (180/np.pi)*np.unwrap(np.angle(dyR10[:,1]+1j*dyR10[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR11[:,0], (180/np.pi)*np.unwrap(np.angle(dyR11[:,1]+1j*dyR11[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR12[:,0], (180/np.pi)*np.unwrap(np.angle(dyR12[:,1]+1j*dyR12[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')
		plt.plot(dyR13[:,0], (180/np.pi)*np.unwrap(np.angle(dyR13[:,1]+1j*dyR13[:,2])) - (180/np.pi)*np.unwrap(np.angle(dLNA4a[:,1]+1j*dLNA4a[:,2])), 'g')

		plt.xlim([90, 190])
		plt.ylim([-0.5, 1.5])
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel(r'$\Delta$ phase [deg]')



	return 0









def batch_high_band_data_calibration(case):

	if case == 'nominal':
		o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_nominal')



	# Separate MC effects
	# --------------------------
	if case == 'beam':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_beam' + str(i+1), MC_beam_factor='yes')		


	if case == 'groundloss':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_groundloss' + str(i+1), MC_gl='yes')


	if case == 'antennaloss':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_antloss' + str(i+1), MC_al='yes')


	if case == 'bcloss':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_bcloss' + str(i+1), MC_bcl=[1,1,1,1,1,1,1,1])


	if case == 'ants11mag':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_ants11mag' + str(i+1), MC_s11_ant_mag='yes', MC_ant_recv='season')


	if case == 'ants11ang':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_ants11ang' + str(i+1), MC_s11_ant_ang='yes', MC_ant_recv='season')


	if case == 'receiver':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_receiver' + str(i+1), MC_receiver='yes', MC_recv_temp='yes', MC_ant_recv='season')





	# All MC effects activated
	# -------------------------------
	if case == 'all_1':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_MC' + str(i+1), MC_beam_factor='yes', MC_gl='yes', MC_al='yes', MC_bcl=[1,1,1,1,1,1,1,1], MC_s11_ant_mag='yes', MC_s11_ant_ang='yes', MC_receiver='yes', MC_recv_temp='yes', MC_ant_recv='season')


	if case == 'all_2':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_MC' + str(i+21), MC_beam_factor='yes', MC_gl='yes', MC_al='yes', MC_bcl=[1,1,1,1,1,1,1,1], MC_s11_ant_mag='yes', MC_s11_ant_ang='yes', MC_receiver='yes', MC_recv_temp='yes', MC_ant_recv='season')


	if case == 'all_3':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_MC' + str(i+41), MC_beam_factor='yes', MC_gl='yes', MC_al='yes', MC_bcl=[1,1,1,1,1,1,1,1], MC_s11_ant_mag='yes', MC_s11_ant_ang='yes', MC_receiver='yes', MC_recv_temp='yes', MC_ant_recv='season')


	if case == 'all_4':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_MC' + str(i+61), MC_beam_factor='yes', MC_gl='yes', MC_al='yes', MC_bcl=[1,1,1,1,1,1,1,1], MC_s11_ant_mag='yes', MC_s11_ant_ang='yes', MC_receiver='yes', MC_recv_temp='yes', MC_ant_recv='season')


	if case == 'all_5':
		for i in range(20):
			o = eg.data_analysis_calibration('high_band_2015', 1, 0.26, 6.26, save='yes', flag_save='_dates_2015_250_299_MC' + str(i+81), MC_beam_factor='yes', MC_gl='yes', MC_al='yes', MC_bcl=[1,1,1,1,1,1,1,1], MC_s11_ant_mag='yes', MC_s11_ant_ang='yes', MC_receiver='yes', MC_recv_temp='yes', MC_ant_recv='season')


	return 0












def plots_high_band_calibration_comparison():

	# Loading calibration parameters
	hb1 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/high_band/2015_03_25C_35C/LNA/calibration_files/calibration_file_high_band_v1_cterms7_wterms7.txt')
	hb2 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/high_band/2017_01_25C/LNA/calibration_files/calibration_file_high_band_2017_25degC_cterms7_wterms7.txt')
	hb3 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/high_band/2017_01_25C/LNA/calibration_files/calibration_file_high_band_2017_25degC_cterms7_wterms7_S11_feb_2017.txt')	
	lb1 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/low_band/2015_08_25C/LNA/calibration_files/calibration_file_low_band_v1_cterms7_wterms7.txt')



	# Calibration parameters
	v  = lb1[:,0]
	ra = eg.models_antenna_s11('low_band_2015', 'blade', v, antenna_s11_day=289)
	rl = lb1[:,1] + 1j*lb1[:,2]	

	F   = np.sqrt( 1 - np.abs(rl) ** 2 ) / ( 1 - ra*rl )
	PHI = np.angle( ra*F )



	# Maximum difference between relevant calibration parameters
	DC2 = np.max(np.abs(hb3[:,4]-hb1[:,4]))
	DTU = np.max(np.abs(hb3[:,5]-hb1[:,5]))
	DTC = np.max(np.abs(hb3[:,6]-hb1[:,6]))
	DTS = np.max(np.abs(hb3[:,7]-hb1[:,7]))


	# MC
	N_MC = 1000
	#DT   = np.zeros((N_MC,len(v)))
	DTA  = np.zeros((N_MC,len(v)))
	rDTA = np.zeros((N_MC,len(v)))

	for i in range(N_MC):


		# DC2
		#noise         = np.random.uniform(np.zeros(len(v)), np.ones(len(v))) - 0.5
		#nterms        = np.random.randint(1,8)     # up to 7 terms
		##nterms = 0
		#par_poly      = np.polyfit(v/200, noise, nterms-1)
		#poly          = np.polyval(par_poly, v/200)
		#max_poly      = np.max(np.abs(poly))
		#pert          = np.random.uniform(-DC2, DC2)
		#DC2_poly      = pert * (poly/max_poly)

		DC2_poly      = 0 #np.random.uniform(-DC2, DC2)



		# DTU
		#noise         = np.random.uniform(np.zeros(len(v)), np.ones(len(v))) - 0.5
		#nterms        = np.random.randint(1,8)     # up to 7 terms
		#par_poly      = np.polyfit(v/200, noise, nterms-1)
		#poly          = np.polyval(par_poly, v/200)
		#max_poly      = np.max(np.abs(poly))
		#pert          = np.random.uniform(-DTU, DTU)
		#DTU_poly      = pert * (poly/max_poly)

		DTU_poly = 0


		# DTC
		#noise         = np.random.uniform(np.zeros(len(v)), np.ones(len(v))) - 0.5
		#nterms        = np.random.randint(1,8)     # up to 7 terms
		#par_poly      = np.polyfit(v/200, noise, nterms-1)
		#poly          = np.polyval(par_poly, v/200)
		#max_poly      = np.max(np.abs(poly))
		#pert          = np.random.uniform(-DTC, DTC)
		#DTC_poly      = pert * (poly/max_poly)

		DTC_poly = 0


		# DTS
		noise         = np.random.uniform(np.zeros(len(v)), np.ones(len(v))) - 0.5
		nterms        = np.random.randint(1,8)     # up to 7 terms
		par_poly      = np.polyfit(v/200, noise, nterms-1)
		poly          = np.polyval(par_poly, v/200)
		max_poly      = np.max(np.abs(poly))
		pert          = np.random.uniform(-DTS, DTS)
		DTS_poly      = pert * (poly/max_poly)





		# Total error
		div      = ((np.abs(F)**2)*(1-np.abs(ra)**2))
		DTA[i,:] = (DC2_poly*(1-np.abs(rl)**2)/div) + (DTU_poly*(np.abs(ra)**2)*(np.abs(F)**2)/div) + (DTC_poly*np.abs(ra)*np.abs(F)*np.cos(PHI)/div) + (DTS_poly*np.abs(ra)*np.abs(F)*np.sin(PHI)/div)

		p = eg.fit_polynomial_fourier('EDGES_polynomial', v/200, DTA[i,:], 5)
		rDTA[i,:] = DTA[i,:] - p[1]



	std_DTA  = np.std(DTA, axis=0)
	std_rDTA = np.std(rDTA, axis=0)







	# Plots
	# ------------------------

	plt.close()
	plt.close()
	plt.close()
	plt.close()



	plt.figure(1, figsize=[13,13])
	plt.subplot(4,2,1)
	plt.plot(hb1[:,0], hb1[:,4], 'b')
	plt.plot(hb2[:,0], hb3[:,4], 'c')
	plt.xlim([90, 190])
	plt.ylim([-8, -4])
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('$C_2$ [K]')
	plt.grid()
	plt.title('High-Band')
	plt.legend(['2015','2017'])	

	plt.subplot(4,2,3)
	plt.plot(hb1[:,0], hb1[:,5], 'b')
	plt.plot(hb2[:,0], hb3[:,5], 'c')
	plt.xlim([90, 190])
	plt.ylim([66, 69])
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('$T_U$ [K]')
	plt.grid()

	plt.subplot(4,2,5)
	plt.plot(hb1[:,0], hb1[:,6], 'b')
	plt.plot(hb2[:,0], hb3[:,6], 'c')
	plt.xlim([90, 190])
	plt.ylim([-30, 0])
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('$T_C$ [K]')
	plt.grid()

	plt.subplot(4,2,7)
	plt.plot(hb1[:,0], hb1[:,7], 'b')
	plt.plot(hb2[:,0], hb3[:,7], 'c')
	plt.xlim([90, 190])
	plt.ylim([-10, 20])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('$T_S$ [K]')
	plt.grid()



	plt.subplot(4,2,2)
	plt.plot(lb1[:,0], lb1[:,4], 'b')
	plt.plot(lb1[:,0], lb1[:,4]+DC2, 'r--')
	plt.plot(lb1[:,0], lb1[:,4]-DC2, 'r--')
	plt.xlim([50, 100])
	plt.ylim([-3, 1])
	plt.ylabel('$C_2$ [K]')
	plt.grid()
	plt.title('Low-Band')
	plt.legend(['nominal','uncertainty band'])	

	plt.subplot(4,2,4)
	plt.plot(lb1[:,0], lb1[:,5])
	plt.plot(lb1[:,0], lb1[:,5]+DTU, 'r--')
	plt.plot(lb1[:,0], lb1[:,5]-DTU, 'r--')
	plt.xlim([50, 100])
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('$T_U$ [K]')
	plt.grid()


	plt.subplot(4,2,6)
	plt.plot(lb1[:,0], lb1[:,6])
	plt.plot(lb1[:,0], lb1[:,6]+DTC, 'r--')
	plt.plot(lb1[:,0], lb1[:,6]-DTC, 'r--')
	plt.xlim([50, 100])
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('$T_C$ [K]')
	plt.grid()

	plt.subplot(4,2,8)
	plt.plot(lb1[:,0], lb1[:,7])
	plt.plot(lb1[:,0], lb1[:,7]+DTC, 'r--')	
	plt.plot(lb1[:,0], lb1[:,7]-DTC, 'r--')	
	plt.xlim([50, 100])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('$T_S$ [K]')
	plt.grid()

	# Save plot
	print('---------------------------------------------')
	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170309/'
	plt.savefig(path_plot_save + 'LNA_parameters.pdf', bbox_inches='tight')
	plt.close()
	plt.close()




	# -----------------------
	plt.close()
	plt.close()

	plt.figure(2, figsize=[12,8])
	plt.subplot(2,2,1)
	plt.plot(v, 20*np.log10(np.abs(ra)))
	plt.ylabel(r'$|\Gamma_A|$ [dB]')
	plt.grid()
	plt.subplot(2,2,2)
	plt.plot(v, (180/np.pi)*np.unwrap(np.angle(ra)))
	plt.ylabel(r'$\angle\Gamma_A$ [deg]')
	plt.grid()
	plt.subplot(2,2,3)
	plt.plot(v, 20*np.log10(np.abs(rl)))
	plt.ylabel(r'$|\Gamma_{\mathrm{rec}}|$ [dB]')
	plt.xlabel('frequency [MHz]')
	plt.grid()
	plt.subplot(2,2,4)
	plt.plot(v, (180/np.pi)*np.unwrap(np.angle(rl)))
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\angle\Gamma_{\mathrm{rec}}$ [deg]')
	plt.grid()

	# Save plot
	print('---------------------------------------------')
	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170309/'
	plt.savefig(path_plot_save + 'reflections.pdf', bbox_inches='tight')
	plt.close()
	plt.close()




	# ------
	plt.close()
	plt.close()
	plt.figure(3)
	plt.plot(v, 1000*DTA.T)
	plt.plot(v, 1000*std_DTA, 'w', linewidth=3)
	plt.plot(v, -1000*std_DTA, 'w', linewidth=3)
	plt.plot(v, 2*1000*std_DTA, 'w--', linewidth=3)
	plt.plot(v, -2*1000*std_DTA, 'w--', linewidth=3)
	plt.xlabel('frequency [MHz]')
	plt.ylabel('temperature [mK]')
	plt.grid()

	# Save plot
	print('---------------------------------------------')
	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170309/'
	plt.savefig(path_plot_save + 'errors_correct_noTU_noTC.pdf', bbox_inches='tight')
	plt.close()
	plt.close()





	# ------
	plt.close()
	plt.close()
	plt.figure(4)
	plt.plot(v, 1000*rDTA.T)
	plt.plot(v, 1000*std_rDTA, 'w', linewidth=3)
	plt.plot(v, -1000*std_rDTA, 'w', linewidth=3)
	plt.plot(v, 2*1000*std_rDTA, 'w--', linewidth=3)
	plt.plot(v, -2*1000*std_rDTA, 'w--', linewidth=3)
	plt.xlabel('frequency [MHz]')
	plt.ylabel('temperature [mK]')
	plt.ylim([-400, 400])
	plt.grid()	

	# Save plot
	print('---------------------------------------------')
	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170309/'
	plt.savefig(path_plot_save + 'residuals_correct_noTU_noTC.pdf', bbox_inches='tight')
	plt.close()
	plt.close()



	return v, std_DTA, std_rDTA





















def save_low_band_antenna_reflection_coefficient():

	lb1 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/receiver_calibration/low_band/2015_08_25C/LNA/calibration_files/calibration_file_low_band_v1_cterms7_wterms7.txt')		
	v  = lb1[:,0]	

	ra = eg.models_antenna_s11('low_band_2015', 'blade', v, antenna_s11_day=289)


	out  = np.vstack((v, np.real(ra), np.imag(ra)))
	outT = out.T
	np.savetxt('/home/ramo7131/Desktop/antenna_low_band.txt', outT)

	return 0






def FWHM_140MHz_high_band():

	b = eg.FEKO_high_band_blade_beam_plus_shaped_finite_ground_plane(beam_file=1, frequency_interpolation='no', frequency=np.array([0]), AZ_antenna_axis=0)
	b140 = b[12,:,:]

	peak  = np.max(b140[-1,:])
	bn140 = b140/peak

	# N-S FWHM
	bns = bn140[:,0]
	for i in range(len(bns)-1):
		if (bns[i] <= 0.5) and (bns[i+1] >= 0.5):
			FWHMns = 2*(90 - i)


	# E-W FWHM
	bew = bn140[:,89]
	for i in range(len(bew)-1):
		if (bew[i] <= 0.5) and (bew[i+1] >= 0.5):
			FWHMew = 2*(90 - i)


	return FWHMns, FWHMew












def low_band2_preliminary_calibration():

	#LST_1 = 8
	#LST_2 = 16
	sun_el_max = 90
	amb_hum_max = 90
	min_receiver_temp = 20
	max_receiver_temp = 30





	## Calibrating and computing residuals for every hour
	#for j in range(2):


		#print(str(j) + '-RUN-------------------------------------------------------------------')
		#LST_1 = 3*j + 8
		#LST_2 = 3*j + 11

		#fin, t_2D, w_2D, m_2D = eg.data_selection_single_day_v3('low_band2_2017', '2017_081_13', LST_1, LST_2, sun_el_max=sun_el_max, amb_hum_max=amb_hum_max, min_receiver_temp=min_receiver_temp, max_receiver_temp=max_receiver_temp)

		#if j == 0:
			#ra = eg.models_antenna_s11('low_band2_2017', 'blade', fin, antenna_s11_day = 82)		
			#s11_LNA, sca, off, TU, TC, TS   = eg.receiver_calibration('low_band2_2017', fin, receiver_temperature=25, low_band_cal_file=1, high_band_cal_file=1)


		#ta  = eg.calibrated_antenna_temperature(t_2D,  ra,  s11_LNA, sca, off, TU, TC, TS)

		#for i in range(len(ta[:,0])):
			#ta[i,w_2D[i,:]==0] = 0            # zeroing temperature of flagged channels

		#avt, avw = eg.spectral_averaging(ta, w_2D)
		#fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(fin, avt, avw, flow=49, fhigh=101, fnorm=75, pre_rfi_flagging='yes', post_rfi_flagging='yes')

		#f1 = 59.8
		#f2 = 101
		#ff = fb[(fb>f1) & (fb<f2)]
		#tt = tb[(fb>f1) & (fb<f2)]
		#ww = wb[(fb>f1) & (fb<f2)]
		#p = eg.fit_polynomial_fourier('EDGES_polynomial', ff, tt, 4, Weights=ww)
		#rr = tt - p[1]
		#rr[ww==0] = 0


		#if j == 0:
			#tb_all = np.copy(tb)
			#wb_all = np.copy(wb)
			#rr_all = np.copy(rr)
			#ww_all = np.copy(ww)




		#elif j > 0:
			#tb_all = np.vstack((tb_all, tb))
			#wb_all = np.vstack((wb_all, wb))
			#rr_all = np.vstack((rr_all, rr))
			#ww_all = np.vstack((ww_all, rr))






	# Calibrating and computing residuals for total average
	LST_1 = 0
	LST_2 = 24




	fin, t_2D_1, w_2D_1, m_2D_1 = eg.data_selection_single_day_v3('low_band2_2017', '2017_082_03', LST_1, LST_2, sun_el_max=sun_el_max, amb_hum_max=amb_hum_max, min_receiver_temp=min_receiver_temp, max_receiver_temp=max_receiver_temp)

	fin, t_2D_2, w_2D_2, m_2D_2 = eg.data_selection_single_day_v3('low_band2_2017', '2017_082_08', LST_1, LST_2, sun_el_max=sun_el_max, amb_hum_max=amb_hum_max, min_receiver_temp=min_receiver_temp, max_receiver_temp=max_receiver_temp)



	t_2D = np.vstack((t_2D_1, t_2D_2))
	w_2D = np.vstack((w_2D_1, w_2D_2))
	m_2D = np.vstack((m_2D_1, m_2D_2))






	ra = eg.models_antenna_s11('low_band2_2017', 'blade', fin, antenna_s11_day = 82)		
	s11_LNA, sca, off, TU, TC, TS   = eg.receiver_calibration('low_band2_2017', fin, receiver_temperature=25, low_band_cal_file=1, high_band_cal_file=1)



	ta  = eg.calibrated_antenna_temperature(t_2D,  ra,  s11_LNA, sca, off, TU, TC, TS)

	for i in range(len(ta[:,0])):
		ta[i,w_2D[i,:]==0] = 0            # zeroing temperature of flagged channels

	avt, avw = eg.spectral_averaging(ta, w_2D)
	fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(fin, avt, avw, flow=49, fhigh=101, fnorm=75, pre_rfi_flagging='yes', post_rfi_flagging='yes')

	f1 = 57.8
	f2 = 101
	ff = fb[(fb>f1) & (fb<f2)]
	tt = tb[(fb>f1) & (fb<f2)]
	ww = wb[(fb>f1) & (fb<f2)]
	p = eg.fit_polynomial_fourier('EDGES_polynomial', ff, tt, 4, Weights=ww)
	rr_av = tt - p[1]
	rr_av[ww==0] = 0





	# Plots
	# ------------------------------------------------------------------
	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170324/'



	# Reflection coefficients
	plt.close()

	plt.figure(1, figsize=[12, 8])
	plt.subplot(2,2,1)
	plt.plot(fin, 20*np.log10(np.abs(ra)))
	plt.xlim([50, 100])
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.title('ANTENNA Reflection Coefficient')

	plt.subplot(2,2,3)
	plt.plot(fin, (180/np.pi)*np.unwrap(np.angle(ra)))
	plt.xlim([50, 100])
	plt.grid()
	plt.ylabel('phase [deg]')
	plt.xlabel('frequency [MHz]')



	plt.subplot(2,2,2)
	plt.plot(fin, 20*np.log10(np.abs(s11_LNA)))
	plt.xlim([50, 100])
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.title('RECEIVER Reflection Coefficient')


	plt.subplot(2,2,4)
	plt.plot(fin, (180/np.pi)*np.unwrap(np.angle(s11_LNA)))
	plt.xlim([50, 100])
	plt.grid()
	plt.ylabel('phase [deg]')
	plt.xlabel('frequency [MHz]')	

	plt.savefig(path_plot_save + '2017_081_reflection_coefficient.pdf', bbox_inches='tight')
	plt.close()







	# Receiver parameters
	plt.close()
	plt.figure(1, figsize=[12, 8])
	plt.subplot(2,2,1)
	plt.plot(fin, sca)
	plt.xlim([50, 100])
	plt.grid()
	plt.ylabel('scale')	

	plt.subplot(2,2,3)
	plt.plot(fin, off)
	plt.xlim([50, 100])
	plt.grid()
	plt.ylabel('offset [K]')
	plt.xlabel('frequency [MHz]')


	plt.subplot(2,2,2)
	plt.plot(fin, TU)
	plt.xlim([50, 100])
	plt.grid()
	plt.ylabel(r'$T_U$ [K]')

	plt.subplot(2,2,4)
	plt.plot(fin, TC)
	plt.plot(fin, TS)
	plt.xlim([50, 100])
	plt.legend(['$T_C$','$T_S$'])
	plt.grid()
	plt.ylabel(r'$T_C$, $T_S$ [K]')
	plt.xlabel('frequency [MHz]')

	plt.savefig(path_plot_save + '2017_081_receiver_parameters.pdf', bbox_inches='tight')
	plt.close()	







	# LST and weather
	plt.close()

	plt.figure(1, figsize=[12, 8])
	plt.subplot(2,2,1)
	plt.plot(m_2D[:,3])
	plt.grid()
	plt.ylabel('LST [hr]')	

	plt.subplot(2,2,3)
	plt.plot(m_2D[:,6])
	plt.grid()
	plt.ylabel('Sun elevation [deg]')
	plt.xlabel('number of 39-sec traces')

	plt.subplot(2,2,2)
	plt.plot(m_2D[:,9])
	plt.grid()
	plt.ylabel(r'ambient temperature [$^{\circ}$C]')


	plt.subplot(2,2,4)
	plt.plot(m_2D[:,10])
	plt.grid()
	plt.ylabel('ambient relative humidity [%]')
	plt.xlabel('number of 39-sec traces')	

	plt.savefig(path_plot_save + '2017_082_LST_weather.pdf', bbox_inches='tight')
	plt.close()







	## Calibrated RAW antenna temperature
	#plt.close()
	#for i in range(len(ta[:,0])):
		#plt.plot(fin[w_2D[i,:]>0], ta[i,w_2D[i,:]>0])

	#plt.xlim([50, 100])
	#plt.grid()
	#plt.xlabel('frequency [MHz]')
	#plt.ylabel('antenna temperature [K]')

	#plt.savefig(path_plot_save + '2017_082_raw_antenna_temperature.pdf', bbox_inches='tight')
	#plt.close()





	## Calibrated 1HR BINNED antenna temperature
	#plt.close()
	#for i in range(len(tb_all[:,0])):
		#plt.plot(fb[wb_all[i,:]>0], tb_all[i,wb_all[i,:]>0])

	#plt.xlim([60, 100])
	#plt.grid()
	#plt.xlabel('frequency [MHz]')
	#plt.ylabel('antenna temperature [K]')

	#plt.savefig(path_plot_save + '2017_081_1hr_binned_antenna_temperature.pdf', bbox_inches='tight')
	#plt.close()	





	## 1HR Residuals
	#plt.close()
	#for i in range(len(rr_all[:,0])):
		#plt.plot(ff[ww_all[i,:]>0], rr_all[i,ww_all[i,:]>0] - 1*float(i) ) 

	#plt.xlim([60, 100])
	#plt.ylim([-4, 1])
	#plt.yticks(np.array([-2, -1, 0]), ('','',''))
	#plt.grid()
	#plt.xlabel('frequency [MHz]')
	#plt.ylabel('2 K per division')

	#plt.savefig(path_plot_save + '2017_081_1hr_residuals.pdf', bbox_inches='tight')
	#plt.close()	





	# TotalResiduals
	plt.close()
	plt.figure(1, figsize=[10, 6])
	plt.plot(ff[ww>0], 1000*rr_av[ww>0])

	plt.xlim([50, 100])
	plt.ylim([-600,600])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('temperature [mK]')

	plt.savefig(path_plot_save + '2017_082_total_residuals.pdf', bbox_inches='tight')
	plt.close()	




	return m_2D































def high_band_residuals_test(d1, d2, Nfg):




	f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/high_band_2015_LST_0.26_6.26_full_season_20170325.hdf5')


	#d1 = 10
	#d2 = 20
	avt, avw = eg.spectral_averaging(t[d1:(d2+1),:], w[d1:(d2+1)])



	fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, flow=89, fhigh=191, fnorm=140, pre_rfi_flagging='yes', post_rfi_flagging='yes')
	p = eg.fit_polynomial_fourier('EDGES_polynomial', fb, tb, Nfg, Weights=wb)
	rb = tb - p[1]
	rb[wb==0] = 0
	tb[wb==0] = 0



	plt.plot(fb[wb>0], rb[wb>0], '.-')

	plt.xlim([90, 190])
	print(d[d1,:])
	print(d[d2,:])

	return fb, tb, wb









def rejection_jordan_models():



	f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')


	#d1 = 10
	#d2 = 20
	avt, avw = eg.spectral_averaging(t, w)



	fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, flow=89, fhigh=191, fnorm=140, pre_rfi_flagging='yes', post_rfi_flagging='yes')
	tb[wb==0] = 0





	Nmodels=7000# 391
	p21_all  = np.zeros(Nmodels)
	dp21_all = np.zeros(Nmodels)

	#p21_all_inj  = np.zeros(Nmodels)
	#dp21_all_inj = np.zeros(Nmodels)	


	model_21 = 'jordan'
	for i in range(Nmodels):

		p21, dp21   = eg.data_analysis_model_detection_rejection(fb, tb, wb, model_21, model_fg='EDGES_polynomial', Nfg=5, zr=8, dz=2, z_alpha=0, anastasia_model_number=0, jordan_model_number=i)		
		p21_all[i]  = p21
		dp21_all[i] = dp21


		# Mot necessary, if I add the signal, I get an offset of 1
		#
		#m21 = eg.model_eor_jordan(i,fb)
		#p21, dp21 = eg.data_analysis_model_detection_rejection(fb, tb+m21, wb, model_21, model_fg='EDGES_polynomial', Nfg=5, zr=8, dz=2, z_alpha=0, anastasia_model_number=0, jordan_model_number=i)		
		#p21_all_inj[i] = p21
		#dp21_all_inj[i] = dp21


		sig1 = (1-p21)/dp21
		sig2 = p21/dp21










	# Plots

	plt.close()


	plt.subplot(2,1,1)

	plt.plot(np.arange(len(p21_all[0:33]))+1,   np.ones(len(p21_all[0:33])), 'g', linewidth=3)
	plt.plot(np.arange(len(p21_all[0:33]))+1,  -np.ones(len(p21_all[0:33])), 'g', linewidth=3)
	plt.plot(np.arange(len(p21_all[0:33]))+1,  2*np.ones(len(p21_all[0:33])), 'r', linewidth=3)
	plt.plot(np.arange(len(p21_all[0:33]))+1, -2*np.ones(len(p21_all[0:33])), 'r', linewidth=3)

	plt.plot(np.arange(len(p21_all[0:33]))+1, (p21_all[0:33]-1)/dp21_all[0:33], '.-', color='k', markersize=15)
	plt.ylim([-7,7])
	plt.grid()


	plt.subplot(2,1,2)

	plt.plot(np.arange(len(p21_all[33:-1]))+1,   np.ones(len(p21_all[33:-1])), 'g', linewidth=3)
	plt.plot(np.arange(len(p21_all[33:-1]))+1,  -np.ones(len(p21_all[33:-1])), 'g', linewidth=3)
	plt.plot(np.arange(len(p21_all[33:-1]))+1,  2*np.ones(len(p21_all[33:-1])), 'r', linewidth=3)
	plt.plot(np.arange(len(p21_all[33:-1]))+1, -2*np.ones(len(p21_all[33:-1])), 'r', linewidth=3)

	plt.plot(np.arange(len(p21_all[33:-1]))+1, (p21_all[33:-1]-1)/dp21_all[33:-1], '.-', color='k', markersize=15)
	#plt.ylim([-7,7])
	plt.grid()




	#plt.figure(2)
	#XX = 600
	#plt.errorbar(np.arange(len(p21_all[391:XX]))+1, p21_all[391:XX], dp21_all[391:XX])






	return p21_all, dp21_all, p21_all_inj, dp21_all_inj












def rejection_anastasia_models():



	f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')


	#d1 = 10
	#d2 = 20
	avt, avw = eg.spectral_averaging(t, w)



	fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, flow=89, fhigh=191, fnorm=140, pre_rfi_flagging='yes', post_rfi_flagging='yes')
	tb[wb==0] = 0





	Nmodels=194
	p21_all  = np.zeros(Nmodels)
	dp21_all = np.zeros(Nmodels)


	model_21 = 'anastasia'
	for i in range(Nmodels):
		p21, dp21 = eg.data_analysis_model_detection_rejection(fb, tb, wb, model_21, model_fg='EDGES_polynomial', Nfg=5, zr=8, dz=2, z_alpha=0, anastasia_model_number=i, jordan_model_number=0)


		p21_all[i] = p21
		dp21_all[i] = dp21








	# Plots

	plt.close()


	plt.plot(np.arange(len(p21_all))+1,   np.ones(len(p21_all)), 'g', linewidth=3)
	plt.plot(np.arange(len(p21_all))+1,  -np.ones(len(p21_all)), 'g', linewidth=3)
	plt.plot(np.arange(len(p21_all))+1,  2*np.ones(len(p21_all)), 'r', linewidth=3)
	plt.plot(np.arange(len(p21_all))+1, -2*np.ones(len(p21_all)), 'r', linewidth=3)

	plt.plot(np.arange(len(p21_all))+1, (p21_all-1)/dp21_all, '.-', color='k', markersize=15)
	#plt.ylim([-7,7])
	plt.grid()






	return p21_all, dp21_all









def batch_high_band_least_squares_rejections(model_21, perturbation_case, save, resolution_zr='high_res', gaussian_max_dz=12, gaussian_skewness=0, filename='rejection_results_tanh_XXX', inject_tanh='no', it_zr=8.5, it_dz=0.5):

	if model_21 == 'tanh':
		Dv  = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
		Nfg = [3, 4, 5]
		#Dv = [100]
		#Nfg = [5]

	if model_21 == 'gaussian_redshift':
		Dv  = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
		Nfg = [2, 3, 4, 5]
		#Dv  = [100]
		#Nfg = [5]



	# Nominal
	if perturbation_case == 'nominal':
		f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')
		avt, avw   = eg.spectral_averaging(t, w)
		fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, flow=89, fhigh=191, fnorm=140, pre_rfi_flagging='yes', post_rfi_flagging='yes')
		tb[wb==0]  = 0

		if inject_tanh == 'yes':
			injected_tanh, x1, x2 = eg.model_eor(fb, T21=0.028, zr=it_zr, dz=it_dz)
			tb = tb + injected_tanh
			print('Tanh ADDED')		

		zr, dz, p21, dp21 = eg.data_analysis_sliding_window_least_squares('high_band', fb, tb, wb, model_21=model_21, resolution_zr=resolution_zr, gaussian_max_dz=gaussian_max_dz, gaussian_skewness=gaussian_skewness, Dv=Dv, Nfg=Nfg, save=save, filename=filename)


	# MC	
	if perturbation_case == 'MC1':
		for i in range(20):
			f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+1) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			tb[wb==0]  = 0
			filename_MC = filename + '_MC' + str(i+1)
			zr, dz, p21, dp21 = eg.data_analysis_sliding_window_least_squares('high_band', fb, tb, wb, model_21=model_21, resolution_zr=resolution_zr, gaussian_max_dz=gaussian_max_dz, gaussian_skewness=gaussian_skewness, Dv=Dv, Nfg=Nfg, save=save, filename=filename_MC)

	if perturbation_case == 'MC2':
		for i in range(20):
			f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+21) + '.hdf5')
			avt, avw = eg.spectral_averaging(t, w)
			fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			tb[wb==0]  = 0
			filename_MC = filename + '_MC' + str(i+21)
			zr, dz, p21, dp21 = eg.data_analysis_sliding_window_least_squares('high_band', fb, tb, wb, model_21=model_21, resolution_zr=resolution_zr, gaussian_max_dz=gaussian_max_dz, gaussian_skewness=gaussian_skewness, Dv=Dv, Nfg=Nfg, save=save, filename=filename_MC)			

	if perturbation_case == 'MC3':
		for i in range(20):
			f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+41) + '.hdf5') # 41
			avt, avw = eg.spectral_averaging(t, w)
			fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			tb[wb==0]  = 0
			filename_MC = filename + '_MC' + str(i+41)
			zr, dz, p21, dp21 = eg.data_analysis_sliding_window_least_squares('high_band', fb, tb, wb, model_21=model_21, resolution_zr=resolution_zr, gaussian_max_dz=gaussian_max_dz, gaussian_skewness=gaussian_skewness, Dv=Dv, Nfg=Nfg, save=save, filename=filename_MC)

	if perturbation_case == 'MC4':
		for i in range(20):
			f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+61) + '.hdf5') # 41
			avt, avw = eg.spectral_averaging(t, w)
			fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			tb[wb==0]  = 0
			filename_MC = filename + '_MC' + str(i+61)
			zr, dz, p21, dp21 = eg.data_analysis_sliding_window_least_squares('high_band', fb, tb, wb, model_21=model_21, resolution_zr=resolution_zr, gaussian_max_dz=gaussian_max_dz, gaussian_skewness=gaussian_skewness, Dv=Dv, Nfg=Nfg, save=save, filename=filename_MC)

	if perturbation_case == 'MC5':
		for i in range(20):
			f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_MC' + str(i+81) + '.hdf5') # 41
			avt, avw = eg.spectral_averaging(t, w)
			fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, pre_rfi_flagging='yes', post_rfi_flagging='yes')
			tb[wb==0]  = 0
			filename_MC = filename + '_MC' + str(i+81)
			zr, dz, p21, dp21 = eg.data_analysis_sliding_window_least_squares('high_band', fb, tb, wb, model_21=model_21, resolution_zr=resolution_zr, gaussian_max_dz=gaussian_max_dz, gaussian_skewness=gaussian_skewness, Dv=Dv, Nfg=Nfg, save=save, filename=filename_MC)


	return zr, dz, p21, dp21















def high_band_nominal_spectrum_to_txt():

	f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')
	avt, avw   = eg.spectral_averaging(t, w)
	fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, flow=89, fhigh=191, fnorm=140, pre_rfi_flagging='yes', post_rfi_flagging='yes')
	tb[wb==0]  = 0

	out = np.array([fb, tb, wb])
	out_T = out.T

	np.savetxt(home_folder + '/DATA/EDGES/results/high_band/products/average_spectrum/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.txt', out_T)

	return 0

















def plot_low_band_residuals():

	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_82-87_no_bc_no_lc_cal2017.hdf5')

	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band_2015/low_band_2015_LST_23.76_11.76_82-88_no_bc_no_lc_cal2015_s11_93_20170404.hdf5')
	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band_2015/low_band_2015_LST_23.76_11.76_82-88_yes_bc_no_lc_cal2015_s11_93_20170404.hdf5')
	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band_2015/low_band_2015_LST_23.76_11.76_82-88_yes_bc_no_lc_cal2015_s11_243_20170404.hdf5')
	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band_2015/low_band_2015_LST_23.76_11.76_82-88_yes_bc_yes_lc_cal2015_s11_93_20170404.hdf5')
	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band_2015/low_band_2015_LST_0.26_6.26_82-88_yes_bc_yes_lc_cal2015_s11_93_20170404.hdf5')

	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_82-88_no_bc_no_lc_cal2016_s11_87_20170404.hdf5')
	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_82-88_yes_bc_no_lc_cal2016_s11_87_20170404.hdf5')
	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_82-88_yes_bc_yes_lc_cal2016_s11_87_20170404.hdf5')

	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_82-88_no_bc_no_lc_cal2017_s11_87_20170404.hdf5')
	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_82-88_yes_bc_no_lc_cal2017_s11_87_20170404.hdf5')
	f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_82-88_yes_bc_yes_lc_cal2017_s11_87_20170404.hdf5')


	nfg  = 4
	nfgx = 11


	# Find unique dates
	for i in range(len(d[:,0])):
		if i == 0:
			du = np.array([d[i,:]])			
		elif i > 0:
			if d[i,1] != d[i-1,1]:
				du = np.vstack((du, d[i,:]))


	# Average spectra for the same dates, from split files
	for i in range(len(du[:,0])):		
		flag = 0
		for j in range(len(d[:,0])):
			if (d[j,0] == du[i,0]) and (d[j,1] == du[i,1]):
				if flag == 0:
					index = np.array([np.copy(j)])
					flag = 1
				elif flag > 0:
					index = np.append(index, j)


		print(index)
		avt, avw = eg.spectral_averaging(t[index,:], w[index,:])
		fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, flow=59, fhigh=100, fnorm=80, nfg=nfgx, pre_rfi_flagging='yes', post_rfi_flagging='yes')
		tb[wb==0]  = 0

		if i == 0:
			tb_all = np.copy(tb)
			wb_all = np.copy(wb)

		elif i > 0:
			tb_all = np.vstack((tb_all, tb))
			wb_all = np.vstack((wb_all, wb))


	# Also total average
	avt, avw   = eg.spectral_averaging(t, w)
	fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, flow=59, fhigh=100, fnorm=80, nfg=nfgx, pre_rfi_flagging='yes', post_rfi_flagging='yes')
	tb[wb==0]  = 0		

	tb_all = np.vstack((tb_all, tb))
	wb_all = np.vstack((wb_all, wb))


	fb, rb_all, wb_all, rms_all, xx = eg.data_analysis_residuals_array(fb, tb_all, wb_all, flow=60, fhigh=99, model_type='EDGES_polynomial', fnorm=80, nfg=nfg, binning='no', nsamples=64, rfi_flagging='no')

	o = eg.plot_spectra_residuals(fb, rb_all, wb_all, 'season', du[:,1], K=0.4, flow_lim=55, fhigh_lim=110, xticks_low=60, xticks_high=100, xticks_delta=5, rms_text_freq=101, fontsize=10, size_x_column=7, size_y=6, NSC=9, y_label='day of year [0.4 K per division]', plot_name='low_band2_cal2017_s11_87_yes_bc_yes_lc_GHA6-18_60_99MHz')


	return 0 #fb, vt_all, avw_all, du







def low_band1_antenna_s11_average_20170403():

	# NO D1, because the switch was not stable yet
	d2 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/s11/low_band/corrected/20170403_2/average_20170403_2.txt')
	d3 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/s11/low_band/corrected/20170403_3/average_20170403_3.txt')
	d4 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/s11/low_band/corrected/20170403_4/average_20170403_4.txt')
	d5 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/s11/low_band/corrected/20170403_5/average_20170403_5.txt')
	d6 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/s11/low_band/corrected/20170403_6/average_20170403_6.txt')

	rr = np.mean(np.array([ d2[:,1], d3[:,1], d4[:,1], d5[:,1], d6[:,1] ]), axis=0)
	ii = np.mean(np.array([ d2[:,2], d3[:,2], d4[:,2], d5[:,2], d6[:,2] ]), axis=0)

	out = np.array([d2[:,0], rr, ii])
	outT = out.T

	np.savetxt('/home/ramo7131/DATA/EDGES/calibration/s11/low_band/corrected/20170403_average/average_20170403.txt', outT)

	return outT













def check_chi_square_injected_signals(ii, jj):

	v, Dv, Nfg, line68t, line95t, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/run2/rejection_results_nominal.hdf5')
	v, Dv, Nfg, line68t1, line95t1, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/rejection_results_nominal_injected_zr13_dz0.2.hdf5')
	v, Dv, Nfg, line68t2, line95t2, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/rejection_results_nominal_injected_zr11_dz0.3.hdf5')
	v, Dv, Nfg, line68t3, line95t3, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/rejection_results_nominal_injected_zr8.5_dz0.5.hdf5')
	v, Dv, Nfg, line68t4, line95t4, cube_prob, prob68, prob95, window_index, residuals0 = eg.read_chi_square_sliding_window('high_band', 'results_paper_1/tanh/rejection_results_nominal_injected_zr6.9_dz0.2.hdf5')




	t68 = np.max(np.max(line68t, axis=0), axis=0)
	t95 = np.max(np.max(line95t, axis=0), axis=0)

	#t681 = np.max(np.max(line68t1, axis=0), axis=0)
	#t951 = np.max(np.max(line95t1, axis=0), axis=0)

	#t682 = np.max(np.max(line68t2, axis=0), axis=0)
	#t952 = np.max(np.max(line95t2, axis=0), axis=0)	

	#t683 = np.max(np.max(line68t3, axis=0), axis=0)
	#t953 = np.max(np.max(line95t3, axis=0), axis=0)	

	#t684 = np.max(np.max(line68t4, axis=0), axis=0)
	#t954 = np.max(np.max(line95t4, axis=0), axis=0)	


	#
	plt.figure(1)	
	plt.plot(eg.frequency2redshift(v), line95t1[0:11, 0::, :].T, 'r');plt.xlim([14.8, 6.5])
	#plt.plot(eg.frequency2redshift(v), t952, 'r');plt.xlim([14.8, 6.5])
	#plt.plot(eg.frequency2redshift(v), t953, 'g');plt.xlim([14.8, 6.5])
	#plt.plot(eg.frequency2redshift(v), t954, 'm');plt.xlim([14.8, 6.5])
	plt.plot(eg.frequency2redshift(v), t95, 'k');plt.xlim([14.8, 6.5])



	#
	#plt.figure(2)
	#plt.plot(eg.frequency2redshift(v), t68, 'k');plt.xlim([14.8, 6.5])
	#plt.plot(eg.frequency2redshift(v), t681, 'b');plt.xlim([14.8, 6.5])
	#plt.plot(eg.frequency2redshift(v), t682, 'r');plt.xlim([14.8, 6.5])
	#plt.plot(eg.frequency2redshift(v), t683, 'g');plt.xlim([14.8, 6.5])
	#plt.plot(eg.frequency2redshift(v), t684, 'm');plt.xlim([14.8, 6.5])	

	return 0











def plot_residuals_low_band_2015(figure1='no', figure2='no'):

	# Nominal dataset
	#f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/low_band_2015/low_band_2015_LST_23.76_11.76_ID1_20170408.hdf5')
	f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/low_band_2015/low_band_2015_LST_23.76_11.76_ID2_20170409.hdf5')





	# Computing residuals for averages
	if figure1 == 'yes':
		fo, ro, wo, rms, rms110 = eg.data_analysis_residuals_array(f, t, w, flow=50, fhigh=100, model_type='EDGES_polynomial', fnorm=75, nfg=5, binning='yes', nsamples=64, rfi_flagging='yes')

		# Plot of residuals
		plt.close()
		plt.close()	
		o = eg.plot_spectra_residuals(fo, ro, wo, 'season', d[:,1], K=1, flow_lim=48, fhigh_lim=110, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100, fontsize=10, size_x_column=7, size_y=14, NSC=40, y_label=' ' + 'day of year [1 K per division]', plot_name='daily_residuals_low_band1')





	# Intermediate and total averages
	if figure2 == 'yes':
		avt1, avw1 = eg.spectral_averaging(t[0:40,:],  w[0:40,:])
		avt2, avw2 = eg.spectral_averaging(t[40:80,:], w[40:80,:])
		avt3, avw3 = eg.spectral_averaging(t[80::,:],  w[80::,:])	
		avtt, avwt = eg.spectral_averaging(t, w)


		f1, r1, w1, xx1, xx2 = eg.data_analysis_residuals_array(f, avt1.reshape(1,-1), avw1.reshape(1,-1), flow=50, fhigh=100, model_type='EDGES_polynomial', fnorm=75, nfg=5, binning='yes', nsamples=64, rfi_flagging='yes')
		f2, r2, w2, xx1, xx2 = eg.data_analysis_residuals_array(f, avt2.reshape(1,-1), avw2.reshape(1,-1), flow=50, fhigh=100, model_type='EDGES_polynomial', fnorm=75, nfg=5, binning='yes', nsamples=64, rfi_flagging='yes')
		f3, r3, w3, xx1, xx2 = eg.data_analysis_residuals_array(f, avt3.reshape(1,-1), avw3.reshape(1,-1), flow=50, fhigh=100, model_type='EDGES_polynomial', fnorm=75, nfg=5, binning='yes', nsamples=64, rfi_flagging='yes')
		ft, rt, wt, xx1, xx2 = eg.data_analysis_residuals_array(f, avtt.reshape(1,-1), avwt.reshape(1,-1), flow=50, fhigh=100, model_type='EDGES_polynomial', fnorm=75, nfg=5, binning='yes', nsamples=64, rfi_flagging='yes')


		plt.subplot(4,1,1)
		plt.plot(f1[w1>0], 1000*r1[w1>0], 'b')
		plt.xlim([50,100])
		plt.ylim([-700, 700])
		plt.grid()
		plt.ylabel('temperature [K]')
		plt.title('2016-260 to 2016-315')
		plt.xticks(np.arange(50,101,10), [])

		plt.subplot(4,1,2)
		plt.plot(f2[w2>0], 1000*r2[w2>0], 'b')
		plt.xlim([50,100])
		plt.ylim([-700, 700])
		plt.grid()
		plt.ylabel('temperature [K]')
		plt.title('2016-316 to 2016-356')
		plt.xticks(np.arange(50,101,10), [])

		plt.subplot(4,1,3)
		plt.plot(f3[w3>0], 1000*r3[w3>0], 'b')
		plt.xlim([50,100])
		plt.ylim([-700, 700])
		plt.grid()
		plt.ylabel('temperature [K]')
		plt.title('2016-357 to 2017-88')
		plt.xticks(np.arange(50,101,10), [])

		plt.subplot(4,1,4)
		plt.plot(ft[wt>0], 1000*rt[wt>0], 'b')
		plt.xlim([50,100])
		plt.ylim([-700, 700])
		plt.grid()
		plt.ylabel('temperature [mK]')
		plt.xlabel('frequency [MHz]')
		plt.title('2016-260 to 2017-88')		



	return 0





def plots_for_high_band_results_paper2(test='no', figure1='no', figure2='no', figure3='no', figure4='no', figure5='no', figure6='no', fr=0, mr=0):
	"""
	PAPER with Jordan's models
	Last modification: 2017-05-09

	"""

	# Finding rejected models based on rejection conditions
	rejection_significance_threshold = 3
	Tref = 1

	# Load parameters and estimates
	fb, Ts, xi, model, TC, zC, vC, TD, zD, vD, dz, dv, Tmin, gamma_z, Z, cx, Bx, N, LW, LC, p21, dp21 = eg.read_LF_least_squares('results_LF_all_models_20170503.hdf5')

	# Rejection significance for all models (including those that are not rejected)
	rs = (1-p21)/dp21



	index = np.arange(0, len(rs), 1)
	ir    = index[(np.abs(p21)<(Tref/2)) & (rs>=rejection_significance_threshold)]
	xx    = np.in1d(index, ir, invert=True)
	inr   = index[xx]






	# Throw away plot, FOR COLORMAP
	plt.close()
	plt.close()

	min_rs = 3
	max_rs = 14	
	CMAP = cm.gnuplot_r
	XY = [[0,0],[0,0]]
	levels = np.arange(min_rs, max_rs+0.001, 0.001)  # significances
	IMAGE_MAP = plt.contourf(XY, levels, cmap=CMAP, vmin=np.min(levels), vmax=np.max(levels))
	plt.close()		


	plt.close()
	plt.close()
	plt.close()







	if figure1 == 'yes':

		f, t, w, d, at, ah, rct, rmt  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')

		#Nominal average
		tsel = t
		wsel = w
		dsel = d[:,1]


		avt, avw = eg.spectral_averaging(tsel, wsel)


		FLOW  = 90
		FHIGH = 190
		NFG   = 5

		# Computing rms of noise only for average spectrum
		ffx, rrx, wwx, rms, rms110 = eg.data_analysis_residuals_array(f, avt.reshape(1,-1), avw.reshape(1,-1), flow=FLOW, fhigh=FHIGH, model_type='EDGES_polynomial', fnorm=140, nfg=16, binning='yes', nsamples=64, rfi_flagging='yes')
		print('RMS of noise alone: ' + str(np.std(rrx[180::])))


		ff, rsel, wsel, rms, rms110 = eg.data_analysis_residuals_array(f, avt.reshape(1,-1), avw.reshape(1,-1), flow=FLOW, fhigh=FHIGH, model_type='EDGES_polynomial', fnorm=140, nfg=NFG, binning='yes', nsamples=64, rfi_flagging='yes')
		print('RMS of everything: ' + str(np.std(rsel[wsel>0])))

		# Assigning NaNs to bins with no data
		fff = np.copy(ff)				
		rrr = 1000*rsel
		rrr[wsel==0] = np.nan		



		plt.close()
		plt.close()

		size_x = 6.6
		size_y = 6
		x0     = 0.18
		y0     = 0.12
		dx     = 0.78
		dy     = 0.38
		x00    = 0.057

		f1     = plt.figure(num=1, figsize=(size_x, size_y))
		ax1    = f1.add_axes([1*x0, 1*y0 + 0*dy, dx, dy])
		plt.text(92, 1.06, '(c)', fontsize=18)
		ax2    = f1.add_axes([1*x0, 1*y0 + 1*dy, dx, dy])
		ax3    = f1.add_axes([1*x0, 1*y0 + 2*dy, dx, dy])



		# Bottom panel
		ax1.step(ff-(0.9)*(ff[1]-ff[0])/2, np.hstack([wsel[0], wsel[0:-1]])/np.max(wsel), 'b', linewidth=1)
		ax1.set_xlim([90, 190])
		ax1.set_ylim([0, 1.25])
		ax1.set_xticks(np.arange(90,191,20))
		ax1.set_yticks(np.arange(0,1.1,0.25))
		ax1.grid()
		ax1.set_xlabel('frequency [MHz]')
		ax1.set_ylabel('normalized weights')


		# Middle panel
		ax2.plot(fff, rrr, 'b', linewidth=1)
		ax2.set_xlim([90, 190])
		ax2.set_ylim([-180, 180])
		ax2.set_xticks(np.arange(90,191,20))
		ax2.set_yticks(np.arange(-150,151,50))
		ax2.grid()
		ax2.set_xticklabels([])
		ax2.set_ylabel('temperature [mK]')
		ax2.text(140, 80, 'weighted rms = 17 mK', fontsize=14, fontweight='bold')
		ax2.text(92, 110, '(b)', fontsize=18)


		# Top panel
		ax3.plot(f[avw>0], avt[avw>0], 'b', linewidth=1)
		ax3.set_xlim([90, 190])
		ax3.set_ylim([-100, 1000])
		ax3.set_xticks(np.arange(90,191,20))
		ax3.grid()
		#ax3.set_yticks(np.arange(-150,151,50))
		ax3.set_xticklabels([])
		ax3.set_ylabel('temperature [K]')
		#plt.text(140, 80, 'weighted rms = 17 mK', fontsize=14, fontweight='bold')
		ax3.text(92, 600, '(a)', fontsize=18)		


		ax32 = ax3.twiny()	
		ax32.set_xlabel(r'$z$',fontsize=18)
		f0 = 90# eg.redshift2frequency()
		ax32.set_xticks(np.array((np.abs(eg.redshift2frequency(14)-f0), np.abs(eg.redshift2frequency(13)-f0), np.abs(eg.redshift2frequency(12)-f0),  np.abs(eg.redshift2frequency(11)-f0), np.abs(eg.redshift2frequency(10)-f0), np.abs(eg.redshift2frequency(9)-f0), np.abs(eg.redshift2frequency(8)-f0), np.abs(eg.redshift2frequency(7)-f0), np.abs(100))))
		ax32.set_xticklabels(['14', '13', '12', '11', '10', '9', '8', '7', ''])

		path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170603/'
		plt.savefig(path_plot_save + 'nominal_residuals.pdf', bbox_inches='tight')
		plt.close()
		plt.close()




































	if figure2 == 'yes':





		# ------------------------------------------------
		Nmodels = len(rs)
		Nsample = 100

		# Random all
		fe = np.arange(40, 204, 1)
		models_all = np.zeros((Nmodels, len(fe)))
		for i in range(Nmodels):
			print(i)
			m, ao = eg.model_eor_jordan(i+391, fe, interpolation_kind='linear')
			models_all[i,:] = 1000*m

		index_random_sample = np.random.randint(0, Nmodels, Nsample)



		# Random all
		index_random_all = np.random.randint(0, Nmodels, Nsample)

		# Random non rejected
		index_random_nr = np.random.randint(0, len(inr), Nsample)

		# Random rejected
		index_random_r = np.random.randint(0, len(ir), Nsample)		




		# ---------------------------------------

		sx = 8
		sy = 11	
		x0 = 0.1
		y0 = 0.05
		dx = 0.8
		dy = 0.3

		cb_x0 = 0.915
		cb_dx = 0.02
		cb_dy = (11/13)*dy

		xmin = 40
		xmax = 203

		ymin = -290
		ymax = 40

		lw = 6		




		fig = plt.figure(num=1, figsize=(sx, sy))

		ax  = fig.add_axes([x0, y0+2*dy, dx, dy])
		cmap = cm.get_cmap('Blues')
		for i in range(Nsample):
			c = cmap(float(i)/(Nsample-1))
			#print(index_all[i])
			ax.plot(fe, models_all[index_random_all[i],:], color=c)
		ax.plot([90, 90], [-400,100], c=[0,0.7,0], linestyle='--', linewidth=lw)
		ax.plot([190, 190], [-400,100], c=[0,0.7,0], linestyle='--', linewidth=lw)
		ax.set_xlim([xmin, xmax])
		ax.set_ylim([ymin, ymax])
		ax.set_xticks([50, 70, 90, 110, 130, 150, 170, 190])
		ax.set_xticklabels([])
		ax.set_ylabel('temperature [mK]')
		ax.grid()
		plt.text(50,-200, '(a)', fontsize=20)
		ax.arrow(90, -280, 90, 0, fc=[0,0.7,0], ec=[0,0.7,0], head_width=15, head_length=10,   linewidth=1, zorder=6)
		ax.arrow(190, -280, -90, 0, fc=[0,0.7,0], ec=[0,0.7,0], head_width=15, head_length=10,   linewidth=1, zorder=6)		
		plt.text(120,-275, 'EDGES High-Band', fontsize=15, color=[0,0.7,0])


		ax2 = ax.twiny()
		ax2.set_xlabel(r'$z$', fontsize=20)
		z0 = eg.frequency2redshift(40)
		ax2.set_xticks(np.array((np.abs(eg.redshift2frequency(32)-40), np.abs(eg.redshift2frequency(28)-40), np.abs(eg.redshift2frequency(24)-40), np.abs(eg.redshift2frequency(20)-40), np.abs(eg.redshift2frequency(18)-40), np.abs(eg.redshift2frequency(16)-40), np.abs(eg.redshift2frequency(14)-40), np.abs(eg.redshift2frequency(12)-40), np.abs(eg.redshift2frequency(10)-40), np.abs(eg.redshift2frequency(9)-40), np.abs(eg.redshift2frequency(8)-40), np.abs(eg.redshift2frequency(7)-40), np.abs(202-40))))
		ax2.set_xticklabels(['32', '28', '24', '20', '18', '16', '14', '12', '10', '9', '8', '7', '6'])






		ax  = fig.add_axes([x0, y0+1*dy, dx, dy])
		cmap = cm.get_cmap('Greys')
		for i in range(Nsample):
			c = cmap(float(i)/(Nsample-1))
			kg = 0.3 + np.random.uniform(0,0.6)
			ax.plot(fe, models_all[inr[index_random_nr[i]],:], color=[kg, kg, kg])
		ax.plot([90, 90], [-400,100], c=[0,0.7,0], linestyle='--', linewidth=lw)
		ax.plot([190, 190], [-400,100], c=[0,0.7,0], linestyle='--', linewidth=lw)		
		ax.set_xticks([50, 70, 90, 110, 130, 150, 170, 190])
		ax.set_xticklabels([])
		ax.set_xlim([xmin, xmax])
		ax.set_ylim([ymin, ymax])
		ax.set_ylabel('temperature [mK]')
		ax.grid()
		plt.text(50,-200, '(b)', fontsize=20)






		ax  = fig.add_axes([x0, y0+0*dy, dx, dy])

		cmap = cm.get_cmap('gnuplot_r')
		for i in range(Nsample):
			kc = (rs[ir[index_random_r[i]]]-min_rs)/(max_rs-min_rs)
			c  = cmap(kc)
			ax.plot(fe, models_all[ir[index_random_r[i]],:], color=c)



		ax.plot([90, 90], [-400,100], c=[0,0.7,0], linestyle='--', linewidth=lw)
		ax.plot([190, 190], [-400,100], c=[0,0.7,0], linestyle='--', linewidth=lw)
		ax.set_xticks([50, 70, 90, 110, 130, 150, 170, 190])
		#ax.set_xticklabels([])
		ax.set_xlim([xmin, xmax])
		ax.set_ylim([ymin, ymax])
		ax.set_xlabel('frequency [MHz]')
		ax.set_ylabel('temperature [mK]')
		ax.grid()
		plt.text(50,-200, '(c)', fontsize=20)

		cax1 = fig.add_axes([cb_x0, (y0+0*dy)+(dy/13), cb_dx, cb_dy])
		cbar = plt.colorbar(IMAGE_MAP, cax=cax1, ticks=np.arange(3,15,1))
		cbar.ax.set_yticklabels([3,4,5,6,7,8,9,10,11,12,13,14], fontsize=10)
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=12)	



		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170603/models_sample.pdf', bbox_inches='tight')
		plt.close()
		plt.close()
		plt.close()
		plt.close()

		# ------------------------------------------------------













	if figure3 == 'yes':

		kg = 0.7


		# -------------------------------------------------

		plt.close()
		plt.close()
		plt.figure(1, figsize=[11, 8])

		MS = 10

		plt.subplot(2,2,1)
		plt.scatter(vC, dv, c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(vC[ir], dv[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=max_rs)
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		plt.xlim([60, 160])
		plt.ylabel(r'$\Delta\nu$ [MHz]', fontsize=16)
		plt.grid()


		plt.subplot(2,2,3)
		plt.scatter(vC, -1000*TC, c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(vC[ir], -1000*TC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=max_rs)
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		plt.xlim([60, 160])
		plt.ylabel(r'A [mK]', fontsize=16)
		plt.xlabel(r'$\nu_r$ [MHz]', fontsize=16)
		plt.grid()

		plt.subplot(2,2,4)
		plt.scatter(dv, -1000*TC, c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(dv[ir], -1000*TC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=max_rs)
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		#plt.xlim([60, 160])
		plt.xlabel(r'$\Delta\nu$ [MHz]', fontsize=16)
		plt.grid()


		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170603/models_phenomenological.pdf', bbox_inches='tight')
		plt.close()			








	if figure4 == 'yes':

		kg = 0.7


		# -------------------------------------------------
		plt.close()
		plt.close()
		plt.figure(1, figsize=[10, 7])

		MS = 13

		plt.subplot(2,2,1)
		plt.scatter(np.log10(N), LW, s=MS, c=[kg,kg,kg], edgecolor='none')
		plt.scatter(np.log10(N[ir]), LW[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		plt.xlim([18.75, 24.25])
		plt.ylim([0.576, 1.024])
		plt.ylabel(r'$f_{\mathrm{esc,LyW}}$', fontsize=16)

		plt.subplot(2,2,3)
		plt.scatter(np.log10(N), LC, s=MS, c=[kg,kg,kg], edgecolor='none')
		plt.scatter(np.log10(N[ir]), LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		plt.xlim([18.75, 24.25])
		plt.ylim([0.08, 0.52])	
		#plt.xlim([60, 160])			
		plt.ylabel(r'$f_{\mathrm{esc,LyC}}$', fontsize=16)
		plt.xlabel(r'$\mathrm{log}_{10}(N_{\mathrm{HI}})$', fontsize=16)
		plt.plot([22.2, 24.5], [0.6, 0], 'c', linewidth=4)

		plt.subplot(2,2,4)
		plt.scatter(LW, LC, c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(LW[ir], LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		plt.ylim([0.08, 0.52])
		plt.xlim([0.58, 1.02])
		plt.xticks(np.arange(0.6, 1.01, 0.1))


		#plt.xlim([60, 160])
		plt.xlabel(r'$f_{\mathrm{esc,LyW}}$', fontsize=16)


		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170603/models_physical1.pdf', bbox_inches='tight')
		plt.close()








	if figure5 == 'yes':

		plt.close()
		plt.close()







		#print('XXX')

		#INDEX=115; MS=30; plt.figure(1); plt.subplot(1,3,1); plt.scatter(Ts[:, INDEX], xi[:, INDEX], c='c', s=MS, edgecolors='none');plt.scatter(Ts[ir, INDEX], xi[ir, INDEX], c=rs[ir], s=MS, edgecolors='none', cmap=plt.cm.gnuplot_r, vmin=3, vmax=14);plt.colorbar();plt.xlim([1.5, 10]);plt.ylim([0, 1.1])

		#INDEX=152; MS=30; plt.figure(1); plt.subplot(1,3,2); plt.scatter(Ts[:, INDEX], xi[:, INDEX], c='c', s=MS, edgecolors='none');plt.scatter(Ts[ir, INDEX], xi[ir, INDEX], c=rs[ir], s=MS, edgecolors='none', cmap=plt.cm.gnuplot_r, vmin=3, vmax=14);plt.colorbar();plt.xlim([1.5, 10]);plt.ylim([0, 1.1])

		#INDEX=197; MS=30; plt.figure(1); plt.subplot(1,3,3); plt.scatter(Ts[:, INDEX], xi[:, INDEX], c='c', s=MS, edgecolors='none');plt.scatter(Ts[ir, INDEX], xi[ir, INDEX], c=rs[ir], s=MS, edgecolors='none', cmap=plt.cm.gnuplot_r, vmin=3, vmax=14);plt.colorbar();plt.xlim([1.5, 10]);plt.ylim([0, 1.1])






		sx = 13
		sy = 4
		dx = 0.29
		dy = 0.78
		x0 = 0.05
		y0 = 0.15

		cb_x0 = 0.93
		cb_y0 = y0
		cb_dx = 0.01
		cb_dy = dy

		kg = 0.7
		MS1 = 4
		MS2 = 6
		MS3 = 10



		fig = plt.figure(num=1, figsize=(sx, sy))

		ax = fig.add_axes([x0 + 0*dx, y0, dx, dy])
		INDEX=115
		ax.scatter(Ts[:, INDEX],  xi[:, INDEX],  c=[kg,kg,kg],    s=MS1, edgecolors='none') 
		ax.scatter(Ts[ir, INDEX], xi[ir, INDEX], c=rs[ir],        s=MS1, edgecolors='none', cmap=plt.cm.gnuplot_r, vmin=min_rs, vmax=max_rs)
		ax.set_xlim([1, 15])
		ax.set_ylim([0, 1.05])
		ax.set_ylabel(r'ionized fraction, $\mathrm{x}_{\mathrm{I}}$')
		ax.set_xlabel('spin temperature, $T_{\mathrm{S}}$ [K]')
		plt.title(r'$z=$' + str(np.round(eg.frequency2redshift(fb[INDEX]),1)), fontsize=20)


		ax = fig.add_axes([x0 + 1*dx, y0, dx, dy])
		INDEX=152
		ax.scatter(Ts[:, INDEX],  xi[:, INDEX],  c=[kg,kg,kg],    s=MS2, edgecolors='none') 
		ax.scatter(Ts[ir, INDEX], xi[ir, INDEX], c=rs[ir],        s=MS2, edgecolors='none', cmap=plt.cm.gnuplot_r, vmin=min_rs, vmax=max_rs)
		ax.set_yticklabels([])
		ax.set_xlim([1, 15])
		ax.set_ylim([0, 1.05])
		ax.set_xlabel('spin temperature, $T_{\mathrm{S}}$ [K]')
		plt.title(r'$z=$' + str(np.round(eg.frequency2redshift(fb[INDEX]),1)), fontsize=20)


		ax = fig.add_axes([x0 + 2*dx, y0, dx, dy])
		INDEX=197
		ax.scatter(Ts[:, INDEX],  xi[:, INDEX],  c=[kg,kg,kg],    s=MS3, edgecolors='none') 
		ax.scatter(Ts[ir, INDEX], xi[ir, INDEX], c=rs[ir],        s=MS3, edgecolors='none', cmap=plt.cm.gnuplot_r, vmin=min_rs, vmax=max_rs)
		ax.set_yticklabels([])
		ax.set_xlim([1, 15])
		ax.set_ylim([0, 1.05])
		ax.set_xlabel('spin temperature, $T_{\mathrm{S}}$ [K]')
		plt.title(r'$z=$' + str(np.round(eg.frequency2redshift(fb[INDEX]),1)), fontsize=20)

		cax1 = fig.add_axes([cb_x0, cb_y0, cb_dx, cb_dy])
		cbar = plt.colorbar(IMAGE_MAP, cax=cax1, ticks=np.arange(min_rs, max_rs+0.1, 1))
		cbar.ax.set_yticklabels([3,4,5,6,7,8,9,10,11,12,13,14], fontsize=10)
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=12)


		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170603/models_physical2.pdf', bbox_inches='tight')
		plt.close()








	if figure6 == 'yes':

		# --------------------------------------------------
		kg = 0.7


		plt.close()
		plt.close()
		plt.figure(1, figsize=[18, 8])

		MS = 10

		plt.subplot(2,3,1)
		plt.scatter(-1000*TC,     np.log10(N),     c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(-1000*TC[ir], np.log10(N[ir]), c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=max_rs)
		plt.ylabel(r'$\mathrm{log}_{10}(N_{\mathrm{HI}})$', fontsize=16)
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)		

		plt.subplot(2,3,2)
		plt.scatter(vC,     np.log10(N),     c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(vC[ir], np.log10(N[ir]), c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=max_rs)
		plt.xlim([60, 160])
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)

		plt.subplot(2,3,3)
		plt.scatter(dv, np.log10(N),         c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(dv[ir], np.log10(N[ir]), c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=max_rs)
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)


		plt.subplot(2,3,4)
		plt.scatter(-1000*TC,     LC,     c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(-1000*TC[ir], LC[ir], c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=max_rs)
		plt.ylabel(r'$f_{\mathrm{esc,LyC}}$', fontsize=16)
		plt.xlabel(r'$A$ [mK]', fontsize=16)
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)

		plt.subplot(2,3,5)
		plt.scatter(vC,     LC,     c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(vC[ir], LC[ir], c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=max_rs)
		plt.xlabel(r'$\nu_r$ [MHz]', fontsize=16)
		plt.xlim([60, 160])
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)

		plt.subplot(2,3,6)
		plt.scatter(dv,     LC,     c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(dv[ir], LC[ir], c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=min_rs, vmax=max_rs)
		plt.xlabel(r'$\Delta\nu$ [MHz]', fontsize=16)	
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)

		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170603/models_physical_phenomenological.pdf', bbox_inches='tight')
		plt.close()










	if test == 'yes':

		fe = np.arange(40, 204, 1)


		# Rejection significance for all models (including those that are not rejected)
		rs = (1-p21)/dp21

		# Finding rejected models based on rejection conditions
		rejection_significance_threshold = 5
		Tref = 1
		ir = []
		models_all = np.zeros((len(p21), len(fe)))
		for i in range(len(p21)):
			m, ao = eg.model_eor_jordan(i+391, fe, interpolation_kind='linear')
			models_all[i,:] = m
			if (np.abs(p21[i])<(Tref/2)) and (rs[i]>=rejection_significance_threshold):
			#if (np.abs(p21[i])<(Tref/2)) and (np.abs(p21[i]) <= 2*dp21[i]) and (p21[i]+Tref > 2*dp21[i]) and (rs[i] >= 3):  # accepting rejection significances at or above 3
				ir.append(i)  # index of rejected models

			print(i)

		ir_sort = np.argsort(rs[ir])
		max_rs  = np.max(rs[ir])
		print('NUMBER OF REJECTED MODELS: ' + str(len(ir)))




		# -----------------------------------------------------
		plt.close()
		plt.close()
		plt.close()
		plt.close()
		plt.close()

		plt.figure(1, figsize=[14,6])
		plt.subplot(2,1,1)
		plt.errorbar(np.arange(1,len(ir)+1,1), p21[ir], dp21[ir], fmt='o')
		plt.plot([0, 200], [1, 1], 'r', linewidth=2)
		plt.plot([0, 200], [0, 0], 'k', linewidth=2)
		plt.grid()
		plt.xlim([0, 200])
		plt.ylim([-2,2])
		plt.xticks(np.arange(0,201,20),[])
		plt.ylabel(r'$\hat{a}_{21}$', fontsize=20)

		plt.subplot(2,1,2)
		plt.step(np.arange(1,len(ir)+1,1), rs[ir], 'r', linewidth=2, where='mid')
		plt.step(np.arange(1,len(ir)+1,1), np.abs(p21/dp21)[ir], 'k', linewidth=2, where='mid')
		plt.grid()
		plt.xlim([0, 200])
		plt.ylim([0, 14])
		plt.xticks(np.arange(0,201,20))	
		plt.ylabel(r'distance [$\hat{\sigma}_{21}$]', fontsize=16)
		plt.legend(['rejection significance','consistency with zero'], loc=0, fontsize=10)
		plt.xlabel('number of models')

		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170509/models_significance_jordan.pdf', bbox_inches='tight')
		plt.close()	
		# ------------------------------------------------------









		# ------------------------------------------------
		# Throw away plot, FOR COLORMAP		
		CMAP = cm.gnuplot_r

		XY = [[0,0],[0,0]]
		levels = np.arange(1, np.ceil(max_rs)+0.001, 0.001)  # significances
		IMAGE_MAP = plt.contourf(XY, levels, cmap=CMAP, vmin=np.min(levels), vmax=np.max(levels))
		plt.close()


		# Actual useful plot
		plt.close()
		plt.close()
		plt.close()
		plt.close()
		plt.close()



		plt.close()
		x0 = 0.05
		y0 = 0.05
		dx = 0.85
		dy = 0.85

		f1  = plt.figure(1, figsize=[10,5.5])
		ax1 = f1.add_axes([x0, y0, dx, dy])
		kg  = 0.75
		ax1.plot(fe, 1000*models_all.T, color=[kg,kg,kg])


		for i in range(len(ir)):

			# color range [0,1] maps to significances between 1 and 10
			kc = (rs[ir[ir_sort[i]]]-1)/(max_rs-1)

			if kc>1:
				kc = 1

			ax1.plot(fe, 1000*models_all[ir[ir_sort[i]],:], color=CMAP(kc), linewidth=1.5)
			# print(rs[ir[ir_sort[i]]])



		#cax1 = f1.add_axes([1.3*x0+dx, y0+0.05, 0.02, 0.87*dy])
		cbar = plt.colorbar(IMAGE_MAP, ticks=np.arange(1, np.ceil(max_rs)+1, 1))
		#cbar.ax.set_yticklabels(np.arange(1, np.ceil(max_rs)+1, 1))   # Tick labels on colorbar
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=14)  # Ylabel

		ax1.plot([90, 90], [-300, 100], 'g--',   linewidth=5)
		ax1.plot([190, 190], [-300, 100], 'g--', linewidth=5)

		plt.xlim([40, 202])
		plt.ylim([-300, 100])

		plt.ylabel('temperature [mK]', fontsize=14)
		plt.xlabel('frequency [MHz]', fontsize=14)
		plt.arrow(90,  67,  8, 0, fc='g', ec='g', head_width=10, head_length=5,   linewidth=4, zorder=6)
		plt.arrow(190, 67, -8, 0, fc='g', ec='g', head_width=10, head_length=5,   linewidth=4, zorder=6)
		plt.text(108,60,'EDGES High-Band', fontsize=20, color='g')


		ax12 = ax1.twiny()
		ax12.set_xlabel(r'$z$', fontsize=20)
		z0 = eg.frequency2redshift(40)
		ax12.set_xticks(np.array((np.abs(eg.redshift2frequency(32)-40), np.abs(eg.redshift2frequency(28)-40), np.abs(eg.redshift2frequency(24)-40), np.abs(eg.redshift2frequency(20)-40), np.abs(eg.redshift2frequency(18)-40), np.abs(eg.redshift2frequency(16)-40), np.abs(eg.redshift2frequency(14)-40), np.abs(eg.redshift2frequency(12)-40), np.abs(eg.redshift2frequency(10)-40), np.abs(eg.redshift2frequency(9)-40), np.abs(eg.redshift2frequency(8)-40), np.abs(eg.redshift2frequency(7)-40), np.abs(202-40))))
		ax12.set_xticklabels(['32', '28', '24', '20', '18', '16', '14', '12', '10', '9', '8', '7', '6'])


		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170509/models_rejected_jordan.pdf', bbox_inches='tight')
		plt.close()			









		# -------------------------------------------------

		plt.close()
		plt.close()
		plt.figure(1, figsize=[11, 8])

		MS = 10

		plt.subplot(2,2,1)
		plt.scatter(vC, dv, c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(vC[ir], dv[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		plt.xlim([60, 160])
		plt.ylabel(r'$\Delta\nu$ [MHz]', fontsize=16)


		plt.subplot(2,2,3)
		plt.scatter(vC, -1000*TC, c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(vC[ir], -1000*TC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		plt.xlim([60, 160])
		plt.ylabel(r'$A$ [mK]', fontsize=16)
		plt.xlabel(r'$\nu_r$ [MHz]', fontsize=16)


		plt.subplot(2,2,4)
		plt.scatter(dv, -1000*TC, c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(dv[ir], -1000*TC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		#plt.xlim([60, 160])
		plt.xlabel(r'$\Delta\nu$ [MHz]', fontsize=16)

		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170509/models_rejected_jordan_corr1.pdf', bbox_inches='tight')
		plt.close()			







		# --------------------------------------------------
		plt.close()
		plt.close()
		plt.figure(1, figsize=[7, 5])

		MS = 10
		plt.scatter(np.log10(Tmin), gamma_z, c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(np.log10(Tmin[ir]), gamma_z[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		#plt.xlim([60, 160])
		plt.xlabel(r'$\mathrm{log}_{10}(T_{\mathrm{min}}/K)$', fontsize=16)
		plt.ylabel(r'$\gamma_z$', fontsize=16)

		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170509/models_rejected_jordan_corr2.pdf', bbox_inches='tight')
		plt.close()		







		# --------------------------------------------------
		plt.close()
		plt.close()
		plt.figure(1, figsize=[11, 8])

		MS = 10

		plt.subplot(2,2,1)
		plt.scatter(Z, np.log10(cx), s=MS, c=[kg,kg,kg], edgecolor='none')
		plt.scatter(Z[ir], np.log10(cx[ir]), c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		plt.ylabel(r'$\mathrm{log}_{10}(c_X)$', fontsize=16)
		plt.ylim([38.9, 39.9])
		plt.yticks(np.arange(38.9, 39.91, 0.2))

		plt.subplot(2,2,3)
		plt.scatter(Z, Bx, s=MS, c=[kg,kg,kg], edgecolor='none')
		plt.scatter(Z[ir], Bx[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		#plt.xlim([60, 160])
		plt.xlabel(r'$Z$')
		plt.ylabel(r'$\beta_X$', fontsize=16)

		plt.subplot(2,2,4)
		plt.scatter(np.log10(cx), Bx, c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(np.log10(cx[ir]), Bx[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		plt.xlim([38.9, 39.9])
		plt.xticks(np.arange(38.9, 39.91, 0.2))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		plt.xlabel(r'$\mathrm{log}_{10}(c_X)$', fontsize=16)

		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170509/models_rejected_jordan_corr3.pdf', bbox_inches='tight')
		plt.close()		



		# -------------------------------------------------
		plt.close()
		plt.close()
		plt.figure(1, figsize=[13, 8])

		MS = 10

		plt.subplot(2,2,1)
		plt.scatter(np.log10(N), LW, s=MS, c=[kg,kg,kg], edgecolor='none')
		plt.scatter(np.log10(N[ir]), LW[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		#plt.xlim([60, 160])		
		plt.ylabel(r'$f_{\mathrm{esc,LyW}}$', fontsize=16)		

		plt.subplot(2,2,3)
		plt.scatter(np.log10(N), LC, s=MS, c=[kg,kg,kg], edgecolor='none')
		plt.scatter(np.log10(N[ir]), LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		#plt.xlim([60, 160])			
		plt.ylabel(r'$f_{\mathrm{esc,LyC}}$', fontsize=16)
		plt.xlabel(r'$\mathrm{log}_{10}(N_{\mathrm{HI}})$', fontsize=16)		

		plt.subplot(2,2,4)
		plt.scatter(LW, LC, c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(LW[ir], LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
		#plt.xlim([60, 160])
		plt.xlabel(r'$f_{\mathrm{esc,LyW}}$', fontsize=16)

		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170509/models_rejected_jordan_corr4.pdf', bbox_inches='tight')
		plt.close()



		# --------------------------------------------------
		plt.close()
		plt.close()
		plt.figure(1, figsize=[18, 8])

		MS = 10

		plt.subplot(2,3,1)
		plt.scatter(-1000*TC,     np.log10(N),     c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(-1000*TC[ir], np.log10(N[ir]), c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		plt.ylabel(r'$\mathrm{log}_{10}(N_{\mathrm{HI}})$', fontsize=16)
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)		

		plt.subplot(2,3,2)
		plt.scatter(vC,     np.log10(N),     c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(vC[ir], np.log10(N[ir]), c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		plt.xlim([60, 160])
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)

		plt.subplot(2,3,3)
		plt.scatter(dv, np.log10(N),         c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(dv[ir], np.log10(N[ir]), c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)


		plt.subplot(2,3,4)
		plt.scatter(-1000*TC,     LC,     c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(-1000*TC[ir], LC[ir], c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		plt.ylabel(r'$f_{\mathrm{esc,LyC}}$', fontsize=16)
		plt.xlabel(r'$A$ [mK]', fontsize=16)
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)

		plt.subplot(2,3,5)
		plt.scatter(vC,     LC,     c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(vC[ir], LC[ir], c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		plt.xlabel(r'$\nu_r$ [MHz]', fontsize=16)
		plt.xlim([60, 160])
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)

		plt.subplot(2,3,6)
		plt.scatter(dv,     LC,     c=[kg,kg,kg], s=MS, edgecolor='none')
		plt.scatter(dv[ir], LC[ir], c=rs[ir],     s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs))
		plt.xlabel(r'$\Delta\nu$ [MHz]', fontsize=16)	
		cbar = plt.colorbar(ticks=np.arange(1,np.ceil(max_rs)+1,1))
		cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)

		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170509/models_rejected_jordan_corr5.pdf', bbox_inches='tight')
		plt.close()




		# ---------------------------------------------------
		plt.close()
		plt.close()
		fig=plt.figure(1, figsize=[20, 20])

		cbaxes = fig.add_axes([0.42, 0.75, 0.4, 0.015]) 
		cbar   = plt.colorbar(IMAGE_MAP, ticks=np.arange(1,np.ceil(max_rs)+1,1), cax=cbaxes, orientation="horizontal")
		cbar.ax.set_title(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=18)
		cbar.ax.tick_params(labelsize=18) 

		MS = 10
		plt.subplot(7, 7, 1);  plt.scatter(np.log10(Tmin[ir]), gamma_z[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(3, 5.6, 1), ()); plt.xlim([2.5, 5.7]);plt.yticks(np.arange(-1, 1.1, 0.5));plt.ylim(-1.2, 1.2)
		plt.ylabel(r'$\gamma_z$', fontsize=16)
		plt.subplot(7, 7, 8);  plt.scatter(np.log10(Tmin[ir]), Z[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(3, 5.6, 1), ()); plt.xlim([2.5, 5.7]);plt.yticks(np.arange(0, 0.041, 0.01));plt.ylim(-0.005, 0.045)
		plt.ylabel(r'$Z$')
		plt.subplot(7, 7, 15); plt.scatter(np.log10(Tmin[ir]), np.log10(cx[ir]), c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(3, 5.6, 1), ()); plt.xlim([2.5, 5.7]);plt.yticks(np.arange(39, 39.7, 0.2));plt.ylim(38.9,39.8)
		plt.ylabel(r'$\mathrm{log}_{10}(c_X)$', fontsize=16)
		plt.subplot(7, 7, 22); plt.scatter(np.log10(Tmin[ir]), Bx[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(3, 5.6, 1), ()); plt.xlim([2.5, 5.7]);plt.yticks(np.arange(-1.0, 0.1, 0.2));plt.ylim(-1.1, 0.1)
		plt.ylabel(r'$\beta_X$', fontsize=16)
		plt.subplot(7, 7, 29); plt.scatter(np.log10(Tmin[ir]), np.log10(N[ir]), c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(3, 5.6, 1), ()); plt.xlim([2.5, 5.7]);plt.yticks(np.arange(19, 24.1, 1));plt.ylim(18.5, 24.5)
		plt.ylabel(r'$\mathrm{log}_{10}(N_{\mathrm{HI}})$', fontsize=16)
		plt.subplot(7, 7, 36); plt.scatter(np.log10(Tmin[ir]), LW[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(3, 5.6, 1), ()); plt.xlim([2.5, 5.7]);plt.yticks(np.arange(0.6, 1.1, 0.1));plt.ylim(0.55, 1.05)
		plt.ylabel(r'$f_{\mathrm{esc,LyW}}$', fontsize=16)
		plt.subplot(7, 7, 43); plt.scatter(np.log10(Tmin[ir]), LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(3, 5.6, 1)); plt.xlim([2.5, 5.7]);plt.yticks(np.arange(0.1, 0.51, 0.1));plt.ylim(0.05, 0.55)
		plt.xlabel(r'$\mathrm{log}_{10}(T_{\mathrm{min}}/K)$', fontsize=16)
		plt.ylabel(r'$f_{\mathrm{esc,LyC}}$', fontsize=16)

		plt.subplot(7, 7, 9); plt.scatter(gamma_z[ir], Z[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(-1,1.1, 1), ()); plt.xlim([-1.2, 1.2]);plt.yticks(np.arange(0, 0.041, 0.01),());plt.ylim(-0.005, 0.045)
		plt.subplot(7, 7, 16); plt.scatter(gamma_z[ir], np.log10(cx[ir]), c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(-1,1.1, 1), ()); plt.xlim([-1.2, 1.2]);plt.yticks(np.arange(39, 39.7, 0.2),());plt.ylim(38.9,39.8)
		plt.subplot(7, 7, 23); plt.scatter(gamma_z[ir], Bx[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(-1,1.1, 1), ()); plt.xlim([-1.2, 1.2]);plt.yticks(np.arange(-1.0, 0.1, 0.2),());plt.ylim(-1.1, 0.1)
		plt.subplot(7, 7, 30); plt.scatter(gamma_z[ir], np.log10(N[ir]), c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(-1,1.1, 1), ()); plt.xlim([-1.2, 1.2]);plt.yticks(np.arange(19, 24.1, 1),());plt.ylim(18.5, 24.5)
		plt.subplot(7, 7, 37); plt.scatter(gamma_z[ir], LW[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(-1,1.1, 1), ()); plt.xlim([-1.2, 1.2]);plt.yticks(np.arange(0.6, 1.1, 0.1),());plt.ylim(0.55, 1.05)
		plt.subplot(7, 7, 44); plt.scatter(gamma_z[ir], LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(-1,1.1, 1)); plt.xlim([-1.2, 1.2]);plt.yticks(np.arange(0.1, 0.51, 0.1),());plt.ylim(0.05, 0.55)
		plt.xlabel(r'$\gamma_z$', fontsize=16)

		plt.subplot(7, 7, 17); plt.scatter(Z[ir], np.log10(cx[ir]), c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(0,0.041, 0.02), ()); plt.xlim([-0.003, 0.043]);plt.yticks(np.arange(39, 39.7, 0.2),());plt.ylim(38.9,39.8)
		plt.subplot(7, 7, 24); plt.scatter(Z[ir], Bx[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(0,0.041, 0.02), ()); plt.xlim([-0.003, 0.043]);plt.yticks(np.arange(-1.0, 0.1, 0.2),());plt.ylim(-1.1, 0.1)
		plt.subplot(7, 7, 31); plt.scatter(Z[ir], np.log10(N[ir]), c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(0,0.041, 0.02), ()); plt.xlim([-0.003, 0.043]);plt.yticks(np.arange(19, 24.1, 1),());plt.ylim(18.5, 24.5)
		plt.subplot(7, 7, 38); plt.scatter(Z[ir], LW[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(0,0.041, 0.02), ()); plt.xlim([-0.003, 0.043]);plt.yticks(np.arange(0.6, 1.1, 0.1),());plt.ylim(0.55, 1.05)
		plt.subplot(7, 7, 45); plt.scatter(Z[ir], LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(0,0.041, 0.02)); plt.xlim([-0.003, 0.043]);plt.yticks(np.arange(0.1, 0.51, 0.1),());plt.ylim(0.05, 0.55)		
		plt.xlabel(r'$Z$')

		plt.subplot(7, 7, 25); plt.scatter(np.log10(cx[ir]), Bx[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(39,39.7, 0.3), ()); plt.xlim([38.95, 39.75]);plt.yticks(np.arange(-1.0, 0.1, 0.2),());plt.ylim(-1.1, 0.1)
		plt.subplot(7, 7, 32); plt.scatter(np.log10(cx[ir]), np.log10(N[ir]), c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(39,39.7, 0.3), ()); plt.xlim([38.95, 39.75]);plt.yticks(np.arange(19, 24.1, 1),());plt.ylim(18.5, 24.5)
		plt.subplot(7, 7, 39); plt.scatter(np.log10(cx[ir]), LW[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(39,39.7, 0.3), ()); plt.xlim([38.95, 39.75]);plt.yticks(np.arange(0.6, 1.1, 0.1),());plt.ylim(0.55, 1.05)
		plt.subplot(7, 7, 46); plt.scatter(np.log10(cx[ir]), LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(39,39.7, 0.3)); plt.xlim([38.95, 39.75]);plt.yticks(np.arange(0.1, 0.51, 0.1),());plt.ylim(0.05, 0.55)	
		plt.xlabel(r'$\mathrm{log}_{10}(c_X)$', fontsize=16)

		plt.subplot(7, 7, 33); plt.scatter(Bx[ir], np.log10(N[ir]), c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(-1.0,0.1,0.5), ()); plt.xlim([-1.1, 0.1]);plt.yticks(np.arange(19, 24.1, 1),());plt.ylim(18.5, 24.5)
		plt.subplot(7, 7, 40); plt.scatter(Bx[ir], LW[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(-1.0,0.1,0.5), ()); plt.xlim([-1.1, 0.1]);plt.yticks(np.arange(0.6, 1.1, 0.1),());plt.ylim(0.55, 1.05)
		plt.subplot(7, 7, 47); plt.scatter(Bx[ir], LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(-1.0,0.1,0.5)); plt.xlim([-1.1, 0.1]);plt.yticks(np.arange(0.1, 0.51, 0.1),());plt.ylim(0.05, 0.55)		
		plt.xlabel(r'$\beta_X$', fontsize=16)

		plt.subplot(7, 7, 41); plt.scatter(np.log10(N[ir]), LW[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(19,24.1,1), ()); plt.xlim([18.5, 24.5]);plt.yticks(np.arange(0.6, 1.1, 0.1),());plt.ylim(0.55, 1.05)
		plt.subplot(7, 7, 48); plt.scatter(np.log10(N[ir]), LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(19,24.1,1)); plt.xlim([18.5, 24.5]);plt.yticks(np.arange(0.1, 0.51, 0.1),());plt.ylim(0.05, 0.55)	
		plt.xlabel(r'$\mathrm{log}_{10}(N_{\mathrm{HI}})$', fontsize=16)

		plt.subplot(7, 7, 49); plt.scatter(LW[ir], LC[ir], c=rs[ir], s=MS, edgecolor='none', cmap=CMAP, vmin=1, vmax=np.ceil(max_rs));plt.xticks(np.arange(0.6,1.01,0.2)); plt.xlim([0.57, 1.03]);plt.yticks(np.arange(0.1, 0.51, 0.1),());plt.ylim(0.05, 0.55)
		plt.xlabel(r'$f_{\mathrm{esc,LyW}}$', fontsize=16)














		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170509/models_rejected_jordan_corr6.pdf', bbox_inches='tight')
		plt.close()




	return 0




















def plots_for_high_band_results_paper2_v2():

	"""

	2017-07-30



	# Phenom:    phenomenological parameters
	# Physical:  physical parameters
	# a21:       a21 and da21

	# Output
	# -------------------------------------
	model_all[model_number, :]     = mnew
	Ts_all[model_number, :]        = Tsnew
	xi_all[model_number, :]        = xinew
	sfrd_all[model_number, :]      = sfrdnew

	xi_long_all[model_number, :]   = xi_long

	phenom_all[model_number, 0]    = TC[model_number]
	phenom_all[model_number, 1]    = zC[model_number]
	phenom_all[model_number, 2]    = vC[model_number]
	phenom_all[model_number, 3]    = TD[model_number]
	phenom_all[model_number, 4]    = zD[model_number]
	phenom_all[model_number, 5]    = vD[model_number]
	phenom_all[model_number, 6]    = FWHM_z
	phenom_all[model_number, 7]    = FWHM_v

	physical_all[model_number, 0]  = sfrd_slope[model_number]
	physical_all[model_number, 1]  = tau_e[model_number]
	physical_all[model_number, 2]  = Z[model_number]
	physical_all[model_number, 3]  = LC[model_number]
	physical_all[model_number, 4]  = cx[model_number]
	physical_all[model_number, 5]  = Bx[model_number]
	physical_all[model_number, 6]  = N[model_number]
	physical_all[model_number, 7]  = gamma_z[model_number]
	physical_all[model_number, 8]  = Tmin[model_number]
	physical_all[model_number, 9]  = par0[model_number]
	physical_all[model_number, 10] = par1[model_number]

	a21_all[model_number, 0]       = a21
	a21_all[model_number, 1]       = d21


	"""



	f, models, Ts, xi, sfrd,  z_long, f_long, xi_long, phe, phy, a21 = eg.read_LF_least_squares_v2('results_LF_all_models_20170730.hdf5')



	TC = phe[:,0]
	zC = phe[:,1]
	dC = phe[:,6] 



	te         = phy[:, 1]

	cx         = phy[:, 4]
	Z          = phy[:, 2]
	Bx         = phy[:, 5]
	Lx_SFR     = cx * (Z/0.02)**(Bx)
	lLx        = np.log10(lLx)
	sfrd_slope = phy[:, 0]


	rs = (1-a21[:,0])/a21[:,1]
	#rs[rs<3] = np.nan
	#rs[np.abs(a21[:,0]) >= 0.5] = np.nan










	# ----------------------------------------------

	plt.figure(1)

	plt.subplot(3,3,1)
	plt.scatter(te, zC, c=rs, s=5, marker='o', linewidth=0, vmin=0, vmax=12)
	cbar = plt.colorbar(ticks=np.arange(0,13,2))
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=12)
	#plt.xlabel(r'$z_C$', fontsize=16)
	plt.ylabel(r'$z_C$', fontsize=18)
	plt.xlim([0.03, 0.1])
	plt.ylim([4, 20])
	plt.grid()

	plt.subplot(3,3,4)
	plt.scatter(te, dC, c=rs, s=5, marker='o', linewidth=0, vmin=0, vmax=12)
	cbar = plt.colorbar(ticks=np.arange(0,13,2))
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=12)
	#plt.xlabel(r'$z_C$', fontsize=16)
	plt.ylabel(r'FWHM', fontsize=18)
	plt.xlim([0.03, 0.1])
	plt.ylim([2, 16])
	plt.grid()

	plt.subplot(3,3,7)
	plt.scatter(te, 1000*TC, c=rs, s=5, marker='o', linewidth=0, vmin=0, vmax=12)
	cbar = plt.colorbar(ticks=np.arange(0,13,2))
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=12)
	#plt.xlabel(r'$z_C$', fontsize=16)
	plt.xlabel(r'$\tau_e$', fontsize=16)
	plt.ylabel(r'$T_C$ [mK]', fontsize=16)
	plt.xlim([0.03, 0.1])
	plt.ylim([-400, -50])
	plt.grid()



	plt.subplot(3,3,5)
	plt.scatter(zC, dC, c=rs, s=5, marker='o', linewidth=0, vmin=0, vmax=12)
	cbar = plt.colorbar(ticks=np.arange(0,13,2))
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=12)
	#plt.xlabel(r'$d_C$', fontsize=16)
	#plt.ylabel(r'$\tau_e$', fontsize=16)
	plt.xlim([4, 20])
	plt.ylim([2, 16])
	plt.grid()

	plt.subplot(3,3,8)
	plt.scatter(zC, 1000*TC, c=rs, s=5, marker='o', linewidth=0, vmin=0, vmax=12)
	cbar = plt.colorbar(ticks=np.arange(0,13,2))
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=12)
	#plt.xlabel(r'$z_C$', fontsize=16)
	plt.xlabel(r'$z_C$', fontsize=16)
	plt.xlim([4, 20])
	plt.ylim([-400, -50])
	plt.grid()	



	plt.subplot(3,3,9)
	plt.scatter(dC, 1000*TC, c=rs, s=5, marker='o', linewidth=0, vmin=0, vmax=12)
	cbar = plt.colorbar(ticks=np.arange(0,13,2))
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=12)
	plt.xlabel(r'FWHM', fontsize=16)
	#plt.ylabel(r'$\tau_e$', fontsize=16)
	plt.xlim([2, 16])
	plt.ylim([-400, -50])
	plt.grid()	








	plt.figure(2)

	plt.subplot(2,2,1)
	te0=0.0
	plt.scatter(sfrd_slope[te>te0], lLx[te>te0], c=rs[te>te0], marker='o', s=5, linewidth=0, vmin=0, vmax=12)
	plt.xlim([-14, -2])
	#plt.xlabel('sfrd slope')
	plt.ylabel('log(Lx)')
	plt.title(r'$\tau_e>0$', fontsize=18)
	cbar = plt.colorbar()
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
	plt.grid()


	plt.subplot(2,2,2)
	te0=0.06
	plt.scatter(sfrd_slope[te>te0], lLx[te>te0], c=rs[te>te0], marker='o', s=5, linewidth=0, vmin=0, vmax=12)
	plt.xlim([-14, -2])
	#plt.xlabel('sfrd slope')
	plt.title(r'$\tau_e>0.06$', fontsize=18)
	cbar = plt.colorbar()
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
	plt.grid()


	plt.subplot(2,2,3)
	te0=0.07
	plt.scatter(sfrd_slope[te>te0], lLx[te>te0], c=rs[te>te0], marker='o', s=5, linewidth=0, vmin=0, vmax=12)
	plt.xlim([-14, -2])
	plt.xlabel('sfrd slope')
	plt.ylabel('log(Lx)')
	plt.title(r'$\tau_e>0.07$', fontsize=18)
	cbar = plt.colorbar()
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
	plt.grid()


	plt.subplot(2,2,4)
	te0=0.08
	plt.scatter(sfrd_slope[te>te0], lLx[te>te0], c=rs[te>te0], marker='o', s=5, linewidth=0, vmin=0, vmax=12)
	plt.xlim([-14, -2])
	plt.xlabel('sfrd slope')
	plt.title(r'$\tau_e>0.08$', fontsize=18)
	cbar = plt.colorbar()
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)
	plt.grid()











	#ph_sel = physical[rs >= 2, :]
	#Lx_SFR_sel = Lx_SFR[rs >= 2]
	#rs_sel = rs[rs >= 2]


	#XT_raw  = np.vstack((ph_sel.T,  Lx_SFR_sel, rs_sel))
	#XT_raw2 = (XT_raw.T - np.mean(XT_raw, axis=1)).T                  # 64,000 x 13
	#XT      = XT_raw2.T # / np.std(XT_raw2, axis=1)


	#X  = XT.T   # 13 x 64,000
	#CX = (1/N) * np.dot(X, X.T)	



	##N = len(X[0,:])   # 64,000
	##Y = (1/np.sqrt(N)) * X.T	
	##U, s, V = np.linalg.svd(Y[0:1000,:])



	#w, v    = np.linalg.eig(CX)
	#eigvec  = v.T

	#index_w = np.argsort(-w)  # index in descending order

	#w_org      = w[index_w]
	#eigvec_org = eigvec[index_w,:]


	## 4.147, 4.148
	#CY = eigvec_org*CX*np.linalg.inv(eigvec_org)
	#Y  = np.dot(eigvec_org,X)



	#cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=10)


	#x=0; y=7; plt.scatter(physical[:,x], physical[:,y],c=(1-a21[:,0])/a21[:,1], linewidths=0, marker='.', vmin=2, vmax=10);plt.colorbar()

	#index = np.arange(0, 100000)
	#index2 = index[xi_long[:,100]>=0.99]

	#x=0; y=6; plt.scatter(physical[index2,x], physical[index2,y],c=(1-a21[index2,0])/a21[index2,1], linewidths=0, marker='.', vmin=2, vmax=3);plt.colorbar()







	return 0



























def plots_for_high_band_results_paper3(figure1and2='no'):
	"""
	PAPER with Anastasia's models
	Last modification: 2017-05-09

	"""

	if figure1and2 == 'yes':
		fe    = np.arange(40, 203, 1)		
		fb, model, p21, dp21 = eg.read_anastasia_least_squares('results_anastasia_all_models_20170509.hdf5')

		# Rejection significance for all models (including those that are not rejected)
		rs = (1-p21)/dp21


		# Finding rejected models based on rejection conditions
		Tref = 1
		ir = []
		models_all = np.zeros((len(p21), len(fe)))
		for i in range(len(p21)):
			m, ao = eg.model_eor_anastasia(i, fe, interpolation_kind='linear')
			models_all[i,:] = m

			if (np.abs(p21[i])<(Tref/2)) and (rs[i]>=1):
				ir.append(i)  # index of rejected models

		ir_sort = np.argsort(rs[ir])
		max_rs  = np.max(rs[ir])



	# -----------------------------------------------------
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()

	plt.figure(1, figsize=[14,6])
	plt.subplot(2,1,1)
	plt.errorbar(np.arange(1,len(ir)+1,1), p21[ir], dp21[ir], fmt='o')
	plt.plot([0, 80], [1, 1], 'r', linewidth=2)
	plt.plot([0, 80], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.xlim([0, 80])
	plt.ylim([-2,2])
	plt.xticks(np.arange(0,81,10),[])
	plt.ylabel(r'$\hat{a}_{21}$', fontsize=20)

	plt.subplot(2,1,2)
	plt.step(np.arange(1,len(ir)+1,1), rs[ir], 'r', linewidth=2, where='mid')
	plt.step(np.arange(1,len(ir)+1,1), np.abs(p21/dp21)[ir], 'k', linewidth=2, where='mid')
	plt.grid()
	plt.xlim([0, 80])
	plt.ylim([0, 18])
	plt.xticks(np.arange(0,81,10))	
	plt.ylabel(r'distance [$\hat{\sigma}_{21}$]', fontsize=16)
	plt.legend(['rejection significance','consistency with zero'], loc=0, fontsize=10)
	plt.xlabel('number of models')


	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170509/models_significance_anastasia.pdf', bbox_inches='tight')
	plt.close()	
	# ------------------------------------------------------









	# ------------------------------------------------
	# Throw away plot, FOR COLORMAP

	CMAP = cm.gnuplot_r


	# Using contourf to provide my colorbar info, then clearing the figure
	XY        = [[0,0],[0,0]]
	levels = np.arange(1, np.ceil(max_rs)+0.001, 0.001)  # significances between 1 and 16, in steps of 0.01
	IMAGE_MAP = plt.contourf(XY, levels, cmap=CMAP)
	plt.close()



	# ------------------------------------------------
	plt.close()
	x0 = 0.05
	y0 = 0.05
	dx = 0.85
	dy = 0.85

	f1  = plt.figure(1, figsize=[10,5.5])
	ax1 = f1.add_axes([x0, y0, dx, dy])

	cg = 0.75
	ax1.plot(fe, 1000*models_all.T,       color=[cg, cg, cg])

	for i in range(len(ir)):

		# color range [0,1] maps to significances between 1 and 16
		kc = (rs[ir[ir_sort[i]]]-1)/(max_rs-1)
		if kc>1:
			kc = 1

		ax1.plot(fe, 1000*models_all[ir[ir_sort[i]],:], color=CMAP(kc), linewidth=1.5)


	cbar = plt.colorbar(IMAGE_MAP, ticks=np.arange(1, np.ceil(max_rs)+1, 1))
	#cbar.ax.set_yticklabels(np.arange(1, np.ceil(max_rs)+1, 1))   # Tick labels on colorbar
	cbar.ax.set_ylabel(r'rejection significance [$\hat{\sigma}_{21}$]', fontsize=14)  # Ylabel

	ax1.plot([90, 90], [-300, 100], 'g--',   linewidth=5)
	ax1.plot([190, 190], [-300, 100], 'g--', linewidth=5)

	plt.xlim([40, 202])
	plt.ylim([-300, 100])

	plt.ylabel('temperature [mK]', fontsize=14)
	plt.xlabel('frequency [MHz]', fontsize=14)
	plt.arrow(90,  67,  8, 0, fc='g', ec='g', head_width=10, head_length=5,   linewidth=4, zorder=6)
	plt.arrow(190, 67, -8, 0, fc='g', ec='g', head_width=10, head_length=5,   linewidth=4, zorder=6)
	plt.text(108,60,'EDGES High-Band', fontsize=20, color='g')


	ax12 = ax1.twiny()
	ax12.set_xlabel(r'$z$', fontsize=20)
	z0 = eg.frequency2redshift(40)
	ax12.set_xticks(np.array((np.abs(eg.redshift2frequency(32)-40), np.abs(eg.redshift2frequency(28)-40), np.abs(eg.redshift2frequency(24)-40), np.abs(eg.redshift2frequency(20)-40), np.abs(eg.redshift2frequency(18)-40), np.abs(eg.redshift2frequency(16)-40), np.abs(eg.redshift2frequency(14)-40), np.abs(eg.redshift2frequency(12)-40), np.abs(eg.redshift2frequency(10)-40), np.abs(eg.redshift2frequency(9)-40), np.abs(eg.redshift2frequency(8)-40), np.abs(eg.redshift2frequency(7)-40), np.abs(202-40))))
	ax12.set_xticklabels(['32', '28', '24', '20', '18', '16', '14', '12', '10', '9', '8', '7', '6'])


	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170509/models_rejected_anastasia.pdf', bbox_inches='tight')
	plt.close()	
	# ---------------------------------------------------


	# Saving number and significance of rejected models
	out_T = np.vstack((ir, rs[ir]))
	out   = out_T.T
	np.savetxt(home_folder + '/DATA/EDGES/results/high_band/products/model_rejection/least_squares_anastasia/rejected_model_number_and_significance.txt', out, fmt='%d')


	return rs, ir

















def plot_residuals_low_band2_2017():

	# Nominal dataset
	f, t1_all, w1_all, d1_all, at1_all, ah1_all, rct1_all, rmt1_all  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_ID_20170508_run1.hdf5')
	f, t2_all, w2_all, d2_all, at2_all, ah2_all, rct2_all, rmt2_all  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_ID_20170508_run2.hdf5')
	f, t3_all, w3_all, d3_all, at3_all, ah3_all, rct3_all, rmt3_all  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_ID_20170508_run3.hdf5')
	f, t4_all, w4_all, d4_all, at4_all, ah4_all, rct4_all, rmt4_all  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_ID_20170508_run4.hdf5')

	f, t5_all, w5_all, d5_all, at5_all, ah5_all, rct5_all, rmt5_all  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_ID_20170509_run1.hdf5')
	f, t6_all, w6_all, d6_all, at6_all, ah6_all, rct6_all, rmt6_all  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_ID_20170509_run2.hdf5')



	index1 = [0,1,2,3,4,6,7,11,12,13,14,15,16,17,18,19,20,21,22,23]
	index2 = [3,4,5,13,14,15,17,18,19,21,25,26,27,28,30,39,40,41,42]




	# Eliminating day 103
	# Run1
	t1 = t1_all
	w1 = w1_all
	d1 = d1_all

	# Run2
	t2 = t2_all
	w2 = w2_all
	d2 = d2_all

	# Run3
	t3 = t3_all
	w3 = w3_all
	d3 = d3_all

	# Run4
	t4 = t4_all
	w4 = w4_all
	d4 = d4_all

	# Run5
	t5 = t5_all[index2,:]
	w5 = w5_all[index2,:]
	d5 = d5_all[index2,:]

	# Run6
	t6 = t6_all[index2,:]
	w6 = w6_all[index2,:]
	d6 = d6_all[index2,:]




	# Computing residuals for averages
	ffl = 65
	ffh = 95
	Nfg = 4
	fo, ro1, wo1, rms1, rms110 = eg.data_analysis_residuals_array(f, t1, w1, flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')
	fo, ro2, wo2, rms2, rms110 = eg.data_analysis_residuals_array(f, t2, w2, flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')
	fo, ro3, wo3, rms3, rms110 = eg.data_analysis_residuals_array(f, t3, w3, flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')
	fo, ro4, wo4, rms4, rms110 = eg.data_analysis_residuals_array(f, t4, w4, flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')
	fo, ro5, wo5, rms5, rms110 = eg.data_analysis_residuals_array(f, t5, w5, flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')
	fo, ro6, wo6, rms6, rms110 = eg.data_analysis_residuals_array(f, t6, w6, flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')


	# Plot of residuals
	plt.close()
	plt.close()	
	o = eg.plot_spectra_residuals(fo, ro1, wo1, 'season', d1[:,1], K=2, flow_lim=48, fhigh_lim=110, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100, fontsize=10, size_x_column=7, size_y=10, NSC=25, y_label=' ' + 'day of year [2 K per division]', plot_name='daily_residuals_low_band2_r1')

	o = eg.plot_spectra_residuals(fo, ro2, wo2, 'season', d2[:,1], K=2, flow_lim=48, fhigh_lim=110, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100, fontsize=10, size_x_column=7, size_y=10, NSC=25, y_label=' ' + 'day of year [2 K per division]', plot_name='daily_residuals_low_band2_r2')

	o = eg.plot_spectra_residuals(fo, ro3, wo3, 'season', d3[:,1], K=2, flow_lim=48, fhigh_lim=110, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100, fontsize=10, size_x_column=7, size_y=10, NSC=25, y_label=' ' + 'day of year [2 K per division]', plot_name='daily_residuals_low_band2_r3')

	o = eg.plot_spectra_residuals(fo, ro4, wo4, 'season', d4[:,1], K=2, flow_lim=48, fhigh_lim=110, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100, fontsize=10, size_x_column=7, size_y=10, NSC=25, y_label=' ' + 'day of year [2 K per division]', plot_name='daily_residuals_low_band2_r4')

	o = eg.plot_spectra_residuals(fo, ro5, wo5, 'season', d5[:,1], K=2, flow_lim=48, fhigh_lim=110, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100, fontsize=10, size_x_column=7, size_y=10, NSC=35, y_label=' ' + 'day of year [2 K per division]', plot_name='daily_residuals_low_band2_r5')

	o = eg.plot_spectra_residuals(fo, ro6, wo6, 'season', d6[:,1], K=2, flow_lim=48, fhigh_lim=110, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100, fontsize=10, size_x_column=7, size_y=10, NSC=35, y_label=' ' + 'day of year [2 K per division]', plot_name='daily_residuals_low_band2_r6')






	avt1, avw1 = eg.spectral_averaging(t1, w1)
	avt2, avw2 = eg.spectral_averaging(t2, w2)
	avt3, avw3 = eg.spectral_averaging(t3, w3)
	avt4, avw4 = eg.spectral_averaging(t4, w4)
	avt5, avw5 = eg.spectral_averaging(t5, w5)
	avt6, avw6 = eg.spectral_averaging(t6, w6)


	#ffl = 61
	#ffh = 99
	#Nfg = 4
	fu1, ru1, wu1, xx1, xx2 = eg.data_analysis_residuals_array(f, avt1.reshape(1,-1), avw1.reshape(1,-1), flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')
	fu2, ru2, wu2, xx1, xx2 = eg.data_analysis_residuals_array(f, avt2.reshape(1,-1), avw2.reshape(1,-1), flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')
	fu3, ru3, wu3, xx1, xx2 = eg.data_analysis_residuals_array(f, avt3.reshape(1,-1), avw3.reshape(1,-1), flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')
	fu4, ru4, wu4, xx1, xx2 = eg.data_analysis_residuals_array(f, avt4.reshape(1,-1), avw4.reshape(1,-1), flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')	
	fu5, ru5, wu5, xx1, xx2 = eg.data_analysis_residuals_array(f, avt5.reshape(1,-1), avw5.reshape(1,-1), flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')
	fu6, ru6, wu6, xx1, xx2 = eg.data_analysis_residuals_array(f, avt6.reshape(1,-1), avw6.reshape(1,-1), flow=ffl, fhigh=ffh, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')


	plt.close()
	plt.figure(1)

	plt.subplot(6,1,1)
	plt.plot(fu1[wu1>0], 1000*ru1[wu1>0], 'b')
	plt.xlim([50,100])
	plt.ylim([-700, 700])
	plt.grid()
	plt.ylabel('temperature [mK]')
	#plt.title('2016-260 to 2016-315')
	plt.xticks(np.arange(50,101,10), [])

	plt.subplot(6,1,2)
	plt.plot(fu3[wu3>0], 1000*ru3[wu3>0], 'b')
	plt.xlim([50,100])
	plt.ylim([-700, 700])
	plt.grid()
	plt.ylabel('temperature [mK]')
	#plt.title('2016-357 to 2017-88')
	plt.xticks(np.arange(50,101,10), [])

	plt.subplot(6,1,3)
	plt.plot(fu2[wu2>0], 1000*ru2[wu2>0], 'b')
	plt.xlim([50,100])
	plt.ylim([-700, 700])
	plt.grid()
	plt.ylabel('temperature [mK]')
	#plt.title('2016-316 to 2016-356')
	plt.xticks(np.arange(50,101,10), [])

	plt.subplot(6,1,4)
	plt.plot(fu4[wu4>0], 1000*ru4[wu4>0], 'b')
	plt.xlim([50,100])
	plt.ylim([-700, 700])
	plt.grid()
	plt.ylabel('temperature [mK]')
	#plt.title('2016-357 to 2017-88')

	plt.subplot(6,1,5)
	plt.plot(fu5[wu5>0], 1000*ru5[wu5>0], 'b')
	plt.xlim([50,100])
	plt.ylim([-700, 700])
	plt.grid()
	plt.ylabel('temperature [mK]')
	#plt.title('2016-316 to 2016-356')
	plt.xticks(np.arange(50,101,10), [])

	plt.subplot(6,1,6)
	plt.plot(fu6[wu6>0], 1000*ru6[wu6>0], 'b')
	plt.xlim([50,100])
	plt.ylim([-700, 700])
	plt.grid()
	plt.ylabel('temperature [mK]')
	#plt.title('2016-357 to 2017-88')




	plt.figure(2)
	plt.plot(fu1[wu1>0], 1000*(ru1[wu1>0]-ru3[wu1>0]))
	plt.plot(fu2[wu2>0], 1000*(ru2[wu2>0]-ru4[wu2>0]))



	return 0













def testlb():
	f, t4_all, w4_all, d4_all, at4_all, ah4_all, rct4_all, rmt4_all  = eg.level3_read('/home/ramo7131/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_ID_20170509_run1.hdf5')


	# Run4
	t4 = t4_all[d4_all[:,1]!=103,:]
	w4 = w4_all[d4_all[:,1]!=103,:]
	d4 = d4_all[d4_all[:,1]!=103,:]




	# Computing residuals for averages
	ff_low  = 60
	ff_high = 97
	Nfg     = 5
	fo, ro4, wo4, rms4, rms110 = eg.data_analysis_residuals_array(f, t4, w4, flow=ff_low, fhigh=ff_high, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')



	o = eg.plot_spectra_residuals(fo, ro4, wo4, 'season', d4[:,1], K=2, flow_lim=48, fhigh_lim=110, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100, fontsize=10, size_x_column=7, size_y=10, NSC=25, y_label=' ' + 'day of year [2 K per division]', plot_name='daily_residuals_low_band2_r4')



	i1 = 0
	i2 = -1
	i3 = 0
	i4 = -1
	avt4, avw4 = eg.spectral_averaging(t4[i1:i2,:], w4[i1:i2,:])	


	fu4, ru4, wu4, xx1, xx2 = eg.data_analysis_residuals_array(f, avt4.reshape(1,-1), avw4.reshape(1,-1), flow=ff_low, fhigh=ff_high, model_type='EDGES_polynomial', fnorm=75, nfg=Nfg, binning='yes', nsamples=64, rfi_flagging='yes')



	plt.close()
	plt.close()
	plt.figure(1)
	#plt.subplot(6,1,4)
	plt.plot(fu4[wu4>0], 1000*ru4[wu4>0], 'b')
	plt.xlim([50,100])
	plt.ylim([-700, 700])
	plt.grid()
	plt.ylabel('temperature [mK]')	



	return fo, ro4, wo4





def plots_high_band_MC_2sigma_limits_tanh():

	#for i in range(100):		
		#print(i+1)
		#Tref, zr, dz, sm, p21, dp21, s1, s2 = eg.data_analysis_cube_to_limits('high_band', 'results_paper_1', 'rejection_results_tanh_MC'+str(i+1), Tref = 0.028, save='yes', ww=0, fg=0)


	for i in range(100):
		Tref, zr, dz, sm, p21, dp21, s1, s2 = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_tanh_MC' + str(i+1) + '_p0.028.hdf5')
		if i == 0:
			s1_all = np.zeros((100, len(zr)))
			s2_all = np.zeros((100, len(zr)))

		print(i+1)

		s1_all[i,:] = s1
		s2_all[i,:] = s2

	return zr, s1_all, s2_all





def plots_high_band_MC_2sigma_limits_gaussian():

	#for i in range(100):		
		#print(i+1)
		#Tref, zr, dz, sm, p21, dp21, s1, s2 = eg.data_analysis_cube_to_limits('high_band', 'results_paper_1', 'rejection_results_gaussian_MC'+str(i+1), Tref = -0.025, save='yes', ww=0, fg=0)


	for i in range(100):
		Tref, zr, dz, sm, p21, dp21, s1, s2 = eg.read_least_squares_limits('high_band', 'results_paper_1/limits', 'limits_rejection_results_gaussian_MC' + str(i+1) + '_m0.025.hdf5')
		if i == 0:
			s1_all = np.zeros((100, len(zr)))
			s2_all = np.zeros((100, len(zr)))

		print(i+1)

		s1_all[i,:] = s1
		s2_all[i,:] = s2


	return zr, s1_all, s2_all

















def plots_low_band1_switch_s_parameters():

	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170623/'



	ff1, il1, ih1 = eg.frequency_edges(50, 100)
	ff2, il2, ih2 = eg.frequency_edges(40, 120)

	f1 = ff1[il1:ih1]
	f2 = ff2[il2:ih2]

	d1 = eg.low_band_switch_correction(np.ones(len(f1)), 25, f_in = f1)
	d2 = eg.low_band1_switch_correction_2017_05_25C_CHANGES_IN_LOAD(np.ones(len(f2)), f_in = f2)



	plt.close()
	plt.close()
	plt.figure(num=1, figsize=(16, 12))

	plt.subplot(2,3,1)
	plt.plot(f2, 20*np.log10(np.abs(d2[1])), 'r', linewidth=2)
	plt.plot(f1, 20*np.log10(np.abs(d1[1])), 'b', linewidth=2)
	plt.xlim([40, 120])
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.title('S11')

	plt.subplot(2,3,4)
	plt.plot(f2, (180/np.pi)*np.unwrap(np.angle(d2[1])), 'r', linewidth=2)
	plt.plot(f1, (180/np.pi)*np.unwrap(np.angle(d1[1])), 'b', linewidth=2)
	plt.xlim([40, 120])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('phase [deg]')	


	plt.subplot(2,3,2)
	plt.plot(f2, 20*np.log10(np.abs(d2[2])), 'r', linewidth=2)
	plt.plot(f1, 20*np.log10(np.abs(d1[2])), 'b', linewidth=2)
	plt.xlim([40, 120])
	plt.grid()
	plt.title('S12S21')

	plt.subplot(2,3,5)
	plt.plot(f2, (180/np.pi)*np.unwrap(np.angle(d2[2])), 'r', linewidth=2)
	plt.plot(f1, (180/np.pi)*np.unwrap(np.angle(d1[2])), 'b', linewidth=2)
	plt.xlim([40, 120])
	plt.grid()
	plt.xlabel('frequency [MHz]')	


	plt.subplot(2,3,3)
	plt.plot(f1, 20*np.log10(np.abs(d1[3])), 'b', linewidth=2)
	plt.plot(f2, 20*np.log10(np.abs(d2[3])), 'r', linewidth=2)
	plt.plot(f1, 20*np.log10(np.abs(d1[3])), 'b', linewidth=2)
	plt.xlim([40, 120])
	plt.grid()
	plt.title('S22')
	plt.legend(['2015','2017'], loc=0)


	plt.subplot(2,3,6)
	plt.plot(f2, (180/np.pi)*np.unwrap(np.angle(d2[3])), 'r', linewidth=2)
	plt.plot(f1, (180/np.pi)*np.unwrap(np.angle(d1[3])), 'b', linewidth=2)
	plt.xlim([40, 120])
	plt.grid()
	plt.xlabel('frequency [MHz]')		

	plt.savefig(path_plot_save + 's_parameters_direct_comparison_cl2_50.05.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	




	plt.close()
	plt.close()
	plt.figure(num=1, figsize=(16, 12))
	ff1, il1, ih1 = eg.frequency_edges(50, 100)
	ff2, il2, ih2 = eg.frequency_edges(50, 100)

	f1 = ff1[il1:ih1]
	f2 = ff2[il2:ih2]

	d1 = eg.low_band_switch_correction(np.ones(len(f1)), 25, f_in = f1)
	d2 = eg.low_band1_switch_correction_2017_05_25C_CHANGES_IN_LOAD(np.ones(len(f2)), f_in = f2)



	plt.subplot(2,3,1)
	plt.plot(f2, 20*np.log10(np.abs(d2[1])) - 20*np.log10(np.abs(d1[1])), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.5, 0.5])
	plt.grid()
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.title('S11')

	plt.subplot(2,3,4)
	plt.plot(f2, (180/np.pi)*np.unwrap(np.angle(d2[1])) - (180/np.pi)*np.unwrap(np.angle(d1[1])), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-5, 5])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase [deg]')	


	plt.subplot(2,3,2)
	plt.plot(f2, 20*np.log10(np.abs(d2[2])) - 20*np.log10(np.abs(d1[2])), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.0005, 0.0005])
	plt.grid()
	plt.title('S12S21')

	plt.subplot(2,3,5)
	plt.plot(f2, (180/np.pi)*np.unwrap(np.angle(d2[2])) - (180/np.pi)*np.unwrap(np.angle(d1[2])), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.02, 0.02])
	plt.grid()
	plt.xlabel('frequency [MHz]')	


	plt.subplot(2,3,3)
	plt.plot(f2, 20*np.log10(np.abs(d2[3])) - 20*np.log10(np.abs(d1[3])), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.3, 0.3])
	plt.grid()
	plt.title('S22')


	plt.subplot(2,3,6)
	plt.plot(f2, (180/np.pi)*np.unwrap(np.angle(d2[3])) - (180/np.pi)*np.unwrap(np.angle(d1[3])), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-2, 2])
	plt.grid()
	plt.xlabel('frequency [MHz]')		


	plt.savefig(path_plot_save + 's_parameters_delta_cl2_50.05.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	








	plt.close()
	plt.close()
	plt.figure(num=1, figsize=(22, 16))	
	ff, il, ih = eg.frequency_edges(50, 100)
	fe = ff[il:ih]



	out = eg.models_calibration_s11('low_band_2015', 'nominal', 25, fe)
	r_amb  = out[1,:]
	r_open = out[3,:]
	r_sim2 = out[9,:]

	r_ant = eg.models_antenna_s11('low_band_2015', 'blade', fe, antenna_s11_day=93, model_type='polynomial')



	r_amb_unc  = rc.gamma_shifted(d1[1],d1[2],d1[3], r_amb)
	r_open_unc = rc.gamma_shifted(d1[1],d1[2],d1[3], r_open)
	r_sim2_unc = rc.gamma_shifted(d1[1],d1[2],d1[3], r_sim2)
	r_ant_unc  = rc.gamma_shifted(d1[1],d1[2],d1[3], r_ant)

	r_amb_cal  = rc.gamma_de_embed(d2[1],d2[2],d2[3], r_amb_unc)
	r_open_cal = rc.gamma_de_embed(d2[1],d2[2],d2[3], r_open_unc)
	r_sim2_cal = rc.gamma_de_embed(d2[1],d2[2],d2[3], r_sim2_unc)
	r_ant_cal  = rc.gamma_de_embed(d2[1],d2[2],d2[3], r_ant_unc)


	plt.subplot(2,4,1)
	plt.plot(fe, 20*np.log10(np.abs(r_amb_cal)) - 20*np.log10(np.abs(r_amb)), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.5, 0.5])
	plt.grid()
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.title('Ambient Load')

	plt.subplot(2,4,5)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(r_amb_cal)) - (180/np.pi)*np.unwrap(np.angle(r_amb)), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-3, 3])
	plt.grid()
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')





	plt.subplot(2,4,2)
	plt.plot(fe, 20*np.log10(np.abs(r_open_cal)) - 20*np.log10(np.abs(r_open)), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.004, 0.004])
	plt.grid()
	#plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.title('Open Cable')

	plt.subplot(2,4,6)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(r_open_cal)) - (180/np.pi)*np.unwrap(np.angle(r_open)), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.1, 0.1])
	plt.grid()
	#plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')



	plt.subplot(2,4,3)
	plt.plot(fe, 20*np.log10(np.abs(r_sim2_cal)) - 20*np.log10(np.abs(r_sim2)), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.04, 0.04])
	plt.grid()
	#plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.title('Ant Sim2')

	plt.subplot(2,4,7)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(r_sim2_cal)) - (180/np.pi)*np.unwrap(np.angle(r_sim2)), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.4, 0.4])
	plt.grid()
	#plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')




	plt.subplot(2,4,4)
	plt.plot(fe, 20*np.log10(np.abs(r_ant_cal)) - 20*np.log10(np.abs(r_ant)), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.04, 0.04])
	plt.grid()
	#plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.title('Antenna')

	plt.subplot(2,4,8)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(r_ant_cal)) - (180/np.pi)*np.unwrap(np.angle(r_ant)), 'b', linewidth=2)
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.4, 0.4])
	plt.grid()
	#plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')


	plt.savefig(path_plot_save + 'reflection_error_cl2_50.05.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	


	return 0














def plots_temperature_low_band_calibrators():

	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170529/'




	# Low Band 1 - 2015
	# ----------------------------------

	path_resistance  = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2015_08_25C/data/resistance/corrected/'

	res_ambient = np.genfromtxt(path_resistance + 'ambient_2015_245_02.txt')
	res_hot     = np.genfromtxt(path_resistance + 'hot_2015_246_04.txt')
	res_open    = np.genfromtxt(path_resistance + 'open_2015_243_14.txt')
	res_shorted = np.genfromtxt(path_resistance + 'shorted_2015_241_04.txt')
	res_sim1    = np.genfromtxt(path_resistance + 'simulator1_2015_247_22.txt')
	res_sim2    = np.genfromtxt(path_resistance + 'simulator2_long_2015_255_02.txt')

	t_amb_1     = eg.temperature_thermistor_oven_industries_TR136_170(res_ambient, 'C')
	t_hot_1     = eg.temperature_thermistor_oven_industries_TR136_170(res_hot, 'C')
	t_open_1    = eg.temperature_thermistor_oven_industries_TR136_170(res_open, 'C')
	t_short_1   = eg.temperature_thermistor_oven_industries_TR136_170(res_shorted, 'C')
	t_sim1_1    = eg.temperature_thermistor_oven_industries_TR136_170(res_sim1, 'C')
	t_sim2_1    = eg.temperature_thermistor_oven_industries_TR136_170(res_sim2, 'C')




	# Low Band 1 - 2017
	# ----------------------------------

	path_resistance  = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_05_25C/data/resistance/corrected/'

	res_ambient = np.genfromtxt(path_resistance + 'ambient_load.txt')
	res_hot     = np.genfromtxt(path_resistance + 'hot_load.txt')
	res_open    = np.genfromtxt(path_resistance + 'open_cable.txt')
	res_shorted = np.genfromtxt(path_resistance + 'shorted_cable.txt')
	res_sim1    = np.genfromtxt(path_resistance + 'antenna_simulator1.txt')
	res_sim2    = np.genfromtxt(path_resistance + 'antenna_simulator2.txt')

	t_amb_2     = eg.temperature_thermistor_oven_industries_TR136_170(res_ambient, 'C')
	t_hot_2     = eg.temperature_thermistor_oven_industries_TR136_170(res_hot, 'C')
	t_open_2    = eg.temperature_thermistor_oven_industries_TR136_170(res_open, 'C')
	t_short_2   = eg.temperature_thermistor_oven_industries_TR136_170(res_shorted, 'C')
	t_sim1_2    = eg.temperature_thermistor_oven_industries_TR136_170(res_sim1, 'C')
	t_sim2_2    = eg.temperature_thermistor_oven_industries_TR136_170(res_sim2, 'C')	




	# Low Band 2 - 2017
	# ----------------------------------

	path_resistance  = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band2/2016_09_25C/data/resistance/corrected/'

	res_ambient = np.genfromtxt(path_resistance + 'ambient_load.txt')
	res_hot     = np.genfromtxt(path_resistance + 'hot_load.txt')
	res_open    = np.genfromtxt(path_resistance + 'open_cable.txt')
	res_shorted = np.genfromtxt(path_resistance + 'shorted_cable.txt')
	res_sim1    = np.genfromtxt(path_resistance + 'antenna_simulator1.txt')
	res_sim2    = np.genfromtxt(path_resistance + 'antenna_simulator2.txt')

	t_amb_3     = eg.temperature_thermistor_oven_industries_TR136_170(res_ambient, 'C')
	t_hot_3     = eg.temperature_thermistor_oven_industries_TR136_170(res_hot, 'C')
	t_open_3    = eg.temperature_thermistor_oven_industries_TR136_170(res_open, 'C')
	t_short_3   = eg.temperature_thermistor_oven_industries_TR136_170(res_shorted, 'C')
	t_sim1_3    = eg.temperature_thermistor_oven_industries_TR136_170(res_sim1, 'C')
	t_sim2_3    = eg.temperature_thermistor_oven_industries_TR136_170(res_sim2, 'C')








	plt.close()
	plt.close()


	plt.figure(1, figsize=[20,14])

	plt.subplot(6,1,1)
	plt.plot(np.arange(len(t_amb_1))/60, t_amb_1)
	plt.plot(np.arange(len(t_amb_2))/60, t_amb_2)
	plt.plot(np.arange(len(t_amb_3))/60, t_amb_3)
	plt.grid()
	#plt.ylim([22, 23.5])
	plt.ylabel('ambient [degC]')

	plt.subplot(6,1,2)
	plt.plot(np.arange(len(t_hot_1))/60, t_hot_1)
	plt.plot(np.arange(len(t_hot_2))/60, t_hot_2)
	plt.plot(np.arange(len(t_hot_3))/60, t_hot_3)
	plt.grid()
	plt.ylim([125, 127])
	plt.ylabel('hot [degC]')

	plt.subplot(6,1,3)
	plt.plot(np.arange(len(t_open_1))/60, t_open_1)
	plt.plot(np.arange(len(t_open_2))/60, t_open_2)
	plt.plot(np.arange(len(t_open_3))/60, t_open_3)
	plt.grid()
	#plt.ylim([21.8, 23])
	plt.ylabel('open [degC]')
	plt.legend(['LB1-2015','LB1-2017','LB2-2017'], loc=0)

	plt.subplot(6,1,4)
	plt.plot(np.arange(len(t_short_1))/60, t_short_1)
	plt.plot(np.arange(len(t_short_2))/60, t_short_2)
	plt.plot(np.arange(len(t_short_3))/60, t_short_3)
	plt.grid()
	plt.ylim([22, 24])
	plt.ylabel('shorted [degC]')

	plt.subplot(6,1,5)
	plt.plot(np.arange(len(t_sim1_1))/60, t_sim1_1)
	plt.plot(np.arange(len(t_sim1_2))/60, t_sim1_2)
	plt.plot(np.arange(len(t_sim1_3))/60, t_sim1_3)
	plt.grid()
	plt.ylim([22, 24.5])
	plt.ylabel('sim1 [degC]')

	plt.subplot(6,1,6)
	plt.plot(np.arange(len(t_sim2_1))/60, t_sim2_1)
	plt.plot(np.arange(len(t_sim2_2))/60, t_sim2_2)
	plt.plot(np.arange(len(t_sim2_3))/60, t_sim2_3)
	plt.grid()
	plt.ylim([22, 24])
	plt.xlabel('time [Hr]')
	plt.ylabel('sim2 [degC]')



	plt.savefig(path_plot_save + 'low_band_temperature_calibration.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	



	return 0















def plots_low_band_s11_comparison():



	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170529/'



	ff, il, ih = eg.frequency_edges(50, 100)
	fe = ff[il:ih+1]

	ff2, il, ih = eg.frequency_edges(40, 120)
	fe2 = ff2[il:ih+1]

	d1  = eg.models_calibration_s11('low_band_2015',  'nominal', 25, fe)
	d2  = eg.models_calibration_s11('low_band_2015_2017_05', '50_100_MHz', 25, fe)
	d22 = eg.models_calibration_s11('low_band_2015_2017_05', '40_120_MHz', 25, fe2)
	d3  = eg.models_calibration_s11('low_band2_2017', 'nominal', 25, fe)






	# Receiver S11
	# -------------------------------------------------------------------
	plt.close()
	plt.close()

	plt.figure(1, figsize=[14,9])

	plt.subplot(2,2,1)
	plt.plot(fe, 20*np.log10(np.abs(d1[0])))
	plt.plot(fe2, 20*np.log10(np.abs(d22[0])))
	plt.plot(fe, 20*np.log10(np.abs(d3[0])))
	plt.ylabel('magnitude [dB]')
	plt.grid()
	plt.legend(['LB1-2015','LB1-2017','LB2-2017'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,3)
	plt.plot(fe, 20*np.log10(np.abs(d2[0])) - 20*np.log10(np.abs(d1[0])), 'g')
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-0.3, 0.3])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.legend(['LB1 (2017-2015)'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,2)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d1[0])))
	plt.plot(fe2, (180/np.pi)*np.unwrap(np.angle(d22[0])))
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d3[0])))
	plt.ylabel('phase [deg]')
	plt.grid()
	plt.xlim(40, 120)

	plt.subplot(2,2,4)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d2[0])) - (180/np.pi)*np.unwrap(np.angle(d1[0])), 'g')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-2, 2])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)

	plt.savefig(path_plot_save + 'low_band_s11_receiver.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	





	# Ambient
	# -------------------------------------------------------------------
	plt.close()
	plt.close()

	plt.figure(1, figsize=[14,9])

	plt.subplot(2,2,1)
	plt.plot(fe, 20*np.log10(np.abs(d1[1])))
	plt.plot(fe2, 20*np.log10(np.abs(d22[1])))
	plt.plot(fe, 20*np.log10(np.abs(d3[1])))
	plt.ylabel('magnitude [dB]')
	plt.grid()
	plt.legend(['LB1-2015','LB1-2017','LB2-2017'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,3)
	plt.plot(fe, 20*np.log10(np.abs(d2[1])) - 20*np.log10(np.abs(d1[1])), 'g')
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-0.3, 0.3])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.legend(['LB1 (2017-2015)'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,2)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d1[1])))
	plt.plot(fe2, (180/np.pi)*np.unwrap(np.angle(d22[1])))
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d3[1])))
	plt.ylabel('phase [deg]')
	plt.grid()
	plt.xlim(40, 120)

	plt.subplot(2,2,4)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d2[1])) - (180/np.pi)*np.unwrap(np.angle(d1[1])), 'g')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-2, 2])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)

	plt.savefig(path_plot_save + 'low_band_s11_ambient.pdf', bbox_inches='tight')
	plt.close()
	plt.close()





	# Hot
	# -------------------------------------------------------------------
	plt.close()
	plt.close()

	plt.figure(1, figsize=[14,9])

	plt.subplot(2,2,1)
	plt.plot(fe, 20*np.log10(np.abs(d1[2])))
	plt.plot(fe2, 20*np.log10(np.abs(d22[2])))
	plt.plot(fe, 20*np.log10(np.abs(d3[2])))
	plt.ylabel('magnitude [dB]')
	plt.grid()
	plt.legend(['LB1-2015','LB1-2017','LB2-2017'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,3)
	plt.plot(fe, 20*np.log10(np.abs(d2[2])) - 20*np.log10(np.abs(d1[2])), 'g')
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-0.3, 0.3])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.legend(['LB1 (2017-2015)'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,2)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d1[2])))
	plt.plot(fe2, (180/np.pi)*np.unwrap(np.angle(d22[2])))
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d3[2])))
	plt.ylabel('phase [deg]')
	plt.grid()
	plt.xlim(40, 120)

	plt.subplot(2,2,4)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d2[2])) - (180/np.pi)*np.unwrap(np.angle(d1[2])), 'g')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-2, 2])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)

	plt.savefig(path_plot_save + 'low_band_s11_hot.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	





	# Open
	# -------------------------------------------------------------------
	plt.close()
	plt.close()

	plt.figure(1, figsize=[14,9])

	plt.subplot(2,2,1)
	plt.plot(fe, 20*np.log10(np.abs(d1[3])))
	plt.plot(fe2, 20*np.log10(np.abs(d22[3])))
	plt.plot(fe, 20*np.log10(np.abs(d3[3])))
	plt.ylabel('magnitude [dB]')
	plt.grid()
	plt.legend(['LB1-2015','LB1-2017','LB2-2017'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,3)
	plt.plot(fe, 20*np.log10(np.abs(d2[3])) - 20*np.log10(np.abs(d1[3])), 'g')
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-0.1, 0.1])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.legend(['LB1 (2017-2015)'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,2)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d1[3]))-360)
	plt.plot(fe2, (180/np.pi)*np.unwrap(np.angle(d22[3])))
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d3[3]))-360)
	plt.ylabel('phase [deg]')
	plt.grid()
	plt.xlim(40, 120)

	plt.subplot(2,2,4)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d2[3])) - (180/np.pi)*np.unwrap(np.angle(d1[3])), 'g')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-5, 5])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)

	plt.savefig(path_plot_save + 'low_band_s11_open.pdf', bbox_inches='tight')
	plt.close()
	plt.close()		




	# Shorted
	# -------------------------------------------------------------------
	plt.close()
	plt.close()

	plt.figure(1, figsize=[14,9])

	plt.subplot(2,2,1)
	plt.plot(fe, 20*np.log10(np.abs(d1[4])))
	plt.plot(fe2, 20*np.log10(np.abs(d22[4])))
	plt.plot(fe, 20*np.log10(np.abs(d3[4])))
	plt.ylabel('magnitude [dB]')
	plt.grid()
	plt.legend(['LB1-2015','LB1-2017','LB2-2017'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,3)
	plt.plot(fe, 20*np.log10(np.abs(d2[4])) - 20*np.log10(np.abs(d1[4])), 'g')
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-0.1, 0.1])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.legend(['LB1 (2017-2015)'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,2)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d1[4]))-360)
	plt.plot(fe2, (180/np.pi)*np.unwrap(np.angle(d22[4])))
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d3[4]))-360)
	plt.ylabel('phase [deg]')
	plt.grid()
	plt.xlim(40, 120)

	plt.subplot(2,2,4)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d2[4])) - (180/np.pi)*np.unwrap(np.angle(d1[4])), 'g')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-5, 5])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)

	plt.savefig(path_plot_save + 'low_band_s11_shorted.pdf', bbox_inches='tight')
	plt.close()
	plt.close()




	# Ant Sim1
	# -------------------------------------------------------------------
	plt.close()
	plt.close()

	plt.figure(1, figsize=[14,9])

	plt.subplot(2,2,1)
	plt.plot(fe, 20*np.log10(np.abs(d1[8])))
	plt.plot(fe2, 20*np.log10(np.abs(d22[8])))
	plt.plot(fe, 20*np.log10(np.abs(d3[8])))
	plt.ylabel('magnitude [dB]')
	plt.grid()
	plt.legend(['LB1-2015','LB1-2017','LB2-2017'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,3)
	plt.plot(fe, 20*np.log10(np.abs(d2[8])) - 20*np.log10(np.abs(d1[8])), 'g')
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-0.1, 0.1])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.legend(['LB1 (2017-2015)'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,2)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d1[8]))-360)
	plt.plot(fe2, (180/np.pi)*np.unwrap(np.angle(d22[8])))
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d3[8]))-360)
	plt.ylabel('phase [deg]')
	plt.grid()
	plt.xlim(40, 120)

	plt.subplot(2,2,4)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d2[8])) - (180/np.pi)*np.unwrap(np.angle(d1[8])), 'g')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-5, 5])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)

	plt.savefig(path_plot_save + 'low_band_s11_sim1.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	







	# Ant Sim2
	# -------------------------------------------------------------------
	plt.close()
	plt.close()

	plt.figure(1, figsize=[14,9])

	plt.subplot(2,2,1)
	plt.plot(fe, 20*np.log10(np.abs(d1[9])))
	plt.plot(fe2, 20*np.log10(np.abs(d22[9])))
	plt.plot(fe, 20*np.log10(np.abs(d3[9])))
	plt.ylabel('magnitude [dB]')
	plt.grid()
	plt.legend(['LB1-2015','LB1-2017','LB2-2017'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,3)
	plt.plot(fe, 20*np.log10(np.abs(d2[9])) - 20*np.log10(np.abs(d1[9])), 'g')
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-0.1, 0.1])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.legend(['LB1 (2017-2015)'], loc=0)
	plt.xlim(40, 120)

	plt.subplot(2,2,2)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d1[9])))
	plt.plot(fe2, (180/np.pi)*np.unwrap(np.angle(d22[9])))
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d3[9])))
	plt.ylabel('phase [deg]')
	plt.grid()
	plt.xlim(40, 120)

	plt.subplot(2,2,4)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(d2[9])) - (180/np.pi)*np.unwrap(np.angle(d1[9])), 'g')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-5, 5])
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)

	plt.savefig(path_plot_save + 'low_band_s11_sim2.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	




	return 0















def plots_low_band_calibration_parameters():


	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170529/'

	d1 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2015_08_25C/results/nominal/calibration_files/calibration_file_low_band_2015_nominal.txt')
	d2 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_05_25C/results/50_100_MHz/calibration_files/calibration_file_low_band_2015_2017_05_50_100_MHz.txt')
	d3 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_05_25C/results/50_120_MHz/calibration_files/calibration_file_low_band_2015_2017_05_50_120_MHz.txt')
	d4 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band2/2016_09_25C/results/nominal/calibration_files/calibration_file_low_band2_2017_nominal.txt')


	fs = 15


	# ------------------------------------------
	plt.close()
	plt.close()

	plt.figure(1, figsize=[20,11])
	plt.subplot(2,3,1)
	plt.plot(d1[:,0], d1[:,3], 'b', linewidth=2)
	plt.plot(d2[:,0], d2[:,3], 'r', linewidth=2)
	plt.plot(d3[:,0], d3[:,3], 'g', linewidth=2)
	plt.plot(d2[:,0], d2[:,3], 'r', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)
	plt.legend(['LB1-2015','LB1-2017 (50-100 MHz)','LB1-2017 (50-120 MHz)'], loc=0)
	plt.ylabel(r'$C_1$', fontsize=fs)

	plt.subplot(2,3,2)
	plt.plot(d1[:,0], d1[:,4], 'b', linewidth=2)
	plt.plot(d2[:,0], d2[:,4], 'r', linewidth=2)
	plt.plot(d3[:,0], d3[:,4], 'g', linewidth=2)
	plt.plot(d2[:,0], d2[:,4], 'r', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)
	plt.ylabel(r'$C_2$ [K]', fontsize=fs)

	plt.subplot(2,3,4)
	plt.plot(d1[:,0], d1[:,5], 'b', linewidth=2)
	plt.plot(d2[:,0], d2[:,5], 'r', linewidth=2)
	plt.plot(d3[:,0], d3[:,5], 'g', linewidth=2)
	plt.plot(d2[:,0], d2[:,5], 'r', linewidth=2)
	plt.xlabel('frequency [MHz]')
	plt.grid()
	plt.xlim(40, 120)
	plt.ylabel(r'$T_U$ [K]', fontsize=fs)

	plt.subplot(2,3,5)
	plt.plot(d1[:,0], d1[:,6], 'b', linewidth=2)
	plt.plot(d2[:,0], d2[:,6], 'r', linewidth=2)
	plt.plot(d3[:,0], d3[:,6], 'g', linewidth=2)
	plt.plot(d2[:,0], d2[:,6], 'r', linewidth=2)
	plt.xlabel('frequency [MHz]')
	plt.grid()
	plt.xlim(40, 120)
	plt.ylabel(r'$T_C$ [K]', fontsize=fs)

	plt.subplot(2,3,6)
	plt.plot(d1[:,0], d1[:,7], 'b', linewidth=2)
	plt.plot(d2[:,0], d2[:,7], 'r', linewidth=2)
	plt.plot(d3[:,0], d3[:,7], 'g', linewidth=2)
	plt.plot(d2[:,0], d2[:,7], 'r', linewidth=2)
	plt.xlabel('frequency [MHz]')
	plt.grid()
	plt.xlim(40, 120)
	plt.ylabel(r'$T_S$ [K]', fontsize=fs)

	plt.savefig(path_plot_save + 'low_band_calibration_parameters_LB1.pdf', bbox_inches='tight')
	plt.close()
	plt.close()		




	# ---------------------------------------
	plt.close()
	plt.close()

	plt.figure(2, figsize=[20,11])
	plt.subplot(2,3,1)
	plt.plot(d4[:,0], d4[:,3], 'b', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)
	plt.ylabel(r'$C_1$', fontsize=fs)

	plt.subplot(2,3,2)
	plt.plot(d4[:,0], d4[:,4], 'b', linewidth=2)
	plt.grid()
	plt.xlim(40, 120)
	plt.ylabel(r'$C_2$ [K]', fontsize=fs)

	plt.subplot(2,3,4)
	plt.plot(d4[:,0], d4[:,5], 'b', linewidth=2)
	plt.xlabel('frequency [MHz]')
	plt.grid()
	plt.xlim(40, 120)
	plt.ylabel(r'$T_U$ [K]', fontsize=fs)

	plt.subplot(2,3,5)
	plt.plot(d4[:,0], d4[:,6], 'b', linewidth=2)
	plt.xlabel('frequency [MHz]')
	plt.grid()
	plt.xlim(40, 120)
	plt.ylabel(r'$T_C$ [K]', fontsize=fs)

	plt.subplot(2,3,6)
	plt.plot(d4[:,0], d4[:,7], 'b', linewidth=2)
	plt.xlabel('frequency [MHz]')
	plt.grid()
	plt.xlim(40, 120)
	plt.ylabel(r'$T_S$ [K]', fontsize=fs)

	plt.savefig(path_plot_save + 'low_band_calibration_parameters_LB2.pdf', bbox_inches='tight')
	plt.close()
	plt.close()



	return 0









def plot_low_band2_antenna_s11():

	d0 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/low2-2017-06-01-thurs-ew-normalagain-2/S11_blade_low_band_2017_152_AFTER.txt')
	d1 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/low2_20170602_friday_inpit2/S11_blade_low_band_2017_153_INPIT.txt')
	d2 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/low2_20170602_friday_reconnect_after_vnainpit3/S11_blade_low_band_2017_153_NORMAL.txt')



	plt.subplot(1,2,1)
	plt.plot(d1[:,0]/1e6, 20*np.log10(np.abs(d1[:,1]+1j*d1[:,2])) -  20*np.log10(np.abs(d0[:,1]+1j*d0[:,2])) )
	plt.plot(d1[:,0]/1e6, 20*np.log10(np.abs(d2[:,1]+1j*d2[:,2])) -  20*np.log10(np.abs(d0[:,1]+1j*d0[:,2])) )
	plt.xlim([50,120])
	plt.ylim([-0.1, 0.1])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ magnitude [dB]')

	plt.subplot(1,2,2)
	plt.plot(d1[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d1[:,1]+1j*d1[:,2])) -  (180/np.pi)*np.unwrap(np.angle(d0[:,1]+1j*d0[:,2])) )
	plt.plot(d1[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d2[:,1]+1j*d2[:,2])) -  (180/np.pi)*np.unwrap(np.angle(d0[:,1]+1j*d0[:,2])) )
	plt.xlim([50,120])
	plt.ylim([-1, 1])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.legend(['(INPIT 153) - (NORMAL 152)','(NORMAL 153) - (NORMAL 152)'])


	return 0











def save_jordan_rejection_significance():

	# Load parameters and estimates
	fb, Ts, xi, model, TC, zC, vC, TD, zD, vD, dz, dv, Tmin, gamma_z, Z, cx, Bx, N, LW, LC, p21, dp21 = eg.read_LF_least_squares('results_LF_all_models_20170503.hdf5')

	# Rejection significance for all models (including those that are not rejected)
	rs = (1-p21)/dp21


	rs[rs<1] = 0
	rs[np.abs(p21)>=0.5] = 0
	mn= np.arange(1,len(rs)+1)


	out = np.hstack((mn.reshape(-1,1), rs.reshape(-1,1)))
	np.savetxt('/home/ramo7131/Desktop/rej_sig.txt', out, header='# model number\trejection_significance')

	return rs













def save_jordan_rejection_significance_v2():



	f, models, Ts, xi, sfrd,  z_long, f_long, xi_long, phenom, physical, a21 = eg.read_LF_least_squares_v2('results_LF_all_models_20170730.hdf5')

	rs = (1-a21[:,0])/a21[:,1]

	rs[rs<1] = 0
	rs[np.abs(a21[:,0])>=0.5] = 0



	mn  = np.arange(1,len(rs)+1)
	out = np.hstack((mn.reshape(-1,1), rs.reshape(-1,1)))

	np.savetxt(home_folder + '/Desktop/rej_sig_v2_20170814.txt', out, header='# model number\trejection_significance')

	return out #rs














def plot_MCMC_chains(fullchain, singlechainlength, burninsample, ylabel=[]):


	plt.close()
	plt.close()
	plt.close()
	plt.figure(1, figsize=[24,14])

	for i in range(len(fullchain[0,:])):
		plt.subplot(len(fullchain[0,:]),1,i+1)
		plt.plot(fullchain[:,i])
		yl = plt.ylim()
		for j in range(int(len(fullchain[:,0])/singlechainlength)):
			chainstart    = singlechainlength*float(j)
			burninsample1 = singlechainlength*float(j) + burninsample
			plt.plot([chainstart, chainstart], [yl[0], yl[1]], 'g')
			plt.plot([burninsample1, burninsample1], [yl[0], yl[1]], 'r')	

		plt.ylim(yl)
		plt.grid()

		if len(ylabel) > 0:
			plt.ylabel(ylabel[i])


	plt.xlabel('total number of samples')
	plt.savefig(home_folder + '/Desktop/chains.png', bbox_inches='tight')

	plt.close()
	plt.close()

	return 0












def plot_MCMC_best_fit(v, t, w, Tcosmo_all, best_fit_residuals, best_fit_rms):

	plt.close()
	plt.close()

	plt.figure(1, figsize=[14,12])


	# -------------------------------------------
	plt.subplot(4,1,1)

	# Model fit
	poly_par = eg.fit_polynomial_fourier('EDGES_polynomial', v/80, t, 5, Weights=w)
	model    = eg.model_evaluate('EDGES_polynomial', poly_par[0], v/80)
	rms      = np.sqrt(np.sum(((t-model)[w>0])**2)/len(v[w>0]))

	# Plot
	plt.plot(v, 1000*(t-model))
	plt.xlim([50, 100])
	plt.ylim([-600, 600])
	plt.grid()
	plt.ylabel('[mK]')
	plt.text(71, 400, 'Residuals to 5-term polynomial')
	plt.text(71, 300, 'RMS = ' + str(round(1000*rms)) + ' [mK]')



	# -------------------------------------------
	plt.subplot(4,1,2)

	# Data limits
	flow  = 61
	fhigh = 99		

	# Cutting data to desired range	
	vv = v[(v>=flow) & (v<=fhigh)]
	tt = t[(v>=flow) & (v<=fhigh)]
	ww = w[(v>=flow) & (v<=fhigh)]

	# Model fit
	poly_par = eg.fit_polynomial_fourier('EDGES_polynomial', vv/80, tt, 5, Weights=ww)
	model    = eg.model_evaluate('EDGES_polynomial', poly_par[0], vv/80)
	rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))

	# Plot
	plt.plot(vv, 1000*(tt-model))
	plt.xlim([50, 100])
	plt.ylim([-600, 600])
	plt.grid()
	plt.ylabel('[mK]')
	plt.text(71, 400, 'Residuals to 4-term polynomial')
	plt.text(71, 300, 'RMS = ' + str(round(1000*rms)) + ' [mK]')



	# --------------------------------------------
	plt.subplot(4,1,3)

	plt.plot(vv, 1000*Tcosmo_all[0:20000,:].T, c=[0.7, 0.7, 0.7])
	plt.plot(vv, 1000*Tcosmo_all[-1,:], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-1000, 100])
	plt.grid()
	plt.ylabel('[mK]')
	plt.text(71, -100, 'Best fit 21-cm model' + '\n' + '(+ all realizations)')



	# --------------------------------------------
	plt.subplot(4,1,4)

	plt.plot(vv, 1000*best_fit_residuals)
	plt.xlim([50, 100])
	plt.ylim([-600, 600])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('[mK]')
	plt.text(71, 400, 'Residuals to 4-term polynomial + 21-cm model')
	plt.text(71, 300, 'RMS = ' + str(round(1000*best_fit_rms)) + ' [mK]')


	plt.savefig(home_folder + '/Desktop/residuals.png', bbox_inches='tight')		
	plt.close()
	plt.close()	



	return 0



























def plot_low_band_residuals(figure1='no', figure2='no'):



	if figure1 == 'yes':

		file_path = home_folder + '/DATA/EDGES/results/low_band/products/average_spectra/'

		d1 = np.genfromtxt(file_path + 'low1_2015_original_ground_plane_ID_20170609-1.txt')
		d2 = np.genfromtxt(file_path + 'low1_2015_extended_ground_plane_ID_20170601.txt')
		d3 = np.genfromtxt(file_path + 'low1_2017_50-100MHz_ID_20170611.txt')
		d4 = np.genfromtxt(file_path + 'low1_2017_50-120MHz_ID_20170611.txt')
		d5 = np.genfromtxt(file_path + 'low2_2017_NS_ID_20170612.txt')
		d6 = np.genfromtxt(file_path + 'low2_2017_EW_ID_20170612.txt')











		plt.close()
		plt.close()
		plt.close()

		f1 = plt.figure(1, figsize=[19,12])





		# Data limits
		flow  = 50
		fhigh = 100		


		# Cutting data to desired range	
		dd1 = d1[(d1[:,0]>=flow) & (d1[:,0]<=fhigh),:]
		dd2 = d2[(d2[:,0]>=flow) & (d2[:,0]<=fhigh),:]
		dd3 = d3[(d3[:,0]>=flow) & (d3[:,0]<=fhigh),:]
		dd4 = d4[(d4[:,0]>=flow) & (d4[:,0]<=fhigh),:]
		dd5 = d5[(d5[:,0]>=flow) & (d5[:,0]<=fhigh),:]
		dd6 = d6[(d6[:,0]>=flow) & (d6[:,0]<=fhigh),:]	





		plt.subplot(6,3,1)

		# Model fit
		ff=dd1[:,0]; tt=dd1[:,1]; ww=dd1[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 5, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r1       = 1000*(tt-model)

		plt.plot(ff, r1)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])
		plt.ylabel('case1 [mK]')
		plt.title('5-terms, 50-100 MHz')


		plt.subplot(6,3,4)

		# Model fit
		ff=dd2[:,0]; tt=dd2[:,1]; ww=dd2[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 5, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r2       = 1000*(tt-model)

		plt.plot(ff, r2)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])	
		plt.ylabel('case2 [mK]')



		plt.subplot(6,3,7)

		# Model fit
		ff=dd3[:,0]; tt=dd3[:,1]; ww=dd3[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 5, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r3       = 1000*(tt-model)

		plt.plot(ff, r3)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])		
		plt.ylabel('case3 [mK]')


		plt.subplot(6,3,10)

		# Model fit
		ff=dd4[:,0]; tt=dd4[:,1]; ww=dd4[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 5, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r4       = 1000*(tt-model)

		plt.plot(ff, r4)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])		
		plt.ylabel('case4 [mK]')



		plt.subplot(6,3,13)

		# Model fit
		ff=dd5[:,0]; tt=dd5[:,1]; ww=dd5[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 5, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r5       = 1000*(tt-model)

		plt.plot(ff, r5)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])	
		plt.ylabel('case5 [mK]')




		plt.subplot(6,3,16)

		# Model fit
		ff=dd6[:,0]; tt=dd6[:,1]; ww=dd6[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 5, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r6       = 1000*(tt-model)

		plt.plot(ff, r6)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('case6 [mK]')













		# Data limits
		flow  = 61
		fhigh = 99		


		# Cutting data to desired range	
		dd1 = d1[(d1[:,0]>=flow) & (d1[:,0]<=fhigh),:]
		dd2 = d2[(d2[:,0]>=flow) & (d2[:,0]<=fhigh),:]
		dd3 = d3[(d3[:,0]>=flow) & (d3[:,0]<=fhigh),:]
		dd4 = d4[(d4[:,0]>=flow) & (d4[:,0]<=fhigh),:]
		dd5 = d5[(d5[:,0]>=flow) & (d5[:,0]<=fhigh),:]
		dd6 = d6[(d6[:,0]>=flow) & (d6[:,0]<=fhigh),:]	



		plt.subplot(6,3,2)

		# Model fit
		ff=dd1[:,0]; tt=dd1[:,1]; ww=dd1[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r1       = 1000*(tt-model)

		plt.plot(ff, r1)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])
		plt.title('4-terms, 61-99 MHz')



		plt.subplot(6,3,5)

		# Model fit
		ff=dd2[:,0]; tt=dd2[:,1]; ww=dd2[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r2       = 1000*(tt-model)

		plt.plot(ff, r2)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])	




		plt.subplot(6,3,8)

		# Model fit
		ff=dd3[:,0]; tt=dd3[:,1]; ww=dd3[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r3       = 1000*(tt-model)

		plt.plot(ff, r3)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])		



		plt.subplot(6,3,11)

		# Model fit
		ff=dd4[:,0]; tt=dd4[:,1]; ww=dd4[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r4       = 1000*(tt-model)

		plt.plot(ff, r4)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])		




		plt.subplot(6,3,14)

		# Model fit
		ff=dd5[:,0]; tt=dd5[:,1]; ww=dd5[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r5       = 1000*(tt-model)

		plt.plot(ff, r5)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])	





		plt.subplot(6,3,17)

		# Model fit
		ff=dd6[:,0]; tt=dd6[:,1]; ww=dd6[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r6       = 1000*(tt-model)

		plt.plot(ff, r6)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])	
		plt.xlabel('frequency [MHz]')


















		# Data limits
		flow  = 65
		fhigh = 95		


		# Cutting data to desired range	
		dd1 = d1[(d1[:,0]>=flow) & (d1[:,0]<=fhigh),:]
		dd2 = d2[(d2[:,0]>=flow) & (d2[:,0]<=fhigh),:]
		dd3 = d3[(d3[:,0]>=flow) & (d3[:,0]<=fhigh),:]
		dd4 = d4[(d4[:,0]>=flow) & (d4[:,0]<=fhigh),:]
		dd5 = d5[(d5[:,0]>=flow) & (d5[:,0]<=fhigh),:]
		dd6 = d6[(d6[:,0]>=flow) & (d6[:,0]<=fhigh),:]	



		plt.subplot(6,3,3)

		# Model fit
		ff=dd1[:,0]; tt=dd1[:,1]; ww=dd1[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r1       = 1000*(tt-model)

		plt.plot(ff, r1)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])
		plt.title('4-terms, 65-95 MHz')



		plt.subplot(6,3,6)

		# Model fit
		ff=dd2[:,0]; tt=dd2[:,1]; ww=dd2[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r2       = 1000*(tt-model)

		plt.plot(ff, r2)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])	




		plt.subplot(6,3,9)

		# Model fit
		ff=dd3[:,0]; tt=dd3[:,1]; ww=dd3[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r3       = 1000*(tt-model)

		plt.plot(ff, r3)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])		



		plt.subplot(6,3,12)

		# Model fit
		ff=dd4[:,0]; tt=dd4[:,1]; ww=dd4[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r4       = 1000*(tt-model)

		plt.plot(ff, r4)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])		




		plt.subplot(6,3,15)

		# Model fit
		ff=dd5[:,0]; tt=dd5[:,1]; ww=dd5[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r5       = 1000*(tt-model)

		plt.plot(ff, r5)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])	





		plt.subplot(6,3,18)

		# Model fit
		ff=dd6[:,0]; tt=dd6[:,1]; ww=dd6[:,2]
		par      = eg.fit_polynomial_fourier('EDGES_polynomial', ff/80, tt, 4, Weights=ww)
		model    = eg.model_evaluate('EDGES_polynomial', par[0], ff/80)
		#rms      = np.sqrt(np.sum(((tt-model)[ww>0])**2)/len(vv[ww>0]))
		r6       = 1000*(tt-model)

		plt.plot(ff, r6)
		plt.grid()
		plt.xlim([50, 100])
		plt.ylim([-500, 500])	
		plt.xlabel('frequency [MHz]')




		plt.savefig(home_folder + '/Desktop/summary_residuals.png', bbox_inches='tight')		
		plt.close()
		plt.close()	










	if figure2 == 'yes':

		# ------------------------------------------------------------------------------

		# Low-Band1 2015, original
		f, t, w, m, r, p, rms = eg.level3_read_raw_spectra('/home/ramo7131/DATA/EDGES/spectra/level3/low_band_2015/low_band_2015_LST_23.76_11.76_ID_20170609-1_original_ground_plane.hdf5')




		# Low-Band1 2017
		#f, t, w, m, r, p, rms = eg.level3_read_raw_spectra('/home/ramo7131/DATA/EDGES/spectra/level3/low_band_2015/low_band_2015_LST_23.76_11.76_ID_20170611_50-100MHz.hdf5')
		#t = t[650::,:]
		#w = w[650::,:]
		#m = m[650::,:]
		#r = r[650::,:]
		#p = p[650::,:]	



		## Low-Band2 2017, after rotation to EW
		#f, t, w, m, r, p, rms = eg.level3_read_raw_spectra('/home/ramo7131/DATA/EDGES/spectra/level3/low_band2_2017/low_band2_2017_LST_23.76_11.76_ID_20170612_EW.hdf5')
		#t = t[(rms>20) & (rms<38), :]
		#w = w[(rms>20) & (rms<38), :]
		#m = m[(rms>20) & (rms<38), :]
		#r = r[(rms>20) & (rms<38), :]
		#p = p[(rms>20) & (rms<38), :]


		GHA = np.copy(m[:,4])
		GHA[GHA<0] = GHA[GHA<0]+24


		rb_all = np.zeros((12, 128))
		wb_all = np.zeros((12, 128))	
		for i in range(12):
			print(i)
			res = r[(GHA >= (i+6)) & (GHA < (i+7)),:]
			wei = w[(GHA >= (i+6)) & (GHA < (i+7)),:]
			#if np.sum(res) > 0:
			rav, wav   = eg.spectral_averaging(res, wei)
			#print(np.sum(rav))
			fb, rb, wb = eg.spectral_binning_number_of_samples(f, rav, wav, nsamples=64)
			rb_all[i,:] = rb - i
			wb_all[i,:] = wb
			print(rb_all)





		f2 = plt.figure(1, figsize=[10,14])
		plt.plot(fb, rb_all.T)
		plt.ylim([-12,1])
		plt.yticks(np.arange(-11,1), ['17.5', '16.5', '15.5', '14.5', '13.5', '12.5', '11.5', '10.5', '9.5', '8.5', '7.5', '6.5'])
		plt.xlim([50, 100])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [1 K per division]')
		plt.grid()

		plt.savefig('/home/ramo7131/Desktop/GHA_residuals.png', bbox_inches='tight')		
		plt.close()
		plt.close()	






	return 0










def plots_low_band2_switch_s_parameters():

	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170620/'



	ff, il, ih = eg.frequency_edges(50, 100)
	f = ff[il:ih]

	#d1 = eg.low_band_switch_correction(np.ones(len(f)), 25, f_in = f)
	#d2 = eg.low_band1_switch_correction_2017_05_25C(np.ones(len(f)), f_in = f)


	d1 = eg.low_band_switch_correction_june_2016(np.ones(len(f)), f_in = f, verification = 'no')
	d2 = eg.low_band_switch_correction_september_2016(np.ones(len(f)), f_in = f, verification = 'no')




	plt.close()
	plt.close()
	plt.figure(num=1, figsize=(16, 12))

	plt.subplot(2,3,1)
	plt.plot(f, 20*np.log10(np.abs(d2[1])), 'r', linewidth=2)
	plt.plot(f, 20*np.log10(np.abs(d1[1])), 'b', linewidth=2)
	plt.xlim([50, 100])
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.title('S11')

	plt.subplot(2,3,4)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d2[1])), 'r', linewidth=2)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d1[1])), 'b', linewidth=2)
	plt.xlim([50, 100])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('phase [deg]')	


	plt.subplot(2,3,2)
	plt.plot(f, 20*np.log10(np.abs(d2[2])), 'r', linewidth=2)
	plt.plot(f, 20*np.log10(np.abs(d1[2])), 'b', linewidth=2)
	plt.xlim([50, 100])
	plt.grid()
	plt.title('S12S21')

	plt.subplot(2,3,5)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d2[2])), 'r', linewidth=2)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d1[2])), 'b', linewidth=2)
	plt.xlim([50, 100])
	plt.grid()
	plt.xlabel('frequency [MHz]')	


	plt.subplot(2,3,3)
	plt.plot(f, 20*np.log10(np.abs(d1[3])), 'b', linewidth=2)
	plt.plot(f, 20*np.log10(np.abs(d2[3])), 'r', linewidth=2)
	plt.plot(f, 20*np.log10(np.abs(d1[3])), 'b', linewidth=2)
	plt.xlim([50, 100])
	plt.grid()
	plt.title('S22')
	plt.legend(['2016-June','2016-September'], loc=0)


	plt.subplot(2,3,6)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d2[3])), 'r', linewidth=2)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d1[3])), 'b', linewidth=2)
	plt.xlim([50, 100])
	plt.grid()
	plt.xlabel('frequency [MHz]')		

	plt.savefig(path_plot_save + 's_parameters_direct_comparison.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	













	plt.close()
	plt.close()
	plt.figure(num=1, figsize=(16, 12))
	ff, il, ih = eg.frequency_edges(50, 100)

	f = ff[il:ih]

	#d1 = eg.low_band_switch_correction(np.ones(len(f1)), 25, f_in = f1)
	#d2 = eg.low_band1_switch_correction_2017_05_25C(np.ones(len(f2)), f_in = f2)


	d1 = eg.low_band_switch_correction_june_2016(np.ones(len(f)), f_in = f, verification = 'no')
	d2 = eg.low_band_switch_correction_september_2016(np.ones(len(f)), f_in = f, verification = 'no')



	plt.subplot(2,3,1)
	plt.plot(f, 20*np.log10(np.abs(d2[1])) - 20*np.log10(np.abs(d1[1])), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.05, 0.05])
	plt.grid()
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.title('S11')

	plt.subplot(2,3,4)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d2[1])) - (180/np.pi)*np.unwrap(np.angle(d1[1])), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.5, 0.5])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase [deg]')	


	plt.subplot(2,3,2)
	plt.plot(f, 20*np.log10(np.abs(d2[2])) - 20*np.log10(np.abs(d1[2])), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.0015, 0.0015])
	plt.grid()
	plt.title('S12S21')

	plt.subplot(2,3,5)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d2[2])) - (180/np.pi)*np.unwrap(np.angle(d1[2])), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.015, 0.015])
	plt.grid()
	plt.xlabel('frequency [MHz]')	


	plt.subplot(2,3,3)
	plt.plot(f, 20*np.log10(np.abs(d2[3])) - 20*np.log10(np.abs(d1[3])), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.1, 0.1])
	plt.grid()
	plt.title('S22')


	plt.subplot(2,3,6)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(d2[3])) - (180/np.pi)*np.unwrap(np.angle(d1[3])), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	#plt.plot(f1, , 'r', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-1, 1])
	plt.grid()
	plt.xlabel('frequency [MHz]')		


	plt.savefig(path_plot_save + 's_parameters_delta.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	











	plt.close()
	plt.close()
	plt.figure(num=1, figsize=(22, 16))	
	ff, il, ih = eg.frequency_edges(50, 100)
	fe = ff[il:ih]



	out = eg.models_calibration_s11('low_band2_2017', 'nominal', 25, fe)
	r_amb  = out[1,:]
	r_open = out[3,:]
	r_sim2 = out[9,:]

	r_ant = eg.models_antenna_s11('low_band2_2017', 'blade', fe, antenna_s11_day=87, model_type='polynomial')



	r_amb_unc  = rc.gamma_shifted(d1[1],d1[2],d1[3], r_amb)
	r_open_unc = rc.gamma_shifted(d1[1],d1[2],d1[3], r_open)
	r_sim2_unc = rc.gamma_shifted(d1[1],d1[2],d1[3], r_sim2)
	r_ant_unc  = rc.gamma_shifted(d1[1],d1[2],d1[3], r_ant)

	r_amb_cal  = rc.gamma_de_embed(d2[1],d2[2],d2[3], r_amb_unc)
	r_open_cal = rc.gamma_de_embed(d2[1],d2[2],d2[3], r_open_unc)
	r_sim2_cal = rc.gamma_de_embed(d2[1],d2[2],d2[3], r_sim2_unc)
	r_ant_cal  = rc.gamma_de_embed(d2[1],d2[2],d2[3], r_ant_unc)


	plt.subplot(2,4,1)
	plt.plot(fe, 20*np.log10(np.abs(r_amb_cal)) - 20*np.log10(np.abs(r_amb)), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.5, 0.5])
	plt.grid()
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.title('Ambient Load')

	plt.subplot(2,4,5)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(r_amb_cal)) - (180/np.pi)*np.unwrap(np.angle(r_amb)), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-3, 3])
	plt.grid()
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')





	plt.subplot(2,4,2)
	plt.plot(fe, 20*np.log10(np.abs(r_open_cal)) - 20*np.log10(np.abs(r_open)), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.004, 0.004])
	plt.grid()
	#plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.title('Open Cable')

	plt.subplot(2,4,6)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(r_open_cal)) - (180/np.pi)*np.unwrap(np.angle(r_open)), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.1, 0.1])
	plt.grid()
	#plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')



	plt.subplot(2,4,3)
	plt.plot(fe, 20*np.log10(np.abs(r_sim2_cal)) - 20*np.log10(np.abs(r_sim2)), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.04, 0.04])
	plt.grid()
	#plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.title('Ant Sim2')

	plt.subplot(2,4,7)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(r_sim2_cal)) - (180/np.pi)*np.unwrap(np.angle(r_sim2)), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.4, 0.4])
	plt.grid()
	#plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')




	plt.subplot(2,4,4)
	plt.plot(fe, 20*np.log10(np.abs(r_ant_cal)) - 20*np.log10(np.abs(r_ant)), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.04, 0.04])
	plt.grid()
	#plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.title('Antenna')

	plt.subplot(2,4,8)
	plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(r_ant_cal)) - (180/np.pi)*np.unwrap(np.angle(r_ant)), 'b', linewidth=2)
	plt.plot([50, 100], [0, 0], 'k', linewidth=2)
	plt.xlim([50, 100])
	plt.ylim([-0.4, 0.4])
	plt.grid()
	#plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')


	plt.savefig(path_plot_save + 'reflection_error.pdf', bbox_inches='tight')
	plt.close()
	plt.close()	


	return 0

















def plots_low_band2_analysis(figure1='no', figure2='no'):


	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170621/'


	if figure1 == 'yes':

		flow  = 61
		fhigh = 99		

		fb, tb_0, wb_0, rb_0 = eg.data_analysis_low_band_spectra_average(6, GHA1=0, GHA2=2)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_0 = tb_0[(fb>=flow) & (fb<=fhigh)]; wbb_0 = wb_0[(fb>=flow) & (fb<=fhigh)]

		fb, tb_2, wb_2, rb_2 = eg.data_analysis_low_band_spectra_average(6, GHA1=2, GHA2=4)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_2 = tb_2[(fb>=flow) & (fb<=fhigh)]; wbb_2 = wb_2[(fb>=flow) & (fb<=fhigh)]

		fb, tb_4, wb_4, rb_4 = eg.data_analysis_low_band_spectra_average(6, GHA1=4, GHA2=6)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_4 = tb_4[(fb>=flow) & (fb<=fhigh)]; wbb_4 = wb_4[(fb>=flow) & (fb<=fhigh)]

		fb, tb_6, wb_6, rb_6 = eg.data_analysis_low_band_spectra_average(6, GHA1=6, GHA2=8)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_6 = tb_6[(fb>=flow) & (fb<=fhigh)]; wbb_6 = wb_6[(fb>=flow) & (fb<=fhigh)]

		fb, tb_8, wb_8, rb_8 = eg.data_analysis_low_band_spectra_average(6, GHA1=8, GHA2=10)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_8 = tb_8[(fb>=flow) & (fb<=fhigh)]; wbb_8 = wb_8[(fb>=flow) & (fb<=fhigh)]

		fb, tb_10, wb_10, rb_10 = eg.data_analysis_low_band_spectra_average(6, GHA1=10, GHA2=12)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_10 = tb_10[(fb>=flow) & (fb<=fhigh)]; wbb_10 = wb_10[(fb>=flow) & (fb<=fhigh)]

		fb, tb_12, wb_12, rb_12 = eg.data_analysis_low_band_spectra_average(6, GHA1=12, GHA2=14)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_12 = tb_12[(fb>=flow) & (fb<=fhigh)]; wbb_12 = wb_12[(fb>=flow) & (fb<=fhigh)]

		fb, tb_14, wb_14, rb_14 = eg.data_analysis_low_band_spectra_average(6, GHA1=14, GHA2=16)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_14 = tb_14[(fb>=flow) & (fb<=fhigh)]; wbb_14 = wb_14[(fb>=flow) & (fb<=fhigh)]

		fb, tb_16, wb_16, rb_16 = eg.data_analysis_low_band_spectra_average(6, GHA1=16, GHA2=18)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_16 = tb_16[(fb>=flow) & (fb<=fhigh)]; wbb_16 = wb_16[(fb>=flow) & (fb<=fhigh)]

		fb, tb_18, wb_18, rb_18 = eg.data_analysis_low_band_spectra_average(6, GHA1=18, GHA2=20)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_18 = tb_18[(fb>=flow) & (fb<=fhigh)]; wbb_18 = wb_18[(fb>=flow) & (fb<=fhigh)]

		fb, tb_20, wb_20, rb_20 = eg.data_analysis_low_band_spectra_average(6, GHA1=20, GHA2=22)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_20 = tb_20[(fb>=flow) & (fb<=fhigh)]; wbb_20 = wb_20[(fb>=flow) & (fb<=fhigh)]

		fb, tb_22, wb_22, rb_22 = eg.data_analysis_low_band_spectra_average(6, GHA1=22, GHA2=24)
		fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_22 = tb_22[(fb>=flow) & (fb<=fhigh)]; wbb_22 = wb_22[(fb>=flow) & (fb<=fhigh)]



		plt.close()
		plt.close()
		o = plt.figure(1, figsize=[9,14])
		plt.plot(fb, rb_0-1)
		plt.plot(fb, rb_2-3)
		plt.plot(fb, rb_4-5)
		plt.plot(fb, rb_6-7)
		plt.plot(fb, rb_8-9)
		plt.plot(fb, rb_10-11)
		plt.plot(fb, rb_12-13)
		plt.plot(fb, rb_14-15)
		plt.plot(fb, rb_16-17)
		plt.plot(fb, rb_18-19)
		plt.plot(fb, rb_20-21)
		plt.plot(fb, rb_22-23)

		plt.yticks(np.arange(-23, -0, 2), np.arange(23,0, -2))
		plt.xlim([50, 100])
		plt.ylim([-24, 0])
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [2 K per division]')


		plt.savefig(path_plot_save + 'GHA_residuals_50_100_MHz.pdf', bbox_inches='tight')
		plt.close()
		plt.close()







		# Cutting data within desired range

		Nfg   = 4

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_0, Nfg, Weights=wbb_0); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_0 = tbb_0-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_2, Nfg, Weights=wbb_2); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_2 = tbb_2-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_4, Nfg, Weights=wbb_4); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_4 = tbb_4-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_6, Nfg, Weights=wbb_6); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_6 = tbb_6-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_8, Nfg, Weights=wbb_8); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_8 = tbb_8-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_10, Nfg, Weights=wbb_10); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_10 = tbb_10-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_12, Nfg, Weights=wbb_12); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_12 = tbb_12-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_14, Nfg, Weights=wbb_14); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_14 = tbb_14-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_16, Nfg, Weights=wbb_16); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_16 = tbb_16-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_18, Nfg, Weights=wbb_18); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_18 = tbb_18-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_20, Nfg, Weights=wbb_20); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_20 = tbb_20-m_fg

		p_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fbb, tbb_22, Nfg, Weights=wbb_22); 
		m_fg  = eg.model_evaluate('EDGES_polynomial', p_fg[0], fbb); 
		rbb_22 = tbb_22-m_fg		




		plt.close()
		plt.close()
		o = plt.figure(1, figsize=[9,14])
		plt.plot(fbb, rbb_0-1)
		plt.plot(fbb, rbb_2-3)
		plt.plot(fbb, rbb_4-5)
		plt.plot(fbb, rbb_6-7)
		plt.plot(fbb, rbb_8-9)
		plt.plot(fbb, rbb_10-11)
		plt.plot(fbb, rbb_12-13)
		plt.plot(fbb, rbb_14-15)
		plt.plot(fbb, rbb_16-17)
		plt.plot(fbb, rbb_18-19)
		plt.plot(fbb, rbb_20-21)
		plt.plot(fbb, rbb_22-23)

		plt.yticks(np.arange(-23, -0, 2), np.arange(23, 0, -2))
		plt.xlim([50, 100])
		plt.ylim([-24, 0])
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [2 K per division]')


		plt.savefig(path_plot_save + 'GHA_residuals_61_99_MHz.pdf', bbox_inches='tight')
		plt.close()
		plt.close()






	if figure2 == 'yes':
		fb, tb, wb, rb = eg.data_analysis_low_band_spectra_average(6, GHA1=4, GHA2=14)

		tau = 7
		o = eg.test_low_band_signature_search(fb, tb, wb, 61, 99, 4, tau, SNR_or_errorbar='errorbar') #    'SNR')
		fbb    = o[0]
		res_fg = o[3]
		rms_fg = o[4]
		res_21 = o[-6]
		rms_21 = o[-7]
		model  = o[-1]
		a21    = o[-5]
		d21    = o[-4]
		vr     = o[-3]
		dv     = o[-2]


		plt.close()
		plt.close()

		plt.subplot(3,1,1)
		plt.plot(fbb, 1000*res_fg)
		plt.ylim([-500, 500])
		plt.grid()
		plt.ylabel('[mK]')
		plt.text(85, -400, 'RMS = '+str(round(1000*rms_fg))+' mK')

		plt.subplot(3,1,2)
		plt.plot(fbb, -1000*model)
		plt.ylim([-1300, 100])
		plt.grid()
		plt.ylabel('[mK]')
		plt.text(87, -1*200, r'a21     = ' + str(round(1000*a21)) + ' mK')
		plt.text(87, -1*400, r'd21     = ' + str(round(1000*d21)) + ' mK')
		plt.text(87, -1*600, r'snr     = ' + str(round(a21/d21)))
		plt.text(87, -1*800, r'$\nu_r$       = ' + str(round(vr)) + ' MHz')
		plt.text(87, -1*1000, r'$\Delta\nu$     = ' + str(dv) + ' MHz')

		plt.subplot(3,1,3)
		plt.plot(fbb, 1000*res_21)
		plt.ylim([-500, 500])
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[mK]')
		plt.text(85, -400, 'RMS = '+str(round(1000*rms_21))+' mK')

	return 0









def plot_low_band1_antenna_s11():

	d0 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_average/S11_blade_low_band_2017_093.txt')
	d1 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170601/S11_blade_low_band_2017_152.txt')
	d2 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/low1_20170602_night3/S11_blade_low_band_2017_153_NIGHT.txt')
	d3 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170601b/S11_blade_low_band_2017_152_using_2015_switch_parameters.txt')
	d4 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/low1_20170602_night3_b/S11_blade_low_band_2017_153_NIGHT_using_2015_switch_parameters.txt')
	d5 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1_average_2015par/average_2017-06-21_2015par.txt')
	d6 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1_average_2017par/average_2017-06-21_2017par.txt')


	plt.subplot(2,2,1)
	plt.plot(d0[:,0]/1e6, 20*np.log10(np.abs(d1[:,1]+1j*d1[:,2]))  -  20*np.log10(np.abs(d0[:,1]+1j*d0[:,2])), 'b'  )
	plt.plot(d0[:,0]/1e6, 20*np.log10(np.abs(d2[:,1]+1j*d2[:,2]))  -  20*np.log10(np.abs(d0[:,1]+1j*d0[:,2])), 'g'  )
	plt.plot(d0[:,0]/1e6, 20*np.log10(np.abs(d6[:,1]+1j*d6[:,2]))  -  20*np.log10(np.abs(d0[:,1]+1j*d0[:,2])), 'c'  )
	plt.xlim([50,100])
	plt.ylim([-0.04, 0.04])
	plt.grid()
	#plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ magnitude [dB]')


	plt.subplot(2,2,2)
	plt.plot(d0[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d1[:,1]+1j*d1[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(d0[:,1]+1j*d0[:,2])), 'b'  )
	plt.plot(d0[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d2[:,1]+1j*d2[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(d0[:,1]+1j*d0[:,2])), 'g'  )
	plt.plot(d0[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d6[:,1]+1j*d6[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(d0[:,1]+1j*d0[:,2])), 'c'  )
	plt.xlim([50,100])
	plt.ylim([-0.4, 0.4])
	plt.grid()
	#plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.legend(['152 DAY (2017) - 93', '153 (2017) - 93', '172 (2017) - 93'], loc=0)





	plt.subplot(2,2,3)
	plt.plot(d0[:,0]/1e6, 20*np.log10(np.abs(d3[:,1]+1j*d3[:,2]))  -  20*np.log10(np.abs(d0[:,1]+1j*d0[:,2])), 'k'  )
	plt.plot(d0[:,0]/1e6, 20*np.log10(np.abs(d4[:,1]+1j*d4[:,2]))  -  20*np.log10(np.abs(d0[:,1]+1j*d0[:,2])), 'r'  )
	plt.plot(d0[:,0]/1e6, 20*np.log10(np.abs(d5[:,1]+1j*d5[:,2]))  -  20*np.log10(np.abs(d0[:,1]+1j*d0[:,2])), 'm'  )
	plt.xlim([50,100])
	plt.ylim([-0.04, 0.04])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ magnitude [dB]')


	plt.subplot(2,2,4)
	plt.plot(d0[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d3[:,1]+1j*d3[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(d0[:,1]+1j*d0[:,2])), 'k'  )
	plt.plot(d0[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d4[:,1]+1j*d4[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(d0[:,1]+1j*d0[:,2])), 'r'  )
	plt.plot(d0[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(d5[:,1]+1j*d5[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(d0[:,1]+1j*d0[:,2])), 'm'  )
	plt.xlim([50,100])
	plt.ylim([-0.4, 0.4])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase [deg]')	
	plt.legend(['152 DAY (2015) - 93','153 (2015) - 93', '172 (2015) - 93'], loc=0)

	return 0








def plot_low_band1_antenna_s11_172():

	db = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-b_2015par/average_2017-06-21-low1-b.txt')
	dc = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-c_2015par/average_2017-06-21-low1-c.txt')
	dd = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-d_2015par/average_2017-06-21-low1-d.txt')
	de = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-e_2015par/average_2017-06-21-low1-e.txt')
	df = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-f_2015par/average_2017-06-21-low1-f.txt')
	dg = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-g_2015par/average_2017-06-21-low1-g.txt')
	dh = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-h_2015par/average_2017-06-21-low1-h.txt')


	plt.subplot(1,2,1)
	plt.plot(db[:,0]/1e6, 20*np.log10(np.abs(db[:,1]+1j*db[:,2]))  -  20*np.log10(np.abs(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, 20*np.log10(np.abs(dc[:,1]+1j*dc[:,2]))  -  20*np.log10(np.abs(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, 20*np.log10(np.abs(dd[:,1]+1j*dd[:,2]))  -  20*np.log10(np.abs(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, 20*np.log10(np.abs(de[:,1]+1j*de[:,2]))  -  20*np.log10(np.abs(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, 20*np.log10(np.abs(df[:,1]+1j*df[:,2]))  -  20*np.log10(np.abs(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, 20*np.log10(np.abs(dg[:,1]+1j*dg[:,2]))  -  20*np.log10(np.abs(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, 20*np.log10(np.abs(dh[:,1]+1j*dh[:,2]))  -  20*np.log10(np.abs(dd[:,1]+1j*dd[:,2])))


	plt.subplot(1,2,2)
	plt.plot(db[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(db[:,1]+1j*db[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(dc[:,1]+1j*dc[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(dd[:,1]+1j*dd[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(de[:,1]+1j*de[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(df[:,1]+1j*df[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(dg[:,1]+1j*dg[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(dd[:,1]+1j*dd[:,2])))
	plt.plot(db[:,0]/1e6, (180/np.pi)*np.unwrap(np.angle(dh[:,1]+1j*dh[:,2]))  -  (180/np.pi)*np.unwrap(np.angle(dd[:,1]+1j*dd[:,2])))


	return 0






def average_low_band1_2017_06_21_2015par():

	db = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-b_2015par/average_2017-06-21-low1-b.txt')
	dc = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-c_2015par/average_2017-06-21-low1-c.txt')
	dd = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-d_2015par/average_2017-06-21-low1-d.txt')
	de = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-e_2015par/average_2017-06-21-low1-e.txt')
	df = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-f_2015par/average_2017-06-21-low1-f.txt')
	dg = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-g_2015par/average_2017-06-21-low1-g.txt')
	dh = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-h_2015par/average_2017-06-21-low1-h.txt')

	real_all = np.array([db[:,1], dc[:,1], dd[:,1], de[:,1], df[:,1], dg[:,1], dh[:,1]])
	imag_all = np.array([db[:,2], dc[:,2], dd[:,2], de[:,2], df[:,2], dg[:,2], dh[:,2]])

	real_av = np.mean(real_all, axis=0)
	imag_av = np.mean(imag_all, axis=0)
	freq    = db[:,0]

	out_T = np.array([freq, real_av, imag_av])
	out   = out_T.T


	np.savetxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1_average_2015par/average_2017-06-21_2015par.txt', out, header='freq [Hz]\tre(antenna_s11)\tim(antenna_s11)')

	return out










def average_low_band1_2017_06_21_2017par():

	db = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-b_2017par/average_2017-06-21-low1-b_2017par.txt')
	dc = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-c_2017par/average_2017-06-21-low1-c_2017par.txt')
	dd = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-d_2017par/average_2017-06-21-low1-d_2017par.txt')
	de = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-e_2017par/average_2017-06-21-low1-e_2017par.txt')
	df = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-f_2017par/average_2017-06-21-low1-f_2017par.txt')
	dg = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-g_2017par/average_2017-06-21-low1-g_2017par.txt')
	dh = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-h_2017par/average_2017-06-21-low1-h_2017par.txt')

	real_all = np.array([db[:,1], dc[:,1], dd[:,1], de[:,1], df[:,1], dg[:,1], dh[:,1]])
	imag_all = np.array([db[:,2], dc[:,2], dd[:,2], de[:,2], df[:,2], dg[:,2], dh[:,2]])

	real_av = np.mean(real_all, axis=0)
	imag_av = np.mean(imag_all, axis=0)
	freq    = db[:,0]

	out_T = np.array([freq, real_av, imag_av])
	out   = out_T.T


	np.savetxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1_average_2017par/average_2017-06-21_2017par.txt', out, header='freq [Hz]\tre(antenna_s11)\tim(antenna_s11)')

	return out








def average_low_band1_2017_06_21_parameters_2017_07_rep1_and_2():

	db1 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-b_2017par_rep1/average_2017-06-21-low1-b_2017par_rep1.txt')
	dc1 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-c_2017par_rep1/average_2017-06-21-low1-c_2017par_rep1.txt')
	dd1 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-d_2017par_rep1/average_2017-06-21-low1-d_2017par_rep1.txt')
	de1 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-e_2017par_rep1/average_2017-06-21-low1-e_2017par_rep1.txt')
	df1 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-f_2017par_rep1/average_2017-06-21-low1-f_2017par_rep1.txt')
	dg1 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-g_2017par_rep1/average_2017-06-21-low1-g_2017par_rep1.txt')
	dh1 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-h_2017par_rep1/average_2017-06-21-low1-h_2017par_rep1.txt')


	db2 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-b_2017par_rep2/average_2017-06-21-low1-b_2017par_rep2.txt')
	dc2 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-c_2017par_rep2/average_2017-06-21-low1-c_2017par_rep2.txt')
	dd2 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-d_2017par_rep2/average_2017-06-21-low1-d_2017par_rep2.txt')
	de2 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-e_2017par_rep2/average_2017-06-21-low1-e_2017par_rep2.txt')
	df2 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-f_2017par_rep2/average_2017-06-21-low1-f_2017par_rep2.txt')
	dg2 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-g_2017par_rep2/average_2017-06-21-low1-g_2017par_rep2.txt')
	dh2 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1-h_2017par_rep2/average_2017-06-21-low1-h_2017par_rep2.txt')




	real_all_1 = np.array([db1[:,1], dc1[:,1], dd1[:,1], de1[:,1], df1[:,1], dg1[:,1], dh1[:,1]])
	imag_all_1 = np.array([db1[:,2], dc1[:,2], dd1[:,2], de1[:,2], df1[:,2], dg1[:,2], dh1[:,2]])

	real_av_1 = np.mean(real_all_1, axis=0)
	imag_av_1 = np.mean(imag_all_1, axis=0)




	real_all_2 = np.array([db2[:,1], dc2[:,1], dd2[:,1], de2[:,1], df2[:,1], dg2[:,1], dh2[:,1]])
	imag_all_2 = np.array([db2[:,2], dc2[:,2], dd2[:,2], de2[:,2], df2[:,2], dg2[:,2], dh2[:,2]])

	real_av_2 = np.mean(real_all_2, axis=0)
	imag_av_2 = np.mean(imag_all_2, axis=0)	






	freq    = db1[:,0]

	out1_T = np.array([freq, real_av_1, imag_av_1])
	out2_T = np.array([freq, real_av_2, imag_av_2])

	out1   = out1_T.T
	out2   = out2_T.T



	#np.savetxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1_average_2017par_rep1/average_2017-06-21_2017par_rep1.txt', out1, header='freq [Hz]\tre(antenna_s11)\tim(antenna_s11)')
	#np.savetxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2017-06-21-low1_average_2017par_rep2/average_2017-06-21_2017par_rep2.txt', out2, header='freq [Hz]\tre(antenna_s11)\tim(antenna_s11)')

	return db1, dc1, dd1, de1, df1, dg1, dh1, #out1, out2














def average_low_band2_2017_06_29_no_shield():

	d1 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/2017-06-29-low2-noshield-c/average_2017-06-29-low2-noshield-c.txt')
	d2 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/2017-06-29-low2-noshield-d/average_2017-06-29-low2-noshield-d.txt')
	d3 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/2017-06-29-low2-noshield-e/average_2017-06-29-low2-noshield-e.txt')
	d4 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/2017-06-29-low2-noshield-f/average_2017-06-29-low2-noshield-f.txt')

	real_all = np.array([d1[:,1], d2[:,1], d3[:,1], d4[:,1]])
	imag_all = np.array([d1[:,2], d2[:,2], d3[:,2], d4[:,2]])

	real_av = np.mean(real_all, axis=0)
	imag_av = np.mean(imag_all, axis=0)
	freq    = d1[:,0]

	out_T = np.array([freq, real_av, imag_av])
	out   = out_T.T


	np.savetxt('/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/2017-06-29-low2-noshield_average/average_2017-06-29_NO_SHIELD.txt', out, header='freq [Hz]\tre(antenna_s11)\tim(antenna_s11)')

	return out























def plot_low_band1_switch_comparison():

	# Loading files
	path   = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_05_25C/data/s11/raw/InternalSwitch/'
	oi,  f = rc.s1p_read(path + 'Int_Open1.s1p')
	si,  f = rc.s1p_read(path + 'Int_Short1.s1p')
	li,  f = rc.s1p_read(path + 'Int_Match1.s1p')

	om,   f = rc.s1p_read(path + 'Ext_Air_Open1.s1p')
	sm,   f = rc.s1p_read(path + 'Ext_Air_Short1.s1p')
	lm,   f = rc.s1p_read(path + 'Ext_Air_Load2.s1p')
	a1m,  f = rc.s1p_read(path + 'Ext_Air_6dB_2.s1p')
	a2m,  f = rc.s1p_read(path + 'Ext_Air_10dB_2.s1p')
	a1nam, f = rc.s1p_read(path + 'Ext_6dB_1.s1p')
	a2nam, f = rc.s1p_read(path + 'Ext_10dB_1.s1p')



	# Reflection references
	oref =  1*np.ones(len(f))
	sref = -1*np.ones(len(f))
	#lref =  0*np.ones(len(f))
	lref = rc.impedance2gamma(50.05, 50) * np.ones(len(f))


	# First correction at the switch
	os, x1, x2, x3  = rc.de_embed(oref, sref, lref, oi, si, li, om)
	ss, x1, x2, x3  = rc.de_embed(oref, sref, lref, oi, si, li, sm)
	ls, x1, x2, x3  = rc.de_embed(oref, sref, lref, oi, si, li, lm)
	a1s, x1, x2, x3 = rc.de_embed(oref, sref, lref, oi, si, li, a1m)
	a2s, x1, x2, x3 = rc.de_embed(oref, sref, lref, oi, si, li, a2m)
	a1nas, x1, x2, x3 = rc.de_embed(oref, sref, lref, oi, si, li, a1nam)
	a2nas, x1, x2, x3 = rc.de_embed(oref, sref, lref, oi, si, li, a2nam)	


	# Absolute correction
	o, x1, x2, x3 = eg.low_band1_switch_correction_2017_05_25C_CHANGES_IN_LOAD(os,  f_in = f)
	s, x1, x2, x3 = eg.low_band1_switch_correction_2017_05_25C_CHANGES_IN_LOAD(ss,  f_in = f)
	l, x1, x2, x3 = eg.low_band1_switch_correction_2017_05_25C_CHANGES_IN_LOAD(ls,  f_in = f)
	a1, x1, x2, x3 = eg.low_band1_switch_correction_2017_05_25C_CHANGES_IN_LOAD(a1s, f_in = f)
	a2, x1, x2, x3 = eg.low_band1_switch_correction_2017_05_25C_CHANGES_IN_LOAD(a2s, f_in = f)
	a1na, x1, x2, x3 = eg.low_band1_switch_correction_2017_05_25C_CHANGES_IN_LOAD(a1nas, f_in = f)
	a2na, x1, x2, x3 = eg.low_band1_switch_correction_2017_05_25C_CHANGES_IN_LOAD(a2nas, f_in = f)	




	resistance_of_match = 50.11
	md = 1
	oa, sa, la = rc.agilent_85033E(f, resistance_of_match, md)

	rin_o  = rc.terminated_airline_8043S15(f, oa)
	rin_s  = rc.terminated_airline_8043S15(f, sa)
	rin_l  = rc.terminated_airline_8043S15(f, la)
	rin_a1 = rc.terminated_airline_8043S15(f, a1na)
	rin_a2 = rc.terminated_airline_8043S15(f, a2na)



	plt.subplot(5,2,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(o)))
	plt.plot(f/1e6, 20*np.log10(np.abs(rin_o)))

	plt.subplot(5,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(o)))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(rin_o)))


	plt.subplot(5,2,3)
	plt.plot(f/1e6, 20*np.log10(np.abs(s)))
	plt.plot(f/1e6, 20*np.log10(np.abs(rin_s)))

	plt.subplot(5,2,4)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(s)))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(rin_s)))

	plt.subplot(5,2,5)
	plt.plot(f/1e6, 20*np.log10(np.abs(l)))
	plt.plot(f/1e6, 20*np.log10(np.abs(rin_l)))

	plt.subplot(5,2,6)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(l)))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(rin_l)))







	plt.subplot(5,2,7)
	plt.plot(f/1e6, 20*np.log10(np.abs(a1)))
	plt.plot(f/1e6, 20*np.log10(np.abs(rin_a1)))

	plt.subplot(5,2,8)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(a1)))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(rin_a1)))	

	plt.subplot(5,2,9)
	plt.plot(f/1e6, 20*np.log10(np.abs(a2)))
	plt.plot(f/1e6, 20*np.log10(np.abs(rin_a2)))

	plt.subplot(5,2,10)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(a2)))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(rin_a2)))







	return o















def plots_low_band2_analysis():


	flow  = 61
	fhigh = 99		

	fb, tb_0, wb_0, rb_0 = eg.data_analysis_low_band_spectra_average(6, GHA1=4, GHA2=14)
	fbb = fb[(fb>=flow) & (fb<=fhigh)]; tbb_0 = tb_0[(fb>=flow) & (fb<=fhigh)]; wbb_0 = wb_0[(fb>=flow) & (fb<=fhigh)]






	return 0

















def useless(f, r, w, m):

	#datelist = [98, 99, 100, 101, 102, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 120, 121, 123,124,125,126,127,128,129,130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142]

	datelist = [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171]

	#datelist = [181, 182, 183, 185, 186, 187, 188, 189]  #[181, 183, 185, 186]


	for i in range(len(datelist)):

		rk = r[m[:,1] == datelist[i], :]
		wk = w[m[:,1] == datelist[i], :]

		if i == 0:
			rt = np.copy(rk)
			wt = np.copy(wk)

		elif i > 0:
			rt = np.vstack((rt, rk))
			wt = np.vstack((wt, wk))



	return rt, wt











def plot_beam_chromaticity():


	f = np.arange(60, 99.01, 0.02)
	LST = np.arange(0, 24.005, 0.01)


	cf1 = eg.antenna_beam_factor_interpolation('low_band_2015',  LST, f, case_beam_factor=1)
	cf2 = eg.antenna_beam_factor_interpolation('low_band_2015',  LST, f, case_beam_factor=2)
	cf3 = eg.antenna_beam_factor_interpolation('low_band2_2017', LST, f, case_beam_factor=1)
	cf4 = eg.antenna_beam_factor_interpolation('low_band2_2017', LST, f, case_beam_factor=2)

	GHA = eg.lst2gha(LST)
	GHA[GHA < 0] = GHA[GHA < 0] + 24



	# 
	GHA_array = np.arange(6, 19, 1)

	r1 = np.zeros((len(GHA_array), len(f)))
	r2 = np.zeros((len(GHA_array), len(f)))
	r3 = np.zeros((len(GHA_array), len(f)))
	r4 = np.zeros((len(GHA_array), len(f)))

	for i in range(len(GHA_array)):



		GHA_low  = GHA_array[i] - 0.5
		GHA_high = GHA_array[i] + 0.5

		print([GHA_low, GHA_high])

		b1 = cf1[(GHA >= GHA_low) & (GHA <= GHA_high), :]
		b2 = cf2[(GHA >= GHA_low) & (GHA <= GHA_high), :]
		b3 = cf3[(GHA >= GHA_low) & (GHA <= GHA_high), :]
		b4 = cf4[(GHA >= GHA_low) & (GHA <= GHA_high), :]

		a1 = np.mean(b1, axis=0)
		a2 = np.mean(b2, axis=0)
		a3 = np.mean(b3, axis=0)
		a4 = np.mean(b4, axis=0)

		p1 = eg.fit_polynomial_fourier('EDGES_polynomial', f/200, a1, 4)
		p2 = eg.fit_polynomial_fourier('EDGES_polynomial', f/200, a2, 4)
		p3 = eg.fit_polynomial_fourier('EDGES_polynomial', f/200, a3, 4)
		p4 = eg.fit_polynomial_fourier('EDGES_polynomial', f/200, a4, 4)

		m1 = p1[1]
		m2 = p2[1]
		m3 = p3[1]
		m4 = p4[1]

		r1[i, :] = a1 #- m1
		r2[i, :] = a2 #- m2
		r3[i, :] = a3 #- m3
		r4[i, :] = a4 #- m4









	#print(a1.shape)

	#plt.subplot(2,2,1)
	#plt.plot(f, b1.T, 'r')
	#plt.plot(f, a1, 'b', linewidth=3)
	#plt.xlim([50, 100])
	#plt.xticks(np.arange(50, 101, 5))
	#plt.ylim([0.985, 1.025])
	#plt.grid()
	#plt.ylabel('average chromaticity factor')
	#plt.title('Low-Band 1 with Original Ground Plane, -7 degrees AZ')


	#plt.subplot(2,2,2)
	#plt.plot(f, b2.T, 'r')
	#plt.plot(f, a2, 'b', linewidth=3)
	#plt.xlim([50, 100])
	#plt.xticks(np.arange(50, 101, 5))
	#plt.ylim([0.985, 1.025])
	#plt.grid()
	##plt.ylabel('average chromaticity factor')
	#plt.title('Low-Band 1 with Extended Ground Plane, -7 degrees AZ')


	#plt.subplot(2,2,3)
	#plt.plot(f, b3.T, 'r')
	#plt.plot(f, a3, 'b', linewidth=3)
	#plt.xlim([50, 100])
	#plt.xticks(np.arange(50, 101, 5))
	#plt.ylim([0.985, 1.025])
	#plt.grid()
	#plt.ylabel('average chromaticity factor')
	#plt.xlabel('frequency [MHz]')
	#plt.title('Low-Band 2, -2 degrees AZ')

	#plt.subplot(2,2,4)
	#plt.plot(f, b4.T, 'r')
	#plt.plot(f, a4, 'b', linewidth=3)
	#plt.xlim([50, 100])
	#plt.xticks(np.arange(50, 101, 5))
	#plt.ylim([0.985, 1.025])
	#plt.grid()
	#plt.xlabel('frequency [MHz]')
	#plt.title('Low-Band 2, +87 degrees AZ')


	return f, r1, r2, r3, r4, GHA_array



















def simulated_GHA_residuals(f, ta, LST, flow, fhigh, Nfit, GHA_low, GHA_high, fig_name, Nspec=72, sx=8, sy=20):

	ff = f[(f>=flow) & (f <=fhigh)]
	tt = ta[:, (f>=flow) & (f <=fhigh)]


	r = np.zeros((len(tt[:,0]), len(ff)))
	for i in range(len(tt[:,0])):
		p = eg.fit_polynomial_fourier('EDGES_polynomial', ff/200, tt[i,:], Nfit)
		r[i,:] = tt[i,:] - p[1]




	#kk = eg.plot_spectra_residuals(ff, , np.ones((len(GHA_array), len(f))), 'daily', GHA_array, K=0.04, rms_offset=0, flow_lim=59, fhigh_lim=105, xticks_low=60, xticks_high=100, xticks_delta=5, rms_text_freq=99.5, fontsize=10, size_x_column=8, size_y=8, NSC=13, y_label='GHA', plot_name='cf_low2_EW')



	GHA = eg.lst2gha(LST)
	GHA[GHA<0] = GHA[GHA<0] + 24


	iGHA = np.argsort(GHA)


	r_GHA = r[iGHA,:]
	GHA   = GHA[iGHA]


	GHA_c   = GHA[(GHA>=GHA_low) & (GHA<=GHA_high)]
	r_GHA_c = r_GHA[(GHA>=GHA_low) & (GHA<=GHA_high), :]


	kk = eg.plot_spectra_residuals(ff, r_GHA_c, np.ones((len(r[:,0]), len(ff))), 'daily', GHA_c, K=0.3, rms_offset=0, flow_lim=flow-1, fhigh_lim=fhigh+6, xticks_low=flow, xticks_high=fhigh, xticks_delta=5, rms_text_freq=101, fontsize=10, size_x_column=sx, size_y=sy, NSC=Nspec, y_label='GHA', plot_name=fig_name)


	return ff, r







def beam_chromaticity_transpose():

	tant = np.genfromtxt('/arlstorage/home/faculty/ramo7131/DATA/EDGES/calibration/beam_factors/low_band2/test/low_band_blade_guzman_haslam_FEKO_40-100MHz_plus87deg_reffreq_76MHz_tant_KKK.txt')

	tant_T = tant.T

	path_save = home_folder + '/DATA/EDGES/calibration/beam_factors/low_band2/test/'
	np.savetxt(path_save + 'low_band_blade_guzman_haslam_FEKO_40-100MHz_plus87deg_reffreq_76MHz_tant.txt', tant_T)

	return tant_T













def plot_low_band_sensitivity_to_switch_parameter_temperature():

	plot_path = home_folder + '/DATA/EDGES/results/plots/20170712/'



	f = np.arange(50,101,1)
	o15 = eg.low_band_switch_correction(0, 18.67, f_in = f)
	o25 = eg.low_band_switch_correction(0, 27.16, f_in = f)
	o35 = eg.low_band_switch_correction(0, 35.31, f_in = f)



	plt.figure(1, figsize=[20,12])

	plt.subplot(2,3,1)
	plt.plot(f,  20*np.log10(np.abs(o25[1])) -     20*np.log10(np.abs(o25[1]))  )
	plt.plot(f,  20*np.log10(np.abs(o15[1])) -     20*np.log10(np.abs(o25[1]))  )
	plt.plot(f,  20*np.log10(np.abs(o35[1])) -     20*np.log10(np.abs(o25[1]))  )
	plt.grid()
	plt.title('S11')
	plt.ylabel(r'$\Delta$ magnitude [dB]')


	plt.subplot(2,3,2)
	plt.plot(f,  20*np.log10(np.abs(o25[2])) -     20*np.log10(np.abs(o25[2]))  )
	plt.plot(f,  20*np.log10(np.abs(o15[2])) -     20*np.log10(np.abs(o25[2]))  )
	plt.plot(f,  20*np.log10(np.abs(o35[2])) -     20*np.log10(np.abs(o25[2]))  )
	plt.grid()
	plt.title('S12S21')

	plt.subplot(2,3,3)
	plt.plot(f,  20*np.log10(np.abs(o25[3])) -     20*np.log10(np.abs(o25[3]))  )
	plt.plot(f,  20*np.log10(np.abs(o15[3])) -     20*np.log10(np.abs(o25[3]))  )
	plt.plot(f,  20*np.log10(np.abs(o35[3])) -     20*np.log10(np.abs(o25[3]))  )
	plt.grid()
	plt.title('S22')
	plt.legend(['$27.16^{\circ}$C - $27.16^{\circ}$C', '$18.67^{\circ}$C - $27.16^{\circ}$C', '$35.31^{\circ}$C - $27.16^{\circ}$C'], loc=0)




	plt.subplot(2,3,4)
	plt.plot(f,  (180/np.pi)*np.unwrap(np.angle(o25[1])) -     (180/np.pi)*np.unwrap(np.angle(o25[1]))  )
	plt.plot(f,  (180/np.pi)*np.unwrap(np.angle(o15[1])) -     (180/np.pi)*np.unwrap(np.angle(o25[1]))  )
	plt.plot(f,  (180/np.pi)*np.unwrap(np.angle(o35[1])) -     (180/np.pi)*np.unwrap(np.angle(o25[1]))  )
	plt.grid()
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')

	plt.subplot(2,3,5)
	plt.plot(f,  (180/np.pi)*np.unwrap(np.angle(o25[2])) -     (180/np.pi)*np.unwrap(np.angle(o25[2]))  )
	plt.plot(f,  (180/np.pi)*np.unwrap(np.angle(o15[2])) -     (180/np.pi)*np.unwrap(np.angle(o25[2]))  )
	plt.plot(f,  (180/np.pi)*np.unwrap(np.angle(o35[2])) -     (180/np.pi)*np.unwrap(np.angle(o25[2]))  )
	plt.grid()
	plt.xlabel('frequency [MHz]')

	plt.subplot(2,3,6)
	plt.plot(f,  (180/np.pi)*np.unwrap(np.angle(o25[3])) -     (180/np.pi)*np.unwrap(np.angle(o25[3]))  )
	plt.plot(f,  (180/np.pi)*np.unwrap(np.angle(o15[3])) -     (180/np.pi)*np.unwrap(np.angle(o25[3]))  )
	plt.plot(f,  (180/np.pi)*np.unwrap(np.angle(o35[3])) -     (180/np.pi)*np.unwrap(np.angle(o25[3]))  )
	plt.grid()
	plt.xlabel('frequency [MHz]')

	# saving plot
	plt.savefig(plot_path + 'switch_s-parameters.pdf', bbox_inches='tight')
	plt.close()












	o0        = eg.antenna_s11_correction('low_band', '20170403_1', av_trace_index=np.arange(0,2), save='no', save_raw='no', plot='no')
	o15       = eg.antenna_s11_correction('low_band', '20170403_1', av_trace_index=np.arange(0,2), save='no', save_raw='no', plot='no', T_switch_low1=18.67)
	o25       = eg.antenna_s11_correction('low_band', '20170403_1', av_trace_index=np.arange(0,2), save='no', save_raw='no', plot='no', T_switch_low1=27.16)
	o35       = eg.antenna_s11_correction('low_band', '20170403_1', av_trace_index=np.arange(0,2), save='no', save_raw='no', plot='no', T_switch_low1=35.31)


	x0  = o0[0]
	x15 = o15[0]
	x25 = o25[0]
	x35 = o35[0]


	corr_path = home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/different_temperatures/'

	np.savetxt(corr_path + 'S11_blade_low_band_2017_093_receiver_15degC.txt', x15, header='freq [Hz]\tre(antenna_s11)\tim(antenna_s11)')	
	np.savetxt(corr_path + 'S11_blade_low_band_2017_093_receiver_25degC.txt', x25, header='freq [Hz]\tre(antenna_s11)\tim(antenna_s11)')
	np.savetxt(corr_path + 'S11_blade_low_band_2017_093_receiver_35degC.txt', x35, header='freq [Hz]\tre(antenna_s11)\tim(antenna_s11)')





	plt.figure(2, figsize=[14, 8])
	plt.subplot(1,2,1)
	#plt.plot(x15[:,0]/1e6,  20*np.log10(np.abs(x0[:,1]+1j*x0[:,2])) -     20*np.log10(np.abs(x0[:,1]+1j*x0[:,2]))  )
	plt.plot(x15[:,0]/1e6,  20*np.log10(np.abs(x15[:,1]+1j*x15[:,2])) -   20*np.log10(np.abs(x0[:,1]+1j*x0[:,2]))  )
	plt.plot(x15[:,0]/1e6,  20*np.log10(np.abs(x25[:,1]+1j*x25[:,2])) -   20*np.log10(np.abs(x0[:,1]+1j*x0[:,2]))  )	
	plt.plot(x15[:,0]/1e6,  20*np.log10(np.abs(x35[:,1]+1j*x35[:,2])) -   20*np.log10(np.abs(x0[:,1]+1j*x0[:,2]))  )


	plt.xlim([50, 100])
	plt.ylim([-0.04, 0.04])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ magnitude [dB]')




	plt.subplot(1,2,2)
	#plt.plot(x15[:,0]/1e6,  (180/np.pi)*np.unwrap(np.angle(x0[:,1]+1j*x0[:,2]))   -   (180/np.pi)*np.unwrap(np.angle(x0[:,1]+1j*x0[:,2]))  )
	plt.plot(x15[:,0]/1e6,  (180/np.pi)*np.unwrap(np.angle(x15[:,1]+1j*x15[:,2])) -   (180/np.pi)*np.unwrap(np.angle(x0[:,1]+1j*x0[:,2]))  )
	plt.plot(x15[:,0]/1e6,  (180/np.pi)*np.unwrap(np.angle(x25[:,1]+1j*x25[:,2])) -   (180/np.pi)*np.unwrap(np.angle(x0[:,1]+1j*x0[:,2]))  )
	plt.plot(x15[:,0]/1e6,  (180/np.pi)*np.unwrap(np.angle(x35[:,1]+1j*x35[:,2])) -   (180/np.pi)*np.unwrap(np.angle(x0[:,1]+1j*x0[:,2]))  )

	plt.xlim([50, 100])
	plt.ylim([-0.2, 0.2])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase [deg]')
	plt.legend(['$18.67^{\circ}$C - $34^{\circ}$C','$27.16^{\circ}$C - $34^{\circ}$C','$35.31^{\circ}$C - $34^{\circ}$C'], loc=0)

	# saving plot
	plt.savefig(plot_path + 'delta_s11.pdf', bbox_inches='tight')
	plt.close()		



	return 0 #f, ant_s11














def plot_residuals_GHA(f_raw, r_raw, w_raw, GHA_raw, GHA_center_array):







	flag = 0

	for i in range(len(GHA_center_array)):

		print('GHA average: ' + str(GHA_center_array[i]))

		dGHA = ( GHA_center_array[1] - GHA_center_array[0] ) / 2
		Gl = GHA_center_array[i] - (dGHA/2)
		Gh = GHA_center_array[i] + (dGHA/2)

		r = r_raw[(GHA_raw>=Gl) & (GHA_raw<=Gh), :]
		w = w_raw[(GHA_raw>=Gl) & (GHA_raw<=Gh), :]

		if np.sum(r)>0:

			# Spectral averaging
			rav, wav = spectral_averaging(r, w)

			# Spectral binning
			fb, rb, wb = spectral_binning_number_of_samples(f_raw, rav, wav, nsamples=64)

			if flag == 0:
				rb_GHA = np.zeros((len(GHA_center_array), len(fb)))
				wb_GHA = np.zeros((len(GHA_center_array), len(fb)))

				flag = 1

			rb_GHA[i, :] = rb
			wb_GHA[i, :] = wb


	return 0










def low2_EW_with_shield_time_averages():

	o = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_shield_153_inpit_Haslam.hdf5')

	fr = o[0]
	rr = o[2]
	wr = o[3]
	mr = o[4]




	rs           = rr[(mr[:,1] == 155) | (mr[:,1] == 156) | (mr[:,1] == 157) | (mr[:,1] == 158) | (mr[:,1] == 159) | (mr[:,1] == 160), :]
	ws           = wr[(mr[:,1] == 155) | (mr[:,1] == 156) | (mr[:,1] == 157) | (mr[:,1] == 158) | (mr[:,1] == 159) | (mr[:,1] == 160), :]	
	rav, wav     = eg.spectral_averaging(rs, ws)

	fb, rb0, wb0 = eg.spectral_binning_number_of_samples(fr, rav, wav, nsamples=64)






	rs           = rr[(mr[:,1] == 155) | (mr[:,1] == 156) | (mr[:,1] == 158) | (mr[:,1] == 159) | (mr[:,1] == 160), :]
	ws           = wr[(mr[:,1] == 155) | (mr[:,1] == 156) | (mr[:,1] == 158) | (mr[:,1] == 159) | (mr[:,1] == 160), :]	
	rav, wav     = eg.spectral_averaging(rs, ws)

	fb, rb1, wb1 = eg.spectral_binning_number_of_samples(fr, rav, wav, nsamples=64)






	rs           = rr[(mr[:,1] == 161) | (mr[:,1] == 162) | (mr[:,1] == 163) | (mr[:,1] == 164) | (mr[:,1] == 165), :]
	ws           = wr[(mr[:,1] == 161) | (mr[:,1] == 162) | (mr[:,1] == 163) | (mr[:,1] == 164) | (mr[:,1] == 165), :]	
	rav, wav     = eg.spectral_averaging(rs, ws)

	fb, rb2, wb2 = eg.spectral_binning_number_of_samples(fr, rav, wav, nsamples=64)	






	rs           = rr[(mr[:,1] == 166) | (mr[:,1] == 167) | (mr[:,1] == 168) | (mr[:,1] == 169) | (mr[:,1] == 170) | (mr[:,1] == 171), :]
	ws           = wr[(mr[:,1] == 166) | (mr[:,1] == 167) | (mr[:,1] == 168) | (mr[:,1] == 169) | (mr[:,1] == 170) | (mr[:,1] == 171), :]	
	rav, wav     = eg.spectral_averaging(rs, ws)

	fb, rb3, wb3 = eg.spectral_binning_number_of_samples(fr, rav, wav, nsamples=64)	










	rs           = rr[(mr[:,1] == 155) | (mr[:,1] == 156) | (mr[:,1] == 158) | (mr[:,1] == 159) | (mr[:,1] == 160) | (mr[:,1] == 161) | (mr[:,1] == 162) | (mr[:,1] == 163) | (mr[:,1] == 164) | (mr[:,1] == 165), :]
	ws           = wr[(mr[:,1] == 155) | (mr[:,1] == 156) | (mr[:,1] == 158) | (mr[:,1] == 159) | (mr[:,1] == 160) | (mr[:,1] == 161) | (mr[:,1] == 162) | (mr[:,1] == 163) | (mr[:,1] == 164) | (mr[:,1] == 165), :]	
	rav, wav     = eg.spectral_averaging(rs, ws)

	fb, rb4, wb4 = eg.spectral_binning_number_of_samples(fr, rav, wav, nsamples=64)





	rs           = rr[(mr[:,1] == 155) | (mr[:,1] == 156) | (mr[:,1] == 158) | (mr[:,1] == 159) | (mr[:,1] == 160) | (mr[:,1] == 161) | (mr[:,1] == 162) | (mr[:,1] == 163) | (mr[:,1] == 164) | (mr[:,1] == 165) | (mr[:,1] == 166) | (mr[:,1] == 167) | (mr[:,1] == 168) | (mr[:,1] == 169) | (mr[:,1] == 170) | (mr[:,1] == 171), :]
	ws           = wr[(mr[:,1] == 155) | (mr[:,1] == 156) | (mr[:,1] == 158) | (mr[:,1] == 159) | (mr[:,1] == 160) | (mr[:,1] == 161) | (mr[:,1] == 162) | (mr[:,1] == 163) | (mr[:,1] == 164) | (mr[:,1] == 165) | (mr[:,1] == 166) | (mr[:,1] == 167) | (mr[:,1] == 168) | (mr[:,1] == 169) | (mr[:,1] == 170) | (mr[:,1] == 171), :]	
	rav, wav     = eg.spectral_averaging(rs, ws)

	fb, rb5, wb5 = eg.spectral_binning_number_of_samples(fr, rav, wav, nsamples=64)







	return fb, rb0, wb0, rb1, wb1, rb2, wb2, rb3, wb3, rb4, wb4, rb5, wb5












def plot_low_band_signature_search():

	kk = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_shield_153_inpit_Haslam.hdf5')
	fb = kk[18]
	tb = kk[19]
	wb = kk[21]

	tau = 7	
	o = eg.test_low_band_signature_search(fb, tb, wb, 61, 99, 4, tau, SNR_or_errorbar='SNR')       #       'errorbar'
	fbb    = o[0]
	res_fg = o[3]
	rms_fg = o[4]
	res_21 = o[-6]
	rms_21 = o[-7]
	model  = o[-1]
	a21    = o[-5]
	d21    = o[-4]
	vr     = o[-3]
	dv     = o[-2]


	plt.close()
	plt.close()

	plt.subplot(3,1,1)
	plt.plot(fbb, 1000*res_fg)
	plt.ylim([-500, 500])
	plt.grid()
	plt.ylabel('[mK]')
	plt.text(85, -400, 'RMS = '+str(round(1000*rms_fg))+' mK')

	plt.subplot(3,1,2)
	plt.plot(fbb, -1000*model)
	plt.ylim([-1300, 100])
	plt.grid()
	plt.ylabel('[mK]')
	plt.text(87, -1*200, r'a21     = ' + str(round(1000*a21)) + ' mK')
	plt.text(87, -1*400, r'd21     = ' + str(round(1000*d21)) + ' mK')
	plt.text(87, -1*600, r'snr     = ' + str(round(a21/d21)))
	plt.text(87, -1*800, r'$\nu_r$       = ' + str(round(vr)) + ' MHz')
	plt.text(87, -1*1000, r'$\Delta\nu$     = ' + str(dv) + ' MHz')

	plt.subplot(3,1,3)
	plt.plot(fbb, 1000*res_21)
	plt.ylim([-500, 500])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('[mK]')
	plt.text(85, -400, 'RMS = '+str(round(1000*rms_21))+' mK')	



	return 0








def plot_chromaticity_factors():


	dH  = np.genfromtxt('/arlstorage/home/faculty/ramo7131/DATA/EDGES/calibration/beam_factors/low_band2/test/low_band_blade_haslam_FEKO_40-100MHz_plus87deg_reffreq_76MHz_data.txt')
	dGH = np.genfromtxt('/arlstorage/home/faculty/ramo7131/DATA/EDGES/calibration/beam_factors/low_band2/test/low_band_blade_guzman_haslam_FEKO_40-100MHz_plus87deg_reffreq_76MHz_data.txt')


	vl1 = -5
	vh1 = 5

	vl2 = -5
	vh2 = 5

	vl3 = -1.3
	vh3 = 1.3

	FS = 18


	plt.close()
	plt.figure(1, figsize = [19,10])
	plt.subplot(1,3,1)
	plt.imshow((dH-1)*100, interpolation='none', aspect='auto', extent=[40, 100, 24, 0], vmin=vl1, vmax=vh1)
	plt.yticks(np.arange(0,25,3))
	plt.xlim(41, 99)
	plt.grid()
	plt.ylabel('LST [Hr]')
	plt.xlabel('frequency [MHz]')
	plt.colorbar()
	plt.title('Scaled Haslam [ % ]\n', fontsize=FS)
	plt.subplot(1,3,2)




	plt.imshow((dGH-1)*100, interpolation='none', aspect='auto', extent=[40, 100, 24, 0], vmin=vl2, vmax=vh2)
	plt.yticks(np.arange(0,25,3))
	plt.xlim(41, 99)
	plt.grid()
	plt.ylabel('LST [Hr]')
	plt.xlabel('frequency [MHz]')
	plt.colorbar()
	plt.title('Guzman-Haslam Interpolation [ % ]\n', fontsize=FS)

	plt.subplot(1,3,3)
	plt.imshow((dGH - dH)*100, interpolation='none', aspect='auto', extent=[40, 100, 24, 0], vmin=vl3, vmax=vh3)
	plt.yticks(np.arange(0,25,3))
	plt.xlim(41, 99)
	plt.grid()
	plt.ylabel('LST [Hr]')
	plt.xlabel('frequency [MHz]')
	plt.colorbar()
	plt.title('Difference [ % ]\n', fontsize=FS)






	# saving plot
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170719/chromaticity_factors.pdf', bbox_inches='tight')
	plt.close()






	return 0





def saving_balun_loss_for_alan():

	ff, il, ih = eg.frequency_edges(50, 100)
	f          = ff[il:ih+1]
	s11_ant    = eg.models_antenna_s11_remove_delay('low_band2_2017', 'blade', f, antenna_s11_day = 153, model_type='polynomial', Nfit=10, delay_0=0.175)
	Lb, Lc          = eg.balun_and_connector_loss('low_band2_2017', f, s11_ant)


	outT = np.array([f, Lb*Lc])
	out  = outT.T


	np.savetxt(home_folder + '/Desktop/low_band_balun_connector_loss.txt', out, header='freq [MHz]\tloss')


	return f, Lb, Lc




















def plots_low_band1_analysis():


	# Loading data
	o = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_test.hdf5')




	# GHA averages
	tbg = o[15]
	wbg = o[17]



	# Total average over 10-14 (9.5 - 14.5)
	fr = o[0]
	tr = o[1]
	rr = o[2]
	wr = o[3]
	pr = o[4]
	mr = o[5]

	GHA_raw              = mr[:,4]
	GHA_raw[GHA_raw < 0] = GHA_raw[GHA_raw < 0] + 24


	# Spectral averaging
	rav_t, wav_t = eg.spectral_averaging(rr[(GHA_raw >= 9.5) & (GHA_raw <= 14.5), :], wr[(GHA_raw >= 9.5) & (GHA_raw <= 14.5), :])

	# Spectral binning
	fb, rb_t, wb_t = eg.spectral_binning_number_of_samples(fr, rav_t, wav_t, nsamples=64)


	# Average model parameters
	pb_t = np.mean(pr[(GHA_raw >= 9.5) & (GHA_raw <= 14.5), :], axis=0)

	# Evaluating foreground model at binned frequencies
	tb_fg_t = eg.model_evaluate('EDGES_polynomial', pb_t, fb/200)

	# Binned total temperature
	tb_t = tb_fg_t + rb_t	







	# Total average over 6-18 (5.5 - 18.5)
	fb = o[7]
	tb = o[22]
	wb = o[24]	





	# Parameter estimation
	p21_all  = np.zeros(15)
	dp21_all = np.zeros(15)
	vr_all   = np.zeros(15)
	dv_all   = np.zeros(15)	
	rms1_all  = np.zeros(15)
	rms2_all  = np.zeros(15)

	model_all = np.zeros((15, len(fb)))
	res1_all  = np.zeros((15, len(fb)))
	res2_all  = np.zeros((15, len(fb)))



	# Estimates for each GHA
	for i in range(13):
		out   = eg.test_low_band_signature_search(fb, tbg[i,:], wbg[i,:], 61, 99, 4, 7, 'SNR')
		p21   = out[-5]
		dp21  = out[-4]
		vr    = out[-3]
		dv    = out[-2]
		rms1  = out[4]
		rms2  = out[-7]		

		model = out[-1]
		res1  = out[3]
		res2  = out[-6]





		p21_all[i]     = p21
		dp21_all[i]    = dp21
		vr_all[i]      = vr
		dv_all[i]      = dv
		rms1_all[i]    = rms1
		rms2_all[i]    = rms2		

		model_all[i,:] = model
		res1_all[i,:]  = res1
		res2_all[i,:]  = res2




	# Estimates for final average
	out = eg.test_low_band_signature_search(fb, tb, wb, 61, 99, 4, 7, 'SNR')

	p21_all[13]     = out[-5]
	dp21_all[13]    = out[-4]
	vr_all[13]      = out[-3]
	dv_all[13]      = out[-2]
	rms1_all[13]    = out[4]
	rms2_all[13]    = out[-7] 

	model_all[13,:] = out[-1]
	res1_all[13,:]  = out[3]
	res2_all[13,:]  = out[-6]






	# Estimates for average GHA (9.5 - 14.5) 
	out = eg.test_low_band_signature_search(fb, tb_t, wb_t, 61, 99, 4, 7, 'SNR')

	p21_all[14]     = out[-5]
	dp21_all[14]    = out[-4]
	vr_all[14]      = out[-3]
	dv_all[14]      = out[-2]
	rms1_all[14]    = out[4]
	rms2_all[14]    = out[-7] 

	model_all[14,:] = out[-1]
	res1_all[14,:]  = out[3]
	res2_all[14,:]  = out[-6]













	# Plots
	# -------------------------------------------


	# Figure 1
	plt.figure(1)
	plt.subplot(1, 2, 1)
	for i in range(13):

		if np.mod(i,2) == 0:
			c = 'b'
		else:
			c = 'r'

		plt.plot(fb, res1_all[i,:] - i*0.6, c)
		plt.text(99.5, -0.6*i, str(int(1000*rms1_all[i])) + ' mK', weight='bold')		

	plt.xlim([60, 110])
	plt.ylim([-0.6*13, 0.6])
	plt.yticks(np.arange(-0.6*12, 0.1, 0.6), np.arange(18, 5.1, -1))
	plt.grid()

	plt.xlabel('frequency [MHz]')
	plt.ylabel('GHA [600 mK per division]')





	plt.subplot(1, 2, 2)
	for i in range(13):

		if np.mod(i,2) == 0:
			c = 'b'
		else:
			c = 'r'

		plt.plot(fb, res2_all[i,:] - i*0.6, c)
		plt.text(99.5, -0.6*i, str(int(1000*rms2_all[i])) + ' mK', weight='bold')
		plt.text(112, -0.6*i, r'$a_{21}$=' + str(int(1000*p21_all[i])) + ' mK')
		#, $\nu_r$=' + np.str(np.round(vr_all[i],1)) + r' MHz, $\Delta\nu$=' + np.str(np.round(dv_all[i],1)) + ' MHz')

	plt.xlim([60, 110])
	plt.ylim([-0.6*13, 0.6])
	plt.yticks(np.arange(-0.6*12, 0.1, 0.6), np.arange(18, 5.1, -1))
	plt.grid()

	plt.xlabel('frequency [MHz]')
	#plt.ylabel('GHA [100 mK per division]')	








	# Figure 2 
	GHA = np.arange(6, 19, 1)

	plt.figure(2)
	plt.subplot(3,1,1)
	plt.errorbar(GHA, 1000*p21_all[0:-2], 1000*dp21_all[0:-2], fmt='o-')
	plt.xlim([5, 19])
	plt.grid()
	plt.ylabel(r'$a_{21}$ [mK]', fontsize=18)

	plt.subplot(3,1,2)
	plt.plot(GHA, vr_all[0:-2], '.-', markersize=10)
	plt.xlim([5, 19])
	plt.grid()	
	plt.ylabel(r'$\nu_r$ [MHz]', fontsize=18)

	plt.subplot(3,1,3)
	plt.plot(GHA, dv_all[0:-2], '.-', markersize=10)
	plt.xlim([5, 19])
	plt.grid()
	plt.ylabel(r'$\Delta\nu$ [MHz]', fontsize=18)
	plt.xlabel('GHA [Hr]')






	# Figure 3
	plt.figure(3)
	plt.plot(fb, 1000*res1_all[13,:], 'b')
	plt.plot(fb, 1000*(res2_all[13,:]  - 0.4), 'r')
	plt.plot(fb, -1000*(model_all[13,:] + 0.8), 'k')

	plt.text(99.5, 0,         'RMS=' + str(int(1000*rms1_all[-2])) + ' mK', weight='bold')
	plt.text(99.5, -1000*0.4, 'RMS=' + str(int(1000*rms2_all[-2])) + ' mK', weight='bold')


	plt.text(99.5, -1000*0.8,         r'$a_{21}$='      + str(int(1000*p21_all[-2])) + ' mK')
	plt.text(99.5, -1000*0.9,         r'$\sigma_{21}$=' + str(int(1000*dp21_all[-2])) + ' mK')
	plt.text(99.5, -1000*1.0,         r'$\nu_r$='       + str(np.round(vr_all[-2],1)) + ' MHz')
	plt.text(99.5, -1000*1.1,         r'$\Delta\nu$='   + str(np.round(dv_all[-2],1)) + ' MHz')


	plt.xlabel('frequency [MHz]')
	plt.ylabel('temperature [200 mK per division]')
	plt.xlim([60, 110])
	plt.ylim([-1600, 200])
	plt.yticks(np.arange(-1400, 100, 200), [])
	plt.grid()








	# Figure 4
	plt.figure(4)
	plt.plot(fb, 1000*res1_all[14,:], 'b')
	plt.plot(fb, 1000*(res2_all[14,:]  - 0.4), 'r')
	plt.plot(fb, -1000*(model_all[14,:] + 0.8), 'k')

	plt.text(99.5, 0,         'RMS=' + str(int(1000*rms1_all[-1])) + ' mK', weight='bold')
	plt.text(99.5, -1000*0.4, 'RMS=' + str(int(1000*rms2_all[-1])) + ' mK', weight='bold')


	plt.text(99.5, -1000*0.8,         r'$a_{21}$='      + str(int(1000*p21_all[-1])) + ' mK')
	plt.text(99.5, -1000*0.9,         r'$\sigma_{21}$=' + str(int(1000*dp21_all[-1])) + ' mK')
	plt.text(99.5, -1000*1.0,         r'$\nu_r$='       + str(np.round(vr_all[-1],1)) + ' MHz')
	plt.text(99.5, -1000*1.1,         r'$\Delta\nu$='   + str(np.round(dv_all[-1],1)) + ' MHz')


	plt.xlabel('frequency [MHz]')
	plt.ylabel('temperature [200 mK per division]')
	plt.xlim([60, 110])
	plt.ylim([-1600, 200])
	plt.yticks(np.arange(-1400, 100, 200), [])
	plt.grid()






	return GHA, p21_all, dp21_all
















def plot_VNA_comparison():

	path_root = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_07_15C_25C_35C/data/s11/raw/receiver_sp4t/'



	# R1-V1
	# -------------------	
	folder = 'VNA_ACC_TEST/Lab L1-79/Set1/No-Airline/'
	o1r1v1_m,  f = rc.s1p_read(path_root + folder + 'Open.S1P')
	s1r1v1_m,  f = rc.s1p_read(path_root + folder + 'Short.S1P')
	l1r1v1_m,  f = rc.s1p_read(path_root + folder + 'Load.S1P')

	a1r1v1_m, f = rc.s1p_read(path_root + folder + '6dB.S1P')
	a2r1v1_m, f = rc.s1p_read(path_root + folder + '10dB.S1P')
	a3r1v1_m, f = rc.s1p_read(path_root + folder + '15dB.S1P')

	folder = 'VNA_ACC_TEST/Lab L1-79/Set2/No-Airline/'
	a4r1v1_m, f = rc.s1p_read(path_root + folder + '6dB.S1P')
	a5r1v1_m, f = rc.s1p_read(path_root + folder + '10dB.S1P')
	a6r1v1_m, f = rc.s1p_read(path_root + folder + '15dB.S1P')



	folder = 'VNA_ACC_TEST/Lab L1-79/Set1/With-Airline/'
	k1r1v1_m, f = rc.s1p_read(path_root + folder + 'Open.S1P')
	k2r1v1_m, f = rc.s1p_read(path_root + folder + 'Short.S1P')
	k3r1v1_m, f = rc.s1p_read(path_root + folder + 'Load.S1P')








	# R2-V1
	# -------------------
	folder = 'VNA_ACC_TEST_2/LAB_L1-79/Set1/No-Airline/'
	o1r2v1_m,  f = rc.s1p_read(path_root + folder + 'Open.S1P')
	s1r2v1_m,  f = rc.s1p_read(path_root + folder + 'Short.S1P')
	l1r2v1_m,  f = rc.s1p_read(path_root + folder + 'Load.S1P')

	a1r2v1_m, f = rc.s1p_read(path_root + folder + '6dB.S1P')
	a2r2v1_m, f = rc.s1p_read(path_root + folder + '10dB.S1P')
	a3r2v1_m, f = rc.s1p_read(path_root + folder + '15dB.S1P')


	folder = 'VNA_ACC_TEST_2/LAB_L1-79/Set2/No-Airline/'
	o2r2v1_m,  f = rc.s1p_read(path_root + folder + 'Open.S1P')
	s2r2v1_m,  f = rc.s1p_read(path_root + folder + 'Short.S1P')
	l2r2v1_m,  f = rc.s1p_read(path_root + folder + 'Load.S1P')

	a4r2v1_m, f = rc.s1p_read(path_root + folder + '6dB.S1P')
	a5r2v1_m, f = rc.s1p_read(path_root + folder + '10dB.S1P')
	a6r2v1_m, f = rc.s1p_read(path_root + folder + '15dB.S1P')





	folder = 'VNA_ACC_TEST_2/LAB_L1-79/Set1/With-Airline/'
	k1r2v1_m,  f = rc.s1p_read(path_root + folder + 'Open.S1P')
	k2r2v1_m,  f = rc.s1p_read(path_root + folder + 'Short.S1P')
	k3r2v1_m,  f = rc.s1p_read(path_root + folder + 'Load.S1P')

	#a4r2v1_m, f = rc.s1p_read(path_root + folder + '6dB.S1P')
	#a5r2v1_m, f = rc.s1p_read(path_root + folder + '10dB.S1P')
	#a6r2v1_m, f = rc.s1p_read(path_root + folder + '15dB.S1P')


	#folder = 'VNA_ACC_TEST_2/LAB_L1-79/Set2/With-Airline/'
	#k2r2v1_m,  f = rc.s1p_read(path_root + folder + 'Open.S1P')
	#k2r2v1_m,  f = rc.s1p_read(path_root + folder + 'Short.S1P')
	#k2r2v1_m,  f = rc.s1p_read(path_root + folder + 'Load.S1P')

	#a4r2v1_m, f = rc.s1p_read(path_root + folder + '6dB.S1P')
	#a5r2v1_m, f = rc.s1p_read(path_root + folder + '10dB.S1P')
	#a6r2v1_m, f = rc.s1p_read(path_root + folder + '15dB.S1P')	





















	# R1-V2
	# -------------------	
	folder = 'VNA_ACC_TEST/Lab L1-83/Set1/No-Airline/'
	o1r1v2_m,  f = rc.s1p_read(path_root + folder + 'Open.s1p')
	s1r1v2_m,  f = rc.s1p_read(path_root + folder + 'Short.s1p')
	l1r1v2_m,  f = rc.s1p_read(path_root + folder + 'Match.s1p')

	a1r1v2_m, f = rc.s1p_read(path_root + folder + '6dB.s1p')
	a2r1v2_m, f = rc.s1p_read(path_root + folder + '10dB.s1p')
	a3r1v2_m, f = rc.s1p_read(path_root + folder + '15dB.s1p')


	folder = 'VNA_ACC_TEST/Lab L1-83/Set2/No-Airline/'
	a4r1v2_m, f = rc.s1p_read(path_root + folder + '6dB.s1p')
	a5r1v2_m, f = rc.s1p_read(path_root + folder + '10dB.s1p')
	a6r1v2_m, f = rc.s1p_read(path_root + folder + '15dB.s1p')


	folder = 'VNA_ACC_TEST/Lab L1-83/Set1/With-Airline/'
	k1r1v2_m, f = rc.s1p_read(path_root + folder + 'Open.s1p')
	k2r1v2_m, f = rc.s1p_read(path_root + folder + 'Short.s1p')
	k3r1v2_m, f = rc.s1p_read(path_root + folder + 'Load.s1p')






	# R2-V2
	# -------------------
	folder = 'VNA_ACC_TEST_2/LAB_L1-83/Set1/No-Airline/'
	o1r2v2_m,  f = rc.s1p_read(path_root + folder + 'Open.s1p')
	s1r2v2_m,  f = rc.s1p_read(path_root + folder + 'Short.s1p')
	l1r2v2_m,  f = rc.s1p_read(path_root + folder + 'Load.s1p')

	a1r2v2_m, f = rc.s1p_read(path_root + folder + '6dB.s1p')
	a2r2v2_m, f = rc.s1p_read(path_root + folder + '10dB.s1p')
	a3r2v2_m, f = rc.s1p_read(path_root + folder + '15dB.s1p')


	folder = 'VNA_ACC_TEST_2/LAB_L1-83/Set2/No-Airline/'
	o2r2v2_m,  f = rc.s1p_read(path_root + folder + 'Open.s1p')
	s2r2v2_m,  f = rc.s1p_read(path_root + folder + 'Short.s1p')
	l2r2v2_m,  f = rc.s1p_read(path_root + folder + 'Load.s1p')

	a4r2v2_m, f = rc.s1p_read(path_root + folder + '6dB.s1p')
	a5r2v2_m, f = rc.s1p_read(path_root + folder + '10dB.s1p')
	a6r2v2_m, f = rc.s1p_read(path_root + folder + '15dB.s1p')


	folder = 'VNA_ACC_TEST_2/LAB_L1-83/Set1/With-Airline/'
	k1r2v2_m, f = rc.s1p_read(path_root + folder + 'Open.s1p')
	k2r2v2_m, f = rc.s1p_read(path_root + folder + 'Short.s1p')
	k3r2v2_m, f = rc.s1p_read(path_root + folder + 'Load.s1p')





























	# Models of standards
	# -------------------
	resistance_match  = 50.12 #12 #4
	oa, sa, la = rc.agilent_85033E(f, resistance_match, 1)

	resistance_match2 = 50.15 
	oa2, sa2, la2 = rc.agilent_85033E(f, resistance_match2, 1)


	ko = rc.terminated_airline_8043S15(f, oa)
	ks = rc.terminated_airline_8043S15(f, sa)
	kl = rc.terminated_airline_8043S15(f, la)		




	# Calibration
	a1r1v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v1_m, s1r1v1_m, l1r1v1_m,   a1r1v1_m)
	a2r1v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v1_m, s1r1v1_m, l1r1v1_m,   a2r1v1_m)
	a3r1v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v1_m, s1r1v1_m, l1r1v1_m,   a3r1v1_m)

	a4r1v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v1_m, s1r1v1_m, l1r1v1_m,   a4r1v1_m)
	a5r1v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v1_m, s1r1v1_m, l1r1v1_m,   a5r1v1_m)
	a6r1v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v1_m, s1r1v1_m, l1r1v1_m,   a6r1v1_m)

	k1r1v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v1_m, s1r1v1_m, l1r1v1_m,   k1r1v1_m)
	k2r1v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v1_m, s1r1v1_m, l1r1v1_m,   k2r1v1_m)
	k3r1v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v1_m, s1r1v1_m, l1r1v1_m,   k3r1v1_m)



	a1r2v1,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o1r2v1_m, s1r2v1_m, l1r2v1_m,   a1r2v1_m)
	a2r2v1,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o1r2v1_m, s1r2v1_m, l1r2v1_m,   a2r2v1_m)
	a3r2v1,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o1r2v1_m, s1r2v1_m, l1r2v1_m,   a3r2v1_m)

	a4r2v1,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o2r2v1_m, s2r2v1_m, l2r2v1_m,   a4r2v1_m)
	a5r2v1,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o2r2v1_m, s2r2v1_m, l2r2v1_m,   a5r2v1_m)
	a6r2v1,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o2r2v1_m, s2r2v1_m, l2r2v1_m,   a6r2v1_m)	

	k1r2v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r2v1_m, s1r2v1_m, l1r2v1_m,      k1r2v1_m)
	k2r2v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r2v1_m, s1r2v1_m, l1r2v1_m,      k2r2v1_m)
	k3r2v1,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r2v1_m, s1r2v1_m, l1r2v1_m,      k3r2v1_m)




	# Calibration
	a1r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   a1r1v2_m)
	a2r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   a2r1v2_m)
	a3r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   a3r1v2_m)

	a4r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   a4r1v2_m)
	a5r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   a5r1v2_m)
	a6r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   a6r1v2_m)

	k1r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   k1r1v2_m)
	k2r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   k2r1v2_m)
	k3r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   k3r1v2_m)



	a1r2v2,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o1r2v2_m, s1r2v2_m, l1r2v2_m,   a1r2v2_m)
	a2r2v2,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o1r2v2_m, s1r2v2_m, l1r2v2_m,   a2r2v2_m)
	a3r2v2,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o1r2v2_m, s1r2v2_m, l1r2v2_m,   a3r2v2_m)

	a4r2v2,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o2r2v2_m, s2r2v2_m, l2r2v2_m,   a4r2v2_m)
	a5r2v2,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o2r2v2_m, s2r2v2_m, l2r2v2_m,   a5r2v2_m)
	a6r2v2,   s11, s12s21, s22  =  rc.de_embed( oa2, sa2, la2,   o2r2v2_m, s2r2v2_m, l2r2v2_m,   a6r2v2_m)

	k1r2v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r2v2_m, s1r2v2_m, l1r2v2_m,      k1r2v2_m)
	k2r2v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r2v2_m, s1r2v2_m, l1r2v2_m,      k2r2v2_m)
	k3r2v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r2v2_m, s1r2v2_m, l1r2v2_m,      k3r2v2_m)	














	# Reflections from DC resistance
	# ------------------------------
	res_a1 = 85.78
	res_a2 = 60.65
	res_a3 = 53.23

	res_a4 = 85.75
	res_a5 = 61.46
	res_a6 = 53.51	



	g_a1  = rc.impedance2gamma(res_a1, 50)  *  np.ones(len(f))
	ep_g_a1 = rc.impedance2gamma(res_a1+0.01, 50)  *  np.ones(len(f))
	em_g_a1 = rc.impedance2gamma(res_a1-0.01, 50)  *  np.ones(len(f)) 

	g_a2  = rc.impedance2gamma(res_a2, 50)  *  np.ones(len(f))
	ep_g_a2 = rc.impedance2gamma(res_a2+0.01, 50)  *  np.ones(len(f))
	em_g_a2 = rc.impedance2gamma(res_a2-0.01, 50)  *  np.ones(len(f))

	g_a3  = rc.impedance2gamma(res_a3, 50)  *  np.ones(len(f))
	ep_g_a3 = rc.impedance2gamma(res_a3+0.01, 50)  *  np.ones(len(f))
	em_g_a3 = rc.impedance2gamma(res_a3-0.01, 50)  *  np.ones(len(f))

	g_a4  = rc.impedance2gamma(res_a4, 50)  *  np.ones(len(f))
	ep_g_a4 = rc.impedance2gamma(res_a4+0.01, 50)  *  np.ones(len(f))
	em_g_a4 = rc.impedance2gamma(res_a4-0.01, 50)  *  np.ones(len(f))

	g_a5  = rc.impedance2gamma(res_a5, 50)  *  np.ones(len(f))
	ep_g_a5 = rc.impedance2gamma(res_a5+0.01, 50)  *  np.ones(len(f))
	em_g_a5 = rc.impedance2gamma(res_a5-0.01, 50)  *  np.ones(len(f))

	g_a6  = rc.impedance2gamma(res_a6, 50)  *  np.ones(len(f))
	ep_g_a6 = rc.impedance2gamma(res_a6+0.01, 50)  *  np.ones(len(f))
	em_g_a6 = rc.impedance2gamma(res_a6-0.01, 50)  *  np.ones(len(f))














	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()






	path = '/DATA/EDGES/results/plots/20170731/'












	# -------------------------------------
	plt.figure(1, figsize=[16, 18])


	plt.subplot(6,2,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(a1r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a1r2v1)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a1)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a1)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a1)), 'r--')
	plt.ylim([-11.64, -11.54])
	plt.grid()
	plt.title('E5072A')
	plt.ylabel('6-dB attn 1' + '\n' + 'magnitude [dB]')

	plt.subplot(6,2,3)
	plt.plot(f/1e6, 20*np.log10(np.abs(a4r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a4r2v1)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a4)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a4)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a4)), 'r--')	
	plt.ylim([-12, -11])
	plt.ylim([-11.64, -11.54])
	plt.grid()
	plt.ylabel('6-dB attn 2' + '\n' + 'magnitude [dB]')

	plt.subplot(6,2,5)
	plt.plot(f/1e6, 20*np.log10(np.abs(a2r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a2r2v1)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a2)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a2)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a2)), 'r--')	

	plt.ylim([-20.39, -20.29])
	plt.grid()
	plt.ylabel('10-dB attn 1' + '\n' + 'magnitude [dB]')

	plt.subplot(6,2,7)
	plt.plot(f/1e6, 20*np.log10(np.abs(a5r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a5r2v1)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a5)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a5)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a5)), 'r--')	

	plt.ylim([-19.80, -19.70])
	plt.grid()
	plt.ylabel('10-dB attn 2' + '\n' + 'magnitude [dB]')

	plt.subplot(6,2,9)
	plt.plot(f/1e6, 20*np.log10(np.abs(a3r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a3r2v1)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a3)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a3)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a3)), 'r--')	

	plt.ylim([-30.2, -29.8])
	plt.grid()
	plt.ylabel('15-dB attn 1' + '\n' + 'magnitude [dB]')

	plt.subplot(6,2,11)
	plt.plot(f/1e6, 20*np.log10(np.abs(a6r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a6r2v1)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a6)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a6)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a6)), 'r--')	

	plt.ylim([-29.5, -29.1])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('15-dB attn 2' + '\n' + 'magnitude [dB]')






	plt.subplot(6,2,2)
	plt.plot(f/1e6, 20*np.log10(np.abs(a1r1v2)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a1r2v2)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a1)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a1)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a1)), 'r--')
	plt.ylim([-11.64, -11.54])
	plt.grid()
	plt.title('E5061A')

	plt.subplot(6,2,4)
	plt.plot(f/1e6, 20*np.log10(np.abs(a4r1v2)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a4r2v2)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a4)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a4)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a4)), 'r--')	
	plt.ylim([-12, -11])
	plt.ylim([-11.64, -11.54])
	plt.grid()		

	plt.subplot(6,2,6)
	plt.plot(f/1e6, 20*np.log10(np.abs(a2r1v2)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a2r2v2)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a2)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a2)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a2)), 'r--')
	plt.ylim([-20.39, -20.29])
	plt.grid()	

	plt.subplot(6,2,8)
	plt.plot(f/1e6, 20*np.log10(np.abs(a5r1v2)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a5r2v2)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a5)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a5)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a5)), 'r--')	
	plt.ylim([-19.80, -19.70])
	plt.grid()	

	plt.subplot(6,2,10)
	plt.plot(f/1e6, 20*np.log10(np.abs(a3r1v2)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a3r2v2)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a3)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a3)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a3)), 'r--')	
	plt.ylim([-30.2, -29.8])
	plt.grid()

	plt.subplot(6,2,12)
	plt.plot(f/1e6, 20*np.log10(np.abs(a6r1v2)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(a6r2v2)), 'g')

	plt.plot(f/1e6, 20*np.log10(np.abs(g_a6)), 'r')
	plt.plot(f/1e6, 20*np.log10(np.abs(ep_g_a6)), 'r--')
	plt.plot(f/1e6, 20*np.log10(np.abs(em_g_a6)), 'r--')	
	plt.ylim([-29.5, -29.1])
	plt.grid()
	plt.xlabel('frequency [MHz]')		



	# saving plot
	#plt.savefig(home_folder + path + 'fig1_v2.pdf', bbox_inches='tight')
	#plt.close()	














	# -------------------------------------
	plt.figure(2, figsize=[13,10])

	plt.subplot(3,2,1)
	#plt.plot(f/1e6, 20*np.log10(np.abs(k1r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(k1r2v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(ko)), 'r')
	plt.ylim([-0.008, 0.002])
	plt.grid()
	plt.ylabel('airline+open' + '\n' + 'magnitude [dB]')
	plt.title('E5072A')

	plt.subplot(3,2,3)
	#plt.plot(f/1e6, 20*np.log10(np.abs(k2r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(k2r2v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(ks)), 'r')
	plt.ylim([-0.12, -0.06])
	plt.grid()
	plt.ylabel('airline+short' + '\n' + 'magnitude [dB]')

	plt.subplot(3,2,5)
	#plt.plot(f/1e6, 20*np.log10(np.abs(k3r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(k3r2v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(kl)), 'r')
	plt.ylim([-50, -38])
	plt.grid()
	plt.ylabel('airline+match' + '\n' + 'magnitude [dB]')
	plt.xlabel('frequency [MHz]')



	plt.subplot(3,2,2)
	plt.plot(f/1e6, 20*np.log10(np.abs(k1r1v2)), 'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(k1r2v2)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(ko)), 'r')
	plt.ylim([-0.008, 0.002])
	plt.grid()
	plt.title('E5061A')

	plt.subplot(3,2,4)
	plt.plot(f/1e6, 20*np.log10(np.abs(k2r1v2)), 'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(k2r2v2)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(ks)), 'r')
	plt.ylim([-0.12, -0.06])
	plt.grid()

	plt.subplot(3,2,6)
	plt.plot(f/1e6, 20*np.log10(np.abs(k3r1v2)), 'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(k3r2v2)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(kl)), 'r')	
	plt.ylim([-50, -38])
	plt.grid()
	plt.xlabel('frequency [MHz]')

	# saving plot
	#plt.savefig(home_folder + path + 'fig2_v2.pdf', bbox_inches='tight')
	#plt.close()	









	plt.figure(3, figsize=[13,10])

	plt.subplot(3,2,1)
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r1v1)), 'b')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r2v1)), 'b')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ko)), 'r')
	plt.grid()
	plt.ylabel('airline+open' + '\n' + 'phase [deg]')
	plt.title('E5072A')

	plt.subplot(3,2,3)
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r1v1)), 'b')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r2v1)), 'b')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ks)), 'r')
	plt.grid()
	plt.ylabel('airline+short' + '\n' + 'phase [deg]')

	plt.subplot(3,2,5)
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r1v1)), 'b')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r2v1)), 'b')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(kl)), 'r')
	plt.grid()
	plt.ylabel('airline+match' + '\n' + 'phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-20, 25])






	plt.subplot(3,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r1v2)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r2v2)), 'g')	
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ko)), 'r')
	plt.grid()
	plt.title('E5061A')

	plt.subplot(3,2,4)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r1v2)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r2v2)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ks)), 'r')
	plt.grid()

	plt.subplot(3,2,6)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r1v2)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r2v2)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(kl)), 'r')	
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylim([-20, 25])

	# saving plot
	#plt.savefig(home_folder + path + 'fig3_v2.pdf', bbox_inches='tight')
	#plt.close()	



















	plt.figure(4, figsize=[13,10])

	plt.subplot(3,2,1)
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(k1r2v1))  -  20*np.log10(np.abs(ko)), 'b')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-0.006, 0.006])
	plt.grid()
	plt.ylabel('airline+open' + '\n' + r'$\Delta$ magnitude [dB]')
	plt.title('E5072A')

	plt.subplot(3,2,3)
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(k2r2v1)) - 20*np.log10(np.abs(ks)), 'b')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-0.006, 0.006])
	plt.grid()
	plt.ylabel('airline+short' + '\n' + r'$\Delta$ magnitude [dB]')

	plt.subplot(3,2,5)
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r1v1)), 'b')
	plt.plot(f/1e6, 20*np.log10(np.abs(k3r2v1)) - 20*np.log10(np.abs(kl)), 'b')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-2, 2])
	plt.grid()
	plt.ylabel('airline+match' + '\n' + r'$\Delta$ magnitude [dB]')
	plt.xlabel('frequency [MHz]')






	plt.subplot(3,2,2)
	plt.plot(f/1e6, 20*np.log10(np.abs(k1r1v2)) - 20*np.log10(np.abs(ko)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r2v2)) - (180/np.pi)*np.unwrap(np.angle(ko)), 'g')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-0.006, 0.006])
	plt.grid()
	plt.title('E5061A')

	plt.subplot(3,2,4)
	plt.plot(f/1e6, 20*np.log10(np.abs(k2r1v2)) - 20*np.log10(np.abs(ks)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r2v2)) - (180/np.pi)*np.unwrap(np.angle(ks)), 'g')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-0.006, 0.006])
	plt.grid()

	plt.subplot(3,2,6)
	plt.plot(f/1e6, 20*np.log10(np.abs(k3r1v2)) - 20*np.log10(np.abs(kl)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r2v2)) - (180/np.pi)*np.unwrap(np.angle(kl)), 'g')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-2, 2])
	plt.grid()
	plt.xlabel('frequency [MHz]')


	# saving plot
	#plt.savefig(home_folder + path + 'fig4_v2.pdf', bbox_inches='tight')
	#plt.close()	















	plt.figure(5, figsize=[13,10])

	plt.subplot(3,2,1)
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r1v1)), 'b')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r2v1))  -  (180/np.pi)*np.unwrap(np.angle(ko)), 'b')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-0.3, 0.3])
	plt.grid()
	plt.ylabel('airline+open' + '\n' + r'$\Delta$ phase [deg]')
	plt.title('E5072A')

	plt.subplot(3,2,3)
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r1v1)), 'b')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r2v1)) - (180/np.pi)*np.unwrap(np.angle(ks)), 'b')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-0.3, 0.3])
	plt.grid()
	plt.ylabel('airline+short' + '\n' + r'$\Delta$ phase [deg]')

	plt.subplot(3,2,5)
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r1v1)), 'b')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r2v1)) - (180/np.pi)*np.unwrap(np.angle(kl)), 'b')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)	
	plt.ylim([-4, 4])
	plt.grid()
	plt.ylabel('airline+match' + '\n' + r'$\Delta$ phase [deg]')
	plt.xlabel('frequency [MHz]')






	plt.subplot(3,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r1v2)) - (180/np.pi)*np.unwrap(np.angle(ko)), 'b')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)	
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r2v2)) - (180/np.pi)*np.unwrap(np.angle(ko)), 'g')
	plt.ylim([-0.3, 0.3])
	plt.grid()
	plt.title('E5061A')

	plt.subplot(3,2,4)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r1v2)) - (180/np.pi)*np.unwrap(np.angle(ks)), 'b')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)	
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r2v2)) - (180/np.pi)*np.unwrap(np.angle(ks)), 'g')
	plt.ylim([-0.3, 0.3])
	plt.grid()

	plt.subplot(3,2,6)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r1v2)) - (180/np.pi)*np.unwrap(np.angle(kl)), 'b')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)	
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r2v2)) - (180/np.pi)*np.unwrap(np.angle(kl)), 'g')
	plt.ylim([-4, 4])
	plt.grid()
	plt.xlabel('frequency [MHz]')


	# saving plot
	#plt.savefig(home_folder + path + 'fig5_v2.pdf', bbox_inches='tight')
	#plt.close()	







	return 0         # f, a1, a2, a3, gamma_a1s1, gamma_a2s1, gamma_a3s1

























def plot_low_band1_analysis_2(file, Nfg, case):



	# Loading data

#	if file == 1:
#		d = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_comparison_memo246.hdf5')

	if file == 1:
		d = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_177.hdf5')


	if file == 2:
		d = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_comparison_memo246.hdf5')





	fr = d[0]
	rr = d[2]
	wr = d[3]
	pr = d[4]
	mr = d[5]


	f = d[7]
	t_daily = d[8]
	r_daily = d[9]
	w_daily = d[10]
	m_daily = d[12]
	rms_daily = d[13]

	# o = eg.plot_spectra_residuals(f, r_daily, w_daily, 'season', m_daily[:,1], K=1, flow_lim=63, fhigh_lim=105, xticks_low=70, xticks_high=100, xticks_delta=10, rms_text_freq=95, fontsize=10, size_x_column=4, size_y=11, NSC=40, y_label='day of year [1 K per division]', plot_name='daily_low_band_extended_comparison_memo246')




	rms_threshold_low  = 0.070
	rms_threshold_high = 0.300
	flag = 0
	for i in range(len(rms_daily)):
		if (rms_daily[i] >= rms_threshold_low) and (rms_daily[i] <= rms_threshold_high):

			if (case == 1) and (file == 2):

				rr_temp_0 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 22) | (mr[:,3] < 2)), :]
				wr_temp_0 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 22) | (mr[:,3] < 2)), :]
				pr_temp_0 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 22) | (mr[:,3] < 2)), :]

				rr_temp_4 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 2) & (mr[:,3] < 6)), :]
				wr_temp_4 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 2) & (mr[:,3] < 6)), :]
				pr_temp_4 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 2) & (mr[:,3] < 6)), :]

				rr_temp_8 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 6) & (mr[:,3] < 10)), :]
				wr_temp_8 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 6) & (mr[:,3] < 10)), :]
				pr_temp_8 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 6) & (mr[:,3] < 10)), :]

				rr_temp_12 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 10) & (mr[:,3] < 14)), :]
				wr_temp_12 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 10) & (mr[:,3] < 14)), :]
				pr_temp_12 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 10) & (mr[:,3] < 14)), :]

				rr_temp_16 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 18)), :]
				wr_temp_16 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 18)), :]
				pr_temp_16 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 18)), :]

				rr_temp_20 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 22)), :]
				wr_temp_20 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 22)), :]
				pr_temp_20 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 22)), :]


			if (case == 1) and (file == 1):

				rr_temp_0 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 23) | (mr[:,3] < 5)), :]
				wr_temp_0 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 23) | (mr[:,3] < 5)), :]
				pr_temp_0 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 23) | (mr[:,3] < 5)), :]

				rr_temp_4 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 5) & (mr[:,3] < 11)), :]
				wr_temp_4 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 5) & (mr[:,3] < 11)), :]
				pr_temp_4 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 5) & (mr[:,3] < 11)), :]

				rr_temp_8 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 11) & (mr[:,3] < 16)), :]
				wr_temp_8 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 11) & (mr[:,3] < 16)), :]
				pr_temp_8 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 11) & (mr[:,3] < 16)), :]

				rr_temp_12 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				wr_temp_12 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				pr_temp_12 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]

				rr_temp_16 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				wr_temp_16 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				pr_temp_16 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]


				rr_temp_20 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				wr_temp_20 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				pr_temp_20 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]







			elif case == 2:

				rr_temp_0 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 0) & (mr[:,3] < 4)), :]
				wr_temp_0 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 0) & (mr[:,3] < 4)), :]
				pr_temp_0 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 0) & (mr[:,3] < 4)), :]

				rr_temp_4 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 4) & (mr[:,3] < 8)), :]
				wr_temp_4 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 4) & (mr[:,3] < 8)), :]
				pr_temp_4 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 4) & (mr[:,3] < 8)), :]

				rr_temp_8 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 8) & (mr[:,3] < 12)), :]
				wr_temp_8 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 8) & (mr[:,3] < 12)), :]
				pr_temp_8 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 8) & (mr[:,3] < 12)), :]

				rr_temp_12 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 12) & (mr[:,3] < 16)), :]
				wr_temp_12 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 12) & (mr[:,3] < 16)), :]
				pr_temp_12 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 12) & (mr[:,3] < 16)), :]

				rr_temp_16 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 16) & (mr[:,3] < 20)), :]
				wr_temp_16 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 16) & (mr[:,3] < 20)), :]
				pr_temp_16 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 16) & (mr[:,3] < 20)), :]

				rr_temp_20 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 24)), :]
				wr_temp_20 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 24)), :]
				pr_temp_20 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 24)), :]



			elif case == 3:

				rr_temp_0 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 21) | (mr[:,3] < 1)), :]
				wr_temp_0 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 21) | (mr[:,3] < 1)), :]
				pr_temp_0 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 21) | (mr[:,3] < 1)), :]

				rr_temp_4 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 1) & (mr[:,3] < 5)), :]
				wr_temp_4 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 1) & (mr[:,3] < 5)), :]
				pr_temp_4 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 1) & (mr[:,3] < 5)), :]

				rr_temp_8 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 5) & (mr[:,3] < 9)), :]
				wr_temp_8 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 5) & (mr[:,3] < 9)), :]
				pr_temp_8 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 5) & (mr[:,3] < 9)), :]

				rr_temp_12 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 13)), :]
				wr_temp_12 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 13)), :]
				pr_temp_12 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 13)), :]

				rr_temp_16 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 13) & (mr[:,3] < 17)), :]
				wr_temp_16 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 13) & (mr[:,3] < 17)), :]
				pr_temp_16 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 13) & (mr[:,3] < 17)), :]

				rr_temp_20 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 17) & (mr[:,3] < 21)), :]
				wr_temp_20 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 17) & (mr[:,3] < 21)), :]
				pr_temp_20 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 17) & (mr[:,3] < 21)), :]



			elif (case == 4) and (file == 2):

				rr_temp_0 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 21) | (mr[:,3] < 3)), :]
				wr_temp_0 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 21) | (mr[:,3] < 3)), :]
				pr_temp_0 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 21) | (mr[:,3] < 3)), :]

				rr_temp_4 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 3) & (mr[:,3] < 9)), :]
				wr_temp_4 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 3) & (mr[:,3] < 9)), :]
				pr_temp_4 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 3) & (mr[:,3] < 9)), :]

				rr_temp_8 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]
				wr_temp_8 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]
				pr_temp_8 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]

				rr_temp_12 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 15) & (mr[:,3] < 21)), :]
				wr_temp_12 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 15) & (mr[:,3] < 21)), :]
				pr_temp_12 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 15) & (mr[:,3] < 21)), :]

				rr_temp_16 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 15) & (mr[:,3] < 21)), :]
				wr_temp_16 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 15) & (mr[:,3] < 21)), :]
				pr_temp_16 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 15) & (mr[:,3] < 21)), :]

				rr_temp_20 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 15) & (mr[:,3] < 21)), :]
				wr_temp_20 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 15) & (mr[:,3] < 21)), :]
				pr_temp_20 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 15) & (mr[:,3] < 21)), :]


			elif (case == 4) and (file == 1):

				rr_temp_0 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 21) | (mr[:,3] < 3)), :]
				wr_temp_0 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 21) | (mr[:,3] < 3)), :]
				pr_temp_0 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 21) | (mr[:,3] < 3)), :]

				rr_temp_4 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 3) & (mr[:,3] < 9)), :]
				wr_temp_4 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 3) & (mr[:,3] < 9)), :]
				pr_temp_4 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 3) & (mr[:,3] < 9)), :]

				rr_temp_8 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]
				wr_temp_8 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]
				pr_temp_8 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]

				rr_temp_12 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]
				wr_temp_12 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]
				pr_temp_12 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]

				rr_temp_16 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]
				wr_temp_16 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]
				pr_temp_16 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]

				rr_temp_20 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]
				wr_temp_20 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]
				pr_temp_20 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 9) & (mr[:,3] < 15)), :]				






			elif case == 5:

				rr_temp_0 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 0) & (mr[:,3] < 6)), :]
				wr_temp_0 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 0) & (mr[:,3] < 6)), :]
				pr_temp_0 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 0) & (mr[:,3] < 6)), :]

				rr_temp_4 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 6) & (mr[:,3] < 12)), :]
				wr_temp_4 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 6) & (mr[:,3] < 12)), :]
				pr_temp_4 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 6) & (mr[:,3] < 12)), :]

				rr_temp_8 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 12) & (mr[:,3] < 18)), :]
				wr_temp_8 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 12) & (mr[:,3] < 18)), :]
				pr_temp_8 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 12) & (mr[:,3] < 18)), :]

				rr_temp_12 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 24)), :]
				wr_temp_12 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 24)), :]
				pr_temp_12 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 24)), :]

				rr_temp_16 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 24)), :]
				wr_temp_16 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 24)), :]
				pr_temp_16 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 24)), :]

				rr_temp_20 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 24)), :]
				wr_temp_20 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 24)), :]
				pr_temp_20 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 18) & (mr[:,3] < 24)), :]	




			elif (case == 6) and (file == 2):

				rr_temp_0 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) | (mr[:,3] < 2)), :]
				wr_temp_0 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) | (mr[:,3] < 2)), :]
				pr_temp_0 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) | (mr[:,3] < 2)), :]

				rr_temp_4 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 2) & (mr[:,3] < 8)), :]
				wr_temp_4 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 2) & (mr[:,3] < 8)), :]
				pr_temp_4 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 2) & (mr[:,3] < 8)), :]

				rr_temp_8 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 8) & (mr[:,3] < 14)), :]
				wr_temp_8 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 8) & (mr[:,3] < 14)), :]
				pr_temp_8 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 8) & (mr[:,3] < 14)), :]

				rr_temp_12 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
				wr_temp_12 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
				pr_temp_12 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]

				rr_temp_16 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
				wr_temp_16 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
				pr_temp_16 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]

				rr_temp_20 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
				wr_temp_20 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
				pr_temp_20 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]				





			elif (case == 6) and (file==1):

				rr_temp_0 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 23) | (mr[:,3] < 5)), :]
				wr_temp_0 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 23) | (mr[:,3] < 5)), :]
				pr_temp_0 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 23) | (mr[:,3] < 5)), :]

				rr_temp_4 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 5) & (mr[:,3] < 11)), :]
				wr_temp_4 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 5) & (mr[:,3] < 11)), :]
				pr_temp_4 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 5) & (mr[:,3] < 11)), :]

				rr_temp_8 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 11) & (mr[:,3] < 16)), :]
				wr_temp_8 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 11) & (mr[:,3] < 16)), :]
				pr_temp_8 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 11) & (mr[:,3] < 16)), :]

				rr_temp_12 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				wr_temp_12 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				pr_temp_12 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]


				rr_temp_16 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				wr_temp_16 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				pr_temp_16 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]

				rr_temp_20 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				wr_temp_20 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]
				pr_temp_20 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 20) & (mr[:,3] < 23)), :]






			#rr_temp = np.copy(rr_temp_20)
			#wr_temp = np.copy(wr_temp_20)
			#pr_temp = np.copy(pr_temp_20)





			if flag == 0:
				rr_sel_0 = np.copy(rr_temp_0)
				wr_sel_0 = np.copy(wr_temp_0)
				pr_sel_0 = np.copy(pr_temp_0)

				rr_sel_4 = np.copy(rr_temp_4)
				wr_sel_4 = np.copy(wr_temp_4)
				pr_sel_4 = np.copy(pr_temp_4)				

				rr_sel_8 = np.copy(rr_temp_8)
				wr_sel_8 = np.copy(wr_temp_8)
				pr_sel_8 = np.copy(pr_temp_8)

				rr_sel_12 = np.copy(rr_temp_12)
				wr_sel_12 = np.copy(wr_temp_12)
				pr_sel_12 = np.copy(pr_temp_12)	

				rr_sel_16 = np.copy(rr_temp_16)
				wr_sel_16 = np.copy(wr_temp_16)
				pr_sel_16 = np.copy(pr_temp_16)	

				rr_sel_20 = np.copy(rr_temp_20)
				wr_sel_20 = np.copy(wr_temp_20)
				pr_sel_20 = np.copy(pr_temp_20)	

				flag = 1


			elif flag == 1:

				rr_sel_0 = np.vstack((rr_sel_0, rr_temp_0))
				wr_sel_0 = np.vstack((wr_sel_0, wr_temp_0))
				pr_sel_0 = np.vstack((pr_sel_0, pr_temp_0))

				rr_sel_4 = np.vstack((rr_sel_4, rr_temp_4))
				wr_sel_4 = np.vstack((wr_sel_4, wr_temp_4))
				pr_sel_4 = np.vstack((pr_sel_4, pr_temp_4))

				rr_sel_8 = np.vstack((rr_sel_8, rr_temp_8))
				wr_sel_8 = np.vstack((wr_sel_8, wr_temp_8))
				pr_sel_8 = np.vstack((pr_sel_8, pr_temp_8))

				rr_sel_12 = np.vstack((rr_sel_12, rr_temp_12))
				wr_sel_12 = np.vstack((wr_sel_12, wr_temp_12))
				pr_sel_12 = np.vstack((pr_sel_12, pr_temp_12))

				rr_sel_16 = np.vstack((rr_sel_16, rr_temp_16))
				wr_sel_16 = np.vstack((wr_sel_16, wr_temp_16))
				pr_sel_16 = np.vstack((pr_sel_16, pr_temp_16))

				rr_sel_20 = np.vstack((rr_sel_20, rr_temp_20))
				wr_sel_20 = np.vstack((wr_sel_20, wr_temp_20))
				pr_sel_20 = np.vstack((pr_sel_20, pr_temp_20))




	# Spectral averaging
	rx0, wx0   = eg.spectral_averaging(rr_sel_0, wr_sel_0)
	rx4, wx4   = eg.spectral_averaging(rr_sel_4, wr_sel_4)
	rx8, wx8   = eg.spectral_averaging(rr_sel_8, wr_sel_8)
	rx12, wx12 = eg.spectral_averaging(rr_sel_12, wr_sel_12)
	rx16, wx16 = eg.spectral_averaging(rr_sel_16, wr_sel_16)
	rx20, wx20 = eg.spectral_averaging(rr_sel_20, wr_sel_20)


	# RFI cleaning at raw resolution (introduced Saturday!!!)
	Nsigma = 2.5
	wx0  = eg.RFI_cleaning_spectrum_raw(fr, rx0,  wx0,  Nterms_fg=16, Nsigma=Nsigma)
	wx4  = eg.RFI_cleaning_spectrum_raw(fr, rx4,  wx4,  Nterms_fg=16, Nsigma=Nsigma)
	wx8  = eg.RFI_cleaning_spectrum_raw(fr, rx8,  wx8,  Nterms_fg=16, Nsigma=Nsigma)
	wx12 = eg.RFI_cleaning_spectrum_raw(fr, rx12, wx12, Nterms_fg=16, Nsigma=Nsigma)
	wx16 = eg.RFI_cleaning_spectrum_raw(fr, rx16, wx16, Nterms_fg=16, Nsigma=Nsigma)
	wx20 = eg.RFI_cleaning_spectrum_raw(fr, rx20, wx20, Nterms_fg=16, Nsigma=Nsigma)


	# Spectral binning
	Nsamples = 64
	fb, rb0, wb0   = eg.spectral_binning_number_of_samples(fr, rx0,  wx0,  nsamples=Nsamples)
	fb, rb4, wb4   = eg.spectral_binning_number_of_samples(fr, rx4,  wx4,  nsamples=Nsamples)
	fb, rb8, wb8   = eg.spectral_binning_number_of_samples(fr, rx8,  wx8,  nsamples=Nsamples)
	fb, rb12, wb12 = eg.spectral_binning_number_of_samples(fr, rx12, wx12, nsamples=Nsamples)
	fb, rb16, wb16 = eg.spectral_binning_number_of_samples(fr, rx16, wx16, nsamples=Nsamples)
	fb, rb20, wb20 = eg.spectral_binning_number_of_samples(fr, rx20, wx20, nsamples=Nsamples)


	# RMS of binned residuals
	rmsb0  = np.sqrt(np.sum((rb0[wb0>0])**2)/len(fb[wb0>0]))
	rmsb4  = np.sqrt(np.sum((rb4[wb4>0])**2)/len(fb[wb4>0]))
	rmsb8  = np.sqrt(np.sum((rb8[wb8>0])**2)/len(fb[wb8>0]))
	rmsb12 = np.sqrt(np.sum((rb12[wb12>0])**2)/len(fb[wb12>0]))
	rmsb16 = np.sqrt(np.sum((rb16[wb16>0])**2)/len(fb[wb16>0]))
	rmsb20 = np.sqrt(np.sum((rb20[wb20>0])**2)/len(fb[wb20>0]))

	# Average model parameters
	px0  = np.mean(pr_sel_0,  axis=0)
	px4  = np.mean(pr_sel_4,  axis=0)
	px8  = np.mean(pr_sel_8,  axis=0)
	px12 = np.mean(pr_sel_12, axis=0)
	px16 = np.mean(pr_sel_16, axis=0)
	px20 = np.mean(pr_sel_20, axis=0)


	# Evaluating foreground model at binned frequencies
	tfg0  = eg.model_evaluate('EDGES_polynomial', px0, fb/200)
	tfg4  = eg.model_evaluate('EDGES_polynomial', px4, fb/200)
	tfg8  = eg.model_evaluate('EDGES_polynomial', px8, fb/200)
	tfg12 = eg.model_evaluate('EDGES_polynomial', px12, fb/200)
	tfg16 = eg.model_evaluate('EDGES_polynomial', px16, fb/200)
	tfg20 = eg.model_evaluate('EDGES_polynomial', px20, fb/200)

	# Binned total temperature
	tb0  = tfg0  + rb0
	tb4  = tfg4  + rb4
	tb8  = tfg8  + rb8
	tb12 = tfg12 + rb12
	tb16 = tfg16 + rb16
	tb20 = tfg20 + rb20


























	# Parameter estimation
	p21_all  = np.zeros(6)
	dp21_all = np.zeros(6)
	vr_all   = np.zeros(6)
	dv_all   = np.zeros(6)	
	rms1_all = np.zeros(6)
	rms2_all = np.zeros(6)

	t78 = np.zeros(6)
	for i in range(len(fb)-1):
		if (fb[i] <= 78.5) and (fb[i+1] > 78.5):
			t78[0] = tb0[i]
			t78[1] = tb4[i]
			t78[2] = tb8[i]
			t78[3] = tb12[i]
			t78[4] = tb16[i]	# in cases > 3, tb16 and tb20  are the same as tb12
			t78[5] = tb20[i]




	model_all = np.zeros((6, len(fb)))
	res1_all  = np.zeros((6, len(fb)))
	res2_all  = np.zeros((6, len(fb)))

	out0        = eg.test_low_band_signature_search(fb, tb0, wb0,   65, 95, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
	out4        = eg.test_low_band_signature_search(fb, tb4, wb4,   65, 95, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
	out8        = eg.test_low_band_signature_search(fb, tb8, wb8,   65, 95, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
	out12       = eg.test_low_band_signature_search(fb, tb12, wb12, 65, 95, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
	out16       = eg.test_low_band_signature_search(fb, tb16, wb16, 65, 95, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
	out20       = eg.test_low_band_signature_search(fb, tb20, wb20, 65, 95, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))




	# i_vr = array([ 75.      ,  75.390625,  75.78125 ,  76.171875,  76.5625  ,
	# 76.953125,  77.34375 ,  77.734375,  78.125   ,  78.515625,
	# 78.90625 ,  79.296875,  79.6875  ,  80.078125])

	# i_dv = array([ 16. ,  16.1,  16.2,  16.3,  16.4,  16.5,  16.6,  16.7,  16.8,
	# 16.9,  17. ,  17.1,  17.2,  17.3,  17.4,  17.5,  17.6,  17.7,
	# 17.8,  17.9,  18. ,  18.1,  18.2,  18.3,  18.4,  18.5,  18.6,
	# 18.7,  18.8,  18.9,  19. ,  19.1,  19.2,  19.3,  19.4,  19.5,
	# 19.6,  19.7,  19.8,  19.9,  20. ,  20.1,  20.2,  20.3,  20.4,
	# 20.5,  20.6,  20.7,  20.8,  20.9,  21. ,  21.1,  21.2,  21.3,
	# 21.4,  21.5,  21.6,  21.7,  21.8,  21.9,  22. ])




	i_vr = 0    #  6 or 7, for ~77.7
	i_dv = 0   # 18.5


	print(out0[5][i_vr], out0[6][i_dv])


	p21_all[0]    = out0[7][i_vr, i_dv]
	dp21_all[0]   = out0[8][i_vr, i_dv]
	rms1_all[0]   = out0[4]
	rms2_all[0]   = out0[10][i_vr, i_dv]
	res1_all[0,:] = out0[3]
	res2_all[0,:] = out0[9][i_vr, i_dv]


	p21_all[1]    = out4[7][i_vr, i_dv]
	dp21_all[1]   = out4[8][i_vr, i_dv]
	rms1_all[1]   = out4[4]
	rms2_all[1]   = out4[10][i_vr, i_dv]
	res1_all[1,:] = out4[3]
	res2_all[1,:] = out4[9][i_vr, i_dv]


	p21_all[2]    = out8[7][i_vr, i_dv]
	dp21_all[2]   = out8[8][i_vr, i_dv]
	rms1_all[2]   = out8[4]
	rms2_all[2]   = out8[10][i_vr, i_dv]
	res1_all[2,:] = out8[3]
	res2_all[2,:] = out8[9][i_vr, i_dv]


	p21_all[3]    = out12[7][i_vr, i_dv]
	dp21_all[3]   = out12[8][i_vr, i_dv]
	rms1_all[3]   = out12[4]
	rms2_all[3]   = out12[10][i_vr, i_dv]
	res1_all[3,:] = out12[3]
	res2_all[3,:] = out12[9][i_vr, i_dv]


	p21_all[4]    = out16[7][i_vr, i_dv]
	dp21_all[4]   = out16[8][i_vr, i_dv]
	rms1_all[4]   = out16[4]
	rms2_all[4]   = out16[10][i_vr, i_dv]
	res1_all[4,:] = out16[3]
	res2_all[4,:] = out16[9][i_vr, i_dv]


	p21_all[5]    = out20[7][i_vr, i_dv]
	dp21_all[5]   = out20[8][i_vr, i_dv]
	rms1_all[5]   = out20[4]
	rms2_all[5]   = out20[10][i_vr, i_dv]
	res1_all[5,:] = out20[3]
	res2_all[5,:] = out20[9][i_vr, i_dv]





		## Independent fits
		## ------------------------
		##p21_all_1[i]     = out1[-5]
		##dp21_all_1[i]    = out1[-4]
		##vr_all_1[i]      = out1[-3]
		##dv_all_1[i]      = out1[-2]		
		##rms1_all_1[i]    = out1[4]
		##rms2_all_1[i]    = out1[-7] 

		##model_all_1[i,:] = out1[-1]
		##res1_all_1[i,:]  = out1[3]
		##res2_all_1[i,:]  = out1[-6]









	# Plots 
	# --------------------------------------------------
	if case == 1:
		ylabels  = np.array(['20', '16', '12', '8', '4', '0'])
		xvalues = [0, 4, 8, 12, 16, 20]
		XX = 6


	if case == 2:
		ylabels  = np.array(['22', '18', '14', '10', '6', '2'])
		xvalues = [2, 6, 10, 14, 18, 22]
		XX = 6


	if case == 3:
		ylabels  = np.array(['19', '15', '11', '7', '3', '-1'])
		xvalues = [-1, 3, 7, 11, 15, 19]
		XX = 6


	if case == 4:
		ylabels  = np.array(['18', '12', '6', '0'])
		xvalues = [0, 6, 12, 18, 18, 18]
		XX = 4


	if case == 5:
		ylabels  = np.array(['21', '15', '9', '3'])
		xvalues = [3, 9, 15, 21, 21, 21]
		XX = 4


	if case == 6:
		ylabels  = np.array(['17', '11', '5', '-1'])
		xvalues = [-1, 5, 11, 17, 17, 17]
		XX = 4


	if (case == 6) and (file == 1):
		ylabels  = np.array(['21.5', '11', '5', '-1'])
		xvalues = [-1, 5, 11, 21.5, 21.5, 21.5]
		XX = 4


	# -----------------------------------------------
	plt.figure(1)
	offset = 0.3
	plt.plot(fb, rb0 - 0*offset)
	plt.plot(fb, rb4 - 1*offset)
	plt.plot(fb, rb8 - 2*offset)
	plt.plot(fb, rb12 - 3*offset)
	plt.text(95, -0*offset, 'RMS: ' + str(int(1000*rmsb0)) + ' mK')
	plt.text(95, -1*offset, 'RMS: ' + str(int(1000*rmsb4)) + ' mK')
	plt.text(95, -2*offset, 'RMS: ' + str(int(1000*rmsb8)) + ' mK')
	plt.text(95, -3*offset, 'RMS: ' + str(int(1000*rmsb12)) + ' mK')
	plt.ylim([-offset*4, offset])
	plt.yticks(np.arange(-offset*3, 0.1, offset), ylabels)

	if (case == 1) or (case == 2) or (case == 3): 
		plt.plot(fb, rb16 - 4*offset)
		plt.plot(fb, rb20 - 5*offset)
		plt.text(95, -4*offset, 'RMS: ' + str(int(1000*rmsb16)) + ' mK')
		plt.text(95, -5*offset, 'RMS: ' + str(int(1000*rmsb20)) + ' mK')
		plt.ylim([-offset*6, offset])
		plt.yticks(np.arange(-offset*3, 0.1, offset), ylabels)

	plt.xlim([60, 105])

	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('GHA [' + str(offset) + ' K per division]')
	plt.title(str(Nfg) + ' polynomial terms')





	# -----------------------------------------------
	plt.figure(2)

	for i in range(XX):

		plt.plot(fb, res2_all[i,:] - i*offset)	
		plt.text(95, -i*offset, 'RMS: ' + str(int(1000*rms2_all[i])) + ' mK')

	plt.ylim([-offset*XX, offset])
	plt.yticks(np.arange(-offset*(XX-1), 0.1, offset), ylabels)

	plt.xlim([60, 105])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('GHA [' + str(offset) + ' K per division]')
	plt.title(str(Nfg) + ' polynomial terms + signature')





	# -----------------------------------------------
	fig, ax1 = plt.subplots()
	ax1.errorbar(xvalues, 1000*p21_all, 1000*dp21_all, fmt='o-')

	ax1.set_xlabel('GHA [hr]')
	ax1.set_ylabel(r'$a_{21}$  [mK]', fontsize=20, color='b')
	ax1.tick_params('y', colors='b')

	ax1.set_xlim([-2, 24])
	ax1.set_ylim([0, 1400])
	ax1.set_xticks(xvalues)

	ax1.grid()
	ax1.set_title(str(Nfg) + ' polynomial terms + signature')	




	ax2 = ax1.twinx()
	ax2.plot(xvalues, t78, 'r.-', markersize=15)
	ax2.set_ylabel(r'$T_{78.5}$  [K]', fontsize=20, color='r')	
	ax2.tick_params('y', colors='r')

	ax2.set_ylim([0, 5000])
	ax2.set_xlim([-2, 24])	





	# --------------------------------
	resultsT = np.round(np.array([xvalues, t78, 1000*p21_all, 1000*dp21_all]))
	results  = resultsT.T
	print('-----------------------')
	print('------- Results -------')
	print('GHA [hr]  T78.5 [K]  a21 [mK]  d21 [mK]')
	print(results.astype('int'))







	return out0, out4, out8, out12, out16, out20    #0 #fb, tb, rb # fr, rr_sel, wr_sel
















def plot_low_band_for_judds_talk():



	d = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_case_nomooncut_Nfg_5_50_100_MHz.hdf5')
	f = d[7]
	t = d[-5]
	r = 1000*d[-4]
	rms = 1000*d[-1]

	r_daily = d[9]
	w_daily = d[10]
	m_daily = d[12]



	plt.close()
	plt.close()

	size_x = 6.6
	size_y = 6
	x0     = 0.18
	y0     = 0.12
	dx     = 0.78
	dy     = 0.38
	x00    = 0.057

	f1     = plt.figure(num=1, figsize=(size_x, size_y))
	#ax1    = f1.add_axes([1*x0, 1*y0 + 0*dy, dx, dy])
	#plt.text(92, 1.06, '(c)', fontsize=18)
	ax2    = f1.add_axes([1*x0, 1*y0 + 1*dy, dx, dy])
	ax3    = f1.add_axes([1*x0, 1*y0 + 2*dy, dx, dy])



	## Bottom panel
	#ax1.step(ff-(0.9)*(ff[1]-ff[0])/2, np.hstack([wsel[0], wsel[0:-1]])/np.max(wsel), 'b', linewidth=1)
	#ax1.set_xlim([90, 190])
	#ax1.set_ylim([0, 1.25])
	#ax1.set_xticks(np.arange(90,191,20))
	#ax1.set_yticks(np.arange(0,1.1,0.25))
	#ax1.grid()
	#ax1.set_xlabel('frequency [MHz]')
	#ax1.set_ylabel('normalized weights')


	# Middle panel
	ax2.plot(f, r, 'b', linewidth=1)
	ax2.set_xlim([50, 100])
	ax2.set_ylim([-1000, 1000])
	ax2.set_xticks(np.arange(50,101,10))
	ax2.set_yticks(np.arange(-800,801,200))
	ax2.grid()
	ax2.set_xlabel('frequency [MHz]')
	ax2.set_ylabel('temperature [mK]')
	ax2.text(70, 400, 'weighted rms = ' + str(int(rms)) + ' mK', fontsize=14, fontweight='bold')
	ax2.text(55, 650, '(b)', fontsize=18)


	# Top panel
	ax3.plot(f, t, 'b', linewidth=1)
	ax3.set_xlim([50, 100])
	ax3.set_ylim([-500, 5000])
	ax3.set_xticks(np.arange(50,101,10))
	ax3.grid()
	#ax3.set_yticks(np.arange(-150,151,50))
	ax3.set_xticklabels([])
	ax3.set_ylabel('temperature [K]')
	#plt.text(140, 80, 'weighted rms = 17 mK', fontsize=14, fontweight='bold')
	ax3.text(55, 4200, '(a)', fontsize=18)		


	ax32 = ax3.twiny()	
	ax32.set_xlabel(r'$z$',fontsize=18)
	f0 = 50# eg.redshift2frequency()
	ax32.set_xticks(np.array((np.abs(eg.redshift2frequency(26)-f0), np.abs(eg.redshift2frequency(24)-f0), np.abs(eg.redshift2frequency(22)-f0), np.abs(eg.redshift2frequency(20)-f0), np.abs(eg.redshift2frequency(18)-f0), np.abs(eg.redshift2frequency(16)-f0), np.abs(eg.redshift2frequency(14)-f0), np.abs(50))))
	ax32.set_xticklabels(['26', '24', '22', '20', '18', '16', '14', ''])

	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170802/'
	plt.savefig(path_plot_save + 'nominal_residuals.pdf', bbox_inches='tight')
	plt.close()
	plt.close()








	# Figure 2
	o = eg.plot_spectra_residuals(f, r_daily, w_daily, 'season', m_daily[:,1], K=1, flow_lim=48, fhigh_lim=113, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=101, fontsize=10, size_x_column=5.5, size_y=11, NSC=40, y_label='day of year [1 K per division]', plot_name='daily_low_band_residuals')


	return 0












def comparison_of_antenna_S11_calibrations():

	path = home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/raw/20170403_1/'

	# reflection references
	oref =  1*np.ones(151)
	sref = -1*np.ones(151)
	lref =  0*np.ones(151)


	# reading measurements from ith cycle
	oi, f = rc.s1p_read(path + 'run_0001_input1_20170403_174446.s1p')
	si, f = rc.s1p_read(path + 'run_0001_input2_20170403_174455.s1p')
	li, f = rc.s1p_read(path + 'run_0001_input3_20170403_174503.s1p')
	ai, f = rc.s1p_read(path + 'run_0001_input4_20170403_174511.s1p')



	# xxxxxxxxx 
	aic  = rc.de_embed(oref, sref, lref, oi, si, li, ai)




	Trec = np.array([34]) #[27.16])
	Twea = np.array([34])
	Hwea = np.array([0])

	#Trec, Twea, Hwea = switch_weather_temperature(path + 'voltage_20170403_174420.txt')




	# yyyyyyyyy
	x1 = eg.low_band_switch_correction(aic[0],        Trec, f_in = f)	
	x2 = eg.low_band1_switch_correction_2017_05_25C(aic[0], f_in = f)

	LAB_REP = 1
	x3 = eg.low_band1_switch_correction_2017_07_25C(aic[0], f_in = f, repetition=LAB_REP)




	plt.plot(f/1e6, 20*np.log10(np.abs(x2[0])) - 20*np.log10(np.abs(x1[0])))
	plt.plot(f/1e6, 20*np.log10(np.abs(x3[0])) - 20*np.log10(np.abs(x1[0])))
	plt.xlim([50, 100])
	plt.ylim([-0.04, 0.04])


	return f/1e6, x1[0], x2[0], x3[0]
















def check_of_airline():



	path_root = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_07_15C_25C_35C/data/s11/raw/receiver_sp4t/'

	folder = 'VNA_ACC_TEST_2/LAB_L1-79/Set1/No-Airline/'
	o1r2v1_m,  f = rc.s1p_read(path_root + folder + 'Open.S1P')
	s1r2v1_m,  f = rc.s1p_read(path_root + folder + 'Short.S1P')
	l1r2v1_m,  f = rc.s1p_read(path_root + folder + 'Load.S1P')

	folder = 'VNA_ACC_TEST_2/LAB_L1-79/Set1/With-Airline/'
	k3r2v1_m,  f = rc.s1p_read(path_root + folder + 'Load.S1P')

	resistance_of_match = 50.12
	md                  = 1
	oa, sa, ma          = rc.agilent_85033E(f, resistance_of_match, md)	
	airline_measured, s11, s12s21, s22  =  rc.de_embed( oa, sa, ma,   o1r2v1_m, s1r2v1_m, l1r2v1_m,   k3r2v1_m)











	length                = 0.1499 # 0.15
	c                     = 299792458  # 0.995
	er_air                = 1.0125 #1.0125        # 
	sigma_copper          = 5.813 * 10**7 #
	sigma_copper_fraction = 0.165  # 0.22          


	f, gamma_DUT, L, C, R, G, Zchar, gamma, rin_DUT = rc.terminated_airline_8043S15(f, ma, xx=1, yy=1, length=length, c=c, er_air=er_air, sigma_copper=sigma_copper, sigma_copper_fraction=sigma_copper_fraction)



	plt.subplot(1,2,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(airline_measured)))
	plt.plot(f/1e6, 20*np.log10(np.abs(rin_DUT)))
	plt.grid()
	plt.ylim([-50, -38])
	plt.ylabel('magnitude [dB]')
	plt.xlabel('frequency [MHz]')

	plt.subplot(1,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(airline_measured)))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(rin_DUT)))
	plt.grid()
	plt.ylim([-20, 20])
	plt.ylabel('phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.legend(['data','model'])


	fb = 1e6*np.arange(40,121,20)
	oab, sab, mab = rc.agilent_85033E(fb, resistance_of_match, md)
	fx, gamma_DUT, L, C, R, G, Zchar, gamma, rin_DUT = rc.terminated_airline_8043S15(fb, mab, xx=1, yy=1, length=length, c=c, er_air=er_air, sigma_copper=sigma_copper, sigma_copper_fraction=sigma_copper_fraction)		

	out = np.array([fb/1e6, 20*np.log10(np.abs(gamma_DUT)), (180/np.pi)*np.unwrap(np.angle(gamma_DUT)), 20*np.log10(np.abs(rin_DUT)), (180/np.pi)*np.unwrap(np.angle(rin_DUT))])

	print(out.T)






	return fb, gamma_DUT, L, C, R, G, Zchar, gamma, rin_DUT















def test_bc():

	# -------------------------------------------------------------------------------------

	band              = 'low_band_2015'
	save_folder       = 'extended_comparison_memo246'
	#date_list         = eg.data_analysis_date_list(band, 'blade', case=1)   # Files from extended ground plane
	date_list         = ['2016_260_00']



	print('YYY')
	ant_s11           = 342   # from 2015
	ant_s11_Nfit      = 9
	low_band_cal_file = 0     # 2015 calibration file, 50-100 MHz, cfit=6, wfit=5
	beam_correction   = 0     # Extended ground plane, with scaled Haslam, FROM NIVEDITA

	fgl  = 0                  # 1
	glp  = 0.5                # 0.5
	fal  = 1                  # 1   
	fbcl = 1                  # 1



	ff, tt, ww, mm = eg.low_band_level2_to_level3_test_for_beam_factor(band, date_list[0], save='yes', save_folder=save_folder, save_flag='', sun_el_max=90, moon_el_max=90, amb_hum_max=90, min_receiver_temp=-50, max_receiver_temp=50, ant_s11=ant_s11, ant_s11_Nfit=ant_s11_Nfit, fgl=fgl, glp=glp, fal=fal, fbcl=fbcl, receiver_temperature=25, low_band_cal_file=low_band_cal_file, beam_correction=beam_correction)



	return ff, tt, ww, mm













def kk():

	d = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_comparison_memo246.hdf5')



	fr = d[0]
	rr = d[2]
	wr = d[3]
	pr = d[4]
	mr = d[5]




	#f = d[14]
	#r = d[16]
	#w = d[17]



	GHA1 = 19  #23
	GHA2 = 20  #23.999

	rr_temp = rr[ ((mr[:,3] >= GHA1) & (mr[:,3] < GHA2)), :]
	wr_temp = wr[ ((mr[:,3] >= GHA1) & (mr[:,3] < GHA2)), :]
	mr_temp = mr[ ((mr[:,3] >= GHA1) & (mr[:,3] < GHA2)), :]

	print(len(rr_temp[:,0]))


	i1 = 00
	i2 = 9000
	rx, wx = eg.spectral_averaging(rr_temp[i1:i2,:], wr_temp[i1:i2,:])




	# Spectral binning
	Nsamples = 64
	fb, rb, wb = eg.spectral_binning_number_of_samples(fr, rx, wx, nsamples=Nsamples)









	#rr_temp_4 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 2) & (mr[:,3] < 8)), :]
	#wr_temp_4 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 2) & (mr[:,3] < 8)), :]
	#pr_temp_4 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 2) & (mr[:,3] < 8)), :]

	#rr_temp_8 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 8) & (mr[:,3] < 14)), :]
	#wr_temp_8 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 8) & (mr[:,3] < 14)), :]
	#pr_temp_8 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 8) & (mr[:,3] < 14)), :]

	#rr_temp_12 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
	#wr_temp_12 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
	#pr_temp_12 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]

	#rr_temp_16 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
	#wr_temp_16 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
	#pr_temp_16 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]

	#rr_temp_20 = rr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
	#wr_temp_20 = wr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]
	#pr_temp_20 = pr[(mr[:,0] == m_daily[i,0]) & (mr[:,1] == m_daily[i,1]) & ((mr[:,3] >= 14) & (mr[:,3] < 20)), :]		




	return fb, rb, wb, mr_temp















def test_signal_injection_for_high_band_paper():



	fl = 150-32
	fh = 150+32


	f            = np.arange(fl, fh+0.1, 0.4)
	w            = np.ones(len(f))
	Teor, xHI, z = eg.model_eor(f, T21=0.028, zr=8.5, dz=1)














	# Case 1
	# --------------------------------
	p21_all  = np.zeros(3)
	dp21_all = np.zeros(3)


	NN = 5
	for j in range(NN):

		n            = 0.006*np.random.normal(np.zeros(len(f)))
		T            = n   # Tnn + n + 		

		for i in range(3):

			model_21 = 'tanh'
			p21, dp21, aux = eg.data_analysis_model_detection_rejection(f, T, w, model_21, model_fg = 'EDGES_polynomial', Nfg=i+3, zr=np.array([8.5]), dz=np.array([1]), z_alpha=0)

			p21_all[i]  = p21
			dp21_all[i] = dp21

		plt.subplot(2, 2, 1)
		plt.errorbar(np.arange(3,6), 1000*p21_all, 1000*dp21_all, fmt='o-')
		plt.plot([2, 6], [28, 28], 'r', linewidth=2)
		plt.plot([2, 6], [0, 0], 'k', linewidth=2)
		plt.xlim([2.5, 5.5])
		plt.xticks([3, 4, 5])
		plt.ylim([-30, 80])
		plt.grid()

	plt.ylabel('Fit Model: Tanh' + '\n' + 'temperature [mK]')
	plt.title('No Tanh Injected')











	# Case 1
	# --------------------------------
	p21_all  = np.zeros(3)
	dp21_all = np.zeros(3)


	NN = 4
	for j in range(NN):

		n            = 0.006*np.random.normal(np.zeros(len(f)))
		T            = Teor + n   # Tnn + n + 		

		for i in range(3):

			model_21 = 'tanh'
			p21, dp21, aux = eg.data_analysis_model_detection_rejection(f, T, w, model_21, model_fg = 'EDGES_polynomial', Nfg=i+3, zr=np.array([8.5]), dz=np.array([1]), z_alpha=0)

			p21_all[i]  = p21
			dp21_all[i] = dp21

		plt.subplot(2, 2, 2)
		plt.errorbar(np.arange(3,6), 1000*p21_all, 1000*dp21_all, fmt='o-')
		plt.plot([2, 6], [28, 28], 'r', linewidth=2)
		plt.plot([2, 6], [0, 0], 'k', linewidth=2)
		plt.xlim([2.5, 5.5])
		plt.xticks([3, 4, 5])
		plt.ylim([-30, 80])
		plt.grid()

	#plt.ylabel('Just Tanh' + '\n' + 'temperature [mK]')
	plt.title('Tanh Injected')










	# Case 2
	# --------------------------------
	Tnn          = 268*(f/150)**(-2.5)


	p21_all  = np.zeros(3)
	dp21_all = np.zeros(3)


	NN = 5
	for j in range(NN):

		n            = 0.006*np.random.normal(np.zeros(len(f)))
		T            = n + Tnn

		for i in range(3):

			model_21 = 'tanh'
			p21, dp21, aux = eg.data_analysis_model_detection_rejection(f, T, w, model_21, model_fg = 'EDGES_polynomial', Nfg=i+3, zr=np.array([8.5]), dz=np.array([1]), z_alpha=0)

			p21_all[i]  = p21
			dp21_all[i] = dp21

		plt.subplot(2, 2, 3)
		plt.errorbar(np.arange(3,6), 1000*p21_all, 1000*dp21_all, fmt='o-')
		plt.plot([2, 6], [28, 28], 'r', linewidth=2)
		plt.plot([2, 6], [0, 0], 'k', linewidth=2)
		plt.xlim([2.5, 5.5])
		plt.xticks([3, 4, 5])
		plt.ylim([-30, 80])	
		plt.grid()

	plt.xlabel('number of foreground terms')
	plt.ylabel('Fit Model: Foreground + Tanh' + '\n' + 'temperature [mK]')










	# Case 2
	# --------------------------------
	Tnn          = 268*(f/150)**(-2.5)


	p21_all  = np.zeros(2)
	dp21_all = np.zeros(2)


	NN = 4
	for j in range(NN):

		n            = 0.006*np.random.normal(np.zeros(len(f)))
		T            = Teor + n + Tnn

		for i in range(2):

			model_21 = 'tanh'
			p21, dp21, aux = eg.data_analysis_model_detection_rejection(f, T, w, model_21, model_fg = 'EDGES_polynomial', Nfg=i+3, zr=np.array([8.5]), dz=np.array([1]), z_alpha=0)

			p21_all[i]  = p21
			dp21_all[i] = dp21



		plt.subplot(2,2,4)
		plt.errorbar(np.arange(3,6), 1000*p21_all, 1000*dp21_all, fmt='o-')
		plt.plot([2, 6], [28, 28], 'r', linewidth=2)
		plt.plot([2, 6], [0, 0], 'k', linewidth=2)
		plt.xlim([2.5, 5.5])
		plt.xticks([3, 4, 5])
		plt.ylim([-30, 80])	
		plt.grid()

	plt.xlabel('number of foreground terms')
	#plt.ylabel('Foreground + Tanh' + '\n' + 'temperature [mK]')





















	## Case 3
	## --------------------------------

	#d  = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/average_spectrum/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.txt')

	#offset = 7

	#f = d[ (d[:,0]>=(150 - (65)/2)+offset) & (d[:,0]<=(150 + (65)/2)+offset), 0]
	#T = d[ (d[:,0]>=(150 - (65)/2)+offset) & (d[:,0]<=(150 + (65)/2)+offset), 1]
	#w = d[ (d[:,0]>=(150 - (65)/2)+offset) & (d[:,0]<=(150 + (65)/2)+offset), 2]

	##Tnn          = 268*(f/150)**(-2.5)	
	##n            = 0.006*np.random.normal(np.zeros(len(f)))
	##T            = Teor + n + Tnn  #+ n + 

	#p21_all  = np.zeros(3)
	#dp21_all = np.zeros(3)

	#for i in range(3):

		#model_21 = 'tanh'
		#p21, dp21, aux = eg.data_analysis_model_detection_rejection(f, T, w, model_21, model_fg = 'EDGES_polynomial', Nfg=i+3, zr=np.array([8.5]), dz=np.array([1]), z_alpha=0)

		#p21_all[i]  = p21
		#dp21_all[i] = dp21

	#plt.subplot(3,1,3)
	#plt.errorbar(np.arange(3,6), 1000*p21_all, 1000*dp21_all)
	#plt.plot([2, 6], [28, 28], 'r', linewidth=2)
	#plt.plot([2, 6], [0, 0], 'k', linewidth=2)
	#plt.xlim([2,6])
	##plt.ylim([-30, 60])	
	#plt.grid()

	#print(p21_all)
	#print(dp21_all)










	return f, T, w, p21_all, dp21_all






























def kk2():

	band   = 'high_band'
	folder = 'results_paper_1' #home_folder + '/DATA/EDGES/results/high_band/products/model_rejection/least_squares_sliding_window/results_paper_1'
	HDF5_filename = 'rejection_results_tanh_nominal'

	v, t, w, Dv, Nfg, zr, dz, p21, dp21 = eg.read_least_squares_sliding_window(band, folder + '/full_results', HDF5_filename + '.hdf5')


	return Dv, Nfg, zr, dz, p21, dp21










def plots_for_high_band_results_paper_checks(xx):

	# Run this first:
	#
	# xx = eg.data_analysis_cube_to_limits('high_band', 'results_paper_1', 'rejection_results_tanh_nominal', Tref = 0.028, save='no', ww=0, fg=0)
	#
	#

	win_width  = xx[-3]
	fg_terms   = xx[-2]
	win_number = xx[-1]


	plt.subplot(2,1,1)
	plt.imshow( np.fliplr(np.flipud(win_width.T)), interpolation='none', aspect='auto', extent=[14.8, 6.48, 0.04, 1.4], vmin=0, vmax=100);plt.colorbar(ticks = np.arange(20, 101, 5))
	plt.ylabel('duration')
	plt.grid()
	plt.title('Window Width [MHz]')

	plt.subplot(2,1,2)
	plt.imshow( np.fliplr(np.flipud(fg_terms.T)), interpolation='none', aspect='auto', extent=[14.8, 6.48, 0.04, 1.4], vmin=0, vmax=5);plt.colorbar(ticks = np.array([3, 4, 5]))
	plt.xlabel('reference redshift')
	plt.ylabel('duration')
	plt.title('Number of Foreground Terms')
	plt.grid()


	return 0






def plot_cold_eor_te_test(center):

	fb, xi_all, model_all, te_all, z0_all, dz_all, zC_all, TC_all, p21_all, dp21_all = eg.read_cold_EoR_least_squares('results_cold_EoR_all_models_20170427.hdf5')

	flag   = 0
	#center = 0.06
	offset = 0.0004

	for i in range(len(te_all)):
		if (te_all[i] >= center-offset) and (te_all[i] <= center+offset):

			if flag == 0:
				te_sel = te_all[i]
				z0_sel = z0_all[i]
				dz_sel = dz_all[i]

				flag = 1

			elif flag > 0:
				te_sel = np.append(te_sel, te_all[i])
				z0_sel = np.append(z0_sel, z0_all[i])
				dz_sel = np.append(dz_sel, dz_all[i])


	#index_dz_sel = np.argsort(dz_sel)

	#z0_sort = z0_sel[index_dz_sel]
	#dz_sort = dz_sel[index_dz_sel]
	#te_sort = te_sel[index_dz_sel]

	#for j in range(len(dz_sort)):
		#for i in range(len(dz_sort)-1):
			#if dz_sort[j] == dz_sort[i+1]:
				#if np.abs(te_sort[j]-center) > np.abs(te_sort[i+1]-center):

				#dz_best == 

		#else






	## plt.plot()




	return z0_sel, dz_sel, te_sel

















def plot_new_airline_check():



	# Loading measurements
	path_folder     = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_05_25C/data/s11/raw/InternalSwitch/'


	# Reading measurements of the airline
	oi, f = rc.s1p_read(path_folder + 'Int_Open1.s1p')
	si, f = rc.s1p_read(path_folder + 'Int_Short1.s1p')
	li, f = rc.s1p_read(path_folder + 'Int_Match1.s1p')	

	aom, f = rc.s1p_read(path_folder + 'Ext_Air_Open1.s1p')
	asm, f = rc.s1p_read(path_folder + 'Ext_Air_Short1.s1p')
	alm, f = rc.s1p_read(path_folder + 'Ext_Air_Load1.s1p')



	# Reflection references
	oref  =  1*np.ones(len(f))
	sref  = -1*np.ones(len(f))
	lref  =  0*np.ones(len(f))


	# First calibration
	ao1  = rc.de_embed(oref, sref, lref, oi, si, li, aom)
	as1  = rc.de_embed(oref, sref, lref, oi, si, li, asm)
	al1  = rc.de_embed(oref, sref, lref, oi, si, li, alm)


	# Absolute calibration
	ao2 = eg.low_band1_switch_correction_2017_05_25C(ao1[0], f_in = f)
	as2 = eg.low_band1_switch_correction_2017_05_25C(as1[0], f_in = f)
	al2 = eg.low_band1_switch_correction_2017_05_25C(al1[0], f_in = f)

	aocX = ao2[0]
	ascX = as2[0]
	alcX = al2[0]







	# Loading measurements
	path_root_folder     = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_07_15C_25C_35C/data/s11/raw/InternalSwitch/Lowband1_switch_rechar_July_2017/lowband1/'


	path_folder = path_root_folder + '25C/pass01/Airline/'

	# External Open
	o_sw_o, f = rc.s1p_read(path_folder + 'Open/Open.s1p')
	o_sw_s, f = rc.s1p_read(path_folder + 'Open/Short.s1p')
	o_sw_m, f = rc.s1p_read(path_folder + 'Open/Match.s1p')
	o_sw_e, f = rc.s1p_read(path_folder + 'Open/External.s1p')	

	# External Short
	s_sw_o, f = rc.s1p_read(path_folder + 'Short/Open.s1p')
	s_sw_s, f = rc.s1p_read(path_folder + 'Short/Short.s1p')
	s_sw_m, f = rc.s1p_read(path_folder + 'Short/Match.s1p')
	s_sw_e, f = rc.s1p_read(path_folder + 'Short/External.s1p')

	# External Match
	m_sw_o, f = rc.s1p_read(path_folder + 'Match/Open.s1p')
	m_sw_s, f = rc.s1p_read(path_folder + 'Match/Short.s1p')
	m_sw_m, f = rc.s1p_read(path_folder + 'Match/Match.s1p')
	m_sw_e, f = rc.s1p_read(path_folder + 'Match/External.s1p')	



	# Reflection references
	oref  =  1*np.ones(len(f))
	sref  = -1*np.ones(len(f))
	lref  =  0*np.ones(len(f))


	# First calibration
	ao1  = rc.de_embed(oref, sref, lref, o_sw_o, o_sw_s, o_sw_m, o_sw_e)
	as1  = rc.de_embed(oref, sref, lref, s_sw_o, s_sw_s, s_sw_m, s_sw_e)
	al1  = rc.de_embed(oref, sref, lref, m_sw_o, m_sw_s, m_sw_m, m_sw_e)


	# Absolute calibration
	LAB_REP = 1
	ao2 = eg.low_band1_switch_correction_2017_07_25C(ao1[0], f_in = f, repetition=LAB_REP)
	as2 = eg.low_band1_switch_correction_2017_07_25C(as1[0], f_in = f, repetition=LAB_REP)
	al2 = eg.low_band1_switch_correction_2017_07_25C(al1[0], f_in = f, repetition=LAB_REP)

	aocY = ao2[0]
	ascY = as2[0]
	alcY = al2[0]














	# Loading measurements
	path_root_folder     = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_07_15C_25C_35C/data/s11/raw/InternalSwitch/Lowband1_switch_rechar_July_2017/lowband1/'


	path_folder = path_root_folder + '25C/pass02/Airline/'

	# External Open
	o_sw_o, f = rc.s1p_read(path_folder + 'Open/open.s1p')
	o_sw_s, f = rc.s1p_read(path_folder + 'Open/short.s1p')
	o_sw_m, f = rc.s1p_read(path_folder + 'Open/match.s1p')
	o_sw_e, f = rc.s1p_read(path_folder + 'Open/external.s1p')	

	# External Short
	s_sw_o, f = rc.s1p_read(path_folder + 'Short/open.s1p')
	s_sw_s, f = rc.s1p_read(path_folder + 'Short/short.s1p')
	s_sw_m, f = rc.s1p_read(path_folder + 'Short/match.s1p')
	s_sw_e, f = rc.s1p_read(path_folder + 'Short/external.s1p')

	# External Match
	m_sw_o, f = rc.s1p_read(path_folder + 'Match/open.s1p')
	m_sw_s, f = rc.s1p_read(path_folder + 'Match/short.s1p')
	m_sw_m, f = rc.s1p_read(path_folder + 'Match/match.s1p')
	m_sw_e, f = rc.s1p_read(path_folder + 'Match/external.s1p')	



	# Reflection references
	oref  =  1*np.ones(len(f))
	sref  = -1*np.ones(len(f))
	lref  =  0*np.ones(len(f))


	# First calibration
	ao1  = rc.de_embed(oref, sref, lref, o_sw_o, o_sw_s, o_sw_m, o_sw_e)
	as1  = rc.de_embed(oref, sref, lref, s_sw_o, s_sw_s, s_sw_m, s_sw_e)
	al1  = rc.de_embed(oref, sref, lref, m_sw_o, m_sw_s, m_sw_m, m_sw_e)


	# Absolute calibration
	LAB_REP = 2
	ao2 = eg.low_band1_switch_correction_2017_07_25C(ao1[0], f_in = f, repetition=LAB_REP)
	as2 = eg.low_band1_switch_correction_2017_07_25C(as1[0], f_in = f, repetition=LAB_REP)
	al2 = eg.low_band1_switch_correction_2017_07_25C(al1[0], f_in = f, repetition=LAB_REP)

	aocZ = ao2[0]
	ascZ = as2[0]
	alcZ = al2[0]













	# Measurements at the receiver input
	# -------------------------------------------
	path_root = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_07_15C_25C_35C/data/s11/raw/receiver_sp4t/'


	folder = 'VNA_ACC_TEST/Lab L1-83/Set1/No-Airline/'
	o1r1v2_m,  f = rc.s1p_read(path_root + folder + 'Open.s1p')
	s1r1v2_m,  f = rc.s1p_read(path_root + folder + 'Short.s1p')
	l1r1v2_m,  f = rc.s1p_read(path_root + folder + 'Match.s1p')

	folder = 'VNA_ACC_TEST/Lab L1-83/Set1/With-Airline/'
	k1r1v2_m, f = rc.s1p_read(path_root + folder + 'Open.s1p')
	k2r1v2_m, f = rc.s1p_read(path_root + folder + 'Short.s1p')
	k3r1v2_m, f = rc.s1p_read(path_root + folder + 'Load.s1p')



	# Models of standards
	# -------------------
	resistance_match  = 50.12
	oa, sa, la = rc.agilent_85033E(f, resistance_match, 1)


	k1r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   k1r1v2_m)
	k2r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   k2r1v2_m)
	k3r1v2,   s11, s12s21, s22  =  rc.de_embed( oa, sa, la,   o1r1v2_m, s1r1v2_m, l1r1v2_m,   k3r1v2_m)






























	# Models of standards and airline
	# -------------------------------
	resistance_match  = 50.12
	oa, sa, la        = rc.agilent_85033E(f, resistance_match, 1)


	ko = rc.terminated_airline_8043S15(f, oa)
	ks = rc.terminated_airline_8043S15(f, sa)
	kl = rc.terminated_airline_8043S15(f, la)		












	path_plots = '/DATA/EDGES/results/plots/20170814/' 




	# Figures
	# ------------------------------------------

	plt.close()
	plt.close()
	plt.close()
	plt.close()

	plt.figure(1, figsize=[14,10])

	plt.subplot(3,2,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(aocX)), 'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(aocY)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(aocZ)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(k1r1v2)), 'm')	
	plt.plot(f/1e6, 20*np.log10(np.abs(ko)), 'r')
	plt.ylim([-0.008, 0.002])
	plt.grid()
	plt.ylabel('airline+open')
	plt.title('Magnitude [dB]')

	plt.subplot(3,2,3)
	plt.plot(f/1e6, 20*np.log10(np.abs(ascX)), 'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(ascY)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(ascZ)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(k2r1v2)), 'm')
	plt.plot(f/1e6, 20*np.log10(np.abs(ks)), 'r')
	plt.ylim([-0.12, -0.06])
	plt.grid()
	plt.ylabel('airline+short')

	plt.subplot(3,2,5)
	plt.plot(f/1e6, 20*np.log10(np.abs(alcX)), 'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(alcY)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(alcZ)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(k3r1v2)), 'm')
	plt.plot(f/1e6, 20*np.log10(np.abs(kl)), 'r')
	plt.ylim([-50, -38])
	plt.grid()
	plt.ylabel('airline+match')
	plt.xlabel('frequency [MHz]')






	plt.subplot(3,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(aocX)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(aocY)), 'g')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ko)), 'r')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(aocZ)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r1v2)), 'm')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ko)), 'r')
	plt.grid()
	plt.title('Phase [deg]')
	plt.ylabel('airline+open')
	plt.legend(['2017-05, 25degC','2017-07, 25degC','2017-07, at VNA input', 'model'], fontsize=10)

	plt.subplot(3,2,4)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ascX)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ascY)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ascZ)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r1v2)), 'm')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ks)), 'r')
	plt.grid()
	plt.ylabel('airline+short')

	plt.subplot(3,2,6)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(alcX)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(alcY)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(alcZ)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r1v2)), 'm')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(kl)), 'r')	
	plt.grid()
	plt.ylabel('airline+match')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-20, 25])


	# saving plot
	plt.savefig(home_folder + path_plots + 'h1_100.pdf', bbox_inches='tight')
	plt.close()		

















	plt.close()
	plt.close()
	plt.figure(2, figsize=[14,10])

	plt.subplot(3,2,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(aocX)) - 20*np.log10(np.abs(ko)), 'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(aocY)) - 20*np.log10(np.abs(ko)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(aocZ)) - 20*np.log10(np.abs(ko)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(k1r1v2)) - 20*np.log10(np.abs(ko)), 'm')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-0.006, 0.006])
	plt.grid()
	plt.ylabel('airline+open')
	plt.title(r'$\Delta$ Magnitude [dB]')

	plt.subplot(3,2,3)
	plt.plot(f/1e6, 20*np.log10(np.abs(ascX)) - 20*np.log10(np.abs(ks)), 'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(ascY)) - 20*np.log10(np.abs(ks)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(ascZ)) - 20*np.log10(np.abs(ks)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(k2r1v2)) - 20*np.log10(np.abs(ks)), 'm')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-0.006, 0.006])
	plt.grid()
	plt.ylabel('airline+short')

	plt.subplot(3,2,5)
	plt.plot(f/1e6, 20*np.log10(np.abs(alcX)) - 20*np.log10(np.abs(kl)), 'b')
	#plt.plot(f/1e6, 20*np.log10(np.abs(alcY)) - 20*np.log10(np.abs(kl)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(alcZ)) - 20*np.log10(np.abs(kl)), 'g')
	plt.plot(f/1e6, 20*np.log10(np.abs(k3r1v2)) - 20*np.log10(np.abs(kl)), 'm')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-2, 2])
	plt.grid()
	plt.ylabel('airline+match')
	plt.xlabel('frequency [MHz]')






	plt.subplot(3,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(aocX)) - (180/np.pi)*np.unwrap(np.angle(ko)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(aocY)) - (180/np.pi)*np.unwrap(np.angle(ko)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(aocZ)) - (180/np.pi)*np.unwrap(np.angle(ko)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k1r1v2)) - (180/np.pi)*np.unwrap(np.angle(ko)), 'm')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-0.3, 0.3])
	plt.grid()
	plt.title(r'$\Delta$ Phase [deg]')
	plt.ylabel('airline+open')
	plt.legend(['2017-05, 25degC','2017-07, 25degC','2017-07, at VNA input'], fontsize=10)

	plt.subplot(3,2,4)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ascX)) - (180/np.pi)*np.unwrap(np.angle(ks)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ascY)) - (180/np.pi)*np.unwrap(np.angle(ks)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(ascZ)) - (180/np.pi)*np.unwrap(np.angle(ks)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k2r1v2)) - (180/np.pi)*np.unwrap(np.angle(ks)), 'm')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-0.3, 0.3])
	plt.grid()
	plt.ylabel('airline+short')

	plt.subplot(3,2,6)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(alcX)) - (180/np.pi)*np.unwrap(np.angle(kl)), 'b')
	#plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(alcY)) - (180/np.pi)*np.unwrap(np.angle(kl)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(alcZ)) - (180/np.pi)*np.unwrap(np.angle(kl)), 'g')
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(k3r1v2)) - (180/np.pi)*np.unwrap(np.angle(kl)), 'm')
	plt.plot([40, 120], [0, 0], 'k', linewidth=2)
	plt.ylim([-4, 4])
	plt.grid()
	plt.ylabel('airline+match')
	plt.xlabel('frequency [MHz]')
	#plt.ylim([-20, 25])	


	# saving plot
	plt.savefig(home_folder + path_plots + 'h2_100.pdf', bbox_inches='tight')
	plt.close()		


	return f  #, aoc, asc, alc

















def switch_characterization_method_crosscheck():


	"""

	2017-08-12
	This function compares my method to calibrate the S11 measurement at the receiver input, with Alan's method.

	"""

	path_plots = '/DATA/EDGES/results/plots/20170814/' 





	# Loading measurements
	path_folder   = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_05_25C/data/s11/raw/InternalSwitch/'

	oim, f        = rc.s1p_read(path_folder + 'Int_Open1.s1p')
	sim, f        = rc.s1p_read(path_folder + 'Int_Short1.s1p')
	lim, f        = rc.s1p_read(path_folder + 'Int_Match1.s1p')

	om, f         = rc.s1p_read(path_folder + 'Ext_Open1.s1p')
	sm, f         = rc.s1p_read(path_folder + 'Ext_Short1.s1p')
	lm, f         = rc.s1p_read(path_folder + 'Ext_Match1.s1p')
	attnm, f      = rc.s1p_read(path_folder + 'Ext_6dB_1.s1p')
	airm, f       = rc.s1p_read(path_folder + 'Ext_Air_Load1.s1p')


	path_antenna  = home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/raw/2017-06-21-low1-b_2017par/'
	ant_oim, fa   = rc.s1p_read(path_antenna + 'run_0001_input1_20170621_170821.s1p')
	ant_sim, fa   = rc.s1p_read(path_antenna + 'run_0001_input2_20170621_170829.s1p')
	ant_lim, fa   = rc.s1p_read(path_antenna + 'run_0001_input3_20170621_170837.s1p')
	antm, fa      = rc.s1p_read(path_antenna + 'run_0001_input4_20170621_170846.s1p')


	# Initializing arrays
	oc_all    = np.zeros((4, len(f)))  +  1j*0
	sc_all    = np.zeros((4, len(f)))  +  1j*0
	lc_all    = np.zeros((4, len(f)))  +  1j*0
	attnc_all = np.zeros((4, len(f)))  +  1j*0
	airc_all  = np.zeros((4, len(f)))  +  1j*0
	antc_all  = np.zeros((4, len(fa)))  +  1j*0

	s11_all    = np.zeros((4, len(f)))  +  1j*0
	s12s21_all = np.zeros((4, len(f)))  +  1j*0
	s22_all    = np.zeros((4, len(f)))  +  1j*0


	# Assumptions for relative standards
	o_sw_0 = np.array([  1,        0.8,        0.7 - 0.3*1j,       0.5 + 0.5*1j ])
	s_sw_0 = np.array([ -1,       -0.7,       -0.5 - 0.3*1j,      -0.5 + 0.2*1j ])
	l_sw_0 = np.array([  0,        0.2,        0.3 + 0.3*1j,      -0.3 - 0.3*1j ])


	for i in range(4):

		# Reflection references
		oref   = o_sw_0[i] * np.ones(len(f))
		sref   = s_sw_0[i] * np.ones(len(f))
		lref   = l_sw_0[i] * np.ones(len(f))

		orefa  = o_sw_0[i] * np.ones(len(fa))
		srefa  = s_sw_0[i] * np.ones(len(fa))
		lrefa  = l_sw_0[i] * np.ones(len(fa))		



		# First calibration
		o0     = rc.de_embed( oref, sref, lref, oim, sim, lim, om )
		s0     = rc.de_embed( oref, sref, lref, oim, sim, lim, sm )
		l0     = rc.de_embed( oref, sref, lref, oim, sim, lim, lm )
		attn0  = rc.de_embed( oref, sref, lref, oim, sim, lim, attnm )	
		air0   = rc.de_embed( oref, sref, lref, oim, sim, lim, airm )	
		ant0   = rc.de_embed( orefa, srefa, lrefa, ant_oim, ant_sim, ant_lim, antm )


		# Absolute calibration
		o1     = eg.low_band1_switch_correction_2017_05_25C( o0[0],    f_in = f,    o_sw_0 = o_sw_0[i], s_sw_0 = s_sw_0[i], l_sw_0 = l_sw_0[i] )
		s1     = eg.low_band1_switch_correction_2017_05_25C( s0[0],    f_in = f,    o_sw_0 = o_sw_0[i], s_sw_0 = s_sw_0[i], l_sw_0 = l_sw_0[i] )
		l1     = eg.low_band1_switch_correction_2017_05_25C( l0[0],    f_in = f,    o_sw_0 = o_sw_0[i], s_sw_0 = s_sw_0[i], l_sw_0 = l_sw_0[i] )
		attn1  = eg.low_band1_switch_correction_2017_05_25C( attn0[0], f_in = f,    o_sw_0 = o_sw_0[i], s_sw_0 = s_sw_0[i], l_sw_0 = l_sw_0[i] )
		air1   = eg.low_band1_switch_correction_2017_05_25C( air0[0],  f_in = f,    o_sw_0 = o_sw_0[i], s_sw_0 = s_sw_0[i], l_sw_0 = l_sw_0[i] )
		ant1   = eg.low_band1_switch_correction_2017_05_25C( ant0[0],  f_in = fa,   o_sw_0 = o_sw_0[i], s_sw_0 = s_sw_0[i], l_sw_0 = l_sw_0[i] )


		# 
		oc_all[i,:]    = o1[0]
		sc_all[i,:]    = s1[0]
		lc_all[i,:]    = l1[0]
		attnc_all[i,:] = attn1[0]
		airc_all[i,:]  = air1[0]
		antc_all[i,:]  = ant1[0]


		# 
		s11_all[i,:]    = o1[1]
		s12s21_all[i,:] = o1[2]
		s22_all[i,:]    = o1[3]









	# Comparison of methods with 2017 measurements

	resistance_of_match  = 50.11 # male
	md = 1
	oa, sa, la           = rc.agilent_85033E(f, resistance_of_match, md)	

	oic, x1, x2, x3 = rc.de_embed( oa, sa, la, om, sm, lm, oim )
	sic, x1, x2, x3 = rc.de_embed( oa, sa, la, om, sm, lm, sim )
	lic, x1, x2, x3 = rc.de_embed( oa, sa, la, om, sm, lm, lim )



	Npoly = 12    # 8 is enough

	par                = np.polyfit(f, np.real(oic), Npoly)
	oic_model_real     = np.polyval(par, f)
	oic_ant_model_real = np.polyval(par, fa)

	par                = np.polyfit(f, np.imag(oic), Npoly)
	oic_model_imag     = np.polyval(par, f)
	oic_ant_model_imag = np.polyval(par, fa)

	oic_model          = oic_model_real + 1j*oic_model_imag
	oic_ant_model      = oic_ant_model_real + 1j*oic_ant_model_imag



	par                = np.polyfit(f, np.real(sic), Npoly)
	sic_model_real     = np.polyval(par, f)
	sic_ant_model_real = np.polyval(par, fa)

	par                = np.polyfit(f, np.imag(sic), Npoly)
	sic_model_imag     = np.polyval(par, f)
	sic_ant_model_imag = np.polyval(par, fa)

	sic_model          = sic_model_real + 1j*sic_model_imag	
	sic_ant_model      = sic_ant_model_real + 1j*sic_ant_model_imag



	par                = np.polyfit(f, np.real(lic), Npoly)
	lic_model_real     = np.polyval(par, f)
	lic_ant_model_real = np.polyval(par, fa)

	par                = np.polyfit(f, np.imag(lic), Npoly)
	lic_model_imag     = np.polyval(par, f)
	lic_ant_model_imag = np.polyval(par, fa)

	lic_model          = lic_model_real + 1j*lic_model_imag	
	lic_ant_model      = lic_ant_model_real + 1j*lic_ant_model_imag



	oc_v2, x1, x2, x3    = rc.de_embed( oic_model, sic_model, lic_model, oim, sim, lim, om )
	sc_v2, x1, x2, x3    = rc.de_embed( oic_model, sic_model, lic_model, oim, sim, lim, sm )
	lc_v2, x1, x2, x3    = rc.de_embed( oic_model, sic_model, lic_model, oim, sim, lim, lm )
	attnc_v2, x1, x2, x3 = rc.de_embed( oic_model, sic_model, lic_model, oim, sim, lim, attnm )

	antc_v2, x1, x2, x3 = rc.de_embed( oic_ant_model, sic_ant_model, lic_ant_model, ant_oim, ant_sim, ant_lim, antm )















	## Comparison of methods with 2015 measurements

	#data_path_25 = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2015_08_25C/data/s11/raw/20150903/switch25degC/'

	## Measurements at 25degC 
	#o_sw_m25, fd  = rc.s1p_read(data_path_25 + 'open.S1P')
	#s_sw_m25, fd  = rc.s1p_read(data_path_25 + 'short.S1P')
	#l_sw_m25, fd  = rc.s1p_read(data_path_25 + 'load.S1P')

	#o_sw_in25, fd = rc.s1p_read(data_path_25 + 'open_input.S1P')
	#s_sw_in25, fd = rc.s1p_read(data_path_25 + 'short_input.S1P')
	#l_sw_in25, fd = rc.s1p_read(data_path_25 + 'load_input.S1P')


	## Computation of S-parameters to the receiver input
	#resistance_of_match  = 50.12 # male
	#md = 1
	#oa, sa, la           = rc.agilent_85033E(fd, resistance_of_match, md)	

	#oic, x1, x2, x3 = rc.de_embed( oa, sa, la,   o_sw_in25, s_sw_in25, l_sw_in25, o_sw_m25)
	#sic, x1, x2, x3 = rc.de_embed( oa, sa, la,   o_sw_in25, s_sw_in25, l_sw_in25, s_sw_m25)
	#lic, x1, x2, x3 = rc.de_embed( oa, sa, la,   o_sw_in25, s_sw_in25, l_sw_in25, l_sw_m25)



	#Npoly = 12    # 8 is enough

	#par            = np.polyfit(fd, np.real(oic), Npoly)
	#oic_model_real = np.polyval(par, fd)

	#par            = np.polyfit(fd, np.imag(oic), Npoly)
	#oic_model_imag = np.polyval(par, fd)

	#oic2015_model      = oic_model_real + 1j*oic_model_imag



	#par            = np.polyfit(fd, np.real(sic), Npoly)
	#sic_model_real = np.polyval(par, fd)

	#par            = np.polyfit(fd, np.imag(sic), Npoly)
	#sic_model_imag = np.polyval(par, fd)

	#sic2015_model      = sic_model_real + 1j*sic_model_imag



	#par            = np.polyfit(fd, np.real(lic), Npoly)
	#lic_model_real = np.polyval(par, fd)

	#par            = np.polyfit(fd, np.imag(lic), Npoly)
	#lic_model_imag = np.polyval(par, fd)

	#lic2015_model      = lic_model_real + 1j*lic_model_imag



	#path_antenna  = home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/raw/2017-06-21-low1-b_2017par/'
	#ant_oim, fa   = rc.s1p_read(path_antenna + 'run_0001_input1_20170621_170821.s1p')
	#ant_sim, fa   = rc.s1p_read(path_antenna + 'run_0001_input2_20170621_170829.s1p')
	#ant_lim, fa   = rc.s1p_read(path_antenna + 'run_0001_input3_20170621_170837.s1p')
	#antm, fa      = rc.s1p_read(path_antenna + 'run_0001_input4_20170621_170846.s1p')






	#airc_all, s11_all, s12s21_all, s22_all, oic, sic, lic, oic_model, sic_model, lic_model, oic_ant_model, sic_ant_model, lic_ant_model, 









	# Figures
	# ----------------------------------------

	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()










	sx = 14
	sy = 10

	# -----------------------
	plt.figure(1, figsize=[sx, sy])
	plt.subplot(3,2,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(s11_all.T)))
	plt.xlim([50, 100])
	plt.ylim([-45, -5])
	plt.grid()
	plt.ylabel('S11')
	plt.title('Magnitude [dB]')

	plt.subplot(3,2,3)
	plt.plot(f/1e6, 20*np.log10(np.abs(s12s21_all.T)))
	plt.xlim([50, 100])
	plt.ylim([-4, 2])
	plt.grid()
	plt.ylabel('S12S21')

	plt.subplot(3,2,5)
	plt.plot(f/1e6, 20*np.log10(np.abs(s22_all.T)))
	plt.xlim([50, 100])
	plt.ylim([-40, 5])
	plt.grid()
	plt.ylabel('S22')
	plt.xlabel('frequency [MHz]')



	plt.subplot(3,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(s11_all.T)))
	plt.xlim([50, 100])
	plt.ylim([-50, 250])
	plt.grid()
	plt.title('Phase [deg]')
	#plt.ylabel('S11')


	plt.subplot(3,2,4)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(s12s21_all.T)))
	plt.xlim([50, 100])
	plt.ylim([-120, -20])
	plt.grid()
	#plt.ylabel('S12S21' + '\n' + 'phase [deg]')

	plt.subplot(3,2,6)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(s22_all.T)))
	plt.xlim([50, 100])
	plt.ylim([-50, 400])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	#plt.ylabel('S22' + '\n' + 'phase [deg]')
	plt.legend(['case 1', 'case 2', 'case 3', 'case 4'], loc=0)


	# saving plot
	plt.savefig(home_folder + path_plots + 'f1.pdf', bbox_inches='tight')
	plt.close()		









	sx = 14
	sy = 10

	# -----------------------
	plt.figure(2, figsize=[sx, sy])

	plt.subplot(5,2,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(oc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(oc_all[1,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(oc_all[2,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(oc_all[3,:])))
	plt.xlim([50, 100])
	#plt.ylim([-0.000001, 0.000001])
	plt.grid()
	plt.ylabel('open')
	plt.title('Magnitude [dB]')

	plt.subplot(5,2,3)
	plt.plot(f/1e6, 20*np.log10(np.abs(sc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(sc_all[1,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(sc_all[2,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(sc_all[3,:])))
	plt.xlim([50, 100])
	#plt.ylim([-0.000001, 0.000001])
	plt.grid()
	plt.ylabel('short')


	plt.subplot(5,2,5)
	plt.plot(f/1e6, 20*np.log10(np.abs(lc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(lc_all[1,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(lc_all[2,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(lc_all[3,:])))
	plt.xlim([50, 100])
	#plt.ylim([-0.00001, 0.00001])
	plt.grid()
	plt.ylabel('match')


	plt.subplot(5,2,7)
	plt.plot(f/1e6, 20*np.log10(np.abs(attnc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(attnc_all[1,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(attnc_all[2,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(attnc_all[3,:])))
	plt.xlim([50, 100])
	ax=plt.gca()
	ax.ticklabel_format(useOffset=False)
	plt.grid()
	plt.ylabel('attenuator')


	plt.subplot(5,2,9)
	plt.plot(fa/1e6, 20*np.log10(np.abs(antc_all[0,:])))
	plt.plot(fa/1e6, 20*np.log10(np.abs(antc_all[1,:])))
	plt.plot(fa/1e6, 20*np.log10(np.abs(antc_all[2,:])))
	plt.plot(fa/1e6, 20*np.log10(np.abs(antc_all[3,:])))
	plt.xlim([50, 100])
	plt.ylim([-20, -5])
	plt.grid()
	plt.ylabel('antenna')
	plt.xlabel('frequency [MHz]')	







	plt.subplot(5,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(oc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(oc_all[1,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(oc_all[2,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(oc_all[3,:])))
	plt.xlim([50, 100])
	#plt.ylim([-0.00001, 0.00001])
	plt.grid()
	plt.title('Phase [deg]')

	plt.subplot(5,2,4)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(sc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(sc_all[1,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(sc_all[2,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(sc_all[3,:])))
	plt.xlim([50, 100])
	#plt.ylim([-0.00002, 0.00002])
	plt.grid()

	plt.subplot(5,2,6)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(lc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(lc_all[1,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(lc_all[2,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(lc_all[3,:])))
	plt.xlim([50, 100])
	#plt.ylim([-0.0001, 0.0001])
	plt.grid()

	plt.subplot(5,2,8)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(attnc_all[0,:]))) 
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(attnc_all[1,:]))) 
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(attnc_all[2,:]))) 
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(attnc_all[3,:]))) 
	plt.xlim([50, 100])
	#plt.ylim([-0.00001, 0.00001])
	plt.grid()

	plt.subplot(5,2,10)
	plt.plot(fa/1e6, (180/np.pi)*np.unwrap(np.angle(antc_all[0,:]))) 
	plt.plot(fa/1e6, (180/np.pi)*np.unwrap(np.angle(antc_all[1,:]))) 
	plt.plot(fa/1e6, (180/np.pi)*np.unwrap(np.angle(antc_all[2,:])))
	plt.plot(fa/1e6, (180/np.pi)*np.unwrap(np.angle(antc_all[3,:])))
	plt.xlim([50, 100])
	plt.ylim([-600, 50])
	plt.grid()
	plt.xlabel('frequency [MHz]')

	# saving plot
	plt.savefig(home_folder + path_plots + 'f2.pdf', bbox_inches='tight')
	plt.close()		










	sx = 14
	sy = 10

	# -----------------------
	plt.figure(3, figsize=[sx, sy])

	plt.subplot(5,2,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(oc_all[1,:])) - 20*np.log10(np.abs(oc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(oc_all[2,:])) - 20*np.log10(np.abs(oc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(oc_all[3,:])) - 20*np.log10(np.abs(oc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.000001, 0.000001])
	plt.grid()
	plt.ylabel('open')
	plt.title(r'$\Delta$ Magnitude [dB]')

	plt.subplot(5,2,3)
	plt.plot(f/1e6, 20*np.log10(np.abs(sc_all[1,:])) - 20*np.log10(np.abs(sc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(sc_all[2,:])) - 20*np.log10(np.abs(sc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(sc_all[3,:])) - 20*np.log10(np.abs(sc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.000001, 0.000001])
	plt.grid()
	plt.ylabel('short')


	plt.subplot(5,2,5)
	plt.plot(f/1e6, 20*np.log10(np.abs(lc_all[1,:])) - 20*np.log10(np.abs(lc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(lc_all[2,:])) - 20*np.log10(np.abs(lc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(lc_all[3,:])) - 20*np.log10(np.abs(lc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.00001, 0.00001])
	plt.grid()
	plt.ylabel('match')


	plt.subplot(5,2,7)
	plt.plot(f/1e6, 20*np.log10(np.abs(attnc_all[1,:])) - 20*np.log10(np.abs(attnc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(attnc_all[2,:])) - 20*np.log10(np.abs(attnc_all[0,:])))
	plt.plot(f/1e6, 20*np.log10(np.abs(attnc_all[3,:])) - 20*np.log10(np.abs(attnc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.000001, 0.000001])
	plt.grid()
	plt.ylabel('attenuator')


	plt.subplot(5,2,9)
	plt.plot(fa/1e6, 20*np.log10(np.abs(antc_all[1,:])) - 20*np.log10(np.abs(antc_all[0,:])))
	plt.plot(fa/1e6, 20*np.log10(np.abs(antc_all[2,:])) - 20*np.log10(np.abs(antc_all[0,:])))
	plt.plot(fa/1e6, 20*np.log10(np.abs(antc_all[3,:])) - 20*np.log10(np.abs(antc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.000001, 0.000001])
	plt.grid()
	plt.ylabel('antenna')
	plt.xlabel('frequency [MHz]')	







	plt.subplot(5,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(oc_all[1,:])) - (180/np.pi)*np.unwrap(np.angle(oc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(oc_all[2,:])) - (180/np.pi)*np.unwrap(np.angle(oc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(oc_all[3,:])) - (180/np.pi)*np.unwrap(np.angle(oc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.00001, 0.00001])
	plt.grid()
	plt.title(r'$\Delta$ Phase [deg]')

	plt.subplot(5,2,4)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(sc_all[1,:])) - (180/np.pi)*np.unwrap(np.angle(sc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(sc_all[2,:])) - (180/np.pi)*np.unwrap(np.angle(sc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(sc_all[3,:])) - (180/np.pi)*np.unwrap(np.angle(sc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.00002, 0.00002])
	plt.grid()


	plt.subplot(5,2,6)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(lc_all[1,:])) - (180/np.pi)*np.unwrap(np.angle(lc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(lc_all[2,:])) - (180/np.pi)*np.unwrap(np.angle(lc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(lc_all[3,:])) - (180/np.pi)*np.unwrap(np.angle(lc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.0001, 0.0001])
	plt.grid()


	plt.subplot(5,2,8)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(attnc_all[1,:])) - (180/np.pi)*np.unwrap(np.angle(attnc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(attnc_all[2,:])) - (180/np.pi)*np.unwrap(np.angle(attnc_all[0,:])))
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(attnc_all[3,:])) - (180/np.pi)*np.unwrap(np.angle(attnc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.00001, 0.00001])
	plt.grid()


	plt.subplot(5,2,10)
	plt.plot(fa/1e6, (180/np.pi)*np.unwrap(np.angle(antc_all[1,:])) - (180/np.pi)*np.unwrap(np.angle(antc_all[0,:])))
	plt.plot(fa/1e6, (180/np.pi)*np.unwrap(np.angle(antc_all[2,:])) - (180/np.pi)*np.unwrap(np.angle(antc_all[0,:])))
	plt.plot(fa/1e6, (180/np.pi)*np.unwrap(np.angle(antc_all[3,:])) - (180/np.pi)*np.unwrap(np.angle(antc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.00001, 0.00001])
	plt.grid()
	plt.xlabel('frequency [MHz]')

	# saving plot
	plt.savefig(home_folder + path_plots + 'f3.pdf', bbox_inches='tight')
	plt.close()		










	sx = 14
	sy = 10

	# -----------------------
	plt.figure(4, figsize=[sx, sy])

	plt.subplot(3,2,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(oic_model)))
	plt.xlim([50, 100])
	plt.title('Magnitude [dB]')
	plt.ylabel('internal open')
	plt.grid()


	plt.subplot(3,2,3)
	plt.plot(f/1e6, 20*np.log10(np.abs(sic_model)))
	plt.xlim([50, 100])
	plt.ylabel('internal short')
	plt.grid()


	plt.subplot(3,2,5)
	plt.plot(f/1e6, 20*np.log10(np.abs(lic_model)))
	plt.xlim([50, 100])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('internal match')
	plt.grid()



	plt.subplot(3,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(oic_model)))
	plt.xlim([50, 100])
	plt.title('Phase [deg]')
	plt.grid()


	plt.subplot(3,2,4)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(sic_model)))
	plt.xlim([50, 100])
	plt.grid()


	plt.subplot(3,2,6)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(lic_model)))
	plt.xlim([50, 100])
	plt.xlabel('frequency [MHz]')
	plt.grid()


	# saving plot
	plt.savefig(home_folder + path_plots + 'f4.pdf', bbox_inches='tight')
	plt.close()	








	sx = 14
	sy = 10

	# -----------------------
	plt.figure(5, figsize=[sx, sy])

	plt.subplot(5,2,1)
	plt.plot(f/1e6, 20*np.log10(np.abs(oc_v2)) - 20*np.log10(np.abs(oc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.0001, 0.0001])
	plt.grid()
	plt.ylabel('open')
	plt.title(r'$\Delta$ Magnitude [dB]')

	plt.subplot(5,2,3)
	plt.plot(f/1e6, 20*np.log10(np.abs(sc_v2)) - 20*np.log10(np.abs(sc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.0001, 0.0001])
	plt.grid()
	plt.ylabel('short')


	plt.subplot(5,2,5)
	plt.plot(f/1e6, 20*np.log10(np.abs(lc_v2)) - 20*np.log10(np.abs(lc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.01, 0.01])
	plt.grid()
	plt.ylabel('match')


	plt.subplot(5,2,7)
	plt.plot(f/1e6, 20*np.log10(np.abs(attnc_v2)) - 20*np.log10(np.abs(attnc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.0001, 0.0001])
	plt.grid()
	plt.ylabel('attenuator')


	plt.subplot(5,2,9)
	plt.plot(fa/1e6, 20*np.log10(np.abs(antc_v2)) - 20*np.log10(np.abs(antc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.0001, 0.0001])
	plt.grid()
	plt.ylabel('antenna')
	plt.xlabel('frequency [MHz]')	







	plt.subplot(5,2,2)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(oc_v2)) - (180/np.pi)*np.unwrap(np.angle(oc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.001, 0.001])
	plt.grid()
	plt.title(r'$\Delta$ Phase [deg]')

	plt.subplot(5,2,4)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(sc_v2)) - (180/np.pi)*np.unwrap(np.angle(sc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.001, 0.001])
	plt.grid()


	plt.subplot(5,2,6)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(lc_v2)) - (180/np.pi)*np.unwrap(np.angle(lc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.01, 0.01])
	plt.grid()


	plt.subplot(5,2,8)
	plt.plot(f/1e6, (180/np.pi)*np.unwrap(np.angle(attnc_v2)) - (180/np.pi)*np.unwrap(np.angle(attnc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.001, 0.001])
	plt.grid()


	plt.subplot(5,2,10)
	plt.plot(fa/1e6, (180/np.pi)*np.unwrap(np.angle(antc_v2)) - (180/np.pi)*np.unwrap(np.angle(antc_all[0,:])))
	plt.xlim([50, 100])
	plt.ylim([-0.001, 0.001])
	plt.grid()
	plt.xlabel('frequency [MHz]')

	# saving plot
	plt.savefig(home_folder + path_plots + 'f5.pdf', bbox_inches='tight')
	plt.close()		




	return f, fa, oc_all, sc_all, lc_all, attnc_all, antc_all, oc_v2, sc_v2, lc_v2, attnc_v2, antc_v2 
























def switch_characterization_method_crosscheck_2():

	"""

	2017-08-13
	This function computes and plots the calibrated reflection coefficient of the internal standards

	"""




	# Comparison of methods with 2015 measurements


	# Paths
	data_path_15 = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2015_08_25C/data/s11/raw/20150905/switch15degC/'
	data_path_25 = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2015_08_25C/data/s11/raw/20150903/switch25degC/'
	data_path_35 = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2015_08_25C/data/s11/raw/20150905/switch35degC/'

	# Measurements at 15degC 
	o_sw_m15, fd  = rc.s1p_read(data_path_15 + 'open.S1P')
	s_sw_m15, fd  = rc.s1p_read(data_path_15 + 'short.S1P')
	l_sw_m15, fd  = rc.s1p_read(data_path_15 + 'load.S1P')

	o_sw_in15, fd = rc.s1p_read(data_path_15 + 'open_input.S1P')
	s_sw_in15, fd = rc.s1p_read(data_path_15 + 'short_input.S1P')
	l_sw_in15, fd = rc.s1p_read(data_path_15 + 'load_input.S1P')	

	# Measurements at 25degC 
	o_sw_m25, fd  = rc.s1p_read(data_path_25 + 'open.S1P')
	s_sw_m25, fd  = rc.s1p_read(data_path_25 + 'short.S1P')
	l_sw_m25, fd  = rc.s1p_read(data_path_25 + 'load.S1P')

	o_sw_in25, fd = rc.s1p_read(data_path_25 + 'open_input.S1P')
	s_sw_in25, fd = rc.s1p_read(data_path_25 + 'short_input.S1P')
	l_sw_in25, fd = rc.s1p_read(data_path_25 + 'load_input.S1P')	

	# Measurements at 35degC 
	o_sw_m35, fd  = rc.s1p_read(data_path_35 + 'open.S1P')
	s_sw_m35, fd  = rc.s1p_read(data_path_35 + 'short.S1P')
	l_sw_m35, fd  = rc.s1p_read(data_path_35 + 'load.S1P')

	o_sw_in35, fd = rc.s1p_read(data_path_35 + 'open_input.S1P')
	s_sw_in35, fd = rc.s1p_read(data_path_35 + 'short_input.S1P')
	l_sw_in35, fd = rc.s1p_read(data_path_35 + 'load_input.S1P')	


	# Computation of S-parameters to the receiver input
	resistance_male15 = 50.13
	resistance_male25 = 50.12
	resistance_male35 = 50.11
	md = 1
	oa15, sa15, la15 = rc.agilent_85033E(fd, resistance_male15, 1)
	oa25, sa25, la25 = rc.agilent_85033E(fd, resistance_male25, 1)
	oa35, sa35, la35 = rc.agilent_85033E(fd, resistance_male35, 1)

	oM, x1, x2, x3 = rc.de_embed( oa15, sa15, la15,   o_sw_in15, s_sw_in15, l_sw_in15, o_sw_m15)
	sM, x1, x2, x3 = rc.de_embed( oa15, sa15, la15,   o_sw_in15, s_sw_in15, l_sw_in15, s_sw_m15)
	lM, x1, x2, x3 = rc.de_embed( oa15, sa15, la15,   o_sw_in15, s_sw_in15, l_sw_in15, l_sw_m15)

	oN, x1, x2, x3 = rc.de_embed( oa25, sa25, la25,   o_sw_in25, s_sw_in25, l_sw_in25, o_sw_m25)
	sN, x1, x2, x3 = rc.de_embed( oa25, sa25, la25,   o_sw_in25, s_sw_in25, l_sw_in25, s_sw_m25)
	lN, x1, x2, x3 = rc.de_embed( oa25, sa25, la25,   o_sw_in25, s_sw_in25, l_sw_in25, l_sw_m25)

	oO, x1, x2, x3 = rc.de_embed( oa35, sa35, la35,   o_sw_in35, s_sw_in35, l_sw_in35, o_sw_m35)
	sO, x1, x2, x3 = rc.de_embed( oa35, sa35, la35,   o_sw_in35, s_sw_in35, l_sw_in35, s_sw_m35)
	lO, x1, x2, x3 = rc.de_embed( oa35, sa35, la35,   o_sw_in35, s_sw_in35, l_sw_in35, l_sw_m35)








	# 2017-05-25C
	# -----------------------------


	# Loading measurements
	path_folder   = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_05_25C/data/s11/raw/InternalSwitch/'


	# Repetition 1
	# ----------------------

	oim, f        = rc.s1p_read(path_folder + 'Int_Open1.s1p')
	sim, f        = rc.s1p_read(path_folder + 'Int_Short1.s1p')
	lim, f        = rc.s1p_read(path_folder + 'Int_Match1.s1p')

	om, f         = rc.s1p_read(path_folder + 'Ext_Open1.s1p')
	sm, f         = rc.s1p_read(path_folder + 'Ext_Short1.s1p')
	lm, f         = rc.s1p_read(path_folder + 'Ext_Match1.s1p')


	# Comparison of methods with 2017 measurements

	resistance_of_match  = 50.12 # male
	md = 1
	oa, sa, la           = rc.agilent_85033E(f, resistance_of_match, md)	

	oicPx, x1, x2, x3 = rc.de_embed( oa, sa, la, om, sm, lm, oim )
	sicPx, x1, x2, x3 = rc.de_embed( oa, sa, la, om, sm, lm, sim )
	licPx, x1, x2, x3 = rc.de_embed( oa, sa, la, om, sm, lm, lim )

	oP1 = oicPx[(f>=np.min(fd)) & (f<=np.max(fd))]
	sP1 = sicPx[(f>=np.min(fd)) & (f<=np.max(fd))]
	lP1 = licPx[(f>=np.min(fd)) & (f<=np.max(fd))]



	# Repetition 2
	# ----------------------

	oim, f        = rc.s1p_read(path_folder + 'Int_Open2.s1p')
	sim, f        = rc.s1p_read(path_folder + 'Int_Short2.s1p')
	lim, f        = rc.s1p_read(path_folder + 'Int_Match2.s1p')

	om, f         = rc.s1p_read(path_folder + 'Ext_Open2.s1p')
	sm, f         = rc.s1p_read(path_folder + 'Ext_Short2.s1p')
	lm, f         = rc.s1p_read(path_folder + 'Ext_Match2.s1p')


	# Comparison of methods with 2017 measurements

	resistance_of_match  = 50.12 # male
	md = 1
	oa, sa, la           = rc.agilent_85033E(f, resistance_of_match, md)	

	oicPx, x1, x2, x3 = rc.de_embed( oa, sa, la, om, sm, lm, oim )
	sicPx, x1, x2, x3 = rc.de_embed( oa, sa, la, om, sm, lm, sim )
	licPx, x1, x2, x3 = rc.de_embed( oa, sa, la, om, sm, lm, lim )

	oP2 = oicPx[(f>=np.min(fd)) & (f<=np.max(fd))]
	sP2 = sicPx[(f>=np.min(fd)) & (f<=np.max(fd))]
	lP2 = licPx[(f>=np.min(fd)) & (f<=np.max(fd))]













	# 2017-07
	# ------------------------------------



	# 25degC -----------------------------
	# ------------------------------------

	# First repetition

	# Loading measurements
	path_root_folder     = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2017_07_15C_25C_35C/data/s11/raw/InternalSwitch/Lowband1_switch_rechar_July_2017/lowband1/'


	path_folder = path_root_folder + '25C/pass01/NoAirline/'

	# External Open
	o_sw_o, f = rc.s1p_read(path_folder + 'Open/Open.s1p')
	o_sw_s, f = rc.s1p_read(path_folder + 'Open/Short.s1p')
	o_sw_m, f = rc.s1p_read(path_folder + 'Open/Match.s1p')
	o_sw_e, f = rc.s1p_read(path_folder + 'Open/External.s1p')	

	# External Short
	s_sw_o, f = rc.s1p_read(path_folder + 'Short/Open.s1p')
	s_sw_s, f = rc.s1p_read(path_folder + 'Short/Short.s1p')
	s_sw_m, f = rc.s1p_read(path_folder + 'Short/Match.s1p')
	s_sw_e, f = rc.s1p_read(path_folder + 'Short/External.s1p')

	# External Match
	m_sw_o, f = rc.s1p_read(path_folder + 'Match/Open.s1p')
	m_sw_s, f = rc.s1p_read(path_folder + 'Match/Short.s1p')
	m_sw_m, f = rc.s1p_read(path_folder + 'Match/Match.s1p')
	m_sw_e, f = rc.s1p_read(path_folder + 'Match/External.s1p')	


	# Computation of S-parameters to the receiver input
	resistance_of_match  = 50.12 # male
	md = 1
	oa, sa, la           = rc.agilent_85033E(f, resistance_of_match, md)

	oQ1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_o )
	oQ2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_o )
	oQ3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_o )

	sQ1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_s )
	sQ2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_s )
	sQ3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_s )

	lQ1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_m )
	lQ2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_m )
	lQ3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_m )

	oQ1 = oQ1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	oQ2 = oQ2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	oQ3 = oQ3x[(f>=np.min(fd)) & (f<=np.max(fd))]	

	sQ1 = sQ1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sQ2 = sQ2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sQ3 = sQ3x[(f>=np.min(fd)) & (f<=np.max(fd))]	

	lQ1 = lQ1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lQ2 = lQ2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lQ3 = lQ3x[(f>=np.min(fd)) & (f<=np.max(fd))]		




	# Second repetition

	path_folder = path_root_folder + '25C/pass02/NoAirline/'

	# External Open
	o_sw_o, f = rc.s1p_read(path_folder + 'Open/Open.s1p')
	o_sw_s, f = rc.s1p_read(path_folder + 'Open/Short.s1p')
	o_sw_m, f = rc.s1p_read(path_folder + 'Open/Match.s1p')
	o_sw_e, f = rc.s1p_read(path_folder + 'Open/External.s1p')	

	# External Short
	s_sw_o, f = rc.s1p_read(path_folder + 'Short/Open.s1p')
	s_sw_s, f = rc.s1p_read(path_folder + 'Short/Short.s1p')
	s_sw_m, f = rc.s1p_read(path_folder + 'Short/Match.s1p')
	s_sw_e, f = rc.s1p_read(path_folder + 'Short/External.s1p')

	# External Match
	m_sw_o, f = rc.s1p_read(path_folder + 'Match/Open.s1p')
	m_sw_s, f = rc.s1p_read(path_folder + 'Match/Short.s1p')
	m_sw_m, f = rc.s1p_read(path_folder + 'Match/Match.s1p')
	m_sw_e, f = rc.s1p_read(path_folder + 'Match/External.s1p')	


	# Computation of S-parameters to the receiver input
	resistance_of_match  = 50.12 # male
	md = 1
	oa, sa, la           = rc.agilent_85033E(f, resistance_of_match, md)

	oQ4x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_o )
	oQ5x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_o )
	oQ6x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_o )

	sQ4x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_s )
	sQ5x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_s )
	sQ6x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_s )

	lQ4x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_m )
	lQ5x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_m )
	lQ6x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_m )

	oQ4 = oQ4x[(f>=np.min(fd)) & (f<=np.max(fd))]
	oQ5 = oQ5x[(f>=np.min(fd)) & (f<=np.max(fd))]
	oQ6 = oQ6x[(f>=np.min(fd)) & (f<=np.max(fd))]	

	sQ4 = sQ4x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sQ5 = sQ5x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sQ6 = sQ6x[(f>=np.min(fd)) & (f<=np.max(fd))]	

	lQ4 = lQ4x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lQ5 = lQ5x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lQ6 = lQ6x[(f>=np.min(fd)) & (f<=np.max(fd))]











	# 15C
	# -----------------------------------

	path_folder = path_root_folder + '15C/pass01/NoAirline/'


	# External Open
	o_sw_o, f = rc.s1p_read(path_folder + 'Open/Open.s1p')
	o_sw_s, f = rc.s1p_read(path_folder + 'Open/Short.s1p')
	o_sw_m, f = rc.s1p_read(path_folder + 'Open/Match.s1p')
	o_sw_e, f = rc.s1p_read(path_folder + 'Open/External.s1p')	

	# External Short
	s_sw_o, f = rc.s1p_read(path_folder + 'Short/Open.s1p')
	s_sw_s, f = rc.s1p_read(path_folder + 'Short/Short.s1p')
	s_sw_m, f = rc.s1p_read(path_folder + 'Short/Match.s1p')
	s_sw_e, f = rc.s1p_read(path_folder + 'Short/External.s1p')

	# External Match
	m_sw_o, f = rc.s1p_read(path_folder + 'Match/Open.s1p')
	m_sw_s, f = rc.s1p_read(path_folder + 'Match/Short.s1p')
	m_sw_m, f = rc.s1p_read(path_folder + 'Match/Match.s1p')
	m_sw_e, f = rc.s1p_read(path_folder + 'Match/External.s1p')	


	# Computation of S-parameters to the receiver input
	resistance_of_match  = 50.16 # male
	md = 1
	oa, sa, la           = rc.agilent_85033E(f, resistance_of_match, md)

	oS1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_o )
	oS2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_o )
	oS3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_o )

	sS1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_s )
	sS2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_s )
	sS3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_s )

	lS1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_m )
	lS2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_m )
	lS3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_m )

	oS1 = oS1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	oS2 = oS2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	oS3 = oS3x[(f>=np.min(fd)) & (f<=np.max(fd))]	

	sS1 = sS1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sS2 = sS2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sS3 = sS3x[(f>=np.min(fd)) & (f<=np.max(fd))]	

	lS1 = lS1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lS2 = lS2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lS3 = lS3x[(f>=np.min(fd)) & (f<=np.max(fd))]		









	# 35C
	# -----------------------------------

	path_folder = path_root_folder + '35C/pass01/NoAirline/'


	# External Open
	o_sw_o, f = rc.s1p_read(path_folder + 'Open/Open.s1p')
	o_sw_s, f = rc.s1p_read(path_folder + 'Open/Short.s1p')
	o_sw_m, f = rc.s1p_read(path_folder + 'Open/Match.s1p')
	o_sw_e, f = rc.s1p_read(path_folder + 'Open/External.s1p')	

	# External Short
	s_sw_o, f = rc.s1p_read(path_folder + 'Short/Open.s1p')
	s_sw_s, f = rc.s1p_read(path_folder + 'Short/Short.s1p')
	s_sw_m, f = rc.s1p_read(path_folder + 'Short/Match.s1p')
	s_sw_e, f = rc.s1p_read(path_folder + 'Short/External.s1p')

	# External Match
	m_sw_o, f = rc.s1p_read(path_folder + 'Match/Open.s1p')
	m_sw_s, f = rc.s1p_read(path_folder + 'Match/Short.s1p')
	m_sw_m, f = rc.s1p_read(path_folder + 'Match/Match.s1p')
	m_sw_e, f = rc.s1p_read(path_folder + 'Match/External.s1p')	


	# Computation of S-parameters to the receiver input
	resistance_of_match  = 50.08 # male
	md = 1
	oa, sa, la           = rc.agilent_85033E(f, resistance_of_match, md)

	oT1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_o )
	oT2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_o )
	oT3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_o )

	sT1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_s )
	sT2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_s )
	sT3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_s )

	lT1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, o_sw_m )
	lT2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, s_sw_m )
	lT3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_sw_e, s_sw_e, m_sw_e, m_sw_m )

	oT1 = oT1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	oT2 = oT2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	oT3 = oT3x[(f>=np.min(fd)) & (f<=np.max(fd))]	

	sT1 = sT1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sT2 = sT2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sT3 = sT3x[(f>=np.min(fd)) & (f<=np.max(fd))]	

	lT1 = lT1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lT2 = lT2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lT3 = lT3x[(f>=np.min(fd)) & (f<=np.max(fd))]	












	# Low-Band 2
	# -----------------------------------------

	# Loading measurements
	path_folder     = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band2/2016_06_25C/data/s11/raw/receiver_s11_characterization/'

	o_sw_m, f = rc.s1p_read(path_folder + 'switch_pos1_open.s1p')
	s_sw_m, f = rc.s1p_read(path_folder + 'switch_pos2_short.s1p')
	l_sw_m, f = rc.s1p_read(path_folder + 'switch_pos3_load.s1p')

	o_ex,   f = rc.s1p_read(path_folder + 'switch_pos4_external_open_male.s1p')
	s_ex,   f = rc.s1p_read(path_folder + 'switch_pos4_external_short_male.s1p')
	l_ex,   f = rc.s1p_read(path_folder + 'switch_pos4_external_match_male.s1p')


	# Computation of S-parameters to the receiver input
	resistance_of_match  = 50.12 # male
	md = 1
	oa, sa, la           = rc.agilent_85033E(f, resistance_of_match, md)

	oUx, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, o_sw_m )	
	sUx, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, s_sw_m )	
	lUx, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, l_sw_m )	

	oU = oUx[(f>=np.min(fd)) & (f<=np.max(fd))]
	sU = sUx[(f>=np.min(fd)) & (f<=np.max(fd))]
	lU = lUx[(f>=np.min(fd)) & (f<=np.max(fd))]







	# Loading measurements
	path_folder     = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band2/2016_09_25C/data/s11/raw/OSLA1A2A3_after_hot_load/'

	o_sw_m1, f = rc.s1p_read(path_folder + 'Open/Open_int1.s1p')
	s_sw_m1, f = rc.s1p_read(path_folder + 'Open/Short_int1.s1p')
	l_sw_m1, f = rc.s1p_read(path_folder + 'Open/Match_int1.s1p')

	o_sw_m2, f = rc.s1p_read(path_folder + 'Short/Open_int1.s1p')
	s_sw_m2, f = rc.s1p_read(path_folder + 'Short/Short_int1.s1p')
	l_sw_m2, f = rc.s1p_read(path_folder + 'Short/Match_int1.s1p')	

	o_sw_m3, f = rc.s1p_read(path_folder + 'Match/Open_int1.s1p')
	s_sw_m3, f = rc.s1p_read(path_folder + 'Match/Short_int1.s1p')
	l_sw_m3, f = rc.s1p_read(path_folder + 'Match/Match_int1.s1p')

	o_ex,   f = rc.s1p_read(path_folder + 'Open/External_Open1.s1p')
	s_ex,   f = rc.s1p_read(path_folder + 'Short/External_Short1.s1p')
	l_ex,   f = rc.s1p_read(path_folder + 'Match/External_Match1.s1p')




	# Computation of S-parameters to the receiver input
	resistance_of_match  = 50.12 # male
	md = 1
	oa, sa, la           = rc.agilent_85033E(f, resistance_of_match, md)

	oV1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, o_sw_m1 )	
	sV1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, s_sw_m1 )	
	lV1x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, l_sw_m1 )

	oV2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, o_sw_m2 )	
	sV2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, s_sw_m2 )	
	lV2x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, l_sw_m2 )	

	oV3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, o_sw_m3 )	
	sV3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, s_sw_m3 )	
	lV3x, x1, x2, x3 = rc.de_embed( oa, sa, la, o_ex, s_ex, l_ex, l_sw_m3 )	


	oV1 = oV1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sV1 = sV1x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lV1 = lV1x[(f>=np.min(fd)) & (f<=np.max(fd))]

	oV2 = oV2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sV2 = sV2x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lV2 = lV2x[(f>=np.min(fd)) & (f<=np.max(fd))]

	oV3 = oV3x[(f>=np.min(fd)) & (f<=np.max(fd))]
	sV3 = sV3x[(f>=np.min(fd)) & (f<=np.max(fd))]
	lV3 = lV3x[(f>=np.min(fd)) & (f<=np.max(fd))]











	# ----------------------------------------------------------

	path_plots = '/DATA/EDGES/results/plots/20170814/' 





	sx = 18
	sy = 12

	plt.figure(1, figsize=[sx, sy])
	plt.subplot(3,2,1)
	plt.plot(fd/1e6, 20*np.log10(np.abs(oM)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oN)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oO)), 'b')

	plt.plot(fd/1e6, 20*np.log10(np.abs(oP1)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oP2)), 'r')

	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ1)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ2)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ3)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ4)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ5)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ6)), 'g')

	plt.plot(fd/1e6, 20*np.log10(np.abs(oS1)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oS2)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oS3)), 'm')

	plt.plot(fd/1e6, 20*np.log10(np.abs(oT1)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oT2)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oT3)), 'k')

	plt.title('Magnitude [dB]')
	plt.ylabel('open')



	plt.subplot(3,2,2)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oM)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oP1)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ1)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oS1)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oT1)), 'k')	

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oM)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oN)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oO)), 'b')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oP1)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oP2)), 'r')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ1)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ2)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ3)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ4)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ5)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ6)), 'g')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oS1)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oS2)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oS3)), 'm')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oT1)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oT2)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oT3)), 'k')

	plt.title('Phase [deg]')
	plt.legend(['2015','2017-05, 25degC','2017-07, 25degC','2017-07, 15degC','2017-07, 35degC'], loc=0, ncol=2)



	plt.subplot(3,2,3)
	plt.plot(fd/1e6, 20*np.log10(np.abs(sM)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sN)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sO)), 'b')

	plt.plot(fd/1e6, 20*np.log10(np.abs(sP1)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sP2)), 'r')

	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ1)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ2)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ3)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ4)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ5)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ6)), 'g')

	plt.plot(fd/1e6, 20*np.log10(np.abs(sS1)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sS2)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sS3)), 'm')

	plt.plot(fd/1e6, 20*np.log10(np.abs(sT1)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sT2)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sT3)), 'k')
	plt.ylabel('short')	


	plt.subplot(3,2,4)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sM)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sN)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sO)), 'b')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sP1)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sP2)), 'r')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ1)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ2)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ3)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ4)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ5)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ6)), 'g')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sS1)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sS2)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sS3)), 'm')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sT1)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sT2)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sT3)), 'k')








	plt.subplot(3,2,5)
	plt.plot(fd/1e6, 20*np.log10(np.abs(lM)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lN)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lO)), 'b')

	plt.plot(fd/1e6, 20*np.log10(np.abs(lP1)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lP2)), 'r')

	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ1)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ2)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ3)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ4)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ5)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ6)), 'g')

	plt.plot(fd/1e6, 20*np.log10(np.abs(lS1)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lS2)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lS3)), 'm')

	plt.plot(fd/1e6, 20*np.log10(np.abs(lT1)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lT2)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lT3)), 'k')
	plt.ylabel('match')
	plt.xlabel('frequency [MHz]')


	plt.subplot(3,2,6)
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lM)), 'b')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lP1)), 'r')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ1)), 'g')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lS1)), 'm')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lT1)), 'k')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lM)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lN)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lO)), 'b')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lP1)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lP2)), 'r')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ1)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ2)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ3)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ4)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ5)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ6)), 'g')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lS1)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lS2)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lS3)), 'm')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lT1)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lT2)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lT3)), 'k')
	plt.xlabel('frequency [MHz]')

	# saving plot
	plt.savefig(home_folder + path_plots + 'g1.pdf', bbox_inches='tight')
	plt.close()	
















	sx = 18
	sy = 12

	plt.figure(2, figsize=[sx, sy])
	plt.subplot(3,2,1)
	plt.plot(fd/1e6, 20*np.log10(np.abs(oM)) - 20*np.log10(np.abs(oN)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oO)) - 20*np.log10(np.abs(oN)), 'b')

	plt.plot(fd/1e6, 20*np.log10(np.abs(oP1)) - 20*np.log10(np.abs(oN)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oP2)) - 20*np.log10(np.abs(oN)), 'r')

	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ1)) - 20*np.log10(np.abs(oN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ2)) - 20*np.log10(np.abs(oN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ3)) - 20*np.log10(np.abs(oN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ4)) - 20*np.log10(np.abs(oN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ5)) - 20*np.log10(np.abs(oN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oQ6)) - 20*np.log10(np.abs(oN)), 'g')

	plt.plot(fd/1e6, 20*np.log10(np.abs(oS1)) - 20*np.log10(np.abs(oN)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oS2)) - 20*np.log10(np.abs(oN)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oS3)) - 20*np.log10(np.abs(oN)), 'm')

	plt.plot(fd/1e6, 20*np.log10(np.abs(oT1)) - 20*np.log10(np.abs(oN)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oT2)) - 20*np.log10(np.abs(oN)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oT3)) - 20*np.log10(np.abs(oN)), 'k')

	plt.title(r'$\Delta$ Magnitude [dB]')
	plt.ylabel('open')
	plt.ylim([-0.01, 0.01])



	plt.subplot(3,2,2)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oM)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oP1)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ1)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oS1)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oT1)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'k')	

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oM)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oO)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'b')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oP1)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oP2)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'r')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ1)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ2)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ3)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ4)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ5)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oQ6)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'g')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oS1)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oS2)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oS3)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'm')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oT1)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oT2)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oT3)) - (180/np.pi)*np.unwrap(np.angle(oN)), 'k')

	plt.title(r'$\Delta$ Phase [deg]')
	plt.legend(['2015','2017-05, 25degC','2017-07, 25degC','2017-07, 15degC','2017-07, 35degC'], loc=0, ncol=2)
	plt.ylim([-0.22, 0.22])



	plt.subplot(3,2,3)
	plt.plot(fd/1e6, 20*np.log10(np.abs(sM)) - 20*np.log10(np.abs(sN)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sO)) - 20*np.log10(np.abs(sN)), 'b')

	plt.plot(fd/1e6, 20*np.log10(np.abs(sP1)) - 20*np.log10(np.abs(sN)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sP2)) - 20*np.log10(np.abs(sN)), 'r')

	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ1)) - 20*np.log10(np.abs(sN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ2)) - 20*np.log10(np.abs(sN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ3)) - 20*np.log10(np.abs(sN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ4)) - 20*np.log10(np.abs(sN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ5)) - 20*np.log10(np.abs(sN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sQ6)) - 20*np.log10(np.abs(sN)), 'g')

	plt.plot(fd/1e6, 20*np.log10(np.abs(sS1)) - 20*np.log10(np.abs(sN)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sS2)) - 20*np.log10(np.abs(sN)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sS3)) - 20*np.log10(np.abs(sN)), 'm')

	plt.plot(fd/1e6, 20*np.log10(np.abs(sT1)) - 20*np.log10(np.abs(sN)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sT2)) - 20*np.log10(np.abs(sN)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sT3)) - 20*np.log10(np.abs(sN)), 'k')
	plt.ylabel('short')
	plt.ylim([-0.008, 0.008])


	plt.subplot(3,2,4)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sM)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sO)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'b')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sP1)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sP2)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'r')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ1)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ2)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ3)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ4)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ5)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sQ6)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'g')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sS1)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sS2)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sS3)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'm')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sT1)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sT2)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sT3)) - (180/np.pi)*np.unwrap(np.angle(sN)), 'k')
	plt.ylim([-0.05, 0.05])	







	plt.subplot(3,2,5)
	plt.plot(fd/1e6, 20*np.log10(np.abs(lM)) - 20*np.log10(np.abs(lN)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lO)) - 20*np.log10(np.abs(lN)), 'b')

	plt.plot(fd/1e6, 20*np.log10(np.abs(lP1)) - 20*np.log10(np.abs(lN)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lP2)) - 20*np.log10(np.abs(lN)), 'r')

	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ1)) - 20*np.log10(np.abs(lN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ2)) - 20*np.log10(np.abs(lN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ3)) - 20*np.log10(np.abs(lN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ4)) - 20*np.log10(np.abs(lN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ5)) - 20*np.log10(np.abs(lN)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lQ6)) - 20*np.log10(np.abs(lN)), 'g')

	plt.plot(fd/1e6, 20*np.log10(np.abs(lS1)) - 20*np.log10(np.abs(lN)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lS2)) - 20*np.log10(np.abs(lN)), 'm')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lS3)) - 20*np.log10(np.abs(lN)), 'm')

	plt.plot(fd/1e6, 20*np.log10(np.abs(lT1)) - 20*np.log10(np.abs(lN)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lT2)) - 20*np.log10(np.abs(lN)), 'k')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lT3)) - 20*np.log10(np.abs(lN)), 'k')
	plt.ylabel('match')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-1, 1])


	plt.subplot(3,2,6)
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lM)), 'b')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lP1)), 'r')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ1)), 'g')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lS1)), 'm')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lT1)), 'k')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lM)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lO)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'b')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lP1)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lP2)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'r')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ1)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ2)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ3)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ4)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ5)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lQ6)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'g')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lS1)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lS2)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'm')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lS3)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'm')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lT1)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lT2)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'k')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lT3)) - (180/np.pi)*np.unwrap(np.angle(lN)), 'k')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-10, 10])

	# saving plot
	plt.savefig(home_folder + path_plots + 'g2.pdf', bbox_inches='tight')
	plt.close()	


















	# ----------------------------------------------------------

	sx = 18
	sy = 12



	plt.figure(3, figsize=[sx, sy])
	plt.subplot(3,2,1)
	plt.plot(fd/1e6, 20*np.log10(np.abs(oU)), 'b')

	plt.plot(fd/1e6, 20*np.log10(np.abs(oV1)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oV2)), 'r')

	plt.title('Magnitude [dB]')
	plt.ylabel('open')



	plt.subplot(3,2,2)

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oU)), 'b')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oV1)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oV2)), 'r')

	plt.title('Phase [deg]')
	plt.legend(['2016-06, 25degC','2016-09, 25degC'], loc=0, ncol=1)




	plt.subplot(3,2,3)
	plt.plot(fd/1e6, 20*np.log10(np.abs(sU)), 'b')

	plt.plot(fd/1e6, 20*np.log10(np.abs(sV1)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sV2)), 'r')

	plt.ylabel('short')	


	plt.subplot(3,2,4)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sU)), 'b')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sV1)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sV2)), 'r')







	plt.subplot(3,2,5)
	plt.plot(fd/1e6, 20*np.log10(np.abs(lU)), 'b')

	plt.plot(fd/1e6, 20*np.log10(np.abs(lV1)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lV2)), 'r')

	plt.ylabel('match')
	plt.xlabel('frequency [MHz]')


	plt.subplot(3,2,6)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lU)), 'b')

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lV1)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lV2)), 'r')

	plt.xlabel('frequency [MHz]')

	# saving plot
	plt.savefig(home_folder + path_plots + 'g3.pdf', bbox_inches='tight')
	plt.close()		














	# ----------------------------------------------------------

	sx = 18
	sy = 12


	plt.figure(4, figsize=[sx, sy])
	plt.subplot(3,2,1)
	plt.plot(fd/1e6, 20*np.log10(np.abs(oV1)) - 20*np.log10(np.abs(oU)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(oV2)) - 20*np.log10(np.abs(oU)), 'r')

	plt.title(r'$\Delta$ Magnitude [dB]')
	plt.ylabel('open')
	plt.ylim([-0.01, 0.01])



	plt.subplot(3,2,2)

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oV1)) - (180/np.pi)*np.unwrap(np.angle(oU)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oV2)) - (180/np.pi)*np.unwrap(np.angle(oU)), 'r')

	plt.title(r'$\Delta$ Phase [deg]')
	#plt.legend(['2016-06, 25degC','2016-09, 25degC'], loc=0, ncol=1)
	plt.ylim([-0.22, 0.22])



	plt.subplot(3,2,3)

	plt.plot(fd/1e6, 20*np.log10(np.abs(sV1)) - 20*np.log10(np.abs(sU)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(sV2)) - 20*np.log10(np.abs(sU)), 'r')

	plt.ylabel('short')
	plt.ylim([-0.008, 0.008])


	plt.subplot(3,2,4)

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sV1)) - (180/np.pi)*np.unwrap(np.angle(sU)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sV2)) - (180/np.pi)*np.unwrap(np.angle(sU)), 'r')
	plt.ylim([-0.05, 0.05])






	plt.subplot(3,2,5)

	plt.plot(fd/1e6, 20*np.log10(np.abs(lV1)) - 20*np.log10(np.abs(lU)), 'r')
	plt.plot(fd/1e6, 20*np.log10(np.abs(lV2)) - 20*np.log10(np.abs(lU)), 'r')

	plt.ylabel('match')
	plt.xlabel('frequency [MHz]')
	plt.ylim([-1, 1])


	plt.subplot(3,2,6)

	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lV1)) - (180/np.pi)*np.unwrap(np.angle(lU)), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lV2)) - (180/np.pi)*np.unwrap(np.angle(lU)), 'r')

	plt.xlabel('frequency [MHz]')
	plt.ylim([-10, 10])

	# saving plot
	plt.savefig(home_folder + path_plots + 'g4.pdf', bbox_inches='tight')
	plt.close()	


	return fd














































def low_band_switch_correction_verification():

	"""

	2017-08-01

	This is for verification of the 2015 "low_band_switch_correction" results


	"""

	# File paths


	data_path_15 = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2015_08_25C/data/s11/raw/20150905/switch15degC/'
	data_path_25 = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2015_08_25C/data/s11/raw/20150903/switch25degC/'
	data_path_35 = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band1/2015_08_25C/data/s11/raw/20150905/switch35degC/'




	# Verification at 15degC
	o_sw_m, fd  = rc.s1p_read(data_path_15 + 'open.S1P')
	s_sw_m, fd  = rc.s1p_read(data_path_15 + 'short.S1P')
	l_sw_m, fd  = rc.s1p_read(data_path_15 + 'load.S1P')	
	a10m, fd    = rc.s1p_read(data_path_15 + 'attn10dB_input.S1P')
	a20m, fd    = rc.s1p_read(data_path_15 + 'attn20dB_input.S1P')

	# Standards assumed at the switch
	o_sw =  1 * np.ones(len(fd))
	s_sw = -1 * np.ones(len(fd))
	l_sw =  0 * np.ones(len(fd))	

	a10, xx1, xx2, xx3 = rc.de_embed(o_sw, s_sw, l_sw, o_sw_m, s_sw_m, l_sw_m, a10m)
	a20, xx1, xx2, xx3 = rc.de_embed(o_sw, s_sw, l_sw, o_sw_m, s_sw_m, l_sw_m, a20m)

	T15 = 18.67 # Actual switch temperature
	o10_15 = eg.low_band_switch_correction(a10, T15)
	o20_15 = eg.low_band_switch_correction(a20, T15)

	a10c_15 = o10_15[0]
	a20c_15 = o20_15[0]


	# Test at temperature 27.16
	o10_15_25 = eg.low_band_switch_correction(a10, 27.16)
	o20_15_25 = eg.low_band_switch_correction(a20, 27.16)

	a10c_15_25 = o10_15_25[0]
	a20c_15_25 = o20_15_25[0]






	# Verification at 25degC
	o_sw_m, fd  = rc.s1p_read(data_path_25 + 'open.S1P')
	s_sw_m, fd  = rc.s1p_read(data_path_25 + 'short.S1P')
	l_sw_m, fd  = rc.s1p_read(data_path_25 + 'load.S1P')

	om, fd   = rc.s1p_read(data_path_25 + 'open_input.S1P')
	sm, fd   = rc.s1p_read(data_path_25 + 'short_input.S1P')
	lm, fd   = rc.s1p_read(data_path_25 + 'load_input.S1P')		
	a10m, fd = rc.s1p_read(data_path_25 + 'attn10dB_input.S1P')
	a20m, fd = rc.s1p_read(data_path_25 + 'attn20dB_input.S1P')


	o_sw_c, xx1, xx2, xx3 = rc.de_embed(o_sw, s_sw, l_sw, o_sw_m, s_sw_m, l_sw_m, om)
	s_sw_c, xx1, xx2, xx3 = rc.de_embed(o_sw, s_sw, l_sw, o_sw_m, s_sw_m, l_sw_m, sm)
	l_sw_c, xx1, xx2, xx3 = rc.de_embed(o_sw, s_sw, l_sw, o_sw_m, s_sw_m, l_sw_m, lm)
	a10, xx1, xx2, xx3 = rc.de_embed(o_sw, s_sw, l_sw, o_sw_m, s_sw_m, l_sw_m, a10m)
	a20, xx1, xx2, xx3 = rc.de_embed(o_sw, s_sw, l_sw, o_sw_m, s_sw_m, l_sw_m, a20m)

	oa25, sa25, la25 = rc.agilent_85033E(fd, 50.12, 1)

	T25 = 27.16 # Actual switch temperature
	o_oc   = eg.low_band_switch_correction(o_sw_c, T25)
	o_sc   = eg.low_band_switch_correction(s_sw_c, T25)
	o_lc   = eg.low_band_switch_correction(l_sw_c, T25)
	o10_25 = eg.low_band_switch_correction(a10, T25)
	o20_25 = eg.low_band_switch_correction(a20, T25)

	oc = o_oc[0]
	sc = o_sc[0]
	lc = o_lc[0]
	a10c_25 = o10_25[0]
	a20c_25 = o20_25[0]





	# Verification at 35degC
	o_sw_m, fd  = rc.s1p_read(data_path_35 + 'open.S1P')
	s_sw_m, fd  = rc.s1p_read(data_path_35 + 'short.S1P')
	l_sw_m, fd  = rc.s1p_read(data_path_35 + 'load.S1P')	
	a10m, fd    = rc.s1p_read(data_path_35 + 'attn10dB_input.S1P')
	a20m, fd    = rc.s1p_read(data_path_35 + 'attn20dB_input.S1P')

	a10, xx1, xx2, xx3 = rc.de_embed(o_sw, s_sw, l_sw, o_sw_m, s_sw_m, l_sw_m, a10m)
	a20, xx1, xx2, xx3 = rc.de_embed(o_sw, s_sw, l_sw, o_sw_m, s_sw_m, l_sw_m, a20m)

	T35 = 35.31 # Actual switch temperature  # 27.16 
	o10_35 = eg.low_band_switch_correction(a10, T35)
	o20_35 = eg.low_band_switch_correction(a20, T35)

	a10c_35 = o10_35[0]
	a20c_35 = o20_35[0]


	# Test at temperature 27.16
	o10_35_25 = eg.low_band_switch_correction(a10, 27.16)
	o20_35_25 = eg.low_band_switch_correction(a20, 27.16)

	a10c_35_25 = o10_35_25[0]
	a20c_35_25 = o20_35_25[0]








	# 2017 parameters
	fx  = np.arange(40, 120.1, 0.25)
	ox0 = eg.low_band1_switch_correction_2017_05_25C(0)
	ox1 = eg.low_band1_switch_correction_2017_07_25C(0, repetition=1)
	ox2 = eg.low_band1_switch_correction_2017_07_25C(0, repetition=2)



	# Plots
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()

	path = '/DATA/EDGES/results/plots/20170801/'



	sx = 14
	sy = 10

	# -----------------------
	plt.figure(1, figsize=[sx, sy])
	plt.subplot(2,3,1)
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_15[1])), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_25[1])), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_35[1])), 'c')
	#plt.plot(fx, 20*np.log10(np.abs(ox0[1])), 'k')
	#plt.plot(fx, 20*np.log10(np.abs(ox1[1])), 'r')
	#plt.plot(fx, 20*np.log10(np.abs(ox2[1])), 'm')
	plt.xlim([50, 100])
	plt.ylim([-44, -40.5])
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.title('S11')

	plt.subplot(2,3,2)
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_15[2])), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_25[2])), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_35[2])), 'c')
	#plt.plot(fx, 20*np.log10(np.abs(ox0[2])), 'k')
	#plt.plot(fx, 20*np.log10(np.abs(ox1[2])), 'r')
	#plt.plot(fx, 20*np.log10(np.abs(ox2[2])), 'm')
	plt.xlim([50, 100])
	plt.ylim([-0.15, -0.08])
	plt.grid()
	plt.title('S12S21')


	plt.subplot(2,3,3)
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_15[3])), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_25[3])), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_35[3])), 'c')
	#plt.plot(fx, 20*np.log10(np.abs(ox0[3])), 'k')
	#plt.plot(fx, 20*np.log10(np.abs(ox1[3])), 'r')
	#plt.plot(fx, 20*np.log10(np.abs(ox2[3])), 'm')
	plt.xlim([50, 100])
	plt.ylim([-34.8, -33.4])
	plt.grid()
	plt.title('S22')



	plt.subplot(2,3,4)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_15[1])), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_25[1])), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_35[1])), 'c')
	#plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox0[1])), 'k')
	#plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox1[1])), 'r')
	#plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox2[1])), 'm')
	plt.xlim([50, 100])
	plt.ylim([80, 140])
	plt.grid()
	plt.ylabel('phase [deg]')
	plt.xlabel('frequency [MHz]')


	plt.subplot(2,3,5)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_15[2])), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_25[2])), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_35[2])), 'c')
	#plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox0[2])), 'k')
	#plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox1[2])), 'r')
	#plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox2[2])), 'm')
	plt.xlim([50, 100])
	plt.ylim([-70, -30])
	plt.grid()
	plt.xlabel('frequency [MHz]')


	plt.subplot(2,3,6)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_15[3])), 'g')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_25[3])), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_35[3])), 'c')
	#plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox0[3])), 'k')
	#plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox1[3])), 'r')
	#plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox2[3])), 'm')
	plt.xlim([50, 100])
	plt.ylim([-20, 5])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.legend([r'2015 $15^{\circ}$C', r'2015 $25^{\circ}$C', r'2015 $35^{\circ}$C'], loc=0)


	# saving plot
	plt.savefig(home_folder + path + 'a1.pdf', bbox_inches='tight')
	plt.close()		








	# -----------------------
	plt.figure(2, figsize=[sx, sy])
	plt.subplot(2,3,1)
	#plt.plot(fd/1e6, 20*np.log10(np.abs(o10_15[1])), 'g')
	#plt.plot(fd/1e6, 20*np.log10(np.abs(o10_25[1])), 'b')
	#plt.plot(fd/1e6, 20*np.log10(np.abs(o10_35[1])), 'c')
	plt.plot(fx, 20*np.log10(np.abs(ox0[1])), 'k')
	plt.plot(fx, 20*np.log10(np.abs(ox1[1])), 'r')
	plt.plot(fx, 20*np.log10(np.abs(ox2[1])), 'm')
	plt.xlim([50, 100])
	plt.ylim([-44, -40.5])
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.title('S11')

	plt.subplot(2,3,2)
	#plt.plot(fd/1e6, 20*np.log10(np.abs(o10_15[2])), 'g')
	#plt.plot(fd/1e6, 20*np.log10(np.abs(o10_25[2])), 'b')
	#plt.plot(fd/1e6, 20*np.log10(np.abs(o10_35[2])), 'c')
	plt.plot(fx, 20*np.log10(np.abs(ox0[2])), 'k')
	plt.plot(fx, 20*np.log10(np.abs(ox1[2])), 'r')
	plt.plot(fx, 20*np.log10(np.abs(ox2[2])), 'm')
	plt.xlim([50, 100])
	plt.ylim([-0.15, -0.08])
	plt.grid()
	plt.title('S12S21')

	plt.subplot(2,3,3)
	#plt.plot(fd/1e6, 20*np.log10(np.abs(o10_15[3])), 'g')
	#plt.plot(fd/1e6, 20*np.log10(np.abs(o10_25[3])), 'b')
	#plt.plot(fd/1e6, 20*np.log10(np.abs(o10_35[3])), 'c')
	plt.plot(fx, 20*np.log10(np.abs(ox0[3])), 'k')
	plt.plot(fx, 20*np.log10(np.abs(ox1[3])), 'r')
	plt.plot(fx, 20*np.log10(np.abs(ox2[3])), 'm')
	plt.xlim([50, 100])
	plt.ylim([-34.8, -33.4])
	plt.grid()
	plt.title('S22')


	plt.subplot(2,3,4)
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_15[1])), 'g')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_25[1])), 'b')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_35[1])), 'c')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox0[1])), 'k')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox1[1])), 'r')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox2[1])), 'm')
	plt.xlim([50, 100])
	plt.ylim([80, 140])
	plt.grid()
	plt.ylabel('phase [deg]')
	plt.xlabel('frequency [MHz]')

	plt.subplot(2,3,5)
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_15[2])), 'g')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_25[2])), 'b')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_35[2])), 'c')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox0[2])), 'k')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox1[2])), 'r')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox2[2])), 'm')
	plt.xlim([50, 100])
	plt.ylim([-70, -30])
	plt.grid()
	plt.xlabel('frequency [MHz]')

	plt.subplot(2,3,6)
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_15[3])), 'g')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_25[3])), 'b')
	#plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_35[3])), 'c')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox0[3])), 'k')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox1[3])), 'r')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox2[3])), 'm')
	plt.xlim([50, 100])
	plt.ylim([-20, 5])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.legend([r'2017-05', r'2017-07 REP1', r'2017-07 REP2'], loc=0)

	# saving plot
	plt.savefig(home_folder + path + 'a2.pdf', bbox_inches='tight')
	plt.close()	








	# -----------------------
	plt.figure(3, figsize=[sx, sy])
	plt.subplot(2,3,1)
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_15[1])), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_25[1])), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_35[1])), 'b')
	plt.plot(fx, 20*np.log10(np.abs(ox0[1])), 'r')
	plt.plot(fx, 20*np.log10(np.abs(ox1[1])), 'r')
	plt.plot(fx, 20*np.log10(np.abs(ox2[1])), 'r')
	plt.xlim([50, 100])
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.title('S11')

	plt.subplot(2,3,2)
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_15[2])), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_25[2])), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_35[2])), 'b')
	plt.plot(fx, 20*np.log10(np.abs(ox0[2])), 'r')
	plt.plot(fx, 20*np.log10(np.abs(ox1[2])), 'r')
	plt.plot(fx, 20*np.log10(np.abs(ox2[2])), 'r')
	plt.xlim([50, 100])
	plt.grid()
	plt.title('S12S21')

	plt.subplot(2,3,3)
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_15[3])), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_25[3])), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(o10_35[3])), 'b')
	plt.plot(fx, 20*np.log10(np.abs(ox0[3])), 'r')
	plt.plot(fx, 20*np.log10(np.abs(ox1[3])), 'r')
	plt.plot(fx, 20*np.log10(np.abs(ox2[3])), 'r')
	plt.xlim([50, 100])
	plt.grid()
	plt.title('S22')


	plt.subplot(2,3,4)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_15[1])), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_25[1])), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_35[1])), 'b')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox0[1])), 'r')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox1[1])), 'r')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox2[1])), 'r')
	plt.xlim([50, 100])
	plt.grid()
	plt.ylabel('phase [deg]')
	plt.xlabel('frequency [MHz]')

	plt.subplot(2,3,5)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_15[2])), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_25[2])), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_35[2])), 'b')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox0[2])), 'r')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox1[2])), 'r')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox2[2])), 'r')
	plt.xlim([50, 100])
	plt.grid()
	plt.xlabel('frequency [MHz]')

	plt.subplot(2,3,6)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_15[3])), 'b')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox0[3])), 'r')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_25[3])), 'b')
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(o10_35[3])), 'b')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox0[3])), 'r')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox1[3])), 'r')
	plt.plot(fx, (180/np.pi)*np.unwrap(np.angle(ox2[3])), 'r')
	plt.xlim([50, 100])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.legend([r'2015', r'2017'], loc=0)

	# saving plot
	plt.savefig(home_folder + path + 'a3.pdf', bbox_inches='tight')
	plt.close()	







	# ---------------------------------
	plt.figure(4, figsize=[sx+4, sy])
	plt.subplot(2,3,1)
	plt.plot(fd/1e6, 20*np.log10(np.abs(oc)))
	plt.plot(fd/1e6, 20*np.log10(np.abs(oa25)), 'r')
	plt.grid()
	plt.ylabel('magnitude [dB]')
	plt.title('OPEN')
	plt.ylim([-0.0003, 0.0003])

	plt.subplot(2,3,2)
	plt.plot(fd/1e6, 20*np.log10(np.abs(sc)))
	plt.plot(fd/1e6, 20*np.log10(np.abs(sa25)), 'r')
	plt.grid()
	#plt.ylabel('magnitude [dB]')
	plt.title('SHORT')
	plt.ylim([-0.0085, -0.0055])

	plt.subplot(2,3,3)
	plt.plot(fd/1e6, 20*np.log10(np.abs(lc)))
	plt.plot(fd/1e6, 20*np.log10(np.abs(la25)), 'r')
	plt.grid()
	#plt.ylabel('magnitude [dB]')
	plt.title('LOAD')
	plt.ylim([-57.8, -56.4])





	plt.subplot(2,3,4)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oc)))
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(oa25)), 'r')
	plt.grid()
	#plt.ylabel('OPEN' + '\n' + 'phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylabel('phase [deg]')
	plt.ylim([-2.4, -1])

	plt.subplot(2,3,5)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sc)))
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(sa25)), 'r')
	plt.grid()
	#plt.ylabel('SHORT' + '\n' + 'phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([177.6, 179])

	plt.subplot(2,3,6)
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(lc)))
	plt.plot(fd/1e6, (180/np.pi)*np.unwrap(np.angle(la25)), 'r')
	plt.grid()
	#plt.ylabel('MATCH' + '\n' + 'phase [deg]')
	plt.xlabel('frequency [MHz]')
	plt.ylim([6, 9.5])

	# saving plot
	plt.savefig(home_folder + path + 'a4.pdf', bbox_inches='tight')
	plt.close()	










	# ---------------------------------------------------------
	plt.figure(5)  # , figsize=[sx, sy]
	plt.subplot(2,1,1)
	plt.plot(fd/1e6, 20*np.log10(np.abs(a10c_15)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(a10c_25)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(a10c_35)), 'c')

	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(60.984-0.05,50))*np.ones(len(a10c_15)), 'r')
	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(60.984-0.05,50+0.01))*np.ones(len(a10c_15)), 'r--')
	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(60.984-0.05,50-0.01))*np.ones(len(a10c_15)), 'r--')
	plt.ylim([-20.14, -20.04])
	#ax.ticklabel_format(useOffset=False)
	plt.grid()
	plt.ylabel('10-dB attenuator' + '\n' + 'magnitude [dB]')
	plt.legend([r'$15^{\circ}$C', r'$25^{\circ}$C', r'$35^{\circ}$C', 'DC resistance', r'DC$\pm0.01\Omega$'], ncol=2)


	plt.subplot(2,1,2)
	plt.plot(fd/1e6, 20*np.log10(np.abs(a20c_15)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(a20c_25)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(a20c_35)), 'c')

	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(50.933-0.05,50))*np.ones(len(a20c_15)), 'r')
	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(50.933-0.05,50+0.01))*np.ones(len(a20c_15)), 'r--')
	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(50.933-0.05,50-0.01))*np.ones(len(a20c_15)), 'r--')
	plt.ylim([-41.4, -40.4])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('20-dB attenuator' + '\n' + 'magnitude [dB]')

	# saving plot
	plt.savefig(home_folder + path + 'a5.pdf', bbox_inches='tight')
	plt.close()	









	# ---------------------------------------------------------
	plt.figure(6)  # , figsize=[sx, sy]
	plt.subplot(2,1,1)
	plt.plot(fd/1e6, 20*np.log10(np.abs(a10c_15_25)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(a10c_25)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(a10c_35_25)), 'c')

	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(60.984-0.05,50))*np.ones(len(a10c_15)), 'r')
	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(60.984-0.05,50+0.01))*np.ones(len(a10c_15)), 'r--')
	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(60.984-0.05,50-0.01))*np.ones(len(a10c_15)), 'r--')
	plt.ylim([-20.14, -20.04])
	#ax.ticklabel_format(useOffset=False)
	plt.grid()
	plt.ylabel('10-dB attenuator' + '\n' + 'magnitude [dB]')
	plt.legend([r'$15^{\circ}$C', r'$25^{\circ}$C', r'$35^{\circ}$C', 'DC resistance', r'DC$\pm0.01\Omega$'], ncol=2)


	plt.subplot(2,1,2)
	plt.plot(fd/1e6, 20*np.log10(np.abs(a20c_15_25)), 'g')
	plt.plot(fd/1e6, 20*np.log10(np.abs(a20c_25)), 'b')
	plt.plot(fd/1e6, 20*np.log10(np.abs(a20c_35_25)), 'c')

	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(50.933-0.05,50))*np.ones(len(a20c_15)), 'r')
	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(50.933-0.05,50+0.01))*np.ones(len(a20c_15)), 'r--')
	plt.plot(fd/1e6, 20*np.log10(rc.impedance2gamma(50.933-0.05,50-0.01))*np.ones(len(a20c_15)), 'r--')
	plt.ylim([-41.4, -40.4])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('20-dB attenuator' + '\n' + 'magnitude [dB]')

	# saving plot
	plt.savefig(home_folder + path + 'a6.pdf', bbox_inches='tight')
	plt.close()		


	return 0























def low_band1_analysis_original_ground_plane(Fig):


	"""
	2017-08-18

	"""




	#f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_289_65-95MHz.hdf5')
	#f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')
	#f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2016_177_65-95MHz.hdf5')










	plt.close()
	plt.close()
	plt.close()
	plt.close()
	
	path = '/DATA/EDGES/results/plots/20170819/'



	# Daily residuals
	if Fig == 1:


		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')
		o = eg.plot_spectra_residuals(fb, rb_d, wb_d, 'season', mb_d[:,1], K=1, flow_lim=48, fhigh_lim=112, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100.5, fontsize=10, size_x_column=5.5, size_y=11, NSC=41, y_label='day of year 2015 [1 K per division]', plot_name='daily_low_band1_original_nominal')




	# GHA dependence
	if Fig == 2:

		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')
		
		Nfg   = 7
		flow  = 50
		fhigh = 100
		out0 = eg.test_low_band_signature_search(fb, tb_g[0,:], wb_g[0,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out1 = eg.test_low_band_signature_search(fb, tb_g[1,:], wb_g[1,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out2 = eg.test_low_band_signature_search(fb, tb_g[2,:], wb_g[2,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out3 = eg.test_low_band_signature_search(fb, tb_g[3,:], wb_g[3,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out4 = eg.test_low_band_signature_search(fb, tb_g[4,:], wb_g[4,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out5 = eg.test_low_band_signature_search(fb, tb_g[5,:], wb_g[5,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))

		
		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['20', '16', '12', '8', '4', '0'])
		
		plt.plot(fb, out0[3] - 0*offset)
		plt.plot(fb, out1[3] - 1*offset)
		plt.plot(fb, out2[3] - 2*offset)
		plt.plot(fb, out3[3] - 3*offset)
		plt.plot(fb, out4[3] - 4*offset)
		plt.plot(fb, out5[3] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out0[4])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out1[4])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out2[4])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out3[4])) + ' mK')
		plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out4[4])) + ' mK')
		plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out5[4])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*6, offset])
		plt.yticks(np.arange(-offset*5, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f2.pdf', bbox_inches='tight')
		plt.close()		
		







	# GHA dependence
	if Fig == 3:

		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')
		
		Nfg   = 6
		flow  = 65
		fhigh = 95
		out0 = eg.test_low_band_signature_search(fb, tb_g[0,:], wb_g[0,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out1 = eg.test_low_band_signature_search(fb, tb_g[1,:], wb_g[1,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out2 = eg.test_low_band_signature_search(fb, tb_g[2,:], wb_g[2,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out3 = eg.test_low_band_signature_search(fb, tb_g[3,:], wb_g[3,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out4 = eg.test_low_band_signature_search(fb, tb_g[4,:], wb_g[4,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([75]), dv_array=np.array([18]))
		out5 = eg.test_low_band_signature_search(fb, tb_g[5,:], wb_g[5,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([75]), dv_array=np.array([18]))

		
		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['20', '16', '12', '8', '4', '0'])
		
		plt.plot(out0[0], out0[3] - 0*offset)
		plt.plot(out1[0], out1[3] - 1*offset)
		plt.plot(out2[0], out2[3] - 2*offset)
		plt.plot(out3[0], out3[3] - 3*offset)
		plt.plot(out4[0], out4[3] - 4*offset)
		plt.plot(out5[0], out5[3] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out0[4])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out1[4])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out2[4])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out3[4])) + ' mK')
		plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out4[4])) + ' mK')
		plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out5[4])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*6, offset])
		plt.yticks(np.arange(-offset*5, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f3.pdf', bbox_inches='tight')
		plt.close()		
		


		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['20', '16', '12', '8', '4', '0'])
		
		plt.plot(out0[0], out0[-6] - 0*offset)
		plt.plot(out1[0], out1[-6] - 1*offset)
		plt.plot(out2[0], out2[-6] - 2*offset)
		plt.plot(out3[0], out3[-6] - 3*offset)
		plt.plot(out4[0], out4[-6] - 4*offset)
		plt.plot(out5[0], out5[-6] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out0[-7])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out1[-7])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out3[-7])) + ' mK')
		plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out4[-7])) + ' mK')
		plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out5[-7])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*6, offset])
		plt.yticks(np.arange(-offset*5, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms + signature')
		
		# saving plot
		plt.savefig(home_folder + path + 'f4.pdf', bbox_inches='tight')
		plt.close()	







		

		i_vr = 0
		i_dv = 0

		#print(out0[5][i_vr], out0[6][i_dv])

		p21_all  = np.zeros(6)
		dp21_all = np.zeros(6)


		p21_all[0]    = out0[7][i_vr, i_dv]
		dp21_all[0]   = out0[8][i_vr, i_dv]

		p21_all[1]    = out1[7][i_vr, i_dv]
		dp21_all[1]   = out1[8][i_vr, i_dv]

		p21_all[2]    = out2[7][i_vr, i_dv]
		dp21_all[2]   = out2[8][i_vr, i_dv]

		p21_all[3]    = out3[7][i_vr, i_dv]
		dp21_all[3]   = out3[8][i_vr, i_dv]

		p21_all[4]    = out4[7][i_vr, i_dv]
		dp21_all[4]   = out4[8][i_vr, i_dv]

		p21_all[5]    = out5[7][i_vr, i_dv]
		dp21_all[5]   = out5[8][i_vr, i_dv]
		
		
		
		t78 = np.zeros(6)
		for i in range(len(fb)-1):
			if (fb[i] <= 78.5) and (fb[i+1] > 78.5):
				t78[0] = tb_g[0, i]
				t78[1] = tb_g[1, i]
				t78[2] = tb_g[2, i]
				t78[3] = tb_g[3, i]
				t78[4] = tb_g[4, i]	# in cases > 3, tb16 and tb20  are the same as tb12
				t78[5] = tb_g[5, i]



		xvalues = [0, 4, 8, 12, 16, 20]
	
		fig, ax1 = plt.subplots()
		ax1.errorbar(xvalues, 1000*p21_all, 1000*dp21_all, fmt='o-')
		plt.plot(xvalues[4::], 1000*p21_all[4::], '.w', markersize = 7)

		ax1.set_xlabel('GHA [hr]')
		ax1.set_ylabel(r'$a_{21}$  [mK]', fontsize=20, color='b')
		ax1.tick_params('y', colors='b')

		ax1.set_xlim([-2, 24])
		ax1.set_ylim([0, 1400])
		ax1.set_xticks(xvalues)

		ax1.grid()
		ax1.set_title(str(Nfg) + ' polynomial terms + signature')	

		ax2 = ax1.twinx()
		ax2.plot(xvalues, t78, 'r.-', markersize=15)
		ax2.set_ylabel(r'$T_{78.5}$  [K]', fontsize=20, color='r')	
		ax2.tick_params('y', colors='r')

		ax2.set_ylim([0, 5000])
		ax2.set_xlim([-2, 24])	

		# saving plot
		plt.savefig(home_folder + path + 'f5.pdf', bbox_inches='tight')
		plt.close()	




















	# Nominal total residuals
	if Fig == 6:



		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')		


		rr = r[((m[:,3] >= 0) & (m[:,3] <= 16)), :]
		wr = w[((m[:,3] >= 0) & (m[:,3] <= 16)), :]
		pr = p[((m[:,3] >= 0) & (m[:,3] <= 16)), :]		


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6; 
		flow  = 50
		fhigh = 100
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
		
		Nfg   = 6
		flow  = 60
		fhigh = 100
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		


		








		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])
		
		
		f1 = out1[0]
		f2 = out2[0]
		w1 = out1[2]
		w2 = out2[2]
		
		w1[(f1 > 91.8) & (f1 < 92.2)] = 0
		w2[(f2 > 91.8) & (f2 < 92.2)] = 0
		
		plt.plot(out1[0][w1>0],  out1[3][w1>0]  - 0*offset)
		plt.plot(out2[0][w2>0],  out2[3][w2>0]  - 1*offset)
		plt.plot(out2[0][w2>0],  out2[-6][w2>0] - 1.5*offset)
		plt.plot(out2[0][w2>0], -out2[-1][w2>0] - 2*offset)
		
		plt.text(txtoff, -0*offset,   'RMS: ' + str(int(1000*out1[4]))  + ' mK')
		plt.text(txtoff, -1*offset,   'RMS: ' + str(int(1000*out2[4]))  + ' mK')
		plt.text(txtoff, -1.5*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(90, -2*offset-0.15, r'$\tau = $ 7', fontsize=12)
		plt.text(90, -2*offset-0.30, r'$a_{21} = $ ' + str(int(1000*out2[-5])) + r' +/- ' + str(int(1000*out2[-4])) + r' mK', fontsize=12)
		plt.text(90, -2*offset-0.45, r'$\nu_r = $ ' + str(round(out2[-3],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.60, r'$\Delta \nu = $ ' + str(round(out2[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*4, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f6.pdf', bbox_inches='tight')
		plt.close()	

















	# Nominal total residuals
	if Fig == 7:



		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')		



		# Full average
		rq = r[((m[:,3] >= 0) & (m[:,3] <= 16)), :]
		wq = w[((m[:,3] >= 0) & (m[:,3] <= 16)), :]
		pq = p[((m[:,3] >= 0) & (m[:,3] <= 16)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		


		


		# First third	
		Nspec = int(np.floor(len(rq[:,0])/3))
		rr = rq[(0*Nspec):(1*Nspec), :] 
		wr = wq[(0*Nspec):(1*Nspec), :]
		pr = pq[(0*Nspec):(1*Nspec), :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		# Second third
		rr = rq[(1*Nspec):(2*Nspec), :] 
		wr = wq[(1*Nspec):(2*Nspec), :]
		pr = pq[(1*Nspec):(2*Nspec), :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		# Third third
		rr = rq[(2*Nspec)::, :] 
		wr = wq[(2*Nspec)::, :]
		pr = pq[(2*Nspec)::, :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out3  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		plt.figure(1, figsize=[8,15])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 95
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Total Average')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 1 of 3')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 2 of 3')
			
		
		
		
		
		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 3 of 3')		
		
		
		
		
		
		# saving plot
		plt.savefig(home_folder + path + 'f7.pdf', bbox_inches='tight')
		plt.close()	




















		## --------------------------------
		#resultsT = np.round(np.array([xvalues, t78, 1000*p21_all, 1000*dp21_all]))
		#results  = resultsT.T
		#print('-----------------------')
		#print('------- Results -------')
		#print('GHA [hr]  T78.5 [K]  a21 [mK]  d21 [mK]')
		#print(results.astype('int'))










	if Fig == 8:


		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')		

		GHA_low = 0
		GHA_high = 16



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342_daytime.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342_nightime.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		
		
		

		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342_moon_up.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
			
		
		
		
		
		
		
		
		
		

		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342_moon_down.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out4   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		
		
		
		
		

		plt.figure(1, figsize=[8,19])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 95
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(5,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Total Average')
		
		
		
		
		plt.subplot(5,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Daytime Only')
		
		
		
		
		plt.subplot(5,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nighttime Only')
			
		
		
		
		
		plt.subplot(5,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Moon Up Only')		
		
		
		
	
	
		
		plt.subplot(5,1,5)
				
		outX = np.copy(out4)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Moon Down Only')		
	
	
		
		
		
		
		
		# saving plot
		plt.savefig(home_folder + path + 'f8.pdf', bbox_inches='tight')
		plt.close()	




		
		
		
		
		
		
		
		
		
		
		
		
	
	if Fig == 9:


		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')		

		GHA_low = 0
		GHA_high = 16



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342_cal2015_nfit7_wfit7.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342_cal2017_nfit7_wfit7.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		







		
		

		plt.figure(1, figsize=[8,11])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 95
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(3,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(3,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Calibration 2015, Nfit7 - Wfit7')
		
		
		
		
		plt.subplot(3,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Calibration 2017, Nfit7 - Wfit7')
			
		
		
		

		
		
		# saving plot
		plt.savefig(home_folder + path + 'f9.pdf', bbox_inches='tight')
		plt.close()	



		
		
		
		
			
		
		




		
	
	if Fig == 10:


		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')		

		GHA_low = 0
		GHA_high = 16



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_289.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2016_177.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		


		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_289_switch2017.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		






		

		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342_switch2017.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out4   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		








		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2016_177_switch2017.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out5  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		
		
		

		plt.figure(1, figsize=[8,19])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 95
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(6,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(6,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2015-289')
		
		
		
		
		plt.subplot(6,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2016-177')
			
		
		



		
		plt.subplot(6,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2015-289, Switch2017')
			
		




		plt.subplot(6,1,5)
				
		outX = np.copy(out4)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2015-342, Switch2017')
			


		


		plt.subplot(6,1,6)
				
		outX = np.copy(out5)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2016-177, Switch2017')
			




		
		# saving plot
		plt.savefig(home_folder + path + 'f10.pdf', bbox_inches='tight')
		plt.close()	












	
	if Fig == 11:


		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')		

		GHA_low = 0
		GHA_high = 16



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342_no_ground_loss.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_yes_bc_s11_2015_342.hdf5')		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 65
		fhigh = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		







		
		

		plt.figure(1, figsize=[8,11])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 95
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(3,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(3,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('No Ground Loss Correction')
		
		
		
		
		plt.subplot(3,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 110])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Applying Beam Correction')
			
		
		
		

		
		
		# saving plot
		plt.savefig(home_folder + path + 'f11.pdf', bbox_inches='tight')
		plt.close()	








	if Fig == 0:
		
		
		c = np.zeros((17,2))
		
		c[0,:] = [458, 29]
		c[1,:] = [384, 34]
		c[2,:] = [493, 42]
		c[3,:] = [432, 39]
		c[4,:] = [443, 39]
		c[5,:] = [350, 29]
		c[6,:] = [378, 35]
		c[7,:] = [346, 31]
		c[8,:] = [544, 31]
		c[9,:] = [433, 28]
		c[10,:] = [446, 28]
		c[11,:] = [436, 27]
		c[12,:] = [450, 27]
		c[13,:] = [463, 29]
		c[14,:] = [439, 27]
		c[15,:] = [434, 26]
		c[16,:] = [428, 27]
		
		
		
		plt.figure(1, figsize=[10,6])

		plt.errorbar(np.arange(0, 17), c[:,0], c[:,1], fmt='o-')
		plt.xlim([-0.5, 16.5])
		plt.ylim([0, 600])
		plt.xticks(np.arange(0,17))
		plt.xlabel('case number')
		plt.ylabel(r'$a_{21}$ [mK]', fontsize=16)
		plt.grid()

		# saving plot
		plt.savefig(home_folder + path + 'f0.pdf', bbox_inches='tight')
		plt.close()	
	


	return 0




















def high_band_rejection_test(zr, dz):
	
	
	
	model_21      = 'tanh'
	resolution_zr = 'high_zr'
	Dv            = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
	Nfg           = [3, 4, 5]
	
	
	#zr = np.array([10, 10.1])
	#dz = np.array([0.6])
	N  = 200
	



	
	#f, t, w, d, at, ah, rc, rm  = eg.level3_read(home_folder + '/DATA/EDGES/spectra/level3/high_band_2015/results_paper_1/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.hdf5')
	#avt, avw   = eg.spectral_averaging(t, w)
	#fb, tb, wb = eg.data_analysis_spectrum_high_to_low_resolution(f, avt, avw, flow=89, fhigh=191, fnorm=140, pre_rfi_flagging='yes', post_rfi_flagging='yes')
	#tb[wb==0]  = 0	
	
	
	
	
	
	
	d          = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/average_spectrum/high_band_2015_LST_0.26_6.26_dates_2015_250_299_nominal.txt')
	fb         = d[:,0]
	tb_orig    = d[:,1]
	wb         = d[:,2]
	
	par        = eg.fit_polynomial_fourier('EDGES_polynomial', fb/200, tb_orig, 20, Weights=wb)
	model      = par[1]
	noise_real = (tb_orig - model)
	
	noise_par  = np.polyfit(fb[wb > 0], np.abs(noise_real)[wb > 0], 3)
	noise_std  = (65/50)*np.polyval(noise_par, fb)
	
	# p0         = eg.fit_polynomial_fourier('EDGES_polynomial', fb/200, tb_orig, 5, Weights=wb)
	
	
	
	
	
	
	
	
	res_all = np.zeros((N, len(fb)))
	rs_all = np.zeros((N, 2))

	for i in range(N):
		noise = np.random.normal(np.zeros(len(fb)), noise_std)
		tb = model + noise
		
		p1 = eg.fit_polynomial_fourier('EDGES_polynomial', fb/200, tb, 5, Weights=wb)
		res_all[i,:] = tb - p1[1]
	
	
	
		zrx, dzx, p21, dp21 = eg.data_analysis_sliding_window_least_squares('high_band', fb, tb, wb, model_21='tanh', Dv=Dv, Nfg=Nfg, zr=zr, dz=dz, save='no', filename='n')
	
		out = eg.data_analysis_cube_to_limits('band', 'folder', 'HDF5_filename', Tref = 0.028, save='no', from_file='no', zr=zr, dz=dz, p21=p21, dp21=dp21)
	
		rej_sig     = out[3]
		rs_all[i,:] = rej_sig[:,0]
		


	kk1T = np.vstack([fb, res_all])
	kk1  = kk1T.T
	
	kk2  = rs_all[:,0].reshape(-1,1)
	
	
	np.savetxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr' + str(zr[0]) + '_dz' + str(dz[0]) + '_residuals_5terms.txt', kk1)
	np.savetxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr' + str(zr[0]) + '_dz' + str(dz[0]) + '_rej_sig.txt', kk2)

		
	
		
	return res_all, rs_all     #p21, dp21










def plots_for_rennan():
	
	
	d11_res = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr7.0_dz0.4_residuals_5terms.txt')
	
	d11     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr7.0_dz0.4_rej_sig.txt')
	d12     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr7.0_dz0.6_rej_sig.txt')
	
	d21     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr8.0_dz0.6_rej_sig.txt')
	d22     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr8.0_dz0.8_rej_sig.txt')
	
	d31     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr8.45_dz0.9_rej_sig.txt')
	d32     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr8.45_dz1.1_rej_sig.txt')
	
	d41     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr9.0_dz0.6_rej_sig.txt')
	d42     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr9.0_dz0.8_rej_sig.txt')
	
	d51     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr10.0_dz0.4_rej_sig.txt')
	d52     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr10.0_dz0.6_rej_sig.txt')
	
	d61     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr11.0_dz0.4_rej_sig.txt')
	d62     = np.genfromtxt(home_folder + '/DATA/EDGES/results/high_band/products/response_to_rennan/zr11.0_dz0.6_rej_sig.txt')
	

	d12 = d12[d12>0]
	d32 = d32[d32>0]
	d52 = d52[d52>0]
	
	
	
	
	
	
	path = '/DATA/EDGES/results/plots/20170822/'
	
	plt.close()
	plt.close()
	plt.figure(1, figsize=[8,8])
	
	plt.plot(d11_res[:,0], 1000*d11_res[:,1] - 0*50)
	plt.plot(d11_res[:,0], 1000*d11_res[:,2] - 1*50)
	plt.plot(d11_res[:,0], 1000*d11_res[:,3] - 2*50)
	plt.plot(d11_res[:,0], 1000*d11_res[:,4] - 3*50)
	plt.plot(d11_res[:,0], 1000*d11_res[:,5] - 4*50)
	plt.plot(d11_res[:,0], 1000*d11_res[:,6] - 5*50)
	plt.plot(d11_res[:,0], 1000*d11_res[:,7] - 6*50)
	plt.plot(d11_res[:,0], 1000*d11_res[:,8] - 7*50)
	plt.plot(d11_res[:,0], 1000*d11_res[:,9] - 8*50)
	plt.plot(d11_res[:,0], 1000*d11_res[:,10] - 9*50)
	
	plt.xlabel('frequency [MHz]')
	plt.ylabel('50 mK per division')
	plt.title('MC residuals to 5 term polynomial fit')
	plt.yticks(np.array([0*50, -1*50, -2*50, -3*50, -4*50, -5*50, -6*50, -7*50, -8*50, -9*50]), ['','','','','','','','','',''])
	plt.ylim([-500, 50])
	plt.grid()
	
	# saving plot
	plt.savefig(home_folder + path + 'figure1.pdf', bbox_inches='tight')
	plt.close()	
	
	
	
	
	
	
	plt.close()
	plt.close()
	plt.close()
	
	plt.figure(2, figsize=[12,16])
	
	plt.subplot(6,2,1)
	plt.hist(d11, 30)
	plt.plot([3, 3], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	#plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=7$' + '\n' + r'$\Delta z=0.4$', fontsize=16)
	

	plt.subplot(6,2,2)
	plt.plot([1, 1], [0, 30], 'r')
	plt.hist(d12, 30)
	plt.plot([1, 1], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	#plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	#plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=7$' + '\n' + r'$\Delta z=0.6$', fontsize=16)
	plt.legend(['reported'], loc=0)
	
	
	plt.subplot(6,2,3)
	plt.hist(d21, 30)
	plt.plot([3, 3], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	#plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=8$' + '\n' + r'$\Delta z=0.6$', fontsize=16)
	

	plt.subplot(6,2,4)
	plt.hist(d22, 30)
	plt.plot([2, 2], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	#plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	#plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=8$' + '\n' + r'$\Delta z=0.8$', fontsize=16)
	

	
	plt.subplot(6,2,5)
	plt.hist(d31, 30)
	plt.plot([2, 2], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	#plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=8.5$' + '\n' + r'$\Delta z=0.9$', fontsize=16)
	

	plt.subplot(6,2,6)
	plt.hist(d32, 30)
	plt.plot([1, 1], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	#plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	#plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=8.5$' + '\n' + r'$\Delta z=1.1$', fontsize=16)	
	
	
	plt.subplot(6,2,7)
	plt.hist(d41, 30)
	plt.plot([3, 3], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	#plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=9$' + '\n' + r'$\Delta z=0.6$', fontsize=16)
	

	plt.subplot(6,2,8)
	d42 = d42+0.1
	plt.hist(d42, 30)
	plt.plot([2, 2], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	#plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	#plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=9$' + '\n' + r'$\Delta z=0.8$', fontsize=16)	
	
	
	plt.subplot(6,2,9)
	plt.hist(d51, 30)
	plt.plot([2, 2], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	#plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=10$' + '\n' + r'$\Delta z=0.4$', fontsize=16)
	

	plt.subplot(6,2,10)
	plt.hist(d52, 30)
	plt.plot([1, 1], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	#plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	#plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=10$' + '\n' + r'$\Delta z=0.6$', fontsize=16)		
		
		
	plt.subplot(6,2,11)
	plt.hist(d61+0.1, 30)
	plt.plot([2, 2], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=11$' + '\n' + r'$\Delta z=0.4$', fontsize=16)
	

	plt.subplot(6,2,12)
	plt.hist(d62, 21)
	plt.plot([1, 1], [0, 30], 'r')
	plt.xlim([0, 5])
	plt.ylim([0, 27])
	plt.xlabel(r'rejection significance [$\hat{\sigma}_{21}$]')
	#plt.ylabel('number of samples')
	plt.text(0.15, 15, r'$z_r=11$' + '\n' + r'$\Delta z=0.6$', fontsize=16)		
	
	
	# saving plot
	plt.savefig(home_folder + path + 'figure2.pdf', bbox_inches='tight')
	plt.close()	
	
		
	
	return 0

















def low_band1_antenna_s11_average_20170403_cal2017():
	
	"""
	
	2017-08-23
	
	"""



	# NO D1, because the switch was not stable yet
	d2 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_2_cal2017/average_20170403_2_cal2017.txt')
	d3 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_3_cal2017/average_20170403_3_cal2017.txt')
	d4 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_4_cal2017/average_20170403_4_cal2017.txt')
	d5 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_5_cal2017/average_20170403_5_cal2017.txt')
	d6 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_6_cal2017/average_20170403_6_cal2017.txt')

	rr = np.mean(np.array([ d2[:,1], d3[:,1], d4[:,1], d5[:,1], d6[:,1] ]), axis=0)
	ii = np.mean(np.array([ d2[:,2], d3[:,2], d4[:,2], d5[:,2], d6[:,2] ]), axis=0)

	out  = np.array([d2[:,0], rr, ii])
	outT = out.T

	np.savetxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_average_cal2017/average_20170403_cal2017.txt', outT)

	return outT







def low_band1_antenna_s11_average_20170403_cal2017_08():
	
	"""
	
	2017-09-01
	
	"""



	# NO D1, because the switch was not stable yet
	d2 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_2_cal2017_08/average_20170403_2_cal2017_08.txt')
	d3 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_3_cal2017_08/average_20170403_3_cal2017_08.txt')
	d4 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_4_cal2017_08/average_20170403_4_cal2017_08.txt')
	d5 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_5_cal2017_08/average_20170403_5_cal2017_08.txt')
	d6 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_6_cal2017_08/average_20170403_6_cal2017_08.txt')

	rr = np.mean(np.array([ d2[:,1], d3[:,1], d4[:,1], d5[:,1], d6[:,1] ]), axis=0)
	ii = np.mean(np.array([ d2[:,2], d3[:,2], d4[:,2], d5[:,2], d6[:,2] ]), axis=0)

	out  = np.array([d2[:,0], rr, ii])
	outT = out.T

	np.savetxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_average_cal2017_08/average_20170403_cal2017_08.txt', outT)

	return outT
















































def low_band1_analysis_extended_ground_plane(Fig):


	"""
	2017-08-24

	"""




	#f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_289_65-95MHz.hdf5')
	#f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342.hdf5')
	#f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2016_177_65-95MHz.hdf5')










	plt.close()
	plt.close()
	plt.close()
	plt.close()
	
	path = '/DATA/EDGES/results/plots/20170907/'



	# Daily residuals
	if Fig == 1:

		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')
		rb_d = rb_dx[mb_dx[:,1] != 286, :]
		wb_d = wb_dx[mb_dx[:,1] != 286, :]
		mb_d = mb_dx[mb_dx[:,1] != 286, :]
		
		o = eg.plot_spectra_residuals(fb, rb_d, wb_d, 'season', mb_d[:,1], K=1, flow_lim=48, fhigh_lim=112, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100.5, fontsize=10, size_x_column=5.5, size_y=11, NSC=41, y_label='day of year 2016 [1 K per division]', plot_name='daily_low_band1_extended_nominal')




	# GHA dependence
	if Fig == 2:

		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')
		
		Nfg   = 7
		flow  = 50
		fhigh = 100
		out0 = eg.test_low_band_signature_search(fb, tb_g[0,:], wb_g[0,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out1 = eg.test_low_band_signature_search(fb, tb_g[1,:], wb_g[1,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out2 = eg.test_low_band_signature_search(fb, tb_g[2,:], wb_g[2,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out3 = eg.test_low_band_signature_search(fb, tb_g[3,:], wb_g[3,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out4 = eg.test_low_band_signature_search(fb, tb_g[4,:], wb_g[4,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out5 = eg.test_low_band_signature_search(fb, tb_g[5,:], wb_g[5,:], flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))

		
		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['20', '16', '12', '8', '4', '0'])
		
		plt.plot(fb, out0[3] - 0*offset)
		plt.plot(fb, out1[3] - 1*offset)
		plt.plot(fb, out2[3] - 2*offset)
		plt.plot(fb, out3[3] - 3*offset)
		plt.plot(fb, out4[3] - 4*offset)
		plt.plot(fb, out5[3] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out0[4])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out1[4])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out2[4])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out3[4])) + ' mK')
		plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out4[4])) + ' mK')
		plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out5[4])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*6, offset])
		plt.yticks(np.arange(-offset*5, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f2.pdf', bbox_inches='tight')
		plt.close()		
		







	# GHA dependence
	if Fig == 3:

		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')
		
		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		

		
		gha_edges   = np.array([21, 3, 9, 15])
		gha_centers = np.array([0, 6, 12, 18]) 
	
		rr1 = r[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		wr1 = w[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		pr1 = p[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
	
		rr2 = r[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		wr2 = w[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		pr2 = p[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
	
		rr3 = r[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		wr3 = w[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		pr3 = p[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
	
		rr4 = r[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[0]), :]
		wr4 = w[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[0]), :]
		pr4 = p[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[0]), :]


		
		# Spectral averaging
		rx1, wx1   = eg.spectral_averaging(rr1, wr1)
		rx2, wx2   = eg.spectral_averaging(rr2, wr2)
		rx3, wx3   = eg.spectral_averaging(rr3, wr3)
		rx4, wx4   = eg.spectral_averaging(rr4, wr4)
		

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx1  = eg.RFI_cleaning_spectrum_raw(f, rx1, wx1, Nterms_fg=16, Nsigma=Nsigma)
		wxx2  = eg.RFI_cleaning_spectrum_raw(f, rx2, wx2, Nterms_fg=16, Nsigma=Nsigma)
		wxx3  = eg.RFI_cleaning_spectrum_raw(f, rx3, wx3, Nterms_fg=16, Nsigma=Nsigma)
		wxx4  = eg.RFI_cleaning_spectrum_raw(f, rx4, wx4, Nterms_fg=16, Nsigma=Nsigma)
		

		# Spectral binning
		Nsamples = 64
		fb, rb1, wb1  = eg.spectral_binning_number_of_samples(f, rx1, wxx1, nsamples=Nsamples)
		fb, rb2, wb2  = eg.spectral_binning_number_of_samples(f, rx2, wxx2, nsamples=Nsamples)
		fb, rb3, wb3  = eg.spectral_binning_number_of_samples(f, rx3, wxx3, nsamples=Nsamples)
		fb, rb4, wb4  = eg.spectral_binning_number_of_samples(f, rx4, wxx4, nsamples=Nsamples)


		# RMS of binned residuals
		rmsb1  = np.sqrt(np.sum((rb1[wb1>0])**2)/len(fb[wb1>0]))
		rmsb2  = np.sqrt(np.sum((rb2[wb2>0])**2)/len(fb[wb2>0]))
		rmsb3  = np.sqrt(np.sum((rb3[wb3>0])**2)/len(fb[wb3>0]))
		rmsb4  = np.sqrt(np.sum((rb4[wb4>0])**2)/len(fb[wb4>0]))


		# Average model parameters
		px1  = np.mean(pr1,  axis=0)
		px2  = np.mean(pr2,  axis=0)
		px3  = np.mean(pr3,  axis=0)
		px4  = np.mean(pr4,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg1  = eg.model_evaluate('EDGES_polynomial', px1, fb/200)
		tfg2  = eg.model_evaluate('EDGES_polynomial', px2, fb/200)
		tfg3  = eg.model_evaluate('EDGES_polynomial', px3, fb/200)
		tfg4  = eg.model_evaluate('EDGES_polynomial', px4, fb/200)


		# Binned total temperature
		tb1 = tfg1 + rb1	
		tb2 = tfg2 + rb2
		tb3 = tfg3 + rb3
		tb4 = tfg4 + rb4	
		
		
		
		
		
		
		
		
		
		
		
		Nfg   = 6
		flow  = 65
		fhigh = 95
		out0 = eg.test_low_band_signature_search(fb, tb1, wb1, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out1 = eg.test_low_band_signature_search(fb, tb2, wb2, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out2 = eg.test_low_band_signature_search(fb, tb3, wb3, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out3 = eg.test_low_band_signature_search(fb, tb4, wb4, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		#out4 = eg.test_low_band_signature_search(fb, tb5, wb5, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		#out5 = eg.test_low_band_signature_search(fb, tb6, wb6, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))

		
		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(out0[0], out0[3] - 0*offset)
		plt.plot(out1[0], out1[3] - 1*offset)
		plt.plot(out2[0], out2[3] - 2*offset)
		plt.plot(out3[0], out3[3] - 3*offset)
		#plt.plot(out4[0], out4[3] - 4*offset)
		#plt.plot(out5[0], out5[3] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out0[4])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out1[4])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out2[4])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out3[4])) + ' mK')
		#plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out4[4])) + ' mK')
		#plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out5[4])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*3, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f3.pdf', bbox_inches='tight')
		plt.close()		
		


		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(out0[0], out0[-6] - 0*offset)
		plt.plot(out1[0], out1[-6] - 1*offset)
		plt.plot(out2[0], out2[-6] - 2*offset)
		plt.plot(out3[0], out3[-6] - 3*offset)
		#plt.plot(out4[0], out4[-6] - 4*offset)
		#plt.plot(out5[0], out5[-6] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out0[-7])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out1[-7])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out3[-7])) + ' mK')
		#plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out4[-7])) + ' mK')
		#plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out5[-7])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*3, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms + signature')
		
		# saving plot
		plt.savefig(home_folder + path + 'f4.pdf', bbox_inches='tight')
		plt.close()	







		

		i_vr = 0
		i_dv = 0

		#print(out0[5][i_vr], out0[6][i_dv])

		p21_all  = np.zeros(4)
		dp21_all = np.zeros(4)


		p21_all[0]    = out0[7][i_vr, i_dv]
		dp21_all[0]   = out0[8][i_vr, i_dv]

		p21_all[1]    = out1[7][i_vr, i_dv]
		dp21_all[1]   = out1[8][i_vr, i_dv]

		p21_all[2]    = out2[7][i_vr, i_dv]
		dp21_all[2]   = out2[8][i_vr, i_dv]

		p21_all[3]    = out3[7][i_vr, i_dv]
		dp21_all[3]   = out3[8][i_vr, i_dv]

		
		
		
		t78 = np.zeros(4)
		for i in range(len(fb)-1):
			if (fb[i] <= 78.5) and (fb[i+1] > 78.5):
				t78[0] = tb1[i]
				t78[1] = tb2[i]
				t78[2] = tb3[i]
				t78[3] = tb4[i]
				#t78[4] = tb_g[4, i]	# in cases > 3, tb16 and tb20  are the same as tb12
				#t78[5] = tb_g[5, i]



		xvalues = np.copy(gha_centers) #[0, 4, 8, 12] #, 16, 20]
	
		fig, ax1 = plt.subplots()
		ax1.errorbar(xvalues, 1000*p21_all, 1000*dp21_all, fmt='o-')
		#plt.plot(xvalues[4::], 1000*p21_all[4::], '.w', markersize = 7)

		ax1.set_xlabel('GHA [hr]')
		ax1.set_ylabel(r'$a_{21}$  [mK]', fontsize=20, color='b')
		ax1.tick_params('y', colors='b')

		ax1.set_xlim([-2, 24])
		ax1.set_ylim([0, 1400])
		ax1.set_xticks(xvalues)

		ax1.grid()
		ax1.set_title(str(Nfg) + ' polynomial terms + signature')	

		ax2 = ax1.twinx()
		ax2.plot(xvalues, t78, 'r.-', markersize=15)
		ax2.set_ylabel(r'$T_{78.5}$  [K]', fontsize=20, color='r')	
		ax2.tick_params('y', colors='r')

		ax2.set_ylim([0, 5000])
		ax2.set_xlim([-2, 24])	

		# saving plot
		plt.savefig(home_folder + path + 'f5.pdf', bbox_inches='tight')
		plt.close()	













	# Nominal total residuals
	if Fig == 6:

		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')		


		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		GHA_low  = 0
		GHA_high = 24		


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)
		

		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6; 
		flow  = 50
		fhigh = 100
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
		
		Nfg   = 6     # 6
		flow  = 60    # 60
		fhigh = 98    # 98
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		


		








		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])
		
		
		f1 = out1[0]
		f2 = out2[0]
		w1 = out1[2]
		w2 = out2[2]
		
		w1[(f1 > 91.8) & (f1 < 92.2)] = 0
		w2[(f2 > 91.8) & (f2 < 92.2)] = 0
		
		plt.plot(out1[0][w1>0],  out1[3][w1>0]  - 0*offset)
		plt.plot(out2[0][w2>0],  out2[3][w2>0]  - 1*offset)
		plt.plot(out2[0][w2>0],  out2[-6][w2>0] - 1.5*offset)
		plt.plot(out2[0][w2>0], -out2[-1][w2>0] - 2*offset)
		
		plt.text(txtoff, -0*offset,   'RMS: ' + str(int(1000*out1[4]))  + ' mK')
		plt.text(txtoff, -1*offset,   'RMS: ' + str(int(1000*out2[4]))  + ' mK')
		plt.text(txtoff, -1.5*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(90, -2*offset-0.15, r'$\tau = $ 7', fontsize=12)
		plt.text(90, -2*offset-0.30, r'$a_{21} = $ ' + str(int(1000*out2[-5])) + r' +/- ' + str(int(1000*out2[-4])) + r' mK', fontsize=12)
		plt.text(90, -2*offset-0.45, r'$\nu_r = $ ' + str(round(out2[-3],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.60, r'$\Delta \nu = $ ' + str(round(out2[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*4, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms, 0-24 GHA')
		
		# saving plot
		plt.savefig(home_folder + path + 'f6.pdf', bbox_inches='tight')
		plt.close()	
















	# Nominal total residuals
	if Fig == 7:

		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5') # 


		rz = ry[my[:,1] != 286, :]
		wz = wy[my[:,1] != 286, :]
		pz = py[my[:,1] != 286, :]
		mz = my[my[:,1] != 286, :]



		#GHA_low  = 6
		#GHA_high = 18		


		#rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		#wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		#pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
				



		rms_thres = 1 #230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = rz[np.in1d(mz[:,1],days) == False, :]
		w = wz[np.in1d(mz[:,1],days) == False, :]
		p = pz[np.in1d(mz[:,1],days) == False, :]
		m = mz[np.in1d(mz[:,1],days) == False, :]

		GHA_low  = 15 #6
		GHA_high = 21 #18	

		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
				












		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)
		
		

		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		



		fg_model = 'Physical_model'  # 'EDGES_polynomial' # 
		Nfg   = 5 #6
		flow  = 50 #50
		fhigh = 100 #100
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', fg_model=fg_model, vr_array=np.array([78.5]), dv_array=np.array([18.5]))
		
		Nfg   = 5     # 6
		flow  = 64    # 60 
		fhigh = 94    # 98
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', fg_model=fg_model, vr_array=np.arange(75,85,0.2), dv_array=np.arange(15,25,0.2))
		


		

		
		for i in range(len(fb)-1):
			if (fb[i] <= 78) and (fb[i+1] > 78):
				t78 = tb_low[i]



		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])
		
		
		f1 = out1[0]
		f2 = out2[0]
		w1 = out1[2]
		w2 = out2[2]
		
		w1[(f1 > 91.8) & (f1 < 92.2)] = 0
		w2[(f2 > 91.8) & (f2 < 92.2)] = 0
		
		plt.plot(out1[0][w1>0],  out1[3][w1>0]  - 0*offset)
		plt.plot(out2[0][w2>0],  out2[3][w2>0]  - 1*offset)
		plt.plot(out2[0][w2>0],  out2[-6][w2>0] - 1.5*offset)
		plt.plot(out2[0][w2>0], -out2[-1][w2>0] - 2*offset)
		
		plt.text(txtoff, -0*offset,   'RMS: ' + str(int(1000*out1[4]))  + ' mK')
		plt.text(txtoff, -1*offset,   'RMS: ' + str(int(1000*out2[4]))  + ' mK')
		plt.text(txtoff, -1.5*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(90, -2*offset-0.15, r'$\tau = $ 7', fontsize=12)
		plt.text(90, -2*offset-0.30, r'$a_{21} = $ ' + str(int(1000*out2[-5])) + r' +/- ' + str(int(1000*out2[-4])) + r' mK', fontsize=12)
		plt.text(90, -2*offset-0.45, r'$\nu_r = $ ' + str(round(out2[-3],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.60, r'$\Delta \nu = $ ' + str(round(out2[-2],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.75, r'$T_{78} = $ ' + str(int(t78)) + r' K', fontsize=12)
		
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*4, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' Physical polynomial terms, ' + str(GHA_low) + '-' + str(GHA_high) + ' GHA')
		
		# saving plot
		plt.savefig(home_folder + path + 'f7.pdf', bbox_inches='tight')
		plt.close()	

















	# Nominal total residuals
	if Fig == 8:

		

		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')		


		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		GHA_low = 6
		GHA_high = 18		


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		


		


		# First third	
		Nspec = int(np.floor(len(rq[:,0])/3))
		rr = rq[(0*Nspec):(1*Nspec), :] 
		wr = wq[(0*Nspec):(1*Nspec), :]
		pr = pq[(0*Nspec):(1*Nspec), :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		# Second third
		rr = rq[(1*Nspec):(2*Nspec), :] 
		wr = wq[(1*Nspec):(2*Nspec), :]
		pr = pq[(1*Nspec):(2*Nspec), :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		# Third third
		rr = rq[(2*Nspec)::, :] 
		wr = wq[(2*Nspec)::, :]
		pr = pq[(2*Nspec)::, :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out3  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		plt.figure(1, figsize=[8,15])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 98
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Total Average')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 1 of 3')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 2 of 3')
			
		
		
		
		
		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 3 of 3')		
		
		
		
		
		
		# saving plot
		plt.savefig(home_folder + path + 'f8.pdf', bbox_inches='tight')
		plt.close()	




















		## --------------------------------
		#resultsT = np.round(np.array([xvalues, t78, 1000*p21_all, 1000*dp21_all]))
		#results  = resultsT.T
		#print('-----------------------')
		#print('------- Results -------')
		#print('GHA [hr]  T78.5 [K]  a21 [mK]  d21 [mK]')
		#print(results.astype('int'))










	if Fig == 9:


		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')	
		
		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]		


		GHA_low = 6
		GHA_high = 18



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_daytime.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_nighttime.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		
		
		

		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_moon_up.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
			
		
		
		
		
		
		
		
		
		

		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_moon_down.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out4   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		
		
		
		
		

		plt.figure(1, figsize=[8,19])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 98
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(5,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Total Average')
		
		
		
		
		plt.subplot(5,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Daytime Only')
		
		
		
		
		plt.subplot(5,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nighttime Only')
			
		
		
		
		
		plt.subplot(5,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Moon Up Only')		
		
		
		
	
	
		
		plt.subplot(5,1,5)
				
		outX = np.copy(out4)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Moon Down Only')		
	
	
		
		
		
		
		
		# saving plot
		plt.savefig(home_folder + path + 'f9.pdf', bbox_inches='tight')
		plt.close()	




		
		
		
		
		
		
		
		
		
		
		
		
	
	if Fig == 10:


		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		GHA_low  = 6
		GHA_high = 18



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_cal2015_nfit7_wfit7.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_cal2017_nfit7_wfit7.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		







		
		

		plt.figure(1, figsize=[8,11])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 98
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(3,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(3,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Calibration 2015, Nfit7 - Wfit7')
		
		
		
		
		plt.subplot(3,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Calibration 2017, Nfit7 - Wfit7')
			
		
		
		

		
		
		# saving plot
		plt.savefig(home_folder + path + 'f10.pdf', bbox_inches='tight')
		plt.close()	



		
		
		
		
			
		
		




		
	
	if Fig == 11:


		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		
		GHA_low  = 6
		GHA_high = 18

		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2017_93.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_switch2017.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		


		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2017_93_switch2017.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		






	



		

		plt.figure(1, figsize=[8,13])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 98
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2017-93')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2016-243, Switch2017')
			
		
		



		
		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2017-93, Switch2017')
			
		





		
		# saving plot
		plt.savefig(home_folder + path + 'f11.pdf', bbox_inches='tight')
		plt.close()	












	
	if Fig == 12:


		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		GHA_low  = 6
		GHA_high = 18



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_no_ground_loss.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_no_bc_s11_2016_243.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		







		
		

		plt.figure(1, figsize=[8,11])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 98
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(3,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(3,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('No Ground Loss Correction')
		
		
		
		
		plt.subplot(3,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('No Beam Correction')
			
		
		
		

		
		
		# saving plot
		plt.savefig(home_folder + path + 'f12.pdf', bbox_inches='tight')
		plt.close()	








	if Fig == 0:
		
		
		c = np.zeros((15,2))
		
		c[0,:] = [447, 16]
		c[1,:] = [428, 27]
		c[2,:] = [446, 23]
		c[3,:] = [515, 26]
		c[4,:] = [493, 34]
		c[5,:] = [452, 17]
		c[6,:] = [482, 18]
		c[7,:] = [448, 23]
		c[8,:] = [571, 21]
		c[9,:] = [503, 17]
		c[10,:] = [455, 16]
		c[11,:] = [465, 16]
		c[12,:] = [475, 17]
		c[13,:] = [451, 16]
		c[14,:] = [452, 17]
		
		
		
		plt.figure(1, figsize=[10,6])

		plt.errorbar(np.arange(0, 15), c[:,0], c[:,1], fmt='o-')
		plt.xlim([-0.5, 14.5])
		plt.ylim([0, 600])
		plt.xticks(np.arange(0,15))
		plt.xlabel('case number')
		plt.ylabel(r'$a_{21}$ [mK]', fontsize=16)
		plt.grid()

		# saving plot
		plt.savefig(home_folder + path + 'f0.pdf', bbox_inches='tight')
		plt.close()	
	






	return fb, tb_low, wb_low
























def low_band2_analysis_NS(Fig):


	"""
	2017-08-27

	"""





	plt.close()
	plt.close()
	plt.close()
	plt.close()
	
	path = '/DATA/EDGES/results/plots/20170827/'



	# Daily residuals
	if Fig == 1:

		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_nominal.hdf5')
		
		rms_thres = 0.230
		rb_d = rb_dx[rmsb_dx[:,0] <= rms_thres, :]
		wb_d = wb_dx[rmsb_dx[:,0] <= rms_thres, :]
		mb_d = mb_dx[rmsb_dx[:,0] <= rms_thres, :]
		
		o = eg.plot_spectra_residuals(fb, rb_d, wb_d, 'season', mb_d[:,1], K=1, flow_lim=48, fhigh_lim=112, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100.5, fontsize=10, size_x_column=5.5, size_y=6, NSC=24, y_label='day of year 2017 [1 K per division]', plot_name='daily_low_band2_NS_nominal')




	# GHA dependence
	if Fig == 2:

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_nominal.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]
		

		gha_edges   = np.array([22, 2, 6, 10, 14, 18, 22])
		gha_centers = np.array([0, 4, 8, 12, 16, 20]) 
	
		rr1 = r[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		wr1 = w[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		pr1 = p[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
	
		rr2 = r[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		wr2 = w[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		pr2 = p[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
	
		rr3 = r[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		wr3 = w[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		pr3 = p[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
	
		rr4 = r[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		wr4 = w[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		pr4 = p[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]

		rr5 = r[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		wr5 = w[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		pr5 = p[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]

		rr6 = r[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		wr6 = w[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		pr6 = p[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]



		# Spectral averaging
		rx1, wx1   = eg.spectral_averaging(rr1, wr1)
		rx2, wx2   = eg.spectral_averaging(rr2, wr2)
		rx3, wx3   = eg.spectral_averaging(rr3, wr3)
		rx4, wx4   = eg.spectral_averaging(rr4, wr4)
		rx5, wx5   = eg.spectral_averaging(rr5, wr5)
		rx6, wx6   = eg.spectral_averaging(rr6, wr6)
		

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx1  = eg.RFI_cleaning_spectrum_raw(f, rx1, wx1, Nterms_fg=16, Nsigma=Nsigma)
		wxx2  = eg.RFI_cleaning_spectrum_raw(f, rx2, wx2, Nterms_fg=16, Nsigma=Nsigma)
		wxx3  = eg.RFI_cleaning_spectrum_raw(f, rx3, wx3, Nterms_fg=16, Nsigma=Nsigma)
		wxx4  = eg.RFI_cleaning_spectrum_raw(f, rx4, wx4, Nterms_fg=16, Nsigma=Nsigma)
		wxx5  = eg.RFI_cleaning_spectrum_raw(f, rx5, wx5, Nterms_fg=16, Nsigma=Nsigma)
		wxx6  = eg.RFI_cleaning_spectrum_raw(f, rx6, wx6, Nterms_fg=16, Nsigma=Nsigma)
		

		# Spectral binning
		Nsamples = 64
		fb, rb1, wb1  = eg.spectral_binning_number_of_samples(f, rx1, wxx1, nsamples=Nsamples)
		fb, rb2, wb2  = eg.spectral_binning_number_of_samples(f, rx2, wxx2, nsamples=Nsamples)
		fb, rb3, wb3  = eg.spectral_binning_number_of_samples(f, rx3, wxx3, nsamples=Nsamples)
		fb, rb4, wb4  = eg.spectral_binning_number_of_samples(f, rx4, wxx4, nsamples=Nsamples)
		fb, rb5, wb5  = eg.spectral_binning_number_of_samples(f, rx5, wxx5, nsamples=Nsamples)
		fb, rb6, wb6  = eg.spectral_binning_number_of_samples(f, rx6, wxx6, nsamples=Nsamples)


		# RMS of binned residuals
		rmsb1  = np.sqrt(np.sum((rb1[wb1>0])**2)/len(fb[wb1>0]))
		rmsb2  = np.sqrt(np.sum((rb2[wb2>0])**2)/len(fb[wb2>0]))
		rmsb3  = np.sqrt(np.sum((rb3[wb3>0])**2)/len(fb[wb3>0]))
		rmsb4  = np.sqrt(np.sum((rb4[wb4>0])**2)/len(fb[wb4>0]))
		rmsb5  = np.sqrt(np.sum((rb5[wb5>0])**2)/len(fb[wb5>0]))
		rmsb6  = np.sqrt(np.sum((rb6[wb6>0])**2)/len(fb[wb6>0]))


		# Average model parameters
		px1  = np.mean(pr1,  axis=0)
		px2  = np.mean(pr2,  axis=0)
		px3  = np.mean(pr3,  axis=0)
		px4  = np.mean(pr4,  axis=0)
		px5  = np.mean(pr5,  axis=0)
		px6  = np.mean(pr6,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg1  = eg.model_evaluate('EDGES_polynomial', px1, fb/200)
		tfg2  = eg.model_evaluate('EDGES_polynomial', px2, fb/200)
		tfg3  = eg.model_evaluate('EDGES_polynomial', px3, fb/200)
		tfg4  = eg.model_evaluate('EDGES_polynomial', px4, fb/200)
		tfg5  = eg.model_evaluate('EDGES_polynomial', px5, fb/200)
		tfg6  = eg.model_evaluate('EDGES_polynomial', px6, fb/200)


		# Binned total temperature
		tb1 = tfg1 + rb1	
		tb2 = tfg2 + rb2
		tb3 = tfg3 + rb3
		tb4 = tfg4 + rb4
		tb5 = tfg5 + rb5
		tb6 = tfg6 + rb6
		
		
		
		
		Nfg   = 7
		flow  = 50
		fhigh = 100
		out1 = eg.test_low_band_signature_search(fb, tb1, wb1, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out2 = eg.test_low_band_signature_search(fb, tb2, wb2, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out3 = eg.test_low_band_signature_search(fb, tb3, wb3, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out4 = eg.test_low_band_signature_search(fb, tb4, wb4, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out5 = eg.test_low_band_signature_search(fb, tb5, wb5, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out6 = eg.test_low_band_signature_search(fb, tb6, wb6, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		
		
		
		

		
		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(fb, out1[3] - 0*offset)
		plt.plot(fb, out2[3] - 1*offset)
		plt.plot(fb, out3[3] - 2*offset)
		plt.plot(fb, out4[3] - 3*offset)
		plt.plot(fb, out5[3] - 4*offset)
		plt.plot(fb, out6[3] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out1[4])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out2[4])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out3[4])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out4[4])) + ' mK')
		plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out5[4])) + ' mK')
		plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out6[4])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*6, offset])
		plt.yticks(np.arange(-offset*5, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f2.pdf', bbox_inches='tight')
		plt.close()		
		















	# GHA dependence
	if Fig == 3:

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_nominal.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]
		


		gha_edges   = np.array([21, 3, 9, 15, 21])
		gha_centers = np.array([0, 6, 12, 18]) 
	
		rr1 = r[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		wr1 = w[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		pr1 = p[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
	
		rr2 = r[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		wr2 = w[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		pr2 = p[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
	
		rr3 = r[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		wr3 = w[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		pr3 = p[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
	
		rr4 = r[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		wr4 = w[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		pr4 = p[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]

		#rr5 = r[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		#wr5 = w[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		#pr5 = p[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]

		#rr6 = r[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		#wr6 = w[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		#pr6 = p[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]



		# Spectral averaging
		rx1, wx1   = eg.spectral_averaging(rr1, wr1)
		rx2, wx2   = eg.spectral_averaging(rr2, wr2)
		rx3, wx3   = eg.spectral_averaging(rr3, wr3)
		rx4, wx4   = eg.spectral_averaging(rr4, wr4)
		#rx5, wx5   = eg.spectral_averaging(rr5, wr5)
		#rx6, wx6   = eg.spectral_averaging(rr6, wr6)
		

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx1  = eg.RFI_cleaning_spectrum_raw(f, rx1, wx1, Nterms_fg=16, Nsigma=Nsigma)
		wxx2  = eg.RFI_cleaning_spectrum_raw(f, rx2, wx2, Nterms_fg=16, Nsigma=Nsigma)
		wxx3  = eg.RFI_cleaning_spectrum_raw(f, rx3, wx3, Nterms_fg=16, Nsigma=Nsigma)
		wxx4  = eg.RFI_cleaning_spectrum_raw(f, rx4, wx4, Nterms_fg=16, Nsigma=Nsigma)
		#wxx5  = eg.RFI_cleaning_spectrum_raw(f, rx5, wx5, Nterms_fg=16, Nsigma=Nsigma)
		#wxx6  = eg.RFI_cleaning_spectrum_raw(f, rx6, wx6, Nterms_fg=16, Nsigma=Nsigma)
		

		# Spectral binning
		Nsamples = 64
		fb, rb1, wb1  = eg.spectral_binning_number_of_samples(f, rx1, wxx1, nsamples=Nsamples)
		fb, rb2, wb2  = eg.spectral_binning_number_of_samples(f, rx2, wxx2, nsamples=Nsamples)
		fb, rb3, wb3  = eg.spectral_binning_number_of_samples(f, rx3, wxx3, nsamples=Nsamples)
		fb, rb4, wb4  = eg.spectral_binning_number_of_samples(f, rx4, wxx4, nsamples=Nsamples)
		#fb, rb5, wb5  = eg.spectral_binning_number_of_samples(f, rx5, wxx5, nsamples=Nsamples)
		#fb, rb6, wb6  = eg.spectral_binning_number_of_samples(f, rx6, wxx6, nsamples=Nsamples)


		# RMS of binned residuals
		rmsb1  = np.sqrt(np.sum((rb1[wb1>0])**2)/len(fb[wb1>0]))
		rmsb2  = np.sqrt(np.sum((rb2[wb2>0])**2)/len(fb[wb2>0]))
		rmsb3  = np.sqrt(np.sum((rb3[wb3>0])**2)/len(fb[wb3>0]))
		rmsb4  = np.sqrt(np.sum((rb4[wb4>0])**2)/len(fb[wb4>0]))
		#rmsb5  = np.sqrt(np.sum((rb5[wb5>0])**2)/len(fb[wb5>0]))
		#rmsb6  = np.sqrt(np.sum((rb6[wb6>0])**2)/len(fb[wb6>0]))


		# Average model parameters
		px1  = np.mean(pr1,  axis=0)
		px2  = np.mean(pr2,  axis=0)
		px3  = np.mean(pr3,  axis=0)
		px4  = np.mean(pr4,  axis=0)
		#px5  = np.mean(pr5,  axis=0)
		#px6  = np.mean(pr6,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg1  = eg.model_evaluate('EDGES_polynomial', px1, fb/200)
		tfg2  = eg.model_evaluate('EDGES_polynomial', px2, fb/200)
		tfg3  = eg.model_evaluate('EDGES_polynomial', px3, fb/200)
		tfg4  = eg.model_evaluate('EDGES_polynomial', px4, fb/200)
		#tfg5  = eg.model_evaluate('EDGES_polynomial', px5, fb/200)
		#tfg6  = eg.model_evaluate('EDGES_polynomial', px6, fb/200)


		# Binned total temperature
		tb1 = tfg1 + rb1	
		tb2 = tfg2 + rb2
		tb3 = tfg3 + rb3
		tb4 = tfg4 + rb4
		#tb5 = tfg5 + rb5
		#tb6 = tfg6 + rb6
		
		
		
		
		Nfg   = 6  #6
		flow  = 61 #65
		fhigh = 95 #95
		out1 = eg.test_low_band_signature_search(fb, tb1, wb1, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,85,0.2), dv_array=np.arange(15,26,0.2))
		out2 = eg.test_low_band_signature_search(fb, tb2, wb2, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,85,0.2), dv_array=np.arange(15,26,0.2))
		out3 = eg.test_low_band_signature_search(fb, tb3, wb3, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,85,0.2), dv_array=np.arange(15,26,0.2))
		out4 = eg.test_low_band_signature_search(fb, tb4, wb4, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,85,0.2), dv_array=np.arange(15,26,0.2))
		#out5 = eg.test_low_band_signature_search(fb, tb5, wb5, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		#out6 = eg.test_low_band_signature_search(fb, tb6, wb6, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		
		
		
		

		
		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(out1[0], out1[3] - 0*offset)
		plt.plot(out2[0], out2[3] - 1*offset)
		plt.plot(out3[0], out3[3] - 2*offset)
		plt.plot(out4[0], out4[3] - 3*offset)
		#plt.plot(out5[0], out5[3] - 4*offset)
		#plt.plot(out6[0], out6[3] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out1[4])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out2[4])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out3[4])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out4[4])) + ' mK')
		#plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out5[4])) + ' mK')
		#plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out6[4])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*3, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f3.pdf', bbox_inches='tight')
		plt.close()		
		





		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(out1[0], out1[-6] - 0*offset)
		plt.plot(out2[0], out2[-6] - 1*offset)
		plt.plot(out3[0], out3[-6] - 2*offset)
		plt.plot(out4[0], out4[-6] - 3*offset)
		#plt.plot(out5[0], out5[-6] - 4*offset)
		#plt.plot(out6[0], out6[-6] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out1[-7])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out3[-7])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out4[-7])) + ' mK')
		#plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out5[-7])) + ' mK')
		#plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out6[-7])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*3, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms + signature')
		
		# saving plot
		plt.savefig(home_folder + path + 'f4.pdf', bbox_inches='tight')
		plt.close()




		i_vr = 0
		i_dv = 0
	
		#print(out0[5][i_vr], out0[6][i_dv])
	
		p21_all  = np.zeros(4)
		dp21_all = np.zeros(4)
	
	
		p21_all[0]    = out1[-5]#[i_vr, i_dv]
		dp21_all[0]   = out1[-4]#[i_vr, i_dv]
	
		p21_all[1]    = out2[-5]#[i_vr, i_dv]
		dp21_all[1]   = out2[-4]#[i_vr, i_dv]
	
		p21_all[2]    = out3[-5]#[i_vr, i_dv]
		dp21_all[2]   = out3[-4]#[i_vr, i_dv]
	
		p21_all[3]    = out4[-5]#[i_vr, i_dv]
		dp21_all[3]   = out4[-4]#[i_vr, i_dv]

		#p21_all[4]    = out5[7][i_vr, i_dv]
		#dp21_all[4]   = out5[8][i_vr, i_dv]
		
		#p21_all[5]    = out6[7][i_vr, i_dv]
		#dp21_all[5]   = out6[8][i_vr, i_dv]
				

		print(out1[-5:-1])
		print(out2[-5:-1])
		print(out3[-5:-1])
		print(out4[-5:-1])
		
		
		t78 = np.zeros(4)
		for i in range(len(fb)-1):
			if (fb[i] <= out1[-3]) and (fb[i+1] > out1[-3]):
				t78[0] = tb1[i]
				
			if (fb[i] <= out2[-3]) and (fb[i+1] > out2[-3]):
				t78[1] = tb2[i]
				
			if (fb[i] <= out3[-3]) and (fb[i+1] > out3[-3]):
				t78[2] = tb3[i]
				
			if (fb[i] <= out4[-3]) and (fb[i+1] > out4[-3]):
				t78[3] = tb4[i]
				

		xvalues = np.copy(gha_centers) #[0, 4, 8, 12] #, 16, 20]






		fig, ax1 = plt.subplots()
		ax1.errorbar(xvalues, 1000*p21_all, 1000*dp21_all, fmt='o-')
		#plt.plot(xvalues[3], 1000*p21_all[3], '.w', markersize = 7)

		ax1.set_xlabel('GHA [hr]')
		ax1.set_ylabel(r'$a_{21}$  [mK]', fontsize=20, color='b')
		ax1.tick_params('y', colors='b')

		ax1.set_xlim([-2, 24])
		ax1.set_ylim([0, 1400])
		ax1.set_xticks(xvalues)
		
		ax1.text(xvalues[0]+0.1, 100, r'$\nu_r$ = ' + str(out1[-3]) + ' MHz', fontsize=9)
		ax1.text(xvalues[1]+0.1, 100, r'$\nu_r$ = ' + str(out2[-3]) + ' MHz', fontsize=9)
		ax1.text(xvalues[2]+0.1, 100, r'$\nu_r$ = ' + str(out3[-3]) + ' MHz', fontsize=9)
		ax1.text(xvalues[3]+0.1, 100, r'$\nu_r$ = ' + str(out4[-3]) + ' MHz', fontsize=9)
	
		ax1.text(xvalues[0]+0.1, 60, r'$\Delta\nu$ = ' + str(out1[-2]) + ' MHz', fontsize=9)
		ax1.text(xvalues[1]+0.1, 60, r'$\Delta\nu$ = ' + str(out2[-2]) + ' MHz', fontsize=9)
		ax1.text(xvalues[2]+0.1, 60, r'$\Delta\nu$ = ' + str(out3[-2]) + ' MHz', fontsize=9)
		ax1.text(xvalues[3]+0.1, 60, r'$\Delta\nu$ = ' + str(out4[-2]) + ' MHz', fontsize=9)
		

		ax1.grid()
		ax1.set_title(str(Nfg) + ' polynomial terms + signature')	

		ax2 = ax1.twinx()
		ax2.plot(xvalues, t78, 'r.-', markersize=15)
		ax2.set_ylabel(r'$T_{\mathrm{sky}}$  [K]', fontsize=20, color='r')	
		ax2.tick_params('y', colors='r')
		
		ax2.set_ylim([0, 5000])
		ax2.set_xlim([-2, 24])
		
		

		# saving plot
		plt.savefig(home_folder + path + 'f5.pdf', bbox_inches='tight')
		plt.close()	
























	# Nominal total residuals
	if Fig == 6:

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_nominal.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]
		

		GHA_low  = 0
		GHA_high = 24		


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)
		

		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6 
		flow  = 50
		fhigh = 100
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
		
		Nfg   = 5     # 6
		flow  = 61    # 60
		fhigh = 95    # 98
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		


		








		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])
		
		
		f1 = out1[0]
		f2 = out2[0]
		w1 = out1[2]
		w2 = out2[2]
		
		w1[(f1 > 91.8) & (f1 < 92.2)] = 0
		w2[(f2 > 91.8) & (f2 < 92.2)] = 0
		
		plt.plot(out1[0][w1>0],  out1[3][w1>0]  - 0*offset)
		plt.plot(out2[0][w2>0],  out2[3][w2>0]  - 1*offset)
		plt.plot(out2[0][w2>0],  out2[-6][w2>0] - 1.5*offset)
		plt.plot(out2[0][w2>0], -out2[-1][w2>0] - 2*offset)
		
		plt.text(txtoff, -0*offset,   'RMS: ' + str(int(1000*out1[4]))  + ' mK')
		plt.text(txtoff, -1*offset,   'RMS: ' + str(int(1000*out2[4]))  + ' mK')
		plt.text(txtoff, -1.5*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(90, -2*offset-0.15, r'$\tau = $ 7', fontsize=12)
		plt.text(90, -2*offset-0.30, r'$a_{21} = $ ' + str(int(1000*out2[-5])) + r' +/- ' + str(int(1000*out2[-4])) + r' mK', fontsize=12)
		plt.text(90, -2*offset-0.45, r'$\nu_r = $ ' + str(round(out2[-3],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.60, r'$\Delta \nu = $ ' + str(round(out2[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*4, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('0-24 GHA')
		plt.text(53, 0.2,   '6 terms')
		plt.text(52, -0.5,  '5 terms')
		plt.text(52, -0.95, '5 terms' + '\n +' + '\n' +'signature')
		
		# saving plot
		plt.savefig(home_folder + path + 'f6.pdf', bbox_inches='tight')
		plt.close()	
















	# Nominal total residuals
	if Fig == 7:

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_nominal.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]



		GHA_low  = 5
		GHA_high = 13		


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
				
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)
		
		

		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6     
		flow  = 50
		fhigh = 100
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
		
		Nfg   = 5     # 6
		flow  = 61    # 60 
		fhigh = 95    # 98
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		


		








		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])
		
		
		f1 = out1[0]
		f2 = out2[0]
		w1 = out1[2]
		w2 = out2[2]
		
		w1[(f1 > 91.8) & (f1 < 92.2)] = 0
		w2[(f2 > 91.8) & (f2 < 92.2)] = 0
		
		plt.plot(out1[0][w1>0],  out1[3][w1>0]  - 0*offset)
		plt.plot(out2[0][w2>0],  out2[3][w2>0]  - 1*offset)
		plt.plot(out2[0][w2>0],  out2[-6][w2>0] - 1.5*offset)
		plt.plot(out2[0][w2>0], -out2[-1][w2>0] - 2*offset)
		
		plt.text(txtoff, -0*offset,   'RMS: ' + str(int(1000*out1[4]))  + ' mK')
		plt.text(txtoff, -1*offset,   'RMS: ' + str(int(1000*out2[4]))  + ' mK')
		plt.text(txtoff, -1.5*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(90, -2*offset-0.15, r'$\tau = $ 7', fontsize=12)
		plt.text(90, -2*offset-0.30, r'$a_{21} = $ ' + str(int(1000*out2[-5])) + r' +/- ' + str(int(1000*out2[-4])) + r' mK', fontsize=12)
		plt.text(90, -2*offset-0.45, r'$\nu_r = $ ' + str(round(out2[-3],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.60, r'$\Delta \nu = $ ' + str(round(out2[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*4, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('5-13 GHA')
		plt.text(53, 0.2,   '6 terms')
		plt.text(52, -0.5,  '5 terms')
		plt.text(52, -0.95, '5 terms' + '\n +' + '\n' +'signature')
		
		# saving plot
		plt.savefig(home_folder + path + 'f7.pdf', bbox_inches='tight')
		plt.close()	

















	# Nominal total residuals
	if Fig == 8:

		

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_nominal.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]



		GHA_low  = 5
		GHA_high = 13		


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		


		


		# First third	
		Nspec = int(np.floor(len(rq[:,0])/3))
		rr = rq[(0*Nspec):(1*Nspec), :] 
		wr = wq[(0*Nspec):(1*Nspec), :]
		pr = pq[(0*Nspec):(1*Nspec), :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		







		# Second third
		rr = rq[(1*Nspec):(2*Nspec), :] 
		wr = wq[(1*Nspec):(2*Nspec), :]
		pr = pq[(1*Nspec):(2*Nspec), :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		







		# Third third
		rr = rq[(2*Nspec)::, :] 
		wr = wq[(2*Nspec)::, :]
		pr = pq[(2*Nspec)::, :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out3  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		










		plt.figure(1, figsize=[8,15])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Total Average')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 1 of 3')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 2 of 3')
			
		
		
		
		
		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 3 of 3')		
		
		
		
		
		
		# saving plot
		plt.savefig(home_folder + path + 'f8.pdf', bbox_inches='tight')
		plt.close()	














	# ---------------------------------------------------------------------
	# ---------------------------------------------------------------------
	# This figure not produced for Low-Band 2. Not enough S/N
	# ---------------------------------------------------------------------
	if Fig == 9:


		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')	
		
		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]		


		GHA_low = 6
		GHA_high = 18



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_daytime.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_nighttime.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		
		
		
		
		
		
		
		
		

		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_moon_up.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
			
		
		
		
		
		
		
		
		
		

		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_moon_down.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out4   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		
		
		
		
		
		
		
		
		
		
		

		plt.figure(1, figsize=[8,19])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 98
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(5,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Total Average')
		
		
		
		
		plt.subplot(5,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Daytime Only')
		
		
		
		
		plt.subplot(5,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nighttime Only')
			
		
		
		
		
		plt.subplot(5,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Moon Up Only')		
		
		
		
	
	
		
		plt.subplot(5,1,5)
				
		outX = np.copy(out4)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Moon Down Only')		
	
	
		
		
		
		
		
		# saving plot
		plt.savefig(home_folder + path + 'f9.pdf', bbox_inches='tight')
		plt.close()	




		
		
		
		
		
		
		
		
		
		
		
		
	
	if Fig == 10:


		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_nominal.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]


		GHA_low  = 5
		GHA_high = 13



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_23.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]

		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_27.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		
		
		
		
		
		
		


		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_nfit7_wfit7.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))




		
		

		plt.figure(1, figsize=[8,15])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title(r'Calibration 2017, Nfit6 - Wfit5, Receiver at $23^{\circ}$C')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title(r'Calibration 2017, Nfit6 - Wfit5, Receiver at $27^{\circ}$C')
			
		
		
		

		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Calibration 2017, Nfit7 - Wfit7, Receiver at $25^{\circ}$C')
			
		
		
		
				
		
		# saving plot
		plt.savefig(home_folder + path + 'f10.pdf', bbox_inches='tight')
		plt.close()	



		
		
		
		
			
		
		




	# ---------------------------------------------------------------------
	# ---------------------------------------------------------------------
	# This figure not produced for Low-Band 2. Not additional antenna S11
	# ---------------------------------------------------------------------			
	if Fig == 11:


		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		
		GHA_low  = 6
		GHA_high = 18

		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2017_93.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_switch2017.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		


		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2017_93_switch2017.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		






	



		

		plt.figure(1, figsize=[8,13])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2017-93')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2016-243, Switch2017')
			
		
		



		
		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2017-93, Switch2017')
			
		





		
		# saving plot
		plt.savefig(home_folder + path + 'f11.pdf', bbox_inches='tight')
		plt.close()	












	
	if Fig == 12:


		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_nominal.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]
		


		GHA_low  = 5
		GHA_high = 13



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_no_gl.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]
		
		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_no_bc.hdf5')
		
		rms_thres = 0.230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = ry[np.in1d(my[:,1],days) == False, :]
		w = wy[np.in1d(my[:,1],days) == False, :]
		p = py[np.in1d(my[:,1],days) == False, :]
		m = my[np.in1d(my[:,1],days) == False, :]
		
		
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		
		
		
		
		
		
		







		
		

		plt.figure(1, figsize=[8,11])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(3,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(3,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('No Ground Loss Correction')
		
		
		
		
		plt.subplot(3,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('No Beam Correction')
			
		
		
		

		
		
		# saving plot
		plt.savefig(home_folder + path + 'f12.pdf', bbox_inches='tight')
		plt.close()	








	if Fig == 0:
		
		
		c = np.zeros((9, 2))
		
		c[0, :] = [326, 31]       # Nominal
		c[1, :] = [413, 53]       # Subset 1
		c[2, :] = [376, 54]       # Subset 2 
		c[3, :] = [296, 55]       # Subset 3
		c[4, :] = [336, 30]       # 23 degC 
		c[5, :] = [333, 32]       # 27 degC
		c[6, :] = [367, 33]       # nfit7, wfit7 (25 degC)
		c[7, :] = [325, 31]       # No ground loss
		c[8, :] = [310, 33]       # No beam correction 

		
		
		
		plt.figure(1, figsize=[10,6])

		plt.errorbar(np.arange(0, 9), c[:,0], c[:,1], fmt='o-')
		plt.xlim([-0.5, 8.5])
		plt.ylim([0, 600])
		plt.xticks(np.arange(0, 9))
		plt.xlabel('case number')
		plt.ylabel(r'$a_{21}$ [mK]', fontsize=16)
		plt.grid()

		# saving plot
		plt.savefig(home_folder + path + 'f0.pdf', bbox_inches='tight')
		plt.close()	
	


	return 0





































def low_band2_analysis_EW_with_shield(Fig):


	"""
	2017-08-28

	"""





	plt.close()
	plt.close()
	plt.close()
	plt.close()
	
	path = '/DATA/EDGES/results/plots/20170828/'



	# Daily residuals
	if Fig == 1:

		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nominal.hdf5')
		
		#rms_thres = 0.230
		#rb_d = rb_dx[rmsb_dx[:,0] <= rms_thres, :]
		#wb_d = wb_dx[rmsb_dx[:,0] <= rms_thres, :]
		#mb_d = mb_dx[rmsb_dx[:,0] <= rms_thres, :]
		
		o = eg.plot_spectra_residuals(fb, rb_dx, wb_dx, 'season', mb_dx[:,1], K=1, flow_lim=48, fhigh_lim=112, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100.5, fontsize=10, size_x_column=5.5, size_y=4.0, NSC=15, y_label='day of year 2017 [1 K per division]', plot_name='daily_low_band2_EW_with_shield_nominal')




	# GHA dependence
	if Fig == 2:

		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nominal.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]
		

		gha_edges   = np.array([22, 2, 6, 10, 14, 18, 22])
		gha_centers = np.array([0, 4, 8, 12, 16, 20]) 
	
		rr1 = r[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		wr1 = w[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		pr1 = p[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
	
		rr2 = r[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		wr2 = w[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		pr2 = p[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
	
		rr3 = r[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		wr3 = w[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		pr3 = p[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
	
		rr4 = r[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		wr4 = w[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		pr4 = p[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]

		rr5 = r[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		wr5 = w[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		pr5 = p[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]

		rr6 = r[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		wr6 = w[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		pr6 = p[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]



		# Spectral averaging
		rx1, wx1   = eg.spectral_averaging(rr1, wr1)
		rx2, wx2   = eg.spectral_averaging(rr2, wr2)
		rx3, wx3   = eg.spectral_averaging(rr3, wr3)
		rx4, wx4   = eg.spectral_averaging(rr4, wr4)
		rx5, wx5   = eg.spectral_averaging(rr5, wr5)
		rx6, wx6   = eg.spectral_averaging(rr6, wr6)
		

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx1  = eg.RFI_cleaning_spectrum_raw(f, rx1, wx1, Nterms_fg=16, Nsigma=Nsigma)
		wxx2  = eg.RFI_cleaning_spectrum_raw(f, rx2, wx2, Nterms_fg=16, Nsigma=Nsigma)
		wxx3  = eg.RFI_cleaning_spectrum_raw(f, rx3, wx3, Nterms_fg=16, Nsigma=Nsigma)
		wxx4  = eg.RFI_cleaning_spectrum_raw(f, rx4, wx4, Nterms_fg=16, Nsigma=Nsigma)
		wxx5  = eg.RFI_cleaning_spectrum_raw(f, rx5, wx5, Nterms_fg=16, Nsigma=Nsigma)
		wxx6  = eg.RFI_cleaning_spectrum_raw(f, rx6, wx6, Nterms_fg=16, Nsigma=Nsigma)
		

		# Spectral binning
		Nsamples = 64
		fb, rb1, wb1  = eg.spectral_binning_number_of_samples(f, rx1, wxx1, nsamples=Nsamples)
		fb, rb2, wb2  = eg.spectral_binning_number_of_samples(f, rx2, wxx2, nsamples=Nsamples)
		fb, rb3, wb3  = eg.spectral_binning_number_of_samples(f, rx3, wxx3, nsamples=Nsamples)
		fb, rb4, wb4  = eg.spectral_binning_number_of_samples(f, rx4, wxx4, nsamples=Nsamples)
		fb, rb5, wb5  = eg.spectral_binning_number_of_samples(f, rx5, wxx5, nsamples=Nsamples)
		fb, rb6, wb6  = eg.spectral_binning_number_of_samples(f, rx6, wxx6, nsamples=Nsamples)


		# RMS of binned residuals
		rmsb1  = np.sqrt(np.sum((rb1[wb1>0])**2)/len(fb[wb1>0]))
		rmsb2  = np.sqrt(np.sum((rb2[wb2>0])**2)/len(fb[wb2>0]))
		rmsb3  = np.sqrt(np.sum((rb3[wb3>0])**2)/len(fb[wb3>0]))
		rmsb4  = np.sqrt(np.sum((rb4[wb4>0])**2)/len(fb[wb4>0]))
		rmsb5  = np.sqrt(np.sum((rb5[wb5>0])**2)/len(fb[wb5>0]))
		rmsb6  = np.sqrt(np.sum((rb6[wb6>0])**2)/len(fb[wb6>0]))


		# Average model parameters
		px1  = np.mean(pr1,  axis=0)
		px2  = np.mean(pr2,  axis=0)
		px3  = np.mean(pr3,  axis=0)
		px4  = np.mean(pr4,  axis=0)
		px5  = np.mean(pr5,  axis=0)
		px6  = np.mean(pr6,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg1  = eg.model_evaluate('EDGES_polynomial', px1, fb/200)
		tfg2  = eg.model_evaluate('EDGES_polynomial', px2, fb/200)
		tfg3  = eg.model_evaluate('EDGES_polynomial', px3, fb/200)
		tfg4  = eg.model_evaluate('EDGES_polynomial', px4, fb/200)
		tfg5  = eg.model_evaluate('EDGES_polynomial', px5, fb/200)
		tfg6  = eg.model_evaluate('EDGES_polynomial', px6, fb/200)


		# Binned total temperature
		tb1 = tfg1 + rb1	
		tb2 = tfg2 + rb2
		tb3 = tfg3 + rb3
		tb4 = tfg4 + rb4
		tb5 = tfg5 + rb5
		tb6 = tfg6 + rb6
		
		
		
		
		Nfg   = 7
		flow  = 50
		fhigh = 100
		out1 = eg.test_low_band_signature_search(fb, tb1, wb1, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out2 = eg.test_low_band_signature_search(fb, tb2, wb2, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out3 = eg.test_low_band_signature_search(fb, tb3, wb3, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out4 = eg.test_low_band_signature_search(fb, tb4, wb4, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out5 = eg.test_low_band_signature_search(fb, tb5, wb5, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out6 = eg.test_low_band_signature_search(fb, tb6, wb6, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		
		
		
		

		
		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(fb, out1[3] - 0*offset)
		plt.plot(fb, out2[3] - 1*offset)
		plt.plot(fb, out3[3] - 2*offset)
		plt.plot(fb, out4[3] - 3*offset)
		plt.plot(fb, out5[3] - 4*offset)
		plt.plot(fb, out6[3] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out1[4])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out2[4])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out3[4])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out4[4])) + ' mK')
		plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out5[4])) + ' mK')
		plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out6[4])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*6, offset])
		plt.yticks(np.arange(-offset*5, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f2.pdf', bbox_inches='tight')
		plt.close()		
		















	# GHA dependence
	if Fig == 3:

		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nominal.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]
		


		gha_edges   = np.array([21, 3, 9, 15, 21])
		gha_centers = np.array([0, 6, 12, 18]) 
	
		rr1 = r[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		wr1 = w[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		pr1 = p[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
	
		rr2 = r[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		wr2 = w[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		pr2 = p[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
	
		rr3 = r[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		wr3 = w[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		pr3 = p[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
	
		rr4 = r[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		wr4 = w[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		pr4 = p[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]

		#rr5 = r[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		#wr5 = w[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		#pr5 = p[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]

		#rr6 = r[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		#wr6 = w[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		#pr6 = p[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]



		# Spectral averaging
		rx1, wx1   = eg.spectral_averaging(rr1, wr1)
		rx2, wx2   = eg.spectral_averaging(rr2, wr2)
		rx3, wx3   = eg.spectral_averaging(rr3, wr3)
		rx4, wx4   = eg.spectral_averaging(rr4, wr4)
		#rx5, wx5   = eg.spectral_averaging(rr5, wr5)
		#rx6, wx6   = eg.spectral_averaging(rr6, wr6)
		

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx1  = eg.RFI_cleaning_spectrum_raw(f, rx1, wx1, Nterms_fg=16, Nsigma=Nsigma)
		wxx2  = eg.RFI_cleaning_spectrum_raw(f, rx2, wx2, Nterms_fg=16, Nsigma=Nsigma)
		wxx3  = eg.RFI_cleaning_spectrum_raw(f, rx3, wx3, Nterms_fg=16, Nsigma=Nsigma)
		wxx4  = eg.RFI_cleaning_spectrum_raw(f, rx4, wx4, Nterms_fg=16, Nsigma=Nsigma)
		#wxx5  = eg.RFI_cleaning_spectrum_raw(f, rx5, wx5, Nterms_fg=16, Nsigma=Nsigma)
		#wxx6  = eg.RFI_cleaning_spectrum_raw(f, rx6, wx6, Nterms_fg=16, Nsigma=Nsigma)
		

		# Spectral binning
		Nsamples = 64
		fb, rb1, wb1  = eg.spectral_binning_number_of_samples(f, rx1, wxx1, nsamples=Nsamples)
		fb, rb2, wb2  = eg.spectral_binning_number_of_samples(f, rx2, wxx2, nsamples=Nsamples)
		fb, rb3, wb3  = eg.spectral_binning_number_of_samples(f, rx3, wxx3, nsamples=Nsamples)
		fb, rb4, wb4  = eg.spectral_binning_number_of_samples(f, rx4, wxx4, nsamples=Nsamples)
		#fb, rb5, wb5  = eg.spectral_binning_number_of_samples(f, rx5, wxx5, nsamples=Nsamples)
		#fb, rb6, wb6  = eg.spectral_binning_number_of_samples(f, rx6, wxx6, nsamples=Nsamples)


		# RMS of binned residuals
		rmsb1  = np.sqrt(np.sum((rb1[wb1>0])**2)/len(fb[wb1>0]))
		rmsb2  = np.sqrt(np.sum((rb2[wb2>0])**2)/len(fb[wb2>0]))
		rmsb3  = np.sqrt(np.sum((rb3[wb3>0])**2)/len(fb[wb3>0]))
		rmsb4  = np.sqrt(np.sum((rb4[wb4>0])**2)/len(fb[wb4>0]))
		#rmsb5  = np.sqrt(np.sum((rb5[wb5>0])**2)/len(fb[wb5>0]))
		#rmsb6  = np.sqrt(np.sum((rb6[wb6>0])**2)/len(fb[wb6>0]))


		# Average model parameters
		px1  = np.mean(pr1,  axis=0)
		px2  = np.mean(pr2,  axis=0)
		px3  = np.mean(pr3,  axis=0)
		px4  = np.mean(pr4,  axis=0)
		#px5  = np.mean(pr5,  axis=0)
		#px6  = np.mean(pr6,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg1  = eg.model_evaluate('EDGES_polynomial', px1, fb/200)
		tfg2  = eg.model_evaluate('EDGES_polynomial', px2, fb/200)
		tfg3  = eg.model_evaluate('EDGES_polynomial', px3, fb/200)
		tfg4  = eg.model_evaluate('EDGES_polynomial', px4, fb/200)
		#tfg5  = eg.model_evaluate('EDGES_polynomial', px5, fb/200)
		#tfg6  = eg.model_evaluate('EDGES_polynomial', px6, fb/200)


		# Binned total temperature
		tb1 = tfg1 + rb1	
		tb2 = tfg2 + rb2
		tb3 = tfg3 + rb3
		tb4 = tfg4 + rb4
		#tb5 = tfg5 + rb5
		#tb6 = tfg6 + rb6
		
		
		
		
		Nfg   = 6
		flow  = 61
		fhigh = 95
		out1 = eg.test_low_band_signature_search(fb, tb1, wb1, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		out2 = eg.test_low_band_signature_search(fb, tb2, wb2, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		out3 = eg.test_low_band_signature_search(fb, tb3, wb3, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		out4 = eg.test_low_band_signature_search(fb, tb4, wb4, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		#out5 = eg.test_low_band_signature_search(fb, tb5, wb5, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		#out6 = eg.test_low_band_signature_search(fb, tb6, wb6, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		
		
		
		

		
		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(out1[0], out1[3] - 0*offset)
		plt.plot(out2[0], out2[3] - 1*offset)
		plt.plot(out3[0], out3[3] - 2*offset)
		plt.plot(out4[0], out4[3] - 3*offset)
		#plt.plot(out5[0], out5[3] - 4*offset)
		#plt.plot(out6[0], out6[3] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out1[4])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out2[4])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out3[4])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out4[4])) + ' mK')
		#plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out5[4])) + ' mK')
		#plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out6[4])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*3, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f3.pdf', bbox_inches='tight')
		plt.close()		
		





		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(out1[0], out1[-6] - 0*offset)
		plt.plot(out2[0], out2[-6] - 1*offset)
		plt.plot(out3[0], out3[-6] - 2*offset)
		plt.plot(out4[0], out4[-6] - 3*offset)
		#plt.plot(out5[0], out5[-6] - 4*offset)
		#plt.plot(out6[0], out6[-6] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out1[-7])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out3[-7])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out4[-7])) + ' mK')
		#plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out5[-7])) + ' mK')
		#plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out6[-7])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*3, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms + signature')
		
		# saving plot
		plt.savefig(home_folder + path + 'f4.pdf', bbox_inches='tight')
		plt.close()




		i_vr = 0
		i_dv = 0
	
		#print(out0[5][i_vr], out0[6][i_dv])
	
		p21_all  = np.zeros(4)
		dp21_all = np.zeros(4)
	
	
		p21_all[0]    = out1[-5]#[i_vr, i_dv]
		dp21_all[0]   = out1[-4]#[i_vr, i_dv]
	
		p21_all[1]    = out2[-5]#[i_vr, i_dv]
		dp21_all[1]   = out2[-4]#[i_vr, i_dv]
	
		p21_all[2]    = out3[-5]#[i_vr, i_dv]
		dp21_all[2]   = out3[-4]#[i_vr, i_dv]
	
		p21_all[3]    = out4[-5]#[i_vr, i_dv]
		dp21_all[3]   = out4[-4]#[i_vr, i_dv]
	
		#p21_all[4]    = out5[7][i_vr, i_dv]
		#dp21_all[4]   = out5[8][i_vr, i_dv]
	
		#p21_all[5]    = out6[7][i_vr, i_dv]
		#dp21_all[5]   = out6[8][i_vr, i_dv]
	
	
		print(out1[-5:-1])
		print(out2[-5:-1])
		print(out3[-5:-1])
		print(out4[-5:-1])
	
	
		t78 = np.zeros(4)
		for i in range(len(fb)-1):
			if (fb[i] <= out1[-3]) and (fb[i+1] > out1[-3]):
				t78[0] = tb1[i]
	
			if (fb[i] <= out2[-3]) and (fb[i+1] > out2[-3]):
				t78[1] = tb2[i]
	
			if (fb[i] <= out3[-3]) and (fb[i+1] > out3[-3]):
				t78[2] = tb3[i]
	
			if (fb[i] <= out4[-3]) and (fb[i+1] > out4[-3]):
				t78[3] = tb4[i]


		xvalues = np.copy(gha_centers) #[0, 4, 8, 12] #, 16, 20]






		fig, ax1 = plt.subplots()
		ax1.errorbar(xvalues, 1000*p21_all, 1000*dp21_all, fmt='o-')
		#plt.plot(xvalues[3], 1000*p21_all[3], '.w', markersize = 7)
	
		ax1.set_xlabel('GHA [hr]')
		ax1.set_ylabel(r'$a_{21}$  [mK]', fontsize=20, color='b')
		ax1.tick_params('y', colors='b')
	
		ax1.set_xlim([-2, 24])
		ax1.set_ylim([0, 1400])
		ax1.set_xticks(xvalues)
	
		ax1.text(xvalues[0]+0.1, 100, r'$\nu_r$ = ' + str(out1[-3]) + ' MHz', fontsize=9)
		ax1.text(xvalues[1]+0.1, 100, r'$\nu_r$ = ' + str(out2[-3]) + ' MHz', fontsize=9)
		ax1.text(xvalues[2]+0.1, 100, r'$\nu_r$ = ' + str(out3[-3]) + ' MHz', fontsize=9)
		ax1.text(xvalues[3]+0.1, 100, r'$\nu_r$ = ' + str(out4[-3]) + ' MHz', fontsize=9)
	
		ax1.text(xvalues[0]+0.1, 60, r'$\Delta\nu$ = ' + str(out1[-2]) + ' MHz', fontsize=9)
		ax1.text(xvalues[1]+0.1, 60, r'$\Delta\nu$ = ' + str(out2[-2]) + ' MHz', fontsize=9)
		ax1.text(xvalues[2]+0.1, 60, r'$\Delta\nu$ = ' + str(out3[-2]) + ' MHz', fontsize=9)
		ax1.text(xvalues[3]+0.1, 60, r'$\Delta\nu$ = ' + str(out4[-2]) + ' MHz', fontsize=9)
	
	
		ax1.grid()
		ax1.set_title(str(Nfg) + ' polynomial terms + signature')	
	
		ax2 = ax1.twinx()
		ax2.plot(xvalues, t78, 'r.-', markersize=15)
		ax2.set_ylabel(r'$T_{\mathrm{sky}}$  [K]', fontsize=20, color='r')	
		ax2.tick_params('y', colors='r')
	
		ax2.set_ylim([0, 5000])
		ax2.set_xlim([-2, 24])
	
	
	
		# saving plot
		plt.savefig(home_folder + path + 'f5.pdf', bbox_inches='tight')
		plt.close()






















	# Nominal total residuals
	if Fig == 6:

		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nominal.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]
		

		GHA_low  = 0
		GHA_high = 24		


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)
		

		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6 
		flow  = 50
		fhigh = 100
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
		
		Nfg   = 6     # 6
		flow  = 61    # 60
		fhigh = 95    # 98
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		


		








		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])
		
		
		f1 = out1[0]
		f2 = out2[0]
		w1 = out1[2]
		w2 = out2[2]
		
		w1[(f1 > 91.8) & (f1 < 92.2)] = 0
		w2[(f2 > 91.8) & (f2 < 92.2)] = 0
		
		plt.plot(out1[0][w1>0],  out1[3][w1>0]  - 0*offset)
		plt.plot(out2[0][w2>0],  out2[3][w2>0]  - 1*offset)
		plt.plot(out2[0][w2>0],  out2[-6][w2>0] - 1.5*offset)
		plt.plot(out2[0][w2>0], -out2[-1][w2>0] - 2*offset)
		
		plt.text(txtoff, -0*offset,   'RMS: ' + str(int(1000*out1[4]))  + ' mK')
		plt.text(txtoff, -1*offset,   'RMS: ' + str(int(1000*out2[4]))  + ' mK')
		plt.text(txtoff, -1.5*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(90, -2*offset-0.15, r'$\tau = $ 7', fontsize=12)
		plt.text(90, -2*offset-0.30, r'$a_{21} = $ ' + str(int(1000*out2[-5])) + r' +/- ' + str(int(1000*out2[-4])) + r' mK', fontsize=12)
		plt.text(90, -2*offset-0.45, r'$\nu_r = $ ' + str(round(out2[-3],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.60, r'$\Delta \nu = $ ' + str(round(out2[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*4, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('0-24 GHA')

		plt.text(52,  0.3,  '6 terms')
		plt.text(52, -0.5,  '6 terms')
		plt.text(52, -0.95, '6 terms' + '\n +' + '\n' +'signature')

		
		# saving plot
		plt.savefig(home_folder + path + 'f6.pdf', bbox_inches='tight')
		plt.close()	
















	# Nominal total residuals
	if Fig == 7:

		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nominal.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]



		GHA_low  = 9
		GHA_high = 15		


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
				
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)
		
		

		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6     
		flow  = 50
		fhigh = 100
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
		
		Nfg   = 6     # 6
		flow  = 61    # 60 
		fhigh = 95    # 98
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		


		








		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])
		
		
		f1 = out1[0]
		f2 = out2[0]
		w1 = out1[2]
		w2 = out2[2]
		
		w1[(f1 > 91.8) & (f1 < 92.2)] = 0
		w2[(f2 > 91.8) & (f2 < 92.2)] = 0
		
		plt.plot(out1[0][w1>0],  out1[3][w1>0]  - 0*offset)
		plt.plot(out2[0][w2>0],  out2[3][w2>0]  - 1*offset)
		plt.plot(out2[0][w2>0],  out2[-6][w2>0] - 1.5*offset)
		plt.plot(out2[0][w2>0], -out2[-1][w2>0] - 2*offset)
		
		plt.text(txtoff, -0*offset,   'RMS: ' + str(int(1000*out1[4]))  + ' mK')
		plt.text(txtoff, -1*offset,   'RMS: ' + str(int(1000*out2[4]))  + ' mK')
		plt.text(txtoff, -1.5*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(90, -2*offset-0.15, r'$\tau = $ 7', fontsize=12)
		plt.text(90, -2*offset-0.30, r'$a_{21} = $ ' + str(int(1000*out2[-5])) + r' +/- ' + str(int(1000*out2[-4])) + r' mK', fontsize=12)
		plt.text(90, -2*offset-0.45, r'$\nu_r = $ ' + str(round(out2[-3],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.60, r'$\Delta \nu = $ ' + str(round(out2[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*4, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('9-15 GHA')
		plt.text(53, 0.2, '6 terms')
		plt.text(52, -0.5, '6 terms')
		plt.text(52, -0.95, '6 terms' + '\n +' + '\n' +'signature')
		
		# saving plot
		plt.savefig(home_folder + path + 'f7.pdf', bbox_inches='tight')
		plt.close()	
















	# ==================================================
	# Not done due to low S/N
	# ==================================================
	# Nominal total residuals
	if Fig == 8:

		

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nominal.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]



		GHA_low  = 9
		GHA_high = 15		


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 4
		flow  = 61
		fhigh = 100
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		


		


		# First third	
		Nspec = int(np.floor(len(rq[:,0])/3))
		rr = rq[(0*Nspec):(1*Nspec), :] 
		wr = wq[(0*Nspec):(1*Nspec), :]
		pr = pq[(0*Nspec):(1*Nspec), :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 53
		fhigh = 100
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		# Second third
		rr = rq[(1*Nspec):(2*Nspec), :] 
		wr = wq[(1*Nspec):(2*Nspec), :]
		pr = pq[(1*Nspec):(2*Nspec), :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 53
		fhigh = 100
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		# Third third
		rr = rq[(2*Nspec)::, :] 
		wr = wq[(2*Nspec)::, :]
		pr = pq[(2*Nspec)::, :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 53
		fhigh = 100
		out3  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		plt.figure(1, figsize=[8,15])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Total Average')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 1 of 3')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 2 of 3')
			
		
		
		
		
		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 3 of 3')		
		
		
		
		
		
		# saving plot
		plt.savefig(home_folder + path + 'f8.pdf', bbox_inches='tight')
		plt.close()	














	# ---------------------------------------------------------------------
	# ---------------------------------------------------------------------
	# This figure not produced for Low-Band 2. Not enough S/N
	# ---------------------------------------------------------------------
	if Fig == 9:


		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')	
		
		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]		


		GHA_low = 6
		GHA_high = 18



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_daytime.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_nighttime.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		
		
		

		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_moon_up.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
			
		
		
		
		
		
		
		
		
		

		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_moon_down.hdf5')		

		r = ry[my[:,1] != 286, :]
		w = wy[my[:,1] != 286, :]
		p = py[my[:,1] != 286, :]
		m = my[my[:,1] != 286, :]
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 60
		fhigh = 98
		out4   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,20,0.2))
		
		
		
		
		
		
		
		
		
		
		

		plt.figure(1, figsize=[8,19])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 98
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(5,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Total Average')
		
		
		
		
		plt.subplot(5,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Daytime Only')
		
		
		
		
		plt.subplot(5,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nighttime Only')
			
		
		
		
		
		plt.subplot(5,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Moon Up Only')		
		
		
		
	
	
		
		plt.subplot(5,1,5)
				
		outX = np.copy(out4)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([60, 112])
		plt.ylim([-offset*4, 0.5*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Moon Down Only')		
	
	
		
		
		
		
		
		# saving plot
		plt.savefig(home_folder + path + 'f9.pdf', bbox_inches='tight')
		plt.close()	




		
		
		
		
		
		
		
		
		
		
		
		
	
	if Fig == 10:


		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nominal.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]


		GHA_low  = 9
		GHA_high = 15



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 61
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		










		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_23.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]

		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 61
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		







		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_27.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg    = 6
		flow   = 61
		fhigh  = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		
		
		
		
		
		
		


		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nfit7_wfit7.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 61
		fhigh = 95
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))




		
		

		plt.figure(1, figsize=[8,15])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title(r'Calibration 2017, Nfit6 - Wfit5, Receiver at $23^{\circ}$C')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title(r'Calibration 2017, Nfit6 - Wfit5, Receiver at $27^{\circ}$C')
			
		
		
		

		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Calibration 2017, Nfit7 - Wfit7, Receiver at $25^{\circ}$C')
			
		
		
		
				
		
		# saving plot
		plt.savefig(home_folder + path + 'f10.pdf', bbox_inches='tight')
		plt.close()	



		
		
		
		
			
		
		

	
	if Fig == 11:


		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nominal.hdf5')		

		#r = ry[my[:,1] != 286, :]
		#w = wy[my[:,1] != 286, :]
		#p = py[my[:,1] != 286, :]
		#m = my[my[:,1] != 286, :]
		
		
		
		GHA_low  = 9
		GHA_high = 15

		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 61
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		










		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_152_1.hdf5')		

		#r = ry[my[:,1] != 286, :]
		#w = wy[my[:,1] != 286, :]
		#p = py[my[:,1] != 286, :]
		#m = my[my[:,1] != 286, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 61
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		







		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_152_2.hdf5')		

		#r = ry[my[:,1] != 286, :]
		#w = wy[my[:,1] != 286, :]
		#p = py[my[:,1] != 286, :]
		#m = my[my[:,1] != 286, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 61
		fhigh = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		
		
		
		
		
		
		


		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_153_2.hdf5')		

		#r = ry[my[:,1] != 286, :]
		#w = wy[my[:,1] != 286, :]
		#p = py[my[:,1] != 286, :]
		#m = my[my[:,1] != 286, :]
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 61
		fhigh = 95
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		






	



		

		plt.figure(1, figsize=[8,13])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2017-152-1')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2017-152-2')
			
		
		



		
		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Antenna S11 2017-153-2')
			
		





		
		# saving plot
		plt.savefig(home_folder + path + 'f11.pdf', bbox_inches='tight')
		plt.close()	












	
	if Fig == 12:


		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nominal.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]
		


		GHA_low  = 9
		GHA_high = 15



		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 61
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		










		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_no_gl.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]
		
		


		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 61
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		







		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_no_bc.hdf5')
		
		#rms_thres = 0.230
		#days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		#r = ry[np.in1d(my[:,1],days) == False, :]
		#w = wy[np.in1d(my[:,1],days) == False, :]
		#p = py[np.in1d(my[:,1],days) == False, :]
		#m = my[np.in1d(my[:,1],days) == False, :]
		
		
		
		
		
		# Full average
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6
		flow  = 61
		fhigh = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		
		
		
		
		
		
		







		
		

		plt.figure(1, figsize=[8,11])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(3,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(3,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('No Ground Loss Correction')
		
		
		
		
		plt.subplot(3,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('No Beam Correction')
			
		
		
		

		
		
		# saving plot
		plt.savefig(home_folder + path + 'f12.pdf', bbox_inches='tight')
		plt.close()	








	if Fig == 0:
		
		
		c = np.zeros((9, 2))
		
		c[0, :] = [434, 103]       # Nominal
		c[1, :] = [433, 106]       # 23 degC 
		c[2, :] = [402, 103]       # 27 degC
		c[3, :] = [428, 105]       # nfit7, wfit7 (25 degC)
		c[4, :] = [353, 96]        # ant S11 152-1
		c[5, :] = [376, 100]       # ant S11 152-2
		c[6, :] = [398, 103]       # ant S11 153-2
		c[7, :] = [405, 99]        # No ground loss
		c[8, :] = [369, 100]       # No beam correction 

		
		
		
		plt.figure(1, figsize=[10,6])

		plt.errorbar(np.arange(0, 9), c[:,0], c[:,1], fmt='o-')
		plt.xlim([-0.5, 8.5])
		plt.ylim([0, 600])
		plt.xticks(np.arange(0, 9))
		plt.xlabel('case number')
		plt.ylabel(r'$a_{21}$ [mK]', fontsize=16)
		plt.grid()

		# saving plot
		plt.savefig(home_folder + path + 'f0.pdf', bbox_inches='tight')
		plt.close()	
	


	return 0























def low_band2_analysis_EW_with_NO_shield(Fig):


	"""
	2017-08-28

	"""





	plt.close()
	plt.close()
	plt.close()
	plt.close()
	
	path = '/DATA/EDGES/results/plots/20170829/'



	# Daily residuals
	if Fig == 1:

		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_nominal.hdf5')
		
		rms_thres = 0.285
		rb_dx2 = rb_dx[rmsb_dx[:,0] <= rms_thres, :]
		wb_dx2 = wb_dx[rmsb_dx[:,0] <= rms_thres, :]
		mb_dx2 = mb_dx[rmsb_dx[:,0] <= rms_thres, :]
		
		rb_d = rb_dx2[(mb_dx2[:,1]<186) | (mb_dx2[:,1]>198),:]
		wb_d = wb_dx2[(mb_dx2[:,1]<186) | (mb_dx2[:,1]>198),:]
		mb_d = mb_dx2[(mb_dx2[:,1]<186) | (mb_dx2[:,1]>198),:]
		
		o = eg.plot_spectra_residuals(fb, rb_d, wb_d, 'season', mb_d[:,1], K=1, flow_lim=48, fhigh_lim=112, xticks_low=50, xticks_high=100, xticks_delta=10, rms_text_freq=100.5, fontsize=10, size_x_column=5.5, size_y=8, NSC=21, y_label='day of year 2017 [1 K per division]', plot_name='daily_low_band2_EW_with_NO_shield_nominal')




	# GHA dependence
	if Fig == 2:

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_nominal.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		

		gha_edges   = np.array([22, 2, 6, 10, 14, 18, 22])
		gha_centers = np.array([0, 4, 8, 12, 16, 20]) 
	
		rr1 = r[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		wr1 = w[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		pr1 = p[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
	
		rr2 = r[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		wr2 = w[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		pr2 = p[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
	
		rr3 = r[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		wr3 = w[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		pr3 = p[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
	
		rr4 = r[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		wr4 = w[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		pr4 = p[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]

		rr5 = r[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		wr5 = w[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		pr5 = p[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]

		rr6 = r[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		wr6 = w[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		pr6 = p[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]



		# Spectral averaging
		rx1, wx1   = eg.spectral_averaging(rr1, wr1)
		rx2, wx2   = eg.spectral_averaging(rr2, wr2)
		rx3, wx3   = eg.spectral_averaging(rr3, wr3)
		rx4, wx4   = eg.spectral_averaging(rr4, wr4)
		rx5, wx5   = eg.spectral_averaging(rr5, wr5)
		rx6, wx6   = eg.spectral_averaging(rr6, wr6)
		

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx1  = eg.RFI_cleaning_spectrum_raw(f, rx1, wx1, Nterms_fg=16, Nsigma=Nsigma)
		wxx2  = eg.RFI_cleaning_spectrum_raw(f, rx2, wx2, Nterms_fg=16, Nsigma=Nsigma)
		wxx3  = eg.RFI_cleaning_spectrum_raw(f, rx3, wx3, Nterms_fg=16, Nsigma=Nsigma)
		wxx4  = eg.RFI_cleaning_spectrum_raw(f, rx4, wx4, Nterms_fg=16, Nsigma=Nsigma)
		wxx5  = eg.RFI_cleaning_spectrum_raw(f, rx5, wx5, Nterms_fg=16, Nsigma=Nsigma)
		wxx6  = eg.RFI_cleaning_spectrum_raw(f, rx6, wx6, Nterms_fg=16, Nsigma=Nsigma)
		

		# Spectral binning
		Nsamples = 64
		fb, rb1, wb1  = eg.spectral_binning_number_of_samples(f, rx1, wxx1, nsamples=Nsamples)
		fb, rb2, wb2  = eg.spectral_binning_number_of_samples(f, rx2, wxx2, nsamples=Nsamples)
		fb, rb3, wb3  = eg.spectral_binning_number_of_samples(f, rx3, wxx3, nsamples=Nsamples)
		fb, rb4, wb4  = eg.spectral_binning_number_of_samples(f, rx4, wxx4, nsamples=Nsamples)
		fb, rb5, wb5  = eg.spectral_binning_number_of_samples(f, rx5, wxx5, nsamples=Nsamples)
		fb, rb6, wb6  = eg.spectral_binning_number_of_samples(f, rx6, wxx6, nsamples=Nsamples)


		# RMS of binned residuals
		rmsb1  = np.sqrt(np.sum((rb1[wb1>0])**2)/len(fb[wb1>0]))
		rmsb2  = np.sqrt(np.sum((rb2[wb2>0])**2)/len(fb[wb2>0]))
		rmsb3  = np.sqrt(np.sum((rb3[wb3>0])**2)/len(fb[wb3>0]))
		rmsb4  = np.sqrt(np.sum((rb4[wb4>0])**2)/len(fb[wb4>0]))
		rmsb5  = np.sqrt(np.sum((rb5[wb5>0])**2)/len(fb[wb5>0]))
		rmsb6  = np.sqrt(np.sum((rb6[wb6>0])**2)/len(fb[wb6>0]))


		# Average model parameters
		px1  = np.mean(pr1,  axis=0)
		px2  = np.mean(pr2,  axis=0)
		px3  = np.mean(pr3,  axis=0)
		px4  = np.mean(pr4,  axis=0)
		px5  = np.mean(pr5,  axis=0)
		px6  = np.mean(pr6,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg1  = eg.model_evaluate('EDGES_polynomial', px1, fb/200)
		tfg2  = eg.model_evaluate('EDGES_polynomial', px2, fb/200)
		tfg3  = eg.model_evaluate('EDGES_polynomial', px3, fb/200)
		tfg4  = eg.model_evaluate('EDGES_polynomial', px4, fb/200)
		tfg5  = eg.model_evaluate('EDGES_polynomial', px5, fb/200)
		tfg6  = eg.model_evaluate('EDGES_polynomial', px6, fb/200)


		# Binned total temperature
		tb1 = tfg1 + rb1	
		tb2 = tfg2 + rb2
		tb3 = tfg3 + rb3
		tb4 = tfg4 + rb4
		tb5 = tfg5 + rb5
		tb6 = tfg6 + rb6
		
		
		
		
		Nfg   = 7
		flow  = 50
		fhigh = 100
		out1 = eg.test_low_band_signature_search(fb, tb1, wb1, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out2 = eg.test_low_band_signature_search(fb, tb2, wb2, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out3 = eg.test_low_band_signature_search(fb, tb3, wb3, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out4 = eg.test_low_band_signature_search(fb, tb4, wb4, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out5 = eg.test_low_band_signature_search(fb, tb5, wb5, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		out6 = eg.test_low_band_signature_search(fb, tb6, wb6, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		
		
		
		

		
		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(fb, out1[3] - 0*offset)
		plt.plot(fb, out2[3] - 1*offset)
		plt.plot(fb, out3[3] - 2*offset)
		plt.plot(fb, out4[3] - 3*offset)
		plt.plot(fb, out5[3] - 4*offset)
		plt.plot(fb, out6[3] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out1[4])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out2[4])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out3[4])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out4[4])) + ' mK')
		plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out5[4])) + ' mK')
		plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out6[4])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*6, offset])
		plt.yticks(np.arange(-offset*5, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f2.pdf', bbox_inches='tight')
		plt.close()		
		










	# GHA dependence
	if Fig == 3:

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_nominal.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]


		gha_edges   = np.array([21, 3, 9, 15, 21])
		gha_centers = np.array([0, 6, 12, 18]) 
	
		rr1 = r[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		wr1 = w[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
		pr1 = p[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
	
		rr2 = r[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		wr2 = w[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
		pr2 = p[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
	
		rr3 = r[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		wr3 = w[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
		pr3 = p[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
	
		rr4 = r[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		wr4 = w[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]
		pr4 = p[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[4]), :]

		#rr5 = r[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		#wr5 = w[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]
		#pr5 = p[(m[:,3] >= gha_edges[4]) & (m[:,3] < gha_edges[5]), :]

		#rr6 = r[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		#wr6 = w[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]
		#pr6 = p[(m[:,3] >= gha_edges[5]) & (m[:,3] < gha_edges[6]), :]



		# Spectral averaging
		rx1, wx1   = eg.spectral_averaging(rr1, wr1)
		rx2, wx2   = eg.spectral_averaging(rr2, wr2)
		rx3, wx3   = eg.spectral_averaging(rr3, wr3)
		rx4, wx4   = eg.spectral_averaging(rr4, wr4)
		#rx5, wx5   = eg.spectral_averaging(rr5, wr5)
		#rx6, wx6   = eg.spectral_averaging(rr6, wr6)
		

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx1  = eg.RFI_cleaning_spectrum_raw(f, rx1, wx1, Nterms_fg=16, Nsigma=Nsigma)
		wxx2  = eg.RFI_cleaning_spectrum_raw(f, rx2, wx2, Nterms_fg=16, Nsigma=Nsigma)
		wxx3  = eg.RFI_cleaning_spectrum_raw(f, rx3, wx3, Nterms_fg=16, Nsigma=Nsigma)
		wxx4  = eg.RFI_cleaning_spectrum_raw(f, rx4, wx4, Nterms_fg=16, Nsigma=Nsigma)
		#wxx5  = eg.RFI_cleaning_spectrum_raw(f, rx5, wx5, Nterms_fg=16, Nsigma=Nsigma)
		#wxx6  = eg.RFI_cleaning_spectrum_raw(f, rx6, wx6, Nterms_fg=16, Nsigma=Nsigma)
		

		# Spectral binning
		Nsamples = 64
		fb, rb1, wb1  = eg.spectral_binning_number_of_samples(f, rx1, wxx1, nsamples=Nsamples)
		fb, rb2, wb2  = eg.spectral_binning_number_of_samples(f, rx2, wxx2, nsamples=Nsamples)
		fb, rb3, wb3  = eg.spectral_binning_number_of_samples(f, rx3, wxx3, nsamples=Nsamples)
		fb, rb4, wb4  = eg.spectral_binning_number_of_samples(f, rx4, wxx4, nsamples=Nsamples)
		#fb, rb5, wb5  = eg.spectral_binning_number_of_samples(f, rx5, wxx5, nsamples=Nsamples)
		#fb, rb6, wb6  = eg.spectral_binning_number_of_samples(f, rx6, wxx6, nsamples=Nsamples)


		# RMS of binned residuals
		rmsb1  = np.sqrt(np.sum((rb1[wb1>0])**2)/len(fb[wb1>0]))
		rmsb2  = np.sqrt(np.sum((rb2[wb2>0])**2)/len(fb[wb2>0]))
		rmsb3  = np.sqrt(np.sum((rb3[wb3>0])**2)/len(fb[wb3>0]))
		rmsb4  = np.sqrt(np.sum((rb4[wb4>0])**2)/len(fb[wb4>0]))
		#rmsb5  = np.sqrt(np.sum((rb5[wb5>0])**2)/len(fb[wb5>0]))
		#rmsb6  = np.sqrt(np.sum((rb6[wb6>0])**2)/len(fb[wb6>0]))


		# Average model parameters
		px1  = np.mean(pr1,  axis=0)
		px2  = np.mean(pr2,  axis=0)
		px3  = np.mean(pr3,  axis=0)
		px4  = np.mean(pr4,  axis=0)
		#px5  = np.mean(pr5,  axis=0)
		#px6  = np.mean(pr6,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg1  = eg.model_evaluate('EDGES_polynomial', px1, fb/200)
		tfg2  = eg.model_evaluate('EDGES_polynomial', px2, fb/200)
		tfg3  = eg.model_evaluate('EDGES_polynomial', px3, fb/200)
		tfg4  = eg.model_evaluate('EDGES_polynomial', px4, fb/200)
		#tfg5  = eg.model_evaluate('EDGES_polynomial', px5, fb/200)
		#tfg6  = eg.model_evaluate('EDGES_polynomial', px6, fb/200)


		# Binned total temperature
		tb1 = tfg1 + rb1	
		tb2 = tfg2 + rb2
		tb3 = tfg3 + rb3
		tb4 = tfg4 + rb4
		#tb5 = tfg5 + rb5
		#tb6 = tfg6 + rb6
		
		
		
		
		Nfg   = 6
		flow  = 61
		fhigh = 95
		out1 = eg.test_low_band_signature_search(fb, tb1, wb1, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(72,80,0.2), dv_array=np.arange(15,25,0.2))
		out2 = eg.test_low_band_signature_search(fb, tb2, wb2, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(72,80,0.2), dv_array=np.arange(15,25,0.2))
		out3 = eg.test_low_band_signature_search(fb, tb3, wb3, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(72,80,0.2), dv_array=np.arange(15,25,0.2))
		out4 = eg.test_low_band_signature_search(fb, tb4, wb4, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(72,80,0.2), dv_array=np.arange(15,25,0.2))
		#out5 = eg.test_low_band_signature_search(fb, tb5, wb5, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		#out6 = eg.test_low_band_signature_search(fb, tb6, wb6, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18]))
		
		
		
		

		
		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(out1[0], out1[3] - 0*offset)
		plt.plot(out2[0], out2[3] - 1*offset)
		plt.plot(out3[0], out3[3] - 2*offset)
		plt.plot(out4[0], out4[3] - 3*offset)
		#plt.plot(out5[0], out5[3] - 4*offset)
		#plt.plot(out6[0], out6[3] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out1[4])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out2[4])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out3[4])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out4[4])) + ' mK')
		#plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out5[4])) + ' mK')
		#plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out6[4])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*3, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms')
		
		# saving plot
		plt.savefig(home_folder + path + 'f3.pdf', bbox_inches='tight')
		plt.close()		
		





		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(np.flipud(gha_centers))
		
		plt.plot(out1[0], out1[-6] - 0*offset)
		plt.plot(out2[0], out2[-6] - 1*offset)
		plt.plot(out3[0], out3[-6] - 2*offset)
		plt.plot(out4[0], out4[-6] - 3*offset)
		#plt.plot(out5[0], out5[-6] - 4*offset)
		#plt.plot(out6[0], out6[-6] - 5*offset)	
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*out1[-7])) + ' mK')
		plt.text(txtoff, -1*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(txtoff, -2*offset, 'RMS: ' + str(int(1000*out3[-7])) + ' mK')
		plt.text(txtoff, -3*offset, 'RMS: ' + str(int(1000*out4[-7])) + ' mK')
		#plt.text(txtoff, -4*offset, 'RMS: ' + str(int(1000*out5[-7])) + ' mK')
		#plt.text(txtoff, -5*offset, 'RMS: ' + str(int(1000*out6[-7])) + ' mK')
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*3, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('GHA [' + str(offset) + ' K per division]')
		plt.title(str(Nfg) + ' polynomial terms + signature')
		
		# saving plot
		plt.savefig(home_folder + path + 'f4.pdf', bbox_inches='tight')
		plt.close()




		i_vr = 0
		i_dv = 0
	
		#print(out0[5][i_vr], out0[6][i_dv])
	
		p21_all  = np.zeros(4)
		dp21_all = np.zeros(4)
	
	
		p21_all[0]    = out1[-5]#[i_vr, i_dv]
		dp21_all[0]   = out1[-4]#[i_vr, i_dv]
	
		p21_all[1]    = out2[-5]#[i_vr, i_dv]
		dp21_all[1]   = out2[-4]#[i_vr, i_dv]
	
		p21_all[2]    = out3[-5]#[i_vr, i_dv]
		dp21_all[2]   = out3[-4]#[i_vr, i_dv]
	
		p21_all[3]    = out4[-5]#[i_vr, i_dv]
		dp21_all[3]   = out4[-4]#[i_vr, i_dv]
	
		#p21_all[4]    = out5[7][i_vr, i_dv]
		#dp21_all[4]   = out5[8][i_vr, i_dv]
	
		#p21_all[5]    = out6[7][i_vr, i_dv]
		#dp21_all[5]   = out6[8][i_vr, i_dv]
	
	
		print(out1[-5:-1])
		print(out2[-5:-1])
		print(out3[-5:-1])
		print(out4[-5:-1])
	
	
		t78 = np.zeros(4)
		for i in range(len(fb)-1):
			if (fb[i] <= out1[-3]) and (fb[i+1] > out1[-3]):
				t78[0] = tb1[i]
	
			if (fb[i] <= out2[-3]) and (fb[i+1] > out2[-3]):
				t78[1] = tb2[i]
	
			if (fb[i] <= out3[-3]) and (fb[i+1] > out3[-3]):
				t78[2] = tb3[i]
	
			if (fb[i] <= out4[-3]) and (fb[i+1] > out4[-3]):
				t78[3] = tb4[i]
	
	
		xvalues = np.copy(gha_centers) #[0, 4, 8, 12] #, 16, 20]
	
	
	
	
	
	
		fig, ax1 = plt.subplots()
		ax1.errorbar(xvalues, 1000*p21_all, 1000*dp21_all, fmt='o-')
		#plt.plot(xvalues[3], 1000*p21_all[3], '.w', markersize = 7)
	
		ax1.set_xlabel('GHA [hr]')
		ax1.set_ylabel(r'$a_{21}$  [mK]', fontsize=20, color='b')
		ax1.tick_params('y', colors='b')
	
		ax1.set_xlim([-2, 24])
		ax1.set_ylim([0, 1400])
		ax1.set_xticks(xvalues)
	
		ax1.text(xvalues[0]+0.1, 100, r'$\nu_r$ = ' + str(out1[-3]) + ' MHz', fontsize=9)
		ax1.text(xvalues[1]+0.1, 100, r'$\nu_r$ = ' + str(out2[-3]) + ' MHz', fontsize=9)
		ax1.text(xvalues[2]+0.1, 100, r'$\nu_r$ = ' + str(out3[-3]) + ' MHz', fontsize=9)
		ax1.text(xvalues[3]+0.1, 100, r'$\nu_r$ = ' + str(out4[-3]) + ' MHz', fontsize=9)
	
		ax1.text(xvalues[0]+0.1, 60, r'$\Delta\nu$ = ' + str(out1[-2]) + ' MHz', fontsize=9)
		ax1.text(xvalues[1]+0.1, 60, r'$\Delta\nu$ = ' + str(out2[-2]) + ' MHz', fontsize=9)
		ax1.text(xvalues[2]+0.1, 60, r'$\Delta\nu$ = ' + str(out3[-2]) + ' MHz', fontsize=9)
		ax1.text(xvalues[3]+0.1, 60, r'$\Delta\nu$ = ' + str(out4[-2]) + ' MHz', fontsize=9)
	
	
		ax1.grid()
		ax1.set_title(str(Nfg) + ' polynomial terms + signature')	
	
		ax2 = ax1.twinx()
		ax2.plot(xvalues, t78, 'r.-', markersize=15)
		ax2.set_ylabel(r'$T_{\mathrm{sky}}$  [K]', fontsize=20, color='r')	
		ax2.tick_params('y', colors='r')
	
		ax2.set_ylim([0, 5000])
		ax2.set_xlim([-2, 24])
	
	
	
		# saving plot
		plt.savefig(home_folder + path + 'f5.pdf', bbox_inches='tight')
		plt.close()	









	# Nominal total residuals
	if Fig == 6:

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_nominal.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]

		

		GHA_low  = 0
		GHA_high = 24		


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)
		

		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6 
		flow  = 50
		fhigh = 100
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
		
		Nfg   = 5     # 6
		flow  = 61    # 60
		fhigh = 95    # 98
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,24,0.2))
		


		








		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])
		
		
		f1 = out1[0]
		f2 = out2[0]
		w1 = out1[2]
		w2 = out2[2]
		
		w1[(f1 > 91.8) & (f1 < 92.2)] = 0
		w2[(f2 > 91.8) & (f2 < 92.2)] = 0
		
		plt.plot(out1[0][w1>0],  out1[3][w1>0]  - 0*offset)
		plt.plot(out2[0][w2>0],  out2[3][w2>0]  - 1*offset)
		plt.plot(out2[0][w2>0],  out2[-6][w2>0] - 1.5*offset)
		plt.plot(out2[0][w2>0], -out2[-1][w2>0] - 2*offset)
		
		plt.text(txtoff, -0*offset,   'RMS: ' + str(int(1000*out1[4]))  + ' mK')
		plt.text(txtoff, -1*offset,   'RMS: ' + str(int(1000*out2[4]))  + ' mK')
		plt.text(txtoff, -1.5*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(90, -2*offset-0.15, r'$\tau = $ 7', fontsize=12)
		plt.text(90, -2*offset-0.30, r'$a_{21} = $ ' + str(int(1000*out2[-5])) + r' +/- ' + str(int(1000*out2[-4])) + r' mK', fontsize=12)
		plt.text(90, -2*offset-0.45, r'$\nu_r = $ ' + str(round(out2[-3],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.60, r'$\Delta \nu = $ ' + str(round(out2[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*4, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('0-24 GHA')

		plt.text(52,  0.3,  '6 terms')
		plt.text(52, -0.5,  '5 terms')
		plt.text(52, -0.95, '5 terms' + '\n +' + '\n' +'signature')

		
		# saving plot
		plt.savefig(home_folder + path + 'f6.pdf', bbox_inches='tight')
		plt.close()	
















	# Nominal total residuals
	if Fig == 7:

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_nominal.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]




		GHA_low  = 0 #22
		GHA_high = 16	


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
				
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)
		
		

		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 6     
		flow  = 50
		fhigh = 100
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]))
		
		Nfg   = 5     # 5
		flow  = 61    # 60 
		fhigh = 95    # 98
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,28,0.2))
		


		








		plt.figure()
		
		offset  = 0.5
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])
		
		
		f1 = out1[0]
		f2 = out2[0]
		w1 = out1[2]
		w2 = out2[2]
		
		w1[(f1 > 91.8) & (f1 < 92.2)] = 0
		w2[(f2 > 91.8) & (f2 < 92.2)] = 0
		
		plt.plot(out1[0][w1>0],  out1[3][w1>0]  - 0*offset)
		plt.plot(out2[0][w2>0],  out2[3][w2>0]  - 1*offset)
		plt.plot(out2[0][w2>0],  out2[-6][w2>0] - 1.5*offset)
		plt.plot(out2[0][w2>0], -out2[-1][w2>0] - 2*offset)
		
		plt.text(txtoff, -0*offset,   'RMS: ' + str(int(1000*out1[4]))  + ' mK')
		plt.text(txtoff, -1*offset,   'RMS: ' + str(int(1000*out2[4]))  + ' mK')
		plt.text(txtoff, -1.5*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(90, -2*offset-0.15, r'$\tau = $ 7', fontsize=12)
		plt.text(90, -2*offset-0.30, r'$a_{21} = $ ' + str(int(1000*out2[-5])) + r' +/- ' + str(int(1000*out2[-4])) + r' mK', fontsize=12)
		plt.text(90, -2*offset-0.45, r'$\nu_r = $ ' + str(round(out2[-3],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.60, r'$\Delta \nu = $ ' + str(round(out2[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([48, 112])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*4, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('0-16 GHA')
		plt.text(53, 0.2, '6 terms')
		plt.text(52, -0.5, '5 terms')
		plt.text(52, -0.95, '5 terms' + '\n +' + '\n' +'signature')
		
		# saving plot
		plt.savefig(home_folder + path + 'f7.pdf', bbox_inches='tight')
		plt.close()	













	# Nominal total residuals
	if Fig == 8:

		

		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_nominal.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]


		GHA_low  = 0
		GHA_high = 16	


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
	
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		


		


		# First third	
		Nspec = int(np.floor(len(rq[:,0])/3))
		rr = rq[(0*Nspec):(1*Nspec), :] 
		wr = wq[(0*Nspec):(1*Nspec), :]
		pr = pq[(0*Nspec):(1*Nspec), :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		







		# Second third
		rr = rq[(1*Nspec):(2*Nspec), :] 
		wr = wq[(1*Nspec):(2*Nspec), :]
		pr = pq[(1*Nspec):(2*Nspec), :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		







		# Third third
		rr = rq[(2*Nspec)::, :] 
		wr = wq[(2*Nspec)::, :]
		pr = pq[(2*Nspec)::, :] 
		
		
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out3  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,25,0.2))
		










		plt.figure(1, figsize=[8,15])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Total Average')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 1 of 3')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 2 of 3')
			
		
		
		
		
		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Subset 3 of 3')		
		
		
		
		
		
		# saving plot
		plt.savefig(home_folder + path + 'f8.pdf', bbox_inches='tight')
		plt.close()	


















	
	if Fig == 10:


		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_nominal.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]




		GHA_low  = 0
		GHA_high = 16	


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,26,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_23.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]




		GHA_low  = 0
		GHA_high = 16	


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,26,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_27.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]




		GHA_low  = 0
		GHA_high = 16	


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg    = 5
		flow   = 61
		fhigh  = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,26,0.2))
		
		
		
		
		
		
		


		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_nfit7_wfit7.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]




		GHA_low  = 0
		GHA_high = 16	


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out3   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,26,0.2))




		
		

		plt.figure(1, figsize=[8,15])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(4,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(4,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title(r'Calibration 2017, Nfit6 - Wfit5, Receiver at $23^{\circ}$C')
		
		
		
		
		plt.subplot(4,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title(r'Calibration 2017, Nfit6 - Wfit5, Receiver at $27^{\circ}$C')
			
		
		
		

		plt.subplot(4,1,4)
				
		outX = np.copy(out3)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Calibration 2017, Nfit7 - Wfit7, Receiver at $25^{\circ}$C')
			
		
		
		
				
		
		# saving plot
		plt.savefig(home_folder + path + 'f10_6terms.pdf', bbox_inches='tight')
		plt.close()	



		
		
		
		
			
		
		



	
	
	

	
	if Fig == 12:


		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_nominal.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]




		GHA_low  = 0
		GHA_high = 16	


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,22,0.2))
		










		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_no_gl.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]




		GHA_low  = 0
		GHA_high = 16	


		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out1   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,22,0.2))
		







		f, ty, ry, wy, py, my, rmsy, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/arlstorage/home/faculty/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_no_bc.hdf5')
		
		rms_thres = 0.285
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
		
		r = ry[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		w = wy[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		p = py[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]
		m = my[(np.in1d(my[:,1], days) == False) & ((my[:,1]<186) | (my[:,1]>198)), :]

		GHA_low  = 0
		GHA_high = 16	

		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		
		
		
		
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)


		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)

		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)

		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


		# Average model parameters
		px  = np.mean(pr,  axis=0)


		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)


		# Binned total temperature
		tb_low  = tfg_low + rb_low		


		Nfg   = 5
		flow  = 61
		fhigh = 95
		out2   = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', vr_array=np.arange(75,80,0.2), dv_array=np.arange(15,22,0.2))
		
		
		
		
		
		
		







		
		

		plt.figure(1, figsize=[8,11])
				
		f = out[0]
		w = out[2]		
		w[(f > 91.8) & (f < 92.2)] = 0
		
		offset  = 0.2
		txtoff  = 100
		ylabels = np.array(['', '', '', '', ''])		





		plt.subplot(3,1,1)
		
		outX = np.copy(out)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('Nominal')
		
		
		
		
		plt.subplot(3,1,2)
				
		outX = np.copy(out1)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		#plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('No Ground Loss Correction')
		
		
		
		
		plt.subplot(3,1,3)
				
		outX = np.copy(out2)
								
		plt.plot(outX[0][w>0],  outX[3][w>0]  - 0*offset)
		plt.plot(outX[0][w>0],  outX[-6][w>0] - 0.7*offset)
		plt.plot(outX[0][w>0], -outX[-1][w>0] - 1*offset)
		
		plt.text(txtoff, -0*offset, 'RMS: ' + str(int(1000*outX[4]))  + ' mK')
		plt.text(txtoff, -0.7*offset, 'RMS: ' + str(int(1000*outX[-7])) + ' mK')
		
		plt.text(txtoff, -1.5*offset-0.0, r'$\tau = $ 7', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.1, r'$a_{21} = $ ' + str(int(1000*outX[-5])) + r' +/- ' + str(int(1000*outX[-4])) + r' mK', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.2, r'$\nu_r = $ ' + str(round(outX[-3],1)) + r' MHz', fontsize=12)
		plt.text(txtoff, -1.5*offset-0.3, r'$\Delta \nu = $ ' + str(round(outX[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([50, 120])
		plt.ylim([-offset*4, 1*offset])
		plt.yticks(np.arange(-offset*4, 0.01, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('No Beam Correction')
			
		
		
		

		
		
		# saving plot
		plt.savefig(home_folder + path + 'f12_6terms.pdf', bbox_inches='tight')
		plt.close()	








	if Fig == 0:
		
		
		c = np.zeros((9, 2))
		
		c[0, :] = [478, 36]       # Nominal
		c[1, :] = [345, 59]       # Subset 1
		c[2, :] = [585, 69]       # Subset 2 
		c[3, :] = [589, 68]       # Subset 3
		c[4, :] = [516, 37]       # 23 degC 
		c[5, :] = [475, 39]       # 27 degC
		c[6, :] = [515, 38]       # nfit7, wfit7 (25 degC)
		c[7, :] = [486, 36]       # No ground loss
		c[8, :] = [485, 38]       # No beam correction 

		
		
		
		plt.figure(1, figsize=[10,6])

		plt.errorbar(np.arange(0, 9), c[:,0], c[:,1], fmt='o-')
		plt.xlim([-0.5, 8.5])
		plt.ylim([0, 600])
		plt.xticks(np.arange(0, 9))
		plt.xlabel('case number')
		plt.ylabel(r'$a_{21}$ [mK]', fontsize=16)
		plt.grid()

		# saving plot
		plt.savefig(home_folder + path + 'f0.pdf', bbox_inches='tight')
		plt.close()	
	



	
	
	return 0
	












def test_log_log(fbin, tbin, flow, fhigh, Nfg, fr, df):
	
	fb = fbin[(fbin>=flow) & (fbin <=fhigh)]
	tb = tbin[(fbin>=flow) & (fbin <=fhigh)]



	X   = eg.model_eor(fb, T21 = -0.5, model_type='gaussian_flattened_1', fr=fr, df=df, tau0=7 )
	m21 = X[0]
	
	
	tfg     = tb - m21	
	par     = np.polyfit( np.log10(fb),   np.log10(tfg),   Nfg-1)
	log_mfg = np.polyval( par,            np.log10(fb) )	
	mfg     = 10**log_mfg
	
	

	par     = np.polyfit( np.log10(fb),   np.log10(tb),   Nfg-1)
	log_mb  = np.polyval( par,            np.log10(fb) )	
	mb      = 10**log_mb
	
	plt.plot(fb, tb  - mb)
	#plt.plot(fb, tfg - mfg)
	
	
	
		
	return 0  #fb, tfg, mfg






















def low_band1_analysis_extended_ground_plane_50_120MHz(Fig):


	"""
	2017-09-03

	"""



	plt.close()
	plt.close()
	plt.close()
	plt.close()
	
	path = '/DATA/EDGES/results/plots/20170903/'
	
	
	

	# Daily residuals
	if Fig == 1:

		f, t, r, w, p, m, rms, fb, tb_dx, rb_dx, wb_dx, pb_dx, mb_dx, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2017_172_50_120MHz.hdf5')
		
		o = eg.plot_spectra_residuals(fb, rb_dx, wb_dx, 'season', mb_dx[:,1], K=1, flow_lim=48, fhigh_lim=134, xticks_low=50, xticks_high=120, xticks_delta=10, rms_text_freq=120.5, fontsize=10, size_x_column=5.5, size_y=5, NSC=19, y_label='day of year 2017 [1 K per division]', plot_name='daily_low_band1_extended_50_120MHz_nominal')

	
	
	# Nominal total residuals
	if Fig == 2:

		f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2017_172.3_50_120MHz.hdf5')
	
	
		GHA_low  = 4 #4
		GHA_high = 20 #20		
	
	
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
				
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)
		
		
	
		# Spectral averaging
		rx, wx   = eg.spectral_averaging(rr, wr)
	
		# RFI cleaning at raw resolution
		Nsigma = 2.5
		wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)
	
		# Spectral binning
		Nsamples = 64
		fb, rb_low, wb_low  = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		
	
	
		# RMS of binned residuals
		rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))
	
	
		# Average model parameters
		px  = np.mean(pr,  axis=0)
	
	
		# Evaluating foreground model at binned frequencies
		tfg_low  = eg.model_evaluate('EDGES_polynomial', px, fb/200)
	
	
		# Binned total temperature
		tb_low  = tfg_low + rb_low		
	
		
		tilt = 0 #-0.7
		tau0 = 7 #3
	
	
		Nfg   = 7    
		flow  = 51 #51
		fhigh = 117 #117
		out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, tau0, 'SNR', vr_array=np.array([78.5]), dv_array=np.array([18.5]), tilt=tilt)
		
		Nfg   = 6     # 6
		flow  = 59    # 59 
		fhigh = 95    # 95
		out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, tau0, 'SNR', vr_array=np.arange(75,85,0.2), dv_array=np.arange(15,25,0.2), tilt=tilt)
		
	
		
		
		
	
		# Evaluating signature from fit parameters
		a21 = -out2[-5]
		vr  = out2[-3]
		dv  = out2[-2]	
		sig, xHI, z = eg.model_eor(out1[0], T21=a21, model_type='gaussian_flattened_1', fr=vr, df=dv, tau0=tau0, tilt=tilt)

		
		
		# Remove signature
		Nfg   = 7     
		flow  = 51
		fhigh = 117
		
		foregrounds = tb_low[(fb >= flow) & (fb <= fhigh)] - sig
		wb_cut      = wb_low[(fb >= flow) & (fb <= fhigh)]		
		p           = eg.fit_polynomial_fourier('EDGES_polynomial', out1[0], foregrounds, Nfg, Weights = wb_cut)
		residuals_foregrounds = foregrounds - p[1]
		
	
	
	
		plt.figure()
		
		offset  = 0.5
		txtoff  = 120
		ylabels = np.array(['', '', '', '', ''])
		
		
		f1 = out1[0]
		f2 = out2[0]
		w1 = out1[2]
		w2 = out2[2]
		
		w1[(f1 > 91.8) & (f1 < 92.2)] = 0
		w2[(f2 > 91.8) & (f2 < 92.2)] = 0
		
		plt.plot(out1[0][w1>0],  out1[3][w1>0]  - 0*offset)
		plt.plot(out2[0][w2>0],  out2[3][w2>0]  - 1*offset)
		plt.plot(out2[0][w2>0],  out2[-6][w2>0] - 1.5*offset)
		plt.plot(out2[0][w2>0], -out2[-1][w2>0] - 2*offset)
		
		plt.plot(out1[0][w1>0], residuals_foregrounds[w1>0] - 3.5*offset)
		
		plt.text(txtoff, -0*offset,   'RMS: ' + str(int(1000*out1[4]))  + ' mK')
		plt.text(txtoff, -1*offset,   'RMS: ' + str(int(1000*out2[4]))  + ' mK')
		plt.text(txtoff, -1.5*offset, 'RMS: ' + str(int(1000*out2[-7])) + ' mK')
		plt.text(90, -2*offset-0.15, r'$\tau = $ 7', fontsize=12)
		plt.text(90, -2*offset-0.30, r'$a_{21} = $ ' + str(int(1000*out2[-5])) + r' +/- ' + str(int(1000*out2[-4])) + r' mK', fontsize=12)
		plt.text(90, -2*offset-0.45, r'$\nu_r = $ ' + str(round(out2[-3],1)) + r' MHz', fontsize=12)
		plt.text(90, -2*offset-0.60, r'$\Delta \nu = $ ' + str(round(out2[-2],1)) + r' MHz', fontsize=12)
		
		plt.xlim([48, 135])
		plt.ylim([-offset*4, offset])
		plt.yticks(np.arange(-offset*4, 0.1, offset), ylabels)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('[' + str(offset) + ' K per division]')
		plt.title('4-20 GHA')
		
		# saving plot
		plt.savefig(home_folder + path + 'f2.pdf', bbox_inches='tight')
		plt.close()	
	
	
		
	
	
	
	
	
	
	
	
	return 0












def data_antenna_s11_for_judd():
	
	"""
	
	Sept 05, 2017
	
	"""
	
	
	
	# Data
	
	# Low1, original ground plane
	lb11 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2015_342_03_14/average_2015_342_03_14.txt')
	
	# Low1, extended ground plane
	lb12 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/20170403_average/S11_blade_low_band_2017_093.txt')
	
	
	# Low2, NS
	lb21 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/low2-mar28-1/average_low2-mar28-1.txt')
	#lb22 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/low2_20170602_friday_inpit2/S11_blade_low_band_2017_153_INPIT.txt')
	
	# Low2, EW no shield
	lb22 = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/2017-06-29-low2-noshield_average/S11_blade_low_band_2017_180_NO_SHIELD.txt')
	


	
	# Cutting data, computing magnitude and phase
	flow  = 50
	fhigh = 100

	d11 = lb11[(lb11[:,0]>= flow*1e6) & (lb11[:,0]<= fhigh*1e6), :]
	d12 = lb11[(lb12[:,0]>= flow*1e6) & (lb12[:,0]<= fhigh*1e6), :]
	
	d21 = lb21[(lb21[:,0]>= flow*1e6) & (lb21[:,0]<= fhigh*1e6), :]
	d22 = lb22[(lb22[:,0]>= flow*1e6) & (lb22[:,0]<= fhigh*1e6), :]


	f  = d11[:,0]/1e6
	
	s11 = d11[:,1] + 1j*d11[:,2]
	s12 = d12[:,1] + 1j*d12[:,2]
	
	s21 = d21[:,1] + 1j*d21[:,2]
	s22 = d22[:,1] + 1j*d22[:,2]
	
	
		
	m11 = 20*np.log10(np.abs(s11))
	p11 = (180/np.pi)*np.unwrap(np.angle(s11))
	
	m12 = 20*np.log10(np.abs(s12))
	p12 = (180/np.pi)*np.unwrap(np.angle(s12))
	
	
	m21 = 20*np.log10(np.abs(s21))
	p21 = (180/np.pi)*np.unwrap(np.angle(s21))
	
	m22 = 20*np.log10(np.abs(s22))
	p22 = (180/np.pi)*np.unwrap(np.angle(s22))
	
	

	
	# Saving data
	outT = np.array([f, m12, p12, m21, p21, m22, p22])
	out  = outT.T
	np.savetxt(home_folder + '/DATA/EDGES/results/low_band/products/reflection_coefficients/antenna_s11_paper_20170905.txt', out, header='freq_MHz\tmag_dB(low1, extended gp)\tphase_deg(low1, extended gp)\tmag_dB(low2, NS)\tphase_deg(low2, NS)\tmag_dB(low2, EW no shield)\tphase_deg(low2, EW no shield)')
	
	
	
	# Plot
	plt.figure(1, figsize=[14,5.5])
	plt.subplot(1,2,1)
	plt.plot(f, m12)
	plt.plot(f, m21)
	plt.plot(f, m22)
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.legend(['low1, extended ground plane', 'low2, NS', 'low2, EW, no balun shield'])
	
	plt.subplot(1,2,2)
	plt.plot(f, p12)
	plt.plot(f, p21)
	plt.plot(f, p22)
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('phase [deg]')
	
	
	# Save plot
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170905/antenna_s11_paper_20170905.pdf', bbox_inches='tight')
	plt.close()	
	
	return out









def low_band_average_spectrum():
	
	"""
	Sept 12, 2017
	
	"""
	
	

	# Nominal total residuals
	# -------------------------------------------------
	
	# 50-100 MHz
	# -------------------
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2015_342_switch2015.hdf5') #
	
	# This one is the best
	f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5') # 
	
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2017_93.hdf5')
	
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_60_94MHz_5terms_GHA_6_18.hdf5')
	
	
	
	
	# 50-120 MHz
	# -------------------
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2015_342_switch2015_50_120MHz_moon_down.hdf5')
	
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_50_120MHz_moon_down.hdf5')
	
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342_50_120MHz_moon_down.hdf5')
	
	
	

	# Remove day 2016-286
	rz = ry[my[:,1] != 286, :]
	wz = wy[my[:,1] != 286, :]
	pz = py[my[:,1] != 286, :]
	mz = my[my[:,1] != 286, :]




	# Filter based on daily RMS
	# ------------------------------------------------
	rms_thres = 250 #230
	days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]

	r = rz[np.in1d(mz[:,1],days) == False, :]
	w = wz[np.in1d(mz[:,1],days) == False, :]
	p = pz[np.in1d(mz[:,1],days) == False, :]
	m = mz[np.in1d(mz[:,1],days) == False, :]




	# GHA range
	# ------------------------------------------------
	GHA_low  = 6
	GHA_high = 18	

	rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
	wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
	pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
				
	rr = np.copy(rq)
	wr = np.copy(wq)
	pr = np.copy(pq)
	
	




	# Spectral average
	# -----------------------------------------------

	#len_half_spec = int(len(rr[:,0])/2)


	# First half
	# ------------------------------------------------------------------

	# Spectral averaging
	rx, wx   = eg.spectral_averaging(rr, wr)
	
	# Average model parameters
	px  = np.mean(pr,  axis=0)
	
	
	
	

	# RFI cleaning at raw resolution
	Nsigma = 2.5
	wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)


	# Spectral binning
	Nsamples = 64
	fb, rb_low, wb_low = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


	# RMS of binned residuals
	#rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


	# Evaluating foreground model at binned frequencies
	tfg_low = eg.model_evaluate('EDGES_polynomial', px, fb/200)


	# Binned total temperature
	tb_low  = tfg_low + rb_low		








	#fg_model = 'Physical_model'  # 'EDGES_polynomial' # 
	#Nfg   = 5 #6
	#flow  = 50 #50
	#fhigh = 100 #100
	#out1  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', fg_model=fg_model, vr_array=np.array([78.5]), dv_array=np.array([18.5]))
	
	#Nfg   = 5     # 6
	#flow  = 64    # 60 
	#fhigh = 94    # 98
	#out2  = eg.test_low_band_signature_search(fb, tb_low, wb_low, flow, fhigh, Nfg, 7, 'SNR', fg_model=fg_model, vr_array=np.arange(75,85,0.2), dv_array=np.arange(15,25,0.2))
	
		
	#for i in range(len(fb)-1):
		#if (fb[i] <= 78) and (fb[i+1] > 78):
			#t78 = tb_low[i]


	
	return fb, tb_low, rb_low, wb_low









def low_band_average_spectrum_50_120MHz():
	
	"""
	Sept 19, 2017
	
	"""
	
	

	# Nominal total residuals
	# -------------------------------------------------
	
	# 50-100 MHz
	# -------------------
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2015_342_switch2015.hdf5') #
	
	# This one is the best
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5') # 
	
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2017_93.hdf5')
	
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_60_94MHz_5terms_GHA_6_18.hdf5')
	
	
	
	
	# 50-120 MHz
	# -------------------
	
	f, ty1, ry1, wy1, py1, my1, rmsy1, fb, tb_d1, rb_d1, wb_d1, pb_d1, mb_dx1, rmsb_dx1, fb_g1, tb_g1, rb_g1, wb_g1, pb_g1, ghab_g1, rmsb_g1, fb_t1, tb_t1, rb_t1, wb_t1, pb_t1, rmsb_t1 = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/original_gp_no_bc_s11_2015_342_50_120MHz_moon_down.hdf5')	
		
	f, ty2, ry2, wy2, py2, my2, rmsy2, fb, tb_d2, rb_d2, wb_d2, pb_d2, mb_dx2, rmsb_dx2, fb_g2, tb_g2, rb_g2, wb_g2, pb_g2, ghab_g2, rmsb_g2, fb_t2, tb_t2, rb_t2, wb_t2, pb_t2, rmsb_t2 = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243_50_120MHz_moon_down.hdf5')
	
	f, ty3, ry3, wy3, py3, my3, rmsy3, fb, tb_d3, rb_d3, wb_d3, pb_d3, mb_dx3, rmsb_dx3, fb_g3, tb_g3, rb_g3, wb_g3, pb_g3, ghab_g3, rmsb_g3, fb_t3, tb_t3, rb_t3, wb_t3, pb_t3, rmsb_t3 = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2017_153_50_120MHz.hdf5')

	
	#f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2015_342_switch2015_50_120MHz_moon_down.hdf5')
	
	
	
	
	

	# Remove a specific day 
	rz1 = ry1[my1[:,1] != 0, :]
	wz1 = wy1[my1[:,1] != 0, :]
	pz1 = py1[my1[:,1] != 0, :]
	mz1 = my1[my1[:,1] != 0, :]

	rz2 = ry2[my2[:,1] != 0, :]
	wz2 = wy2[my2[:,1] != 0, :]
	pz2 = py2[my2[:,1] != 0, :]
	mz2 = my2[my2[:,1] != 0, :]

	rz3 = ry3[my3[:,1] != 0, :]
	wz3 = wy3[my3[:,1] != 0, :]
	pz3 = py3[my3[:,1] != 0, :]
	mz3 = my3[my3[:,1] != 0, :]



	# Filter based on daily RMS
	# ------------------------------------------------
	rms_thres = 250 #230
	days1     = mb_dx1[rmsb_dx1[:,0] > rms_thres, 1]
	days2     = mb_dx2[rmsb_dx2[:,0] > rms_thres, 1]
	days3     = mb_dx3[rmsb_dx3[:,0] > rms_thres, 1]

	r1 = rz1[np.in1d(mz1[:,1],days1) == False, :]
	w1 = wz1[np.in1d(mz1[:,1],days1) == False, :]
	p1 = pz1[np.in1d(mz1[:,1],days1) == False, :]
	m1 = mz1[np.in1d(mz1[:,1],days1) == False, :]

	r2 = rz2[np.in1d(mz2[:,1],days2) == False, :]
	w2 = wz2[np.in1d(mz2[:,1],days2) == False, :]
	p2 = pz2[np.in1d(mz2[:,1],days2) == False, :]
	m2 = mz2[np.in1d(mz2[:,1],days2) == False, :]

	r3 = rz3[np.in1d(mz3[:,1],days3) == False, :]
	w3 = wz3[np.in1d(mz3[:,1],days3) == False, :]
	p3 = pz3[np.in1d(mz3[:,1],days3) == False, :]
	m3 = mz3[np.in1d(mz3[:,1],days3) == False, :]




	# GHA range
	# ------------------------------------------------
	GHA_low  = 6
	GHA_high = 18	

	rq1 = r1[((m1[:,3] >= GHA_low) & (m1[:,3] <= GHA_high)), :]
	wq1 = w1[((m1[:,3] >= GHA_low) & (m1[:,3] <= GHA_high)), :]
	pq1 = p1[((m1[:,3] >= GHA_low) & (m1[:,3] <= GHA_high)), :]
	
	rq2 = r2[((m2[:,3] >= GHA_low) & (m2[:,3] <= GHA_high)), :]
	wq2 = w2[((m2[:,3] >= GHA_low) & (m2[:,3] <= GHA_high)), :]
	pq2 = p2[((m2[:,3] >= GHA_low) & (m2[:,3] <= GHA_high)), :]	
	
	rq3 = r3[((m3[:,3] >= GHA_low) & (m3[:,3] <= GHA_high)), :]
	wq3 = w3[((m3[:,3] >= GHA_low) & (m3[:,3] <= GHA_high)), :]
	pq3 = p3[((m3[:,3] >= GHA_low) & (m3[:,3] <= GHA_high)), :]	
	
	
				
	rr1 = np.copy(rq1)
	wr1 = np.copy(wq1)
	pr1 = np.copy(pq1)
	
	rr2 = np.copy(rq2)
	wr2 = np.copy(wq2)
	pr2 = np.copy(pq2)
	
	rr3 = np.copy(rq3)
	wr3 = np.copy(wq3)
	pr3 = np.copy(pq3)
	
	
	
	

	#rr = np.copy(rr3)
	#wr = np.copy(wr3)
	#pr = np.copy(pr3)
	
	

	rr = np.vstack((rr1, rr2, rr3))
	wr = np.vstack((wr1, wr2, wr3))
	pr = np.vstack((pr1, pr2, pr3))
	
	




	# Spectral average
	# -----------------------------------------------

	#len_half_spec = int(len(rr[:,0])/2)


	# First half
	## ------------------------------------------------------------------

	# Spectral averaging
	rx, wx   = eg.spectral_averaging(rr, wr)
	
	# Average model parameters
	px  = np.mean(pr,  axis=0)
	
	
	
	

	# RFI cleaning at raw resolution
	Nsigma = 2.5
	wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)


	# Spectral binning
	Nsamples = 64
	fb, rb_low, wb_low = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)		


	# RMS of binned residuals
	#rmsb  = np.sqrt(np.sum((rb_low[wb_low>0])**2)/len(fb[wb_low>0]))


	# Evaluating foreground model at binned frequencies
	tfg_low = eg.model_evaluate('EDGES_polynomial', px, fb/200)


	# Binned total temperature
	tb_low  = tfg_low + rb_low		







	
	return fb, tb_low, rb_low, wb_low   # f, rx, wxx




















def plots_report_111():    #(fb, tb, wb, nb, fig):
		
	"""
	
	data range is 50-100 MHz
	
	"""
	
	flow  = 60
	fhigh = 94
	
	
	# Generating the SNR search results
	# --------------------------------------------
	
	#vr_array  = np.arange(75,82, 0.1) 
	#dv_array  = np.arange(15,25, 0.1)
	#tau_array = np.arange(5,10,0.2)
	#chi_array = np.arange(-1,1,0.1)	
	
	#o1 = eg.low_band_signature_search(fb, tb, wb, flow, fhigh, 5, 'SNR', save = 'yes', save_filename='SNR_edges_polynomial_nfg_5_n21_3',fg_model='EDGES_polynomial', vr_array=vr_array, dv_array=dv_array, tau_array=np.array([7]), chi_array=np.array([0]))

	#o2 = eg.low_band_signature_search(fb, tb, wb, flow, fhigh, 5, 'SNR', save = 'yes', save_filename='SNR_edges_polynomial_nfg_5_n21_4', fg_model='EDGES_polynomial', vr_array=vr_array, dv_array=dv_array, tau_array=tau_array, chi_array=np.array([0]))
			
	#o3 = eg.low_band_signature_search(fb, tb, wb, flow, fhigh, 5, 'SNR', save = 'yes', save_filename='SNR_edges_polynomial_nfg_5_n21_5', fg_model='EDGES_polynomial', vr_array=vr_array, dv_array=dv_array, tau_array=tau_array, chi_array=chi_array)
	
	
	# Load SNR results
	# -------------------------------------------
	
	o1 = eg.read_low_band_signature_search('/home/ramo7131/DATA/EDGES/results/low_band/products/SNR_search_results/SNR_edges_polynomial_nfg_5_n21_3.hdf5')	
	o2 = eg.read_low_band_signature_search('/home/ramo7131/DATA/EDGES/results/low_band/products/SNR_search_results/SNR_edges_polynomial_nfg_5_n21_4.hdf5')
	o3 = eg.read_low_band_signature_search('/home/ramo7131/DATA/EDGES/results/low_band/products/SNR_search_results/SNR_edges_polynomial_nfg_5_n21_5.hdf5')
	
	


	# Load MCMC results
	# -------------------------------------------
	
	k1 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_3_noise_std_13mK.hdf5')
	k2 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_3_noise_std_20mK.hdf5')
	
	k3 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_4_noise_std_13mK.hdf5')
	k4 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_4_noise_std_20mK.hdf5')
	
	k5 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_5_noise_std_13mK.hdf5')
	k6 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_5_noise_std_20mK.hdf5')
	
	
	


	
	
	# ---------------------------------------------------
	
	plt.figure(figsize=[9,11])
	
	FS = 15
	plt.subplot(3,1,1)
	
	#samples = np.arange(0,)
	#for i in samples[np.random.randint(len(samples), size=100)]:
	
	plt.plot(o1[0], -1000*o1[-4], 'r')
	plt.plot(k1[0], 1000*k1[9][-1,:], 'b')
	plt.plot(k1[0], 1000*k1[9][0,:], 'c', alpha=1)
	index_random = np.random.randint(len(k1[9][:,0]), size=200)
	plt.plot(k1[0], 1000*k1[9][index_random,:].T, 'c', alpha=0.1)
	plt.plot(k1[0], 1000*k1[9][-1,:], 'b')
	plt.plot(o1[0], -1000*o1[-4], 'r')	
	plt.xlim([50, 100])
	plt.xticks(np.arange(50,101,10),'')
	plt.ylim(-800, 50)
	plt.yticks(np.arange(-700,1,100))
	plt.grid()
	plt.ylabel('temperature [mK]')
	plt.title(r'Fit Parameters: $a_{21}$, $\nu_r$, $\Delta\nu$ -- Fixed Parameters: $\tau=7$, $\chi=0$', fontsize=FS)
	plt.legend(['SNR search','MCMC best fit','MCMC sample'], loc=0)
	
	
	
	plt.subplot(3,1,2)
	index_random = np.random.randint(len(k3[9][:,0]), size=200)
	plt.plot(k1[0], 1000*k3[9][index_random,:].T, 'c', alpha=0.1)	
	plt.plot(k3[0], 1000*k3[9][-1,:], 'b')
	plt.plot(o2[0], -1000*o2[-4], 'r')
	plt.xlim([50, 100])
	plt.xticks(np.arange(50,101,10),'')
	plt.ylim(-800, 50)
	plt.yticks(np.arange(-700,1,100))
	plt.grid()
	plt.ylabel('temperature [mK]')
	plt.title(r'Fit Parameters: $a_{21}$, $\nu_r$, $\Delta\nu$, $\tau$ -- Fixed Parameters: $\chi=0$', fontsize=FS)



	plt.subplot(3,1,3)
	index_random = np.random.randint(len(k5[9][:,0]), size=200)
	plt.plot(k1[0], 1000*k5[9][index_random,:].T, 'c', alpha=0.1)	
	plt.plot(k5[0], 1000*k5[9][-1,:], 'b')
	plt.plot(o3[0], -1000*o3[-4], 'r')
	plt.xlim([50, 100])
	#plt.xticks(np.arange(50,101,10),'')
	plt.ylim(-800, 50)
	plt.yticks(np.arange(-700,1,100))
	plt.grid()
	plt.ylabel('temperature [mK]')
	plt.xlabel('frequency [MHz]')
	plt.title(r'Fit Parameters: $a_{21}$, $\nu_r$, $\Delta\nu$, $\tau$, $\chi$', fontsize=FS)
	
	
	
	# Save plot
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170924/MCMC1.pdf', bbox_inches='tight')
	plt.close()	








	# --------------------------------------------------------------
	
	labels = [r'$a_{21}$ [mK]', r'$\nu_r$ [MHz]', r'$\Delta \nu$ [MHz]']
	fig    = corner.corner(k1[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17})
	fig.set_size_inches(8,8)
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170924/MCMC2.pdf', bbox_inches='tight')
	plt.close()	
	
	
	# --------------------------------------------------------------
	
	labels = [r'$a_{21}$ [mK]', r'$\nu_r$ [MHz]', r'$\Delta \nu$ [MHz]', r'$\tau$']
	fig    = corner.corner(k3[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17})
	fig.set_size_inches(8,8)
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170924/MCMC3.pdf', bbox_inches='tight')
	plt.close()	
	
	
	# --------------------------------------------------------------
	
	labels = [r'$a_{21}$ [mK]', r'$\nu_r$ [MHz]', r'$\Delta \nu$ [MHz]', r'$\tau$', r'$\chi$']
	fig    = corner.corner(k5[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17})
	fig.set_size_inches(8,8)
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170924/MCMC4.pdf', bbox_inches='tight')
	plt.close()
	
	
	
	
	
	
	
	
	# ---------------------------------------------------
	
	plt.figure(figsize=[9,11])
	
	FS = 15
	
	
	
	plt.subplot(3,1,1)
	
	rms_MCMC = int(1000*np.min(k1[11]))
	index = np.arange(0, len(k1[11]))
	ii = index[k1[11]==np.min(k1[11])]
	if len(ii) > 1:
		ix = ii[0]
	print(ix)
	
	plt.plot(o1[0], 1000*o1[21]+20, 'r')
	plt.plot(k1[0], 1000*k1[10][ix, :]-40, 'b')	
	plt.xlim([50, 100])
	plt.xticks(np.arange(50,101,10),'')
	plt.ylim(-80, 90)
	plt.yticks(np.arange(-60,91,20), '')
	plt.grid()
	plt.text(51,  25, 'RMS=' + str(int(1000*o1[22]))+' mK', fontsize=14)
	plt.text(51, -35, 'RMS=' + str(rms_MCMC)+' mK', fontsize=14)
	plt.ylabel('[20 mK per division]')
	plt.title(r'Fit Parameters: $a_{21}$, $\nu_r$, $\Delta\nu$ -- Fixed Parameters: $\tau=7$, $\chi=0$', fontsize=FS)
	plt.legend(['residuals SNR search','residuals MCMC best fit'], loc=0)
	
	
	
	plt.subplot(3,1,2)
	rms_MCMC = int(1000*np.min(k3[11]))
	index = np.arange(0, len(k3[11]))
	ii = index[k3[11]==np.min(k3[11])]
	if len(ii) > 1:
		ix = ii[0]
	print(ix)
	
	plt.plot(o2[0], 1000*o2[21]+20, 'r')
	plt.plot(k3[0], 1000*k3[10][ix, :]-40, 'b')	
	plt.xlim([50, 100])
	plt.xticks(np.arange(50,101,10),'')
	plt.ylim(-80, 90)
	plt.yticks(np.arange(-60,91,20), '')
	plt.grid()
	plt.text(51,  25, 'RMS=' + str(int(1000*o2[22]))+' mK', fontsize=14)
	plt.text(51, -35, 'RMS=' + str(rms_MCMC)+' mK', fontsize=14)
	plt.ylabel('[20 mK per division]')
	plt.title(r'Fit Parameters: $a_{21}$, $\nu_r$, $\Delta\nu$, $\tau$ -- Fixed Parameters: $\chi=0$', fontsize=FS)



	plt.subplot(3,1,3)
	rms_MCMC = int(1000*np.min(k5[11]))
	index = np.arange(0, len(k5[11]))
	ii = index[k5[11]==np.min(k5[11])]
	if len(ii) > 1:
		ix = ii[0]
	print(ix)
	
	plt.plot(o3[0], 1000*o3[21]+20, 'r')
	plt.plot(k5[0], 1000*k5[10][ix, :]-40, 'b')	
	plt.xlim([50, 100])
	plt.xticks(np.arange(50,101,10))
	plt.ylim(-80, 90)
	plt.yticks(np.arange(-60,91,20), '')
	plt.grid()
	plt.text(51,  25, 'RMS=' + str(int(1000*o3[22]))+' mK', fontsize=14)
	plt.text(51, -35, 'RMS=' + str(rms_MCMC)+' mK', fontsize=14)
	plt.ylabel('[20 mK per division]')
	plt.xlabel('frequency [MHz]')
	plt.title(r'Fit Parameters: $a_{21}$, $\nu_r$, $\Delta\nu$, $\tau$, $\chi$', fontsize=FS)
	
	
	
	# Save plot
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170924/MCMC5.pdf', bbox_inches='tight')
	plt.close()	

	




	
	# ---------------------------------------------------
	
	plt.figure(figsize=[11,7])
		
		
	plt.subplot(3,2,1)
	plt.hist(1000*k1[11][0:-1], 50)
	plt.yticks([0, 1], '')
	plt.xlim(10,18)
	plt.ylabel('3 fit parameters')
	plt.title('noise std = 13 mK')
	
	plt.subplot(3,2,3)
	plt.hist(1000*k3[11][0:-1], 50)
	plt.yticks([0, 1], '')
	plt.xlim(10,18)
	plt.ylabel('4 fit parameters')
	
	plt.subplot(3,2,5)
	plt.hist(1000*k5[11][0:-1], 50)	
	plt.yticks([0, 1], '')
	plt.xlim(10,18)
	plt.ylabel('5 fit parameters')
	plt.xlabel('RMS [mK]')


	plt.subplot(3,2,2)
	plt.hist(1000*k2[11][0:-1], 50)
	plt.yticks([0, 1], '')
	plt.xlim(10,18)
	plt.title('noise std = 20 mK')
	
	plt.subplot(3,2,4)
	plt.hist(1000*k4[11][0:-1], 50)
	plt.yticks([0, 1], '')
	plt.xlim(10,18)
	
	plt.subplot(3,2,6)
	plt.hist(1000*k6[11][0:-1], 50)	
	plt.yticks([0, 1], '')
	plt.xlim(10,18)
	plt.xlabel('RMS [mK]')
	
	# Save plot
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170924/MCMC6.pdf', bbox_inches='tight')
	plt.close()


	return 0








def results_report_111():
		
	"""
	
	"""
	
	

	# Load SNR results
	# -------------------------------------------
	
	o1 = eg.read_low_band_signature_search('/home/ramo7131/DATA/EDGES/results/low_band/products/SNR_search_results/SNR_edges_polynomial_nfg_5_n21_3.hdf5')	
	o2 = eg.read_low_band_signature_search('/home/ramo7131/DATA/EDGES/results/low_band/products/SNR_search_results/SNR_edges_polynomial_nfg_5_n21_4.hdf5')
	o3 = eg.read_low_band_signature_search('/home/ramo7131/DATA/EDGES/results/low_band/products/SNR_search_results/SNR_edges_polynomial_nfg_5_n21_5.hdf5')
	
	


	# Load MCMC results
	# -------------------------------------------
	
	k1 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_3_noise_std_13mK.hdf5')
	k2 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_3_noise_std_20mK.hdf5')
	
	k3 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_4_noise_std_13mK.hdf5')
	k4 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_4_noise_std_20mK.hdf5')
	
	k5 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_5_noise_std_13mK.hdf5')
	k6 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_5_noise_std_20mK.hdf5')
	
	
	
	
	print(' ')
	
	print('SNR search: ' + str(int(1000*o1[14])) + '+/-' + str(int(1000*o1[15])) + '  ' + str(np.round(o1[16],2)) + '  ' + str(np.round(o1[17],2)) + '  ' + str(np.round(o1[18],2)) + '  ' + str(np.round(o1[19],2)))
	print('MCMC: ' + str(int(k1[8][5,0])) + '+(' + str(int(k1[8][5,2]-k1[8][5,0])) + str(int(k1[8][5,1]-k1[8][5,0])) + ')  '  + str(np.round(k1[8][6,0],2)) + '+(' + str(np.round(k1[8][6,2]-k1[8][6,0],2)) + str(np.round(k1[8][6,1]-k1[8][6,0],2)) + ') '       + str(np.round(k1[8][7,0],2)) + '+(' + str(np.round(k1[8][7,2]-k1[8][7,0],2)) + str(np.round(k1[8][7,1]-k1[8][7,0],2)) + ') ' )
	print('-----------------------------------')
	print('SNR search: ' + str(int(1000*o2[14])) + '+/-' + str(int(1000*o2[15])) + '  ' + str(np.round(o2[16],2)) + '  ' + str(np.round(o2[17],2)) + '  ' + str(np.round(o2[18],2)) + '  ' + str(np.round(o2[19],2)))
	print('MCMC: ' + str(int(k3[8][5,0])) + '+(' + str(int(k3[8][5,2]-k3[8][5,0])) + str(int(k3[8][5,1]-k3[8][5,0])) + ')  '  + str(np.round(k3[8][6,0],2)) + '+(' + str(np.round(k3[8][6,2]-k3[8][6,0],2)) + str(np.round(k3[8][6,1]-k3[8][6,0],2)) + ') '       + str(np.round(k3[8][7,0],2)) + '+(' + str(np.round(k3[8][7,2]-k3[8][7,0],2)) + str(np.round(k3[8][7,1]-k3[8][7,0],2)) + ') '    + str(np.round(k3[8][8,0],2)) + '+(' + str(np.round(k3[8][8,2]-k3[8][8,0],2)) + str(np.round(k3[8][8,1]-k3[8][8,0],2)) + ') ' )
	print('-----------------------------------')
	print('SNR search: ' + str(int(1000*o3[14])) + '+/-' + str(int(1000*o3[15])) + '  ' + str(np.round(o3[16],2)) + '  ' + str(np.round(o3[17],2)) + '  ' + str(np.round(o3[18],2)) + '  ' + str(np.round(o3[19],2)))	
	print('MCMC: ' + str(int(k5[8][5,0])) + '+(' + str(int(k5[8][5,2]-k5[8][5,0])) + str(int(k5[8][5,1]-k5[8][5,0])) + ')  '  + str(np.round(k5[8][6,0],2)) + '+(' + str(np.round(k5[8][6,2]-k5[8][6,0],2)) + str(np.round(k5[8][6,1]-k5[8][6,0],2)) + ') '       + str(np.round(k5[8][7,0],2)) + '+(' + str(np.round(k5[8][7,2]-k5[8][7,0],2)) + str(np.round(k5[8][7,1]-k5[8][7,0],2)) + ') '    + str(np.round(k5[8][8,0],2)) + '+(' + str(np.round(k5[8][8,2]-k5[8][8,0],2)) + str(np.round(k5[8][8,1]-k5[8][8,0],2)) + ') '   + str(np.round(k5[8][9,0],2)) + '+(' + str(np.round(k5[8][9,2]-k5[8][9,0],2)) + str(np.round(k5[8][9,1]-k5[8][9,0],2)) + ') ' )
	
	
	
	print(' ')
	print('-----------------------------------')
	print('-----------------------------------')
	print('-----------------------------------')
	print(' ')



	
	print('MCMC: ' + str(int(k1[8][5,0])) + '+(' + str(int(k1[8][5,2]-k1[8][5,0])) + str(int(k1[8][5,1]-k1[8][5,0])) + ')  '  + str(np.round(k1[8][6,0],2)) + '+(' + str(np.round(k1[8][6,2]-k1[8][6,0],2)) + str(np.round(k1[8][6,1]-k1[8][6,0],2)) + ') '       + str(np.round(k1[8][7,0],2)) + '+(' + str(np.round(k1[8][7,2]-k1[8][7,0],2)) + str(np.round(k1[8][7,1]-k1[8][7,0],2)) + ') ' )
	
	print('MCMC: ' + str(int(k2[8][5,0])) + '+(' + str(int(k2[8][5,2]-k2[8][5,0])) + str(int(k2[8][5,1]-k2[8][5,0])) + ')  '  + str(np.round(k2[8][6,0],2)) + '+(' + str(np.round(k2[8][6,2]-k2[8][6,0],2)) + str(np.round(k2[8][6,1]-k2[8][6,0],2)) + ') '       + str(np.round(k2[8][7,0],2)) + '+(' + str(np.round(k2[8][7,2]-k2[8][7,0],2)) + str(np.round(k2[8][7,1]-k2[8][7,0],2)) + ') ' )
	
	print('-----------------------------------')
	
	print('MCMC: ' + str(int(k3[8][5,0])) + '+(' + str(int(k3[8][5,2]-k3[8][5,0])) + str(int(k3[8][5,1]-k3[8][5,0])) + ')  '  + str(np.round(k3[8][6,0],2)) + '+(' + str(np.round(k3[8][6,2]-k3[8][6,0],2)) + str(np.round(k3[8][6,1]-k3[8][6,0],2)) + ') '       + str(np.round(k3[8][7,0],2)) + '+(' + str(np.round(k3[8][7,2]-k3[8][7,0],2)) + str(np.round(k3[8][7,1]-k3[8][7,0],2)) + ') '    + str(np.round(k3[8][8,0],2)) + '+(' + str(np.round(k3[8][8,2]-k3[8][8,0],2)) + str(np.round(k3[8][8,1]-k3[8][8,0],2)) + ') ' )
	
	print('MCMC: ' + str(int(k4[8][5,0])) + '+(' + str(int(k4[8][5,2]-k4[8][5,0])) + str(int(k4[8][5,1]-k4[8][5,0])) + ')  '  + str(np.round(k4[8][6,0],2)) + '+(' + str(np.round(k4[8][6,2]-k4[8][6,0],2)) + str(np.round(k4[8][6,1]-k4[8][6,0],2)) + ') '       + str(np.round(k4[8][7,0],2)) + '+(' + str(np.round(k4[8][7,2]-k4[8][7,0],2)) + str(np.round(k4[8][7,1]-k4[8][7,0],2)) + ') '    + str(np.round(k4[8][8,0],2)) + '+(' + str(np.round(k4[8][8,2]-k4[8][8,0],2)) + str(np.round(k4[8][8,1]-k4[8][8,0],2)) + ') ' )
	
	print('-----------------------------------')
	
	print('MCMC: ' + str(int(k5[8][5,0])) + '+(' + str(int(k5[8][5,2]-k5[8][5,0])) + str(int(k5[8][5,1]-k5[8][5,0])) + ')  '  + str(np.round(k5[8][6,0],2)) + '+(' + str(np.round(k5[8][6,2]-k5[8][6,0],2)) + str(np.round(k5[8][6,1]-k5[8][6,0],2)) + ') '       + str(np.round(k5[8][7,0],2)) + '+(' + str(np.round(k5[8][7,2]-k5[8][7,0],2)) + str(np.round(k5[8][7,1]-k5[8][7,0],2)) + ') '    + str(np.round(k5[8][8,0],2)) + '+(' + str(np.round(k5[8][8,2]-k5[8][8,0],2)) + str(np.round(k5[8][8,1]-k5[8][8,0],2)) + ') '   + str(np.round(k5[8][9,0],2)) + '+(' + str(np.round(k5[8][9,2]-k5[8][9,0],2)) + str(np.round(k5[8][9,1]-k5[8][9,0],2)) + ') ' )
	
	print('MCMC: ' + str(int(k6[8][5,0])) + '+(' + str(int(k6[8][5,2]-k6[8][5,0])) + str(int(k6[8][5,1]-k6[8][5,0])) + ')  '  + str(np.round(k6[8][6,0],2)) + '+(' + str(np.round(k6[8][6,2]-k6[8][6,0],2)) + str(np.round(k6[8][6,1]-k6[8][6,0],2)) + ') '       + str(np.round(k6[8][7,0],2)) + '+(' + str(np.round(k6[8][7,2]-k6[8][7,0],2)) + str(np.round(k6[8][7,1]-k6[8][7,0],2)) + ') '    + str(np.round(k6[8][8,0],2)) + '+(' + str(np.round(k6[8][8,2]-k6[8][8,0],2)) + str(np.round(k6[8][8,1]-k6[8][8,0],2)) + ') '   + str(np.round(k6[8][9,0],2)) + '+(' + str(np.round(k6[8][9,2]-k6[8][9,0],2)) + str(np.round(k6[8][9,1]-k6[8][9,0],2)) + ') ' )
	
	
	
	return 0








def plot_antenna_s11_residuals_report_112():
	
	
	
	# o = eg.data_analysis_low_band_MCMC(fb, tb, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK', flow=85, fhigh=115, model_fg='EDGES_polynomial', Nfg=5, model_21cm='tanh_EoR', N21=2, Nchain=10000, Nthreads=6, rejected_fraction=0.3, a21_eor=0.028)
	
	
	# o = eg.data_analysis_low_band_MCMC(fb, tb, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_3_noise_std_10mK', flow=85, fhigh=115, model_fg='EDGES_polynomial', Nfg=5, model_21cm='tanh_EoR', N21=3, Nchain=200000, Nthreads=6, rejected_fraction=0.3)
	
	
	
	# Figure 1
	# --------------------------------
	
	f = np.arange(50, 121, 1)
	
	ms1 = eg.models_antenna_s11_remove_delay('low_band_2015', 'blade', f, antenna_s11_day = 342, model_type='polynomial', Nfit=11)
	ms2 = eg.models_antenna_s11_remove_delay('low_band_2015', 'blade', f, antenna_s11_day = 243, model_type='polynomial', Nfit=11)
	ms3 = eg.models_antenna_s11_remove_delay('low_band_2015', 'blade', f, antenna_s11_day = 153, model_type='polynomial', Nfit=11)
	
	
	
	plt.figure(figsize=[11, 7])
	
	plt.subplot(2,2,1)
	plt.plot(f, 20*np.log10(np.abs(ms1)), 'b')
	plt.plot(f, 20*np.log10(np.abs(ms2)), 'g')
	plt.plot(f, 20*np.log10(np.abs(ms3)), 'r')
	plt.xlim([85, 115])
	plt.grid()
	#plt.xlabel('frequency [MHz]')
	plt.ylabel('magnitude [dB]')
	plt.legend(['2015-342','2016-243','2017-153'])
	
	plt.subplot(2,2,2)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(ms1)), 'b')
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(ms2)), 'g')
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(ms3)), 'r')
	plt.xlim([85, 115])
	plt.ylim([-700, -300])
	plt.grid()
	#plt.xlabel('frequency [MHz]')	
	plt.ylabel('phase [deg]')
	
	
	plt.subplot(2,2,3)
	plt.plot(f, 20*np.log10(np.abs(ms1)) - 20*np.log10(np.abs(ms2)), 'b')
	plt.plot(f, 20*np.log10(np.abs(ms3)) - 20*np.log10(np.abs(ms2)), 'r')
	plt.xlim([85, 115])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ magnitude [dB]')	
	
	plt.subplot(2,2,4)
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(ms1))-(180/np.pi)*np.unwrap(np.angle(ms2)), 'b')
	plt.plot(f, (180/np.pi)*np.unwrap(np.angle(ms3))-(180/np.pi)*np.unwrap(np.angle(ms2)), 'r')
	plt.xlim([85, 115])
	plt.grid()
	plt.xlabel('frequency [MHz]')	
	plt.ylabel(r'$\Delta$ phase [deg]')
	
	
	# Save plot
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170925/s11_85_115_MHz.pdf', bbox_inches='tight')
	plt.close()
	
	
	
	
	
	# Figure 2
	# -------------------------------
	
	d1 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_1mK_noise_std_10mK.hdf5')
	
	plt.figure(figsize=[6.5, 8])
		
	par1 = eg.fit_polynomial_fourier('EDGES_polynomial', d1[0], d1[1], 5, Weights=d1[3])
	par2 = eg.fit_polynomial_fourier('Physical_model', d1[0], d1[1], 5, Weights=d1[3])
	
	RMS1 = np.sqrt(np.sum((d1[1] - par1[1])**2)/np.sum(len(d1[0])))
	RMS2 = np.sqrt(np.sum((d1[1] - par2[1])**2)/np.sum(len(d1[0])))
	
	
	plt.subplot(2,1,1)
	plt.plot(d1[0], d1[1]-par1[1], 'b')
	plt.plot(d1[0], d1[1]-par2[1]-0.08, 'r')
	plt.text(116, 0, 'RMS = ' + str(int(1000*RMS1)) + ' mK')
	plt.text(116, -0.08, 'RMS = ' + str(int(1000*RMS2)) + ' mK')
	plt.xlim([84, 124])
	plt.ylim([-0.1, 0.08])
	plt.yticks(np.arange(-0.12, 0.08, 0.02), '')
	plt.grid()
	plt.legend(['5-term EDGES polynomial','5-term Physical model'])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('[20 mK per division]')
	
	
	plt.subplot(2,1,2)
	plt.plot(eg.frequency2redshift(d1[0]), d1[1]-par1[1], 'b')
	plt.plot(eg.frequency2redshift(d1[0]), d1[1]-par2[1]-0.08, 'r')
	#plt.text(116, 0, 'RMS = ' + str(int(1000*RMS1)) + ' mK')
	#plt.text(116, -0.08, 'RMS = ' + str(int(1000*RMS2)) + ' mK')
	plt.xlim([16, 11])
	plt.ylim([-0.1, 0.08])
	plt.yticks(np.arange(-0.12, 0.08, 0.02), '')
	plt.grid()
	#plt.legend(['5-term EDGES polynomial','5-term Physical model'])
	plt.xlabel('redshift')
	plt.ylabel('[20 mK per division]')
		
		
	# Save plot
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20170925/residuals_85_115_MHz.pdf', bbox_inches='tight')
	plt.close()	
	
	return 0















def report_112_injection(fb, tb, wb):
	
	plt.close()
	plt.close()
	plt.close()
	
	Teor1, xHI, z = eg.model_eor(fb, T21=0.028, model_type='tanh', zr=12, dz=0.3)
	Teor2, xHI, z = eg.model_eor(fb, T21=0.028, model_type='tanh', zr=13, dz=0.3)
	Teor3, xHI, z = eg.model_eor(fb, T21=0.028, model_type='tanh', zr=14, dz=0.3)
	Teor4, xHI, z = eg.model_eor(fb, T21=0.028, model_type='tanh', zr=15, dz=0.3)
	
	Teor5, xHI, z = eg.model_eor(fb, T21=0.06, model_type='tanh', zr=13.5, dz=0.6)
	
	
	
	# o = eg.data_analysis_low_band_MCMC(fb, tb+Teor1, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_12_0.3', flow=85, fhigh=115, model_fg='EDGES_polynomial', Nfg=5, model_21cm='tanh_EoR', N21=2, Nchain=100000, Nthreads=6, rejected_fraction=0.3, a21_eor=0.028)
	#plt.close()
	
	# o = eg.data_analysis_low_band_MCMC(fb, tb+Teor2, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_13_0.3', flow=85, fhigh=115, model_fg='EDGES_polynomial', Nfg=5, model_21cm='tanh_EoR', N21=2, Nchain=100000, Nthreads=6, rejected_fraction=0.3, a21_eor=0.028)
	#plt.close()
	
	# o = eg.data_analysis_low_band_MCMC(fb, tb+Teor3, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_14_0.3', flow=85, fhigh=115, model_fg='EDGES_polynomial', Nfg=5, model_21cm='tanh_EoR', N21=2, Nchain=100000, Nthreads=6, rejected_fraction=0.3, a21_eor=0.028)
	#plt.close()
	
	#o = eg.data_analysis_low_band_MCMC(fb, tb+Teor4, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_15_0.3', flow=85, fhigh=115, model_fg='EDGES_polynomial', Nfg=5, model_21cm='tanh_EoR', N21=2, Nchain=100000, Nthreads=6, rejected_fraction=0.3, a21_eor=0.028)
	#plt.close()
	
	o = eg.data_analysis_low_band_MCMC(fb, tb+Teor5, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_3_noise_std_10mK_inj_60_13.5_0.6', flow=85, fhigh=115, model_fg='EDGES_polynomial', Nfg=5, model_21cm='tanh_EoR', N21=3, Nchain=200000, Nthreads=6, rejected_fraction=0.3)
	#plt.close()
		
		
	
	#o = eg.data_analysis_low_band_MCMC(fb, tb+Teor1, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_12_0.3', flow=85, fhigh=115, model_fg='Physical_model', Nfg=5, model_21cm='tanh_EoR', N21=2, Nchain=100000, Nthreads=6, rejected_fraction=0.3, a21_eor=0.028)
	#plt.close()
	
	#o = eg.data_analysis_low_band_MCMC(fb, tb+Teor2, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_13_0.3', flow=85, fhigh=115, model_fg='Physical_model', Nfg=5, model_21cm='tanh_EoR', N21=2, Nchain=100000, Nthreads=6, rejected_fraction=0.3, a21_eor=0.028)
	#plt.close()
	
	#o = eg.data_analysis_low_band_MCMC(fb, tb+Teor3, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_14_0.3', flow=85, fhigh=115, model_fg='Physical_model', Nfg=5, model_21cm='tanh_EoR', N21=2, Nchain=100000, Nthreads=6, rejected_fraction=0.3, a21_eor=0.028)
	#plt.close()
	
	#o = eg.data_analysis_low_band_MCMC(fb, tb+Teor4, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_15_0.3', flow=85, fhigh=115, model_fg='Physical_model', Nfg=5, model_21cm='tanh_EoR', N21=2, Nchain=100000, Nthreads=6, rejected_fraction=0.3, a21_eor=0.028)
	#plt.close()
	
	o = eg.data_analysis_low_band_MCMC(fb, tb+Teor5, 0.01*np.ones(len(fb)), wb, save='yes', save_filename='mcmc_physical_model_nfg_5_tanh_EoR_n21_3_noise_std_10mK_inj_60_13.5_0.6', flow=85, fhigh=115, model_fg='Physical_model', Nfg=5, model_21cm='tanh_EoR', N21=3, Nchain=200000, Nthreads=6, rejected_fraction=0.3)
	#plt.close()
	
	
	
	return 0














def results_report_112():
	
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()
	plt.close()	
	
	path_plot_save = home_folder + '/DATA/EDGES/results/plots/20170925/'
	
	
	
	# Load MCMC results
	# -------------------------------------------
	
	# Two parameters, no injection
	# -----------------------------
	d1 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_1mK_noise_std_10mK.hdf5')
	#q1 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_1mK_noise_std_10mK.hdf5')
	
	#d2 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_10mK_noise_std_10mK.hdf5')
	#q2 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_10mK_noise_std_10mK.hdf5')
	
	#d3 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK.hdf5')
	#q3 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK.hdf5')
	
	#d4 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_50mK_noise_std_10mK.hdf5')
	#q4 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_50mK_noise_std_10mK.hdf5')
	
	#d5 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_100mK_noise_std_10mK.hdf5')
	#q5 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_100mK_noise_std_10mK.hdf5')

	# Three parameters, no injection
	# -------------------------------
	#d6 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_3_noise_std_10mK.hdf5')
	#q6 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_3_noise_std_10mK.hdf5')
	
	
	# Two parameters, injected
	# --------------------------
	#d7 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_12_0.3.hdf5')
	#q7 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_12_0.3.hdf5')	
	
	#d8 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_13_0.3.hdf5')
	#q8 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_13_0.3.hdf5')	
	
	#d9 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_14_0.3.hdf5')
	#q9 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_14_0.3.hdf5')	
	
	#d10 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_15_0.3.hdf5')
	#q10 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_2_a21_28mK_noise_std_10mK_inj_28_15_0.3.hdf5')
	
	# Three parameters, injected
	# -------------------------------
	#d11 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_tanh_EoR_n21_3_noise_std_10mK_inj_60_13.5_0.6.hdf5')
	#q11 = eg.read_low_band_MCMC('/home/ramo7131/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_physical_model_nfg_5_tanh_EoR_n21_3_noise_std_10mK_inj_60_13.5_0.6.hdf5')	
	
	
	
	
	# 2 parameters, no injection
	labels=[r'$z_r$', r'$\Delta z$']
	 	
	#fig = corner.corner(d1[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_1mK.png', bbox_inches='tight'); plt.close()	
	
	#fig = corner.corner(q1[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_1mK.png', bbox_inches='tight'); plt.close()
	
	
	
	#fig = corner.corner(d2[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_10mK.png', bbox_inches='tight'); plt.close()
	
	#fig = corner.corner(q2[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_10mK.png', bbox_inches='tight'); plt.close()
	
	
	
	#fig = corner.corner(d3[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_28mK.png', bbox_inches='tight'); plt.close()
	
	#fig = corner.corner(q3[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_28mK.png', bbox_inches='tight'); plt.close()	
	
	
	
	#fig = corner.corner(d4[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_50mK.png', bbox_inches='tight'); plt.close()
	
	#fig = corner.corner(q4[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_50mK.png', bbox_inches='tight'); plt.close()
	
	
	
	#fig = corner.corner(d5[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_100mK.png', bbox_inches='tight'); plt.close()
	
	#fig = corner.corner(q5[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_100mK.png', bbox_inches='tight'); plt.close()
	
	
	
	#fig = corner.corner(d7[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]], truths=[12, 0.3], truth_color='r')
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_28mK_inj1.png', bbox_inches='tight'); plt.close()
	
	#fig = corner.corner(q7[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]], truths=[12, 0.3], truth_color='r')
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_28mK_inj1.png', bbox_inches='tight'); plt.close()	
	
	
	
	#fig = corner.corner(d8[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]], truths=[13, 0.3], truth_color='r')
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_28mK_inj2.png', bbox_inches='tight'); plt.close()
	
	#fig = corner.corner(q8[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]], truths=[13, 0.3], truth_color='r')
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_28mK_inj2.png', bbox_inches='tight'); plt.close()	
	
	
	
	#fig = corner.corner(d9[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]], truths=[14, 0.3], truth_color='r')
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_28mK_inj3.png', bbox_inches='tight'); plt.close()
	
	#fig = corner.corner(q9[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]], truths=[14, 0.3], truth_color='r')
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_28mK_inj3.png', bbox_inches='tight'); plt.close()	
	
	
	
	#fig = corner.corner(d10[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]], truths=[15, 0.3], truth_color='r')
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_28mK_inj4.png', bbox_inches='tight'); plt.close()
	
	#fig = corner.corner(q10[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[15.7, 11.4],[0, 1.4]], truths=[15, 0.3], truth_color='r')
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_28mK_inj4.png', bbox_inches='tight'); plt.close()	
	
	
	
	
	
	
	## 3 parameters, no injection
	labels=[r'$a_{21}$ [mK]', r'$z_r$', r'$\Delta z$']
	
	#fig = corner.corner(d6[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[0, 300], [15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_three_par.png', bbox_inches='tight'); plt.close()
	
	#fig = corner.corner(q6[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[0, 300], [15.7, 11.4],[0, 1.4]])
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_three_par.png', bbox_inches='tight'); plt.close()	
	
	#fig = corner.corner(d11[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[0, 300], [15.7, 11.4],[0, 1.4]], truths=[60, 13.5, 0.6], truth_color='r')
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'edges_polynomial_three_par_inj.png', bbox_inches='tight'); plt.close()
	
	#fig = corner.corner(q11[7][:,5::], labels=labels, bins=50, label_kwargs={'fontsize':17}, range=[[0, 300], [15.7, 11.4],[0, 1.4]], truths=[60, 13.5, 0.6], truth_color='r')
	#fig.set_size_inches(8,8); plt.savefig(path_plot_save + 'physical_model_three_par_inj.png', bbox_inches='tight'); plt.close()	

	
	
	

	
	return 0













def plots_for_low_band_paper(fig, save_noise_RMS='no', save_residuals='no', save_receiver_parameters='no'):
	
	
	if fig == 1:
		# k1 = eg.read_low_band_MCMC(home_folder + '/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_3_noise_std_13mK.hdf5')
		
		# labels = [r'$a_0$', r'$a_1$', r'$a_2$', r'$a_3$', r'$a_4$', r'$A$ [mK]', r'$\nu_0$ [MHz]', r'$w$ [MHz]']
		# fig    = corner.corner(k1[7][:,0::], labels=labels, bins=50, label_kwargs={'fontsize':17})
		# fig.set_size_inches(14,14)
		# plt.savefig(home_folder + '/DATA/EDGES/results/plots/20171024/MCMC_3par.pdf', bbox_inches='tight')
		# plt.close()			
	
		
		# k2 = eg.read_low_band_MCMC(home_folder + '/DATA/EDGES/results/low_band/products/MCMC_results/mcmc_edges_polynomial_nfg_5_flattened_gaussian_n21_4_noise_std_13mK.hdf5')
		
		# labels = [r'$a_0$', r'$a_1$', r'$a_2$', r'$a_3$', r'$a_4$', r'$A$ [mK]', r'$\nu_0$ [MHz]', r'$w$ [MHz]', r'$\tau$']
		# fig    = corner.corner(k2[7][:,0::], labels=labels, bins=50, label_kwargs={'fontsize':17}, levels=(0.68,0.95))
		# fig.set_size_inches(14,14)
		# plt.savefig(home_folder + '/DATA/EDGES/results/plots/20171122/MCMC_4par.pdf', bbox_inches='tight')
		# plt.close()		
	
	
		k3 = eg.read_low_band_MCMC(home_folder + '/DATA/EDGES/results/low_band/products/MCMC_results/x.hdf5')
		
		labels = [r'$a_0$', r'$a_1$', r'$a_2$', r'$a_3$', r'$a_4$', r'$A$ [mK]', r'$\nu_0$ [MHz]', r'$w$ [MHz]', r'$\tau$']
		fig    = corner.corner(k3[7][:,0::], labels=labels, bins=50, label_kwargs={'fontsize':17}, levels=(0.68,0.95))
		fig.set_size_inches(14,14)
		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20180528/MCMC_4par.pdf', bbox_inches='tight')
		plt.close()	
		
		
		
		
	


	if fig == 2:
		h1 = eg.level4_read('/home/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/original_gp_yes_bc_s11_2015_342.hdf5')
		h2 = eg.level4_read('/home/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')
		h3 = eg.level4_read('/home/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2017_153_50_120MHz.hdf5')
		
		h4 = eg.level4_read('/home/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/NS_nominal.hdf5')
		h5 = eg.level4_read('/home/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_shield_nominal.hdf5')
		h6 = eg.level4_read('/home/ramo7131/DATA/EDGES/spectra/level4/low_band2_2017/EW_with_NO_shield_nominal.hdf5')
		
		
		
		f1 = h1[21]
		f2 = h2[21]
		f3 = h3[21]
		f4 = h4[21]
		f5 = h5[21]
		f6 = h6[21]
		
		w1 = h1[24]
		w2 = h2[24]
		w3 = h3[24]
		w4 = h4[24]
		w5 = h5[24]
		w6 = h6[24]
		
		
		
		
		
		
		w1 = w1[f1<=100]
		w2 = w2[f2<=100]
		w3 = w3[f3<=100]
		w4 = w4[f4<=100]
		w5 = w5[f5<=100]
		w6 = w6[f6<=100]
		
		#w1 = w1/np.max(w1)
		#w2 = w2/np.max(w1)
		#w3 = w3/np.max(w1)
		#w4 = w4/np.max(w1)
		#w5 = w5/np.max(w1)
		#w6 = w6/np.max(w1)
		
		f1 = f1[f1<=100]
		f2 = f2[f2<=100]
		f3 = f3[f3<=100]
		f4 = f4[f4<=100]
		f5 = f5[f5<=100]
		f6 = f6[f6<=100]		
		
		
		
		
		# Plot
		plt.close()
		plt.close()
		plt.close()
		fig = plt.figure()
		plt.plot(f1, w1/np.max(w1), '.-');plt.ylim([0, 1.2])
		plt.plot(f2, w2/np.max(w1), '.-');plt.ylim([0, 1.2])
		plt.plot(f3, w3/np.max(w1), '.-');plt.ylim([0, 1.2])
		plt.plot(f4, w4/np.max(w1), '.-');plt.ylim([0, 1.2])
		plt.plot(f5, w5/np.max(w1), '.-');plt.ylim([0, 1.2])
		plt.plot(f6, w6/np.max(w1), '.-');plt.ylim([0, 1.2])
		plt.grid()
		plt.legend(['H1','H2','H3','H4','H5','H6'])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('number of data points per channel\nnormalized to maximum of H1')		
		fig.set_size_inches(11,5)
		plt.savefig(home_folder + '/WORK/papers/EDGES_low-band_results/figures/normalized_weights.pdf', bbox_inches='tight')
		plt.close()
		plt.close()
		
		
		
		
		print(np.max(w1)*42/60/60/64/24)
		print(np.max(w2)*42/60/60/64/24)
		print(np.max(w3)*42/60/60/64/24)
		print(np.max(w4)*42/60/60/64/24)
		print(np.max(w5)*42/60/60/64/24)
		print(np.max(w6)*42/60/60/64/24)
		
		
		
		
		## Save data
		#out1_T = np.array([f1, w1, w2, w3, w4, w5, w6])
		#out2_T = np.array([f1, w1/np.max(w1), w2/np.max(w1), w3/np.max(w1), w4/np.max(w1), w5/np.max(w1), w6/np.max(w1)])
		
		#out1 = out1_T.T
		#out2 = out2_T.T
		
		#np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/weights_not_normalized.txt', out1, header='frequency [MHz]\tH1\tH2\tH3\tH4\tH5\tH6')
		#np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/weights_normalized.txt', out2, header='frequency [MHz]\tH1\tH2\tH3\tH4\tH5\tH6')
		
		
		
		
		
		
		
		
	if fig == 3:
		
		
		
		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/home/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')
		
		
		# Remove day 2016-286
		rz = ry[my[:,1] != 286, :]
		wz = wy[my[:,1] != 286, :]
		pz = py[my[:,1] != 286, :]
		mz = my[my[:,1] != 286, :]




		# Filter based on daily RMS
		# ------------------------------------------------
		rms_thres = 250 #230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = rz[np.in1d(mz[:,1],days) == False, :]
		w = wz[np.in1d(mz[:,1],days) == False, :]
		p = pz[np.in1d(mz[:,1],days) == False, :]
		m = mz[np.in1d(mz[:,1],days) == False, :]

	
	
	
		# GHA range
		# ------------------------------------------------
		GHA_low  = 6
		GHA_high = 18	
	
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
	
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)








		
		RMS = np.zeros((10,6))
		
		flag = 0
		i    = 0
		while flag == 0:
			
			
			imax = (28)*(2**i)
			
			if imax > len(rr[:,0]):
				imax = len(rr[:,0])
				flag = 1
				
			print((imax, imax/28, imax/28/24))  # 28 10-trace averages per hour
	
	
	
			## Spectral averaging
			rx, wx   = eg.spectral_averaging(rr[0:imax,:], wr[0:imax,:])
			
			# Average model parameters
			px  = np.mean(pr[0:imax,:],  axis=0)
					
			# RFI cleaning at raw resolution
			Nsigma = 2.5
			wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)
			
			# Spectral binning
			Nsamples = 64
			fb, rb_low, wb_low = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)
		
			# Evaluating foreground model at binned frequencies
			tfg_low = eg.model_evaluate('EDGES_polynomial', px, fb/200)
		
			# Binned total temperature
			tb_low  = tfg_low + rb_low		
		


			
			
			# Cut to range
			flow  = 60 # 53  # 60
			fhigh = 94 # 99.5  # 94
			Nfg   = 5  # 6   # 5
			
			fb_cut = fb[(fb>=flow) & (fb<=fhigh)]
			tb_cut = tb_low[(fb>=flow) & (fb<=fhigh)]
			wb_cut = wb_low[(fb>=flow) & (fb<=fhigh)]
			
			par    = eg.fit_polynomial_fourier('EDGES_polynomial', fb_cut/200, tb_cut, Nfg, Weights=wb_cut)
			rb_cut = tb_cut - par[1]
			rms_cut = np.sqrt(np.sum((rb_cut[wb_cut>0])**2)/len(fb_cut[wb_cut>0]))
			
			
			
			sig = eg.low_band_signature_search(fb_cut, tb_cut, wb_cut, flow, fhigh, Nfg, 'SNR', save='no', fg_model='EDGES_polynomial', vr_array=np.arange(77,81,0.05), dv_array=np.arange(16,23,0.1), tau_array=np.array([7]), chi_array=np.array([0]))
			rms_with_signal = sig[-2]
			A  = sig[-10]
			v0 = sig[-8]
			dv = sig[-7]
			
			v       = sig[0]
			model21 = -sig[-4]
			residuals = -sig[-3]
			
			if i == 0:
				model21_all = np.copy(v)
				model21_all = np.vstack((model21_all, model21+residuals))
			elif i > 0:
				model21_all = np.vstack((model21_all, model21+residuals))
			
	
			
			RMS[i,0] = imax*(10*13/60)/60
			RMS[i,1] = rms_cut
			RMS[i,2] = rms_with_signal
			RMS[i,3] = A
			RMS[i,4] = v0
			RMS[i,5] = dv
			
			
			
			
			i = i+1
	
		# Save RMS data
		if save_noise_RMS == 'yes':
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/noise_RMS.txt', RMS, header='time [hr]\tRMS just foregrounds\tRMS foregrounds+21cm signal\t21cm amplitude\t21cm center\t21cm FWHM')
			
			
			
			
			
			
			



	if fig == 4:
		
		
		
		f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_dx, rmsb_dx, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read('/home/ramo7131/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')
		
		
		# Remove day 2016-286
		rz = ry[my[:,1] != 286, :]
		wz = wy[my[:,1] != 286, :]
		pz = py[my[:,1] != 286, :]
		mz = my[my[:,1] != 286, :]




		# Filter based on daily RMS
		# ------------------------------------------------
		rms_thres = 250 #230
		days      = mb_dx[rmsb_dx[:,0] > rms_thres, 1]
	
		r = rz[np.in1d(mz[:,1],days) == False, :]
		w = wz[np.in1d(mz[:,1],days) == False, :]
		p = pz[np.in1d(mz[:,1],days) == False, :]
		m = mz[np.in1d(mz[:,1],days) == False, :]

	
	
	
		# GHA range
		# ------------------------------------------------
		GHA_low  = 6
		GHA_high = 18	
	
		rq = r[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		wq = w[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
		pq = p[((m[:,3] >= GHA_low) & (m[:,3] <= GHA_high)), :]
	
		rr = np.copy(rq)
		wr = np.copy(wq)
		pr = np.copy(pq)








		
		hours = np.zeros(13)   # from 0.25 to 396 hours
		
		flag = 0
		i    = 0
		while flag == 0:
			
			
			imax = (7)*(2**i)
			
			if imax > len(rr[:,0]):
				imax = len(rr[:,0])
				flag = 1
				
			print((imax, imax/28, imax/28/24))  # 28 10-trace averages per hour
	
	
	
			## Spectral averaging
			rx, wx   = eg.spectral_averaging(rr[0:imax,:], wr[0:imax,:])
			
			# Average model parameters
			px  = np.mean(pr[0:imax,:],  axis=0)
					
			# RFI cleaning at raw resolution
			Nsigma = 2.5
			wxx  = eg.RFI_cleaning_spectrum_raw(f, rx, wx, Nterms_fg=16, Nsigma=Nsigma)
			
			# Spectral binning
			Nsamples = 64
			fb, rb_low, wb_low = eg.spectral_binning_number_of_samples(f, rx, wxx, nsamples=Nsamples)
		
			# Evaluating foreground model at binned frequencies
			tfg_low = eg.model_evaluate('EDGES_polynomial', px, fb/200)
		
			# Binned total temperature
			tb_low  = tfg_low + rb_low		
		


			
			
			# Cut to range
			flow  = 59.9  #60 # 53  # 60
			fhigh = 98 #94 # 99.5  # 94
			Nfg   = 4   # 6   # 5
			
			fb_cut = fb[(fb>=flow) & (fb<=fhigh)]
			tb_cut = tb_low[(fb>=flow) & (fb<=fhigh)]
			wb_cut = wb_low[(fb>=flow) & (fb<=fhigh)]
			
			par     = eg.fit_polynomial_fourier('EDGES_polynomial', fb_cut/200, tb_cut, Nfg, Weights=wb_cut)
			rb_cut  = tb_cut - par[1]
			
			Nsigma = 2.5
			wxx    = eg.RFI_cleaning_spectrum_raw(fb_cut, rb_cut, wb_cut, Nterms_fg=16, Nsigma=Nsigma)
			
			
			
			rms_cut = np.sqrt(np.sum((rb_cut[wxx>0])**2)/len(fb_cut[wxx>0]))
			
			
			
			#sig = eg.low_band_signature_search(fb_cut, tb_cut, wb_cut, flow, fhigh, Nfg, 'SNR', save='no', fg_model='EDGES_polynomial', vr_array=np.arange(77,81,0.05), dv_array=np.arange(16,23,0.1), tau_array=np.array([7]), chi_array=np.array([0]))
			#rms_with_signal = sig[-2]
			#A  = sig[-10]
			#v0 = sig[-8]
			#dv = sig[-7]
			
			#v       = sig[0]
			#model21 = -sig[-4]
			#residuals = -sig[-3]
			
			if i == 0:
				model21_all = np.copy(fb_cut)
				weights_all = np.copy(fb_cut)
				
				model21_all = np.vstack((model21_all, rb_cut))
				weights_all = np.vstack((weights_all, wxx))				

			elif i > 0:
				model21_all = np.vstack((model21_all, rb_cut))
				weights_all = np.vstack((weights_all, wxx))
			
	
			
			hours[i] = imax*(10*13/60)/60
			#RMS[i,1] = rms_cut
			#RMS[i,2] = rms_with_signal
			#RMS[i,3] = A
			#RMS[i,4] = v0
			#RMS[i,5] = dv
			
			print(imax*(10*13/60)/60)
			
			
			
			
			i = i+1
	
		# Save residuals
		if save_residuals == 'yes':
			
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/residuals.txt', model21_all.T)
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/residuals_weights.txt', weights_all.T)
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/residuals_hours.txt', hours.reshape((-1,1)))
			
					




	if fig == 5:
		
		
		plt.close()
		plt.close()
		plt.close()
		plt.close()
		plt.close()
		plt.close()
		
		
		fe = np.arange(50,101)
		s11_r1_25_1, sca_r1_25_1, off_r1_25_1, TU_r1_25_1, TC_r1_25_1, TS_r1_25_1 = eg.receiver_calibration('low_band_2015', fe, receiver_temperature=25, low_band_cal_file=0)
		s11_r1_25_2, sca_r1_25_2, off_r1_25_2, TU_r1_25_2, TC_r1_25_2, TS_r1_25_2 = eg.receiver_calibration('low_band_2015', fe, receiver_temperature=25, low_band_cal_file=2)
		s11_r1_25_3, sca_r1_25_3, off_r1_25_3, TU_r1_25_3, TC_r1_25_3, TS_r1_25_3 = eg.receiver_calibration('low_band_2015', fe, receiver_temperature=25, low_band_cal_file=5)
		
		
		
		plt.figure(1)
		plt.subplot(3,3,1)
		plt.plot(fe, 20*np.log10(np.abs(s11_r1_25_1)))
		plt.plot(fe, 20*np.log10(np.abs(s11_r1_25_2)))
		plt.plot(fe, 20*np.log10(np.abs(s11_r1_25_3)))
		plt.ylabel('S11 magnitude [dB]')
		plt.legend(['2015-08', '2017-05', '2017-09'])
		
		plt.subplot(3,3,2)
		plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(s11_r1_25_1)))
		plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(s11_r1_25_2)))
		plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(s11_r1_25_3)))
		plt.ylabel('S11 phase [deg]')
		
		
		plt.subplot(3,3,4)
		plt.plot(fe, sca_r1_25_1)
		plt.plot(fe, sca_r1_25_2)
		plt.plot(fe, sca_r1_25_3)
		plt.ylabel('C1')
		
		plt.subplot(3,3,5)
		plt.plot(fe, off_r1_25_1)
		plt.plot(fe, off_r1_25_2)
		plt.plot(fe, off_r1_25_3)
		plt.ylabel('C2 [K]')
		
		
		plt.subplot(3,3,7)
		plt.plot(fe, TU_r1_25_1)
		plt.plot(fe, TU_r1_25_2)
		plt.plot(fe, TU_r1_25_3)
		plt.ylabel('TU [K]')
		plt.xlabel('frequency [MHz]')
		
		plt.subplot(3,3,8)
		plt.plot(fe, TC_r1_25_1)
		plt.plot(fe, TC_r1_25_2)
		plt.plot(fe, TC_r1_25_3)
		plt.ylabel('TC [K]')
		plt.xlabel('frequency [MHz]')
		
		plt.subplot(3,3,9)
		plt.plot(fe, TS_r1_25_1)
		plt.plot(fe, TS_r1_25_2)
		plt.plot(fe, TS_r1_25_3)
		plt.ylabel('TS [K]')
		plt.xlabel('frequency [MHz]')
		
		

		# Output arrays
		low1_s11_mag_T = np.array([fe, 20*np.log10(np.abs(s11_r1_25_1)), 20*np.log10(np.abs(s11_r1_25_2)), 20*np.log10(np.abs(s11_r1_25_3))])
		low1_s11_ang_T = np.array([fe, (180/np.pi)*np.unwrap(np.angle(s11_r1_25_1)), (180/np.pi)*np.unwrap(np.angle(s11_r1_25_2)), (180/np.pi)*np.unwrap(np.angle(s11_r1_25_3))])
	
		low1_sca_T = np.array([fe, sca_r1_25_1, sca_r1_25_2, sca_r1_25_3])
		low1_off_T = np.array([fe, off_r1_25_1, off_r1_25_2, off_r1_25_3])
		low1_TU_T  = np.array([fe, TU_r1_25_1, TU_r1_25_2, TU_r1_25_3])
		low1_TC_T  = np.array([fe, TC_r1_25_1, TC_r1_25_2, TC_r1_25_3])
		low1_TS_T  = np.array([fe, TS_r1_25_1, TS_r1_25_2, TS_r1_25_3])
	
	
		low1_s11_mag = low1_s11_mag_T.T
		low1_s11_ang = low1_s11_ang_T.T
		low1_sca     = low1_sca_T.T
		low1_off     = low1_off_T.T
		low1_TU      = low1_TU_T.T
		low1_TC      = low1_TC_T.T
		low1_TS      = low1_TS_T.T		

		if save_receiver_parameters == 'yes':
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low1_s11_mag.txt', low1_s11_mag, header='freq [MHz]\ts11_mag_1 [dB]\ts11_mag_2 [dB]\ts11_mag_3 [dB]')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low1_s11_ang.txt', low1_s11_ang, header='freq [MHz]\ts11_ang_1 [deg]\ts11_ang_2 [deg]\ts11_ang_3 [deg]')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low1_C1.txt', low1_sca, header='freq [MHz]\tC1_1\tC1_2\tC1_3')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low1_C2.txt', low1_off, header='freq [MHz]\tC2_1 [K]\tC2_2 [K]\tC2_3 [K]')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low1_TU.txt', low1_TU, header='freq [MHz]\tTU_1 [K]\tTU_2 [K]\tTU_3 [K]')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low1_TC.txt', low1_TC, header='freq [MHz]\tTC_1 [K]\tTC_2 [K]\tTC_3 [K]')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low1_TS.txt', low1_TS, header='freq [MHz]\tTS_1 [K]\tTS_2 [K]\tTS_3 [K]')
			
			
			
			
		
		s11_r2_25, sca_r2_25, off_r2_25, TU_r2_25, TC_r2_25, TS_r2_25 = eg.receiver_calibration('low_band2_2017', fe, receiver_temperature=25, low_band_cal_file=0)
		s11_r2_15, sca_r2_15, off_r2_15, TU_r2_15, TC_r2_15, TS_r2_15 = eg.receiver_calibration('low_band2_2017', fe, receiver_temperature=15, low_band_cal_file=0)
		s11_r2_35, sca_r2_35, off_r2_35, TU_r2_35, TC_r2_35, TS_r2_35 = eg.receiver_calibration('low_band2_2017', fe, receiver_temperature=35, low_band_cal_file=0)
		
		s11_r2_24, sca_r2_24, off_r2_24, TU_r2_24, TC_r2_24, TS_r2_24 = eg.receiver_calibration('low_band2_2017', fe, receiver_temperature=24, low_band_cal_file=0)
		s11_r2_26, sca_r2_26, off_r2_26, TU_r2_26, TC_r2_26, TS_r2_26 = eg.receiver_calibration('low_band2_2017', fe, receiver_temperature=26, low_band_cal_file=0)



		plt.figure(2)
		plt.subplot(3,3,1)
		plt.plot(fe, 20*np.log10(np.abs(s11_r2_25)))
		plt.plot(fe, 20*np.log10(np.abs(s11_r2_15)))
		plt.plot(fe, 20*np.log10(np.abs(s11_r2_35)))
		
		plt.plot(fe, 20*np.log10(np.abs(s11_r2_24)))
		plt.plot(fe, 20*np.log10(np.abs(s11_r2_26)))
		plt.ylabel('S11 magnitude [dB]')
		plt.legend(['25degC', '15degC', '35degC', '24degC', '26degC'])		
		
		plt.subplot(3,3,2)
		plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(s11_r2_25)))
		plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(s11_r2_15)))
		plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(s11_r2_35)))
		
		plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(s11_r2_24)))
		plt.plot(fe, (180/np.pi)*np.unwrap(np.angle(s11_r2_26)))
		plt.ylabel('S11 phase [deg]')
		
		
		plt.subplot(3,3,4)
		plt.plot(fe, sca_r2_25)
		plt.plot(fe, sca_r2_15)
		plt.plot(fe, sca_r2_35)
		
		plt.plot(fe, sca_r2_24)
		plt.plot(fe, sca_r2_26)
		plt.ylabel('C1')
		
		plt.subplot(3,3,5)
		plt.plot(fe, off_r2_25)
		plt.plot(fe, off_r2_15)
		plt.plot(fe, off_r2_35)		
		
		plt.plot(fe, off_r2_24)
		plt.plot(fe, off_r2_26)
		plt.ylabel('C2 [K]')
		
		
		plt.subplot(3,3,7)
		plt.plot(fe, TU_r2_25)
		plt.plot(fe, TU_r2_15)
		plt.plot(fe, TU_r2_35)
		
		plt.plot(fe, TU_r2_24)
		plt.plot(fe, TU_r2_26)
		plt.ylabel('TU [K]')
		plt.xlabel('frequency [MHz]')		
		
		plt.subplot(3,3,8)
		plt.plot(fe, TC_r2_25)
		plt.plot(fe, TC_r2_15)
		plt.plot(fe, TC_r2_35)
		
		plt.plot(fe, TC_r2_24)
		plt.plot(fe, TC_r2_26)
		plt.ylabel('TC [K]')
		plt.xlabel('frequency [MHz]')	
		
		plt.subplot(3,3,9)
		plt.plot(fe, TS_r2_25)
		plt.plot(fe, TS_r2_15)
		plt.plot(fe, TS_r2_35)
		
		plt.plot(fe, TS_r2_24)
		plt.plot(fe, TS_r2_26)
		plt.ylabel('TS [K]')
		plt.xlabel('frequency [MHz]')
		
		

		# Output arrays
		low2_s11_mag_T = np.array([fe, 20*np.log10(np.abs(s11_r2_25)), 20*np.log10(np.abs(s11_r2_15)), 20*np.log10(np.abs(s11_r2_35)), 20*np.log10(np.abs(s11_r2_24)), 20*np.log10(np.abs(s11_r2_26))])
		low2_s11_ang_T = np.array([fe, (180/np.pi)*np.unwrap(np.angle(s11_r2_25)), (180/np.pi)*np.unwrap(np.angle(s11_r2_15)), (180/np.pi)*np.unwrap(np.angle(s11_r2_35)), (180/np.pi)*np.unwrap(np.angle(s11_r2_24)), (180/np.pi)*np.unwrap(np.angle(s11_r2_26))])
		
		low2_sca_T = np.array([fe, sca_r2_25, sca_r2_15, sca_r2_35, sca_r2_24, sca_r2_26])
		low2_off_T = np.array([fe, off_r2_25, off_r2_15, off_r2_35, off_r2_24, off_r2_26])
		low2_TU_T  = np.array([fe, TU_r2_25,  TU_r2_15,  TU_r2_35,  TU_r2_24,  TU_r2_26])
		low2_TC_T  = np.array([fe, TC_r2_25,  TC_r2_15,  TC_r2_35,  TC_r2_24,  TC_r2_26])
		low2_TS_T  = np.array([fe, TS_r2_25,  TS_r2_15,  TS_r2_35,  TS_r2_24,  TS_r2_26])
		
		low2_s11_mag = low2_s11_mag_T.T
		low2_s11_ang = low2_s11_ang_T.T
		low2_sca     = low2_sca_T.T
		low2_off     = low2_off_T.T
		low2_TU      = low2_TU_T.T
		low2_TC      = low2_TC_T.T
		low2_TS      = low2_TS_T.T			

		if save_receiver_parameters == 'yes':
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low2_s11_mag.txt', low2_s11_mag, header='freq [MHz]\ts11_mag_25 [dB]\ts11_mag_15 [dB]\ts11_mag_35 [dB]\ts11_mag_24 [dB]\ts11_mag_26 [dB]')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low2_s11_ang.txt', low2_s11_ang, header='freq [MHz]\ts11_ang_25 [deg]\ts11_ang_15 [deg]\ts11_ang_35 [deg]\ts11_ang_24 [deg]\ts11_ang_26 [deg]')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low2_C1.txt', low2_sca, header='freq [MHz]\tC1_25\tC1_15\tC1_35\tC1_24\tC1_26')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low2_C2.txt', low2_off, header='freq [MHz]\tC2_25 [K]\tC2_15 [K]\tC2_35 [K]\tC2_24 [K]\tC2_26 [K]')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low2_TU.txt', low2_TU, header='freq [MHz]\tTU_25 [K]\tTU_15 [K]\tTU_35 [K]\tTU_24 [K]\tTU_26 [K]')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low2_TC.txt', low2_TC, header='freq [MHz]\tTC_25 [K]\tTC_15 [K]\tTC_35 [K]\tTC_24 [K]\tTC_26 [K]')
			np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/receiver_low2_TS.txt', low2_TS, header='freq [MHz]\tTS_25 [K]\tTS_15 [K]\tTS_35 [K]\tTS_24 [K]\tTS_26 [K]')
			
		
		
		
		
	if fig == 6:
		sim2 = np.genfromtxt(home_folder + '/WORK/papers/EDGES_low-band_results/revision2/s11_calibration_low_band_LNA25degC_2015-09-16-12-30-29_simulator2_long.txt')
		
		mag =  20*np.log10(np.abs(sim2[:,19]+1j*sim2[:,20]))
		ang =  (180/np.pi)*np.unwrap(np.angle(sim2[:,19]+1j*sim2[:,20]))
		
		par   = np.polyfit(sim2[:,0], ang, 1)
		model = np.polyval(par, sim2[:,0])
		
		plt.subplot(3,1,1)
		plt.plot(sim2[:,0], mag)
		plt.grid()
		plt.ylabel('magnitude [dB]')
		
		plt.subplot(3,1,2)
		plt.plot(sim2[:,0], ang)
		plt.grid()
		plt.ylabel('phase [deg]')
		
		plt.subplot(3,1,3)
		plt.plot(sim2[:,0], ang-model)
		plt.grid()
		plt.xlabel('frequency [MHz]')
		plt.ylabel('$\Delta$ phase [deg]')
		
			
	return 0 #low2_s11_mag, low2_s11_ang, low2_sca, low2_off, low2_TU, low2_TC, low2_TS






def simulation_of_alan_noise_source_verification():
	
	
	v = np.arange(50,101,1)
	
	T21, xhi, z = eg.model_eor(v, T21=-3.3, model_type='gaussian_flattened_1', fr=78, df=20, tau0=7, tilt=0)
	
	
	T = 10000*(v/75)**(-2.5)  +  T21
	
	p = eg.fit_polynomial_fourier('EDGES_polynomial', v/75, T, 5)
	plt.plot(v, T21)
	plt.plot(v, T-p[1])
	plt.grid()
	plt.ylabel('T [K]')
	plt.xlabel('frequency [MHz]')
	
	print(np.sqrt(np.sum((T-p[1])**2)/len(v)))
	
	
	
	
	
	return v, T21, T

















def low_band_3_s11_power_test():
	

	# Data paths
	path    = home_folder + '/DATA/EDGES/calibration/receiver_calibration/low_band3/receiver_s11_power_test/'



	flow  = 50
	fhigh = 120
	
	# ------- Receiver S11 ------------------------

	# Reading measurements
	o,   fr0  = rc.s1p_read(path + '25dbm_25C/Open.s1p')           
	s,   fr0  = rc.s1p_read(path + '25dbm_25C/Short.s1p')
	l,   fr0  = rc.s1p_read(path + '25dbm_25C/Match.s1p')
	LNA0, fr0 = rc.s1p_read(path + '25dbm_25C/Receiver3.s1p')


	# Models of standards
	resistance_of_match = 49.99 # female
	md = 1
	oa, sa, la = rc.agilent_85033E(fr0, resistance_of_match, md)

	# Correction of measurements
	LNAc, x1, x2, x3   = rc.de_embed(oa, sa, la, o, s, l, LNA0)

	LNA_25 = LNAc[(fr0/1e6>=flow) & (fr0/1e6<=fhigh)]
	fr  = fr0[(fr0/1e6>=flow) & (fr0/1e6<=fhigh)]






	# ------- Receiver S11 ------------------------

	# Reading measurements
	o,   fr0  = rc.s1p_read(path + '30dbm_25C/Open.s1p')           
	s,   fr0  = rc.s1p_read(path + '30dbm_25C/Short.s1p')
	l,   fr0  = rc.s1p_read(path + '30dbm_25C/Match.s1p')
	LNA0, fr0 = rc.s1p_read(path + '30dbm_25C/Receiver3.s1p')


	# Models of standards
	resistance_of_match = 49.99 # female
	md = 1
	oa, sa, la = rc.agilent_85033E(fr0, resistance_of_match, md)

	# Correction of measurements
	LNAc, x1, x2, x3   = rc.de_embed(oa, sa, la, o, s, l, LNA0)

	LNA_30 = LNAc[(fr0/1e6>=flow) & (fr0/1e6<=fhigh)]
	fr  = fr0[(fr0/1e6>=flow) & (fr0/1e6<=fhigh)]
	
	
	
	
	
	
	

	# ------- Receiver S11 ------------------------

	# Reading measurements
	o,   fr0  = rc.s1p_read(path + '35dbm_25C/Open.s1p')           
	s,   fr0  = rc.s1p_read(path + '35dbm_25C/Short.s1p')
	l,   fr0  = rc.s1p_read(path + '35dbm_25C/Match.s1p')
	LNA0, fr0 = rc.s1p_read(path + '35dbm_25C/Receiver3.s1p')


	# Models of standards
	resistance_of_match = 49.99 # female
	md = 1
	oa, sa, la = rc.agilent_85033E(fr0, resistance_of_match, md)

	# Correction of measurements
	LNAc, x1, x2, x3   = rc.de_embed(oa, sa, la, o, s, l, LNA0)

	LNA_35 = LNAc[(fr0/1e6>=flow) & (fr0/1e6<=fhigh)]
	fr  = fr0[(fr0/1e6>=flow) & (fr0/1e6<=fhigh)]
	
	
	
	
	
	
	

	# ------- Receiver S11 ------------------------

	# Reading measurements
	o,   fr0  = rc.s1p_read(path + '40dbm_25C/Open.s1p')           
	s,   fr0  = rc.s1p_read(path + '40dbm_25C/Short.s1p')
	l,   fr0  = rc.s1p_read(path + '40dbm_25C/Match.s1p')
	LNA0, fr0 = rc.s1p_read(path + '40dbm_25C/Receiver3.s1p')


	# Models of standards
	resistance_of_match = 49.99 # female
	md = 1
	oa, sa, la = rc.agilent_85033E(fr0, resistance_of_match, md)

	# Correction of measurements
	LNAc, x1, x2, x3   = rc.de_embed(oa, sa, la, o, s, l, LNA0)

	LNA_40 = LNAc[(fr0/1e6>=flow) & (fr0/1e6<=fhigh)]
	fr  = fr0[(fr0/1e6>=flow) & (fr0/1e6<=fhigh)]
		
	
	
	
	
	
	
		
	
	# ------- Receiver S11 ------------------------

	# Reading measurements
	o,   fr0  = rc.s1p_read(path + '45dbm_25C/Open.s1p')           
	s,   fr0  = rc.s1p_read(path + '45dbm_25C/Short.s1p')
	l,   fr0  = rc.s1p_read(path + '45dbm_25C/Match.s1p')
	LNA0, fr0 = rc.s1p_read(path + '45dbm_25C/Receiver3.s1p')


	# Models of standards
	resistance_of_match = 49.99 # female
	md = 1
	oa, sa, la = rc.agilent_85033E(fr0, resistance_of_match, md)

	# Correction of measurements
	LNAc, x1, x2, x3   = rc.de_embed(oa, sa, la, o, s, l, LNA0)

	LNA_45 = LNAc[(fr0/1e6>=flow) & (fr0/1e6<=fhigh)]
	fr  = fr0[(fr0/1e6>=flow) & (fr0/1e6<=fhigh)]
		
		
	
	
	
	plt.close()
	

	plt.figure(1)
	plt.subplot(2,2,1)
	plt.plot(fr/1e6, 20*np.log10(np.abs(LNA_25)))
	plt.plot(fr/1e6, 20*np.log10(np.abs(LNA_30)))
	plt.plot(fr/1e6, 20*np.log10(np.abs(LNA_35)))
	plt.plot(fr/1e6, 20*np.log10(np.abs(LNA_40)))
	plt.plot(fr/1e6, 20*np.log10(np.abs(LNA_45)))
	plt.ylabel('magnitude [dB]')
	plt.grid()
	plt.legend(['-25dBm','-30dBm','-35dBm','-40dBm','-45dBm'])
	
	plt.subplot(2,2,3)
	plt.plot(fr/1e6, 20*np.log10(np.abs(LNA_25)) - 20*np.log10(np.abs(LNA_45)))
	plt.plot(fr/1e6, 20*np.log10(np.abs(LNA_30)) - 20*np.log10(np.abs(LNA_45)))
	plt.plot(fr/1e6, 20*np.log10(np.abs(LNA_35)) - 20*np.log10(np.abs(LNA_45)))
	plt.plot(fr/1e6, 20*np.log10(np.abs(LNA_40)) - 20*np.log10(np.abs(LNA_45)))
	plt.plot(fr/1e6, 20*np.log10(np.abs(LNA_45)) - 20*np.log10(np.abs(LNA_45)))
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ magnitude [dB]')
	plt.grid()
	
	
	
	plt.subplot(2,2,2)
	plt.plot(fr/1e6, (180/np.pi)*np.unwrap(np.angle(LNA_25)))
	plt.plot(fr/1e6, (180/np.pi)*np.unwrap(np.angle(LNA_30)))
	plt.plot(fr/1e6, (180/np.pi)*np.unwrap(np.angle(LNA_35)))
	plt.plot(fr/1e6, (180/np.pi)*np.unwrap(np.angle(LNA_40)))
	plt.plot(fr/1e6, (180/np.pi)*np.unwrap(np.angle(LNA_45)))
	plt.ylabel('phase[deg]')
	plt.grid()
	
	plt.subplot(2,2,4)
	plt.plot(fr/1e6, (180/np.pi)*np.unwrap(np.angle(LNA_25)) - (180/np.pi)*np.unwrap(np.angle(LNA_45)))
	plt.plot(fr/1e6, (180/np.pi)*np.unwrap(np.angle(LNA_30)) - (180/np.pi)*np.unwrap(np.angle(LNA_45)))
	plt.plot(fr/1e6, (180/np.pi)*np.unwrap(np.angle(LNA_35)) - (180/np.pi)*np.unwrap(np.angle(LNA_45)))
	plt.plot(fr/1e6, (180/np.pi)*np.unwrap(np.angle(LNA_40)) - (180/np.pi)*np.unwrap(np.angle(LNA_45)))
	plt.plot(fr/1e6, (180/np.pi)*np.unwrap(np.angle(LNA_45)) - (180/np.pi)*np.unwrap(np.angle(LNA_45)))
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ phase[deg]')
	plt.grid()
	
	
	



	plt.figure(2)
	plt.subplot(2,2,1)
	plt.plot(fr/1e6, np.real(LNA_25))
	plt.plot(fr/1e6, np.real(LNA_30))
	plt.plot(fr/1e6, np.real(LNA_35))
	plt.plot(fr/1e6, np.real(LNA_40))
	plt.plot(fr/1e6, np.real(LNA_45))
	plt.ylabel('real(S11)')
	plt.grid()
	plt.legend(['-25dBm','-30dBm','-35dBm','-40dBm','-45dBm'])
	
	plt.subplot(2,2,3)
	plt.plot(fr/1e6, np.real(LNA_25) - np.real(LNA_45))
	plt.plot(fr/1e6, np.real(LNA_30) - np.real(LNA_45))
	plt.plot(fr/1e6, np.real(LNA_35) - np.real(LNA_45))
	plt.plot(fr/1e6, np.real(LNA_40) - np.real(LNA_45))
	plt.plot(fr/1e6, np.real(LNA_45) - np.real(LNA_45))
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ real(S11)')
	plt.grid()
	
	
	
	plt.subplot(2,2,2)
	plt.plot(fr/1e6, np.imag(LNA_25))
	plt.plot(fr/1e6, np.imag(LNA_30))
	plt.plot(fr/1e6, np.imag(LNA_35))
	plt.plot(fr/1e6, np.imag(LNA_40))
	plt.plot(fr/1e6, np.imag(LNA_45))
	plt.ylabel('imag(S11)')
	plt.grid()
	
	plt.subplot(2,2,4)
	plt.plot(fr/1e6, np.imag(LNA_25) - np.imag(LNA_45))
	plt.plot(fr/1e6, np.imag(LNA_30) - np.imag(LNA_45))
	plt.plot(fr/1e6, np.imag(LNA_35) - np.imag(LNA_45))
	plt.plot(fr/1e6, np.imag(LNA_40) - np.imag(LNA_45))
	plt.plot(fr/1e6, np.imag(LNA_45) - np.imag(LNA_45))
	plt.xlabel('frequency [MHz]')
	plt.ylabel(r'$\Delta$ imag(S11)')
	plt.grid()








	
	return fr, LNA_25, LNA_30, LNA_35, LNA_40, LNA_45











def plot_mesinger_phenomenological():
	
	
	L = np.genfromtxt('/home/ramo7131/DATA/EDGES/results/high_band/products/model_rejection/mesinger/likelihood/likelihood_10000models_20171022.txt')
	p = np.genfromtxt('/home/ramo7131/DATA/EDGES/results/high_band/products/model_rejection/mesinger/likelihood/phenomenological_parameters_10000models_20171110.txt')
	
	
	cmap = 'gnuplot'
	
	plt.subplot(2,2,1);
	plt.scatter(p[:,1], -1000*p[:,3], c=L[:,1], s=20, vmin=0, vmax=20, cmap=cmap) #; plt.colorbar()
	plt.plot([90, 90],[-15, 315], 'c--')
	plt.xlim([50, 205])
	plt.xticks(np.arange(60,201,20))
	plt.ylim([-15, 315])
	plt.yticks(np.arange(0,315,50))
	plt.ylabel('peak absorption amplitude [mK]')
	
	plt.subplot(2,2,3);
	plt.scatter(p[:,1], p[:,4], c=L[:,1], s=20, vmin=0, vmax=20, cmap=cmap) #; plt.colorbar()
	plt.plot([90, 90],[-5, 105], 'c--')
	plt.xlim([50, 205])
	plt.xticks(np.arange(60,201,20))
	plt.ylim([-5, 105])
	plt.xlabel('peak absorption frequency [MHz]')
	plt.ylabel('absorption FWHM [MHz]')
	
	plt.subplot(2,2,4);
	plt.scatter(-1000*p[:,3], p[:,4], c=L[:,1], s=20, vmin=0, vmax=20, cmap=cmap); ax = plt.colorbar(); ax.set_label('likelihood',rotation=90)
	plt.ylim([-5, 105])
	plt.xlim([-15, 315])
	plt.xticks(np.arange(0,315,50))
	plt.xlabel('peak absorption amplitude [mK]')
	
	
	
	index = np.arange(len(p[:,0]))
	ik    = index[p[:,4]==3]
	f     = np.arange(41, 198, 0.01)
	
	m_all = np.zeros((len(ik), len(f)))
	for i in range(len(ik)):
			
		m, ao = eg.model_eor_mesinger(ik[i], f, interpolation_kind='linear')
		m_all[i,:] = m
	
	return f, m_all, p












def plot_for_low_band_paperl(save = 'no'):

	band = 'low_band_2015'
	year_day = '2016_303_00'
	LST_1 = 0
	LST_2 = 24
	case_beam_factor = 2
	
	ant_s11=243
	receiver_temperature = 25
	low_band_cal_file = 3  # 50-120 MHz
	
	
	
	
	
	#file_name = home_folder + '/DATA/EDGES/spectra/level1/low_band/300_350/level1_2016_299_00_300_350.mat'
	#ds, dd    = eg.level1_MAT(file_name)
	
	

	
	
	
	fin, t_2D, w_2D, m_2D = eg.data_selection_single_day_v3(band, year_day, LST_1, LST_2, sun_el_max=100, moon_el_max=100, amb_hum_max=200, min_receiver_temp=-50, max_receiver_temp=200)
	
	dant, damb, dhot, dd = eg.level1_MAT_three_loads('/media/ramo7131/SSD_4TB/EDGES/spectra/level0/low_band/level1_2016_303_00_300_350.mat')
	ff, lf, lh = eg.frequency_edges(50, 100)
	
	dant_X = dant[1459,:]
	damb_X = damb[1459,:]
	dhot_X = dhot[1459,:]
	
	dant_X = dant_X[(ff>=np.min(fin)) & (ff<=np.max(fin))]
	damb_X = damb_X[(ff>=np.min(fin)) & (ff<=np.max(fin))]
	dhot_X = dhot_X[(ff>=np.min(fin)) & (ff<=np.max(fin))]
		
	
	
	
	cf = np.zeros((len(m_2D[:,0]), len(fin)))
	for j in range(len(m_2D[:,0])):
		cf[j,:]      = eg.antenna_beam_factor_interpolation(band, np.array([m_2D[j,3]]), fin, case_beam_factor=case_beam_factor)
	
	s11_ant = eg.models_antenna_s11_remove_delay(band, 'blade', fin, antenna_s11_day=243, model_type='polynomial', Nfit=9)
	s11_LNA, sca, off, TU, TC, TS = eg.receiver_calibration(band, fin, receiver_temperature=receiver_temperature, low_band_cal_file=low_band_cal_file)
	tc_with_loss_and_beam = eg.calibrated_antenna_temperature(t_2D, s11_ant, s11_LNA, sca, off, TU, TC, TS)
	cg = eg.combined_gain(band, fin, antenna_s11_day=ant_s11, antenna_s11_Nfit=9, flag_ground_loss=1, ground_loss_type='value', ground_loss_percent=0.5, flag_antenna_loss=1, flag_balun_connector_loss=1)		
	Tambient = 273.15 + 25 #m_2D[i,9]		
	tc_with_beam = (tc_with_loss_and_beam - Tambient*(1-cg))/cg
	
	
	tc = tc_with_beam/cf
	
	
	
	
	
	fin0 = np.copy(fin)
	
	dant_X = dant_X[fin0 <= 100]
	damb_X = damb_X[fin0 <= 100]
	dhot_X = dhot_X[fin0 <= 100]
	
	
	
	fin  = fin0[fin0 <= 100]
	tx_nc = t_2D[1459,:]
	tx_nc = tx_nc[fin0 <= 100]
	
		
	tx = tc[1459,:]
	tx = tx[fin0 <= 100]
	wx = w_2D[1459,:]
	wx = wx[fin0 <= 100]
	
	tnr = np.copy(tx)
	wnr = np.copy(wx)
	


	# RFI flaging for FM band
	kk, wk = eg.RFI_excision_raw_frequency(fin, tx, wx)        # RFI filter A
	wk2 = eg.RFI_cleaning_spectrum(fin, tnr, wk, Nsamples=32, Nterms_fg=16, Nterms_std=3, Nsigma=3.5)   # RFI filter B
	tnr[wk2 == 0] = 0
	wnr[wk2 == 0] = 0



	Nfg = 5
	par_fg  = eg.fit_polynomial_fourier('EDGES_polynomial', fin/200, tnr, Nfg, Weights=wnr)
	model   = eg.model_evaluate('EDGES_polynomial', par_fg[0], fin/200)
	r       = tnr - model
	r[wk2 == 0] = 0
	
	
	Nsamples   = 64 # 390.6 kHz
	fb, rb, wb = eg.spectral_binning_number_of_samples(fin, r, wnr, nsamples=Nsamples)
	
	tb_fg = eg.model_evaluate('EDGES_polynomial', par_fg[0], fb/200)
	tb    = tb_fg + rb
	
	
	
	out1T = np.array([fin, dant_X, damb_X, dhot_X, tx_nc, tx, tnr, r, wnr])
	out1  = out1T.T
	out2T = np.array([fb, tb, rb, wb])
	out2  = out2T.T
	
	
	
	
	if save == 'yes':
		
		np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/data_raw.txt', out1, header='freq [MHz]\tPant\tPamb\tPhot\tTant_unc [K]\tTant_cal [K]\tTant_norfi [K]\tresiduals [K]\tweights')
		np.savetxt(home_folder + '/WORK/papers/EDGES_low-band_results/figures/data_binned.txt', out2, header='freq [MHz]\tTant_cal [K]\tresiduals [K]\tweights')	
	
	

	return out1, out2

















def low_band_video_audio():
	

	
	# Signal
	d = np.genfromtxt(home_folder + '/DATA/EDGES/spectra/averages/low_band/alan_averages/model_plus_noise.txt')
	ff = d[:,0]
	TT = d[:,2]
	
		
	plt.close()
	path_plot_save = home_folder + '/WORK/EDGES/signal_movie/'
	
	size_x = 13
	size_y = 9
	dx     = 0.8
	dy     = 0.62
	x0     = 0.13
	y0     = 0.15  
	
	
	
	buffer_start = 21  # number of figures with fixed images at beginning
	buffer_end   = 21  # number of figures with fixed images at end
	
	
	for i in range(buffer_start+len(ff)+buffer_end):  # range(3):
		
		if i < buffer_start:
			j = 0
			
		elif i > (buffer_start+len(ff))-1:
			j = 122
			
		elif (i >= buffer_start) or (i <= (buffer_start+len(ff))-1):
			j = i-21
			

		f1 = plt.figure(num=1, figsize=(size_x, size_y))
		ax = f1.add_axes([x0, y0, dx, dy])
		ax.plot(ff,  TT, 'b', linewidth=3)
		ax.plot([ff[j], ff[j]], [-700, 100], 'r', linewidth=2)
		ax.plot(ff[j], TT[j], '.r', markersize=40)
		ax.set_xlim(48, 102)
		ax.set_ylim(-650, 100)
		ax.grid()
		ax.set_xticks([50,60,70,80,90,100])
		ax.set_xticklabels([50,60,70,80,90,100], fontsize=21)
		ax.set_yticks([-600,-500,-400,-300,-200,-100,0,100])
		ax.set_yticklabels([-600,-500,-400,-300,-200,-100,0,100], fontsize=21)
		ax.set_xlabel('Frequency [MHz]', fontsize=26, fontweight='bold')
		ax.set_ylabel('Temperature [mK]', fontsize=26, fontweight='bold')
		


		ax2 = ax.twiny()
		v0 = 48
		ax2.set_xticks(np.array((np.abs(50-v0), np.abs(60-v0), np.abs(70-v0), np.abs(80-v0), np.abs(90-v0), np.abs(100-v0), np.abs(102-v0))))
		ax2.set_xticklabels(['114', '151', '190', '232', '278', '325', ''], fontsize=21)
		ax.text(61.5,  175, r'Age of the Universe [Myr]', fontsize=26, fontweight='bold')
		ax.text(58.7,  300, r'EDGES Measurement', fontsize=38, color=[0.5, 0.5, 0.5], fontweight='bold')
		ax.text(76.3, -825, r'Video credit: Raul Monsalve & Adam Beardsley for the EDGES Collaboration', fontsize=11, color=[0.5, 0.5, 0.5])
		
		


		
		plt.savefig(path_plot_save + 'figure_' + str(int(i)).zfill(3) + '.png') #, bbox_inches='tight')
		plt.close()
		plt.close()

		

	# To make video with sound:
	# linux terminal>>  avconv -f image2 -r 17.57 -start_number 000 -i ~/Desktop/movie2/figure_%3d.png -vcodec png -y ~/Desktop/movie2/movie2.mp4   # replace png for mjpeg for lossy version. -r 17.57 is the frames per second.
	# linux terminal>>  avconv -i ~/Desktop/movie2/movie2.mp4 -i ~/Desktop/movie2/edges_sound_clean.wav -c copy ~/Desktop/movie2/movie3.avi
	
		

	return 0



















def batch_fialkov_likelihood():
	
	o = eg.likelihood_fialkov_Npar4_Npix20('_syst_std_0.035K_fg_EDGES_polynomial', syst_std=0.035, foreground_model='EDGES_polynomial')
	o = eg.likelihood_fialkov_Npar4_Npix20('_syst_std_0.025K_fg_EDGES_polynomial', syst_std=0.025, foreground_model='EDGES_polynomial')
	o = eg.likelihood_fialkov_Npar4_Npix20('_syst_std_0.018K_fg_EDGES_polynomial', syst_std=0.018, foreground_model='EDGES_polynomial')
	o = eg.likelihood_fialkov_Npar4_Npix20('_syst_std_0.035K_fg_Physical_model',   syst_std=0.035, foreground_model='Physical_model')

	return 0








def plot_LW_150MHz_scaling():
	
	d = np.genfromtxt('/home/ramo7131/DATA/EDGES/results/high_band/products/temperature_at_140MHz/nominal/LST_mean_std_20180114.txt')
	
	d2   = np.genfromtxt('/home/ramo7131/DATA/EDGES/results/high_band/products/temperature_at_140MHz/simulated_LW_map/LW_140MHz_simulation_tant.txt')
	LST2 = np.genfromtxt('/home/ramo7131/DATA/EDGES/results/high_band/products/temperature_at_140MHz/simulated_LW_map/LW_140MHz_simulation_LST.txt')
	
	plt.close()
	
	plt.figure(1)
	plt.plot(LST2[0:-5]+(1/6), d2[0:-5], 'C1')
	plt.plot(LST2[0:-5]+(1/6), 1.1*d2[0:-5], 'C0')
	plt.plot(d[:,0], d[:,1], '.r', markersize=7)
	
	plt.xlabel('LST [hrs]')
	plt.ylabel('antenna temperature [K]')
	
	plt.legend(['Prediction from ORIGINAL LW map','Prediction from ADJUSTED LW map','EDGES data'], loc=6)
	plt.title('Comparison at 140 MHz', fontsize=18)
	
	
	
	plt.figure(2)
	plt.plot(d[:,0], d[:,2], '.r', markersize=7)
	plt.xlabel('LST [hrs]')
	plt.ylabel('$1\sigma$ uncertainty [K]')	
	
	
	
	return 0









def plot_LW_map():
	
	m = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/sky/LW_150MHz_map/150_healpix_gal_nested_R8.txt')
	hp.cartview(m, nest=True, min=200, max=1000, cmap='jet', title='Landecker & Wielebinski (1970) 150-MHz Map')
	
	return 0










def plot_mesinger_figure():
	
	L = np.genfromtxt('/home/ramo7131/DATA/EDGES/results/high_band/products/model_rejection/mesinger/likelihood/likelihood_10000models_new_method_20171230.txt')


	v           = np.arange(50, 196, 1)
	model21_all = np.zeros((10000, len(v)))
	
	for i in range(10000):
		
		model_number = i
		model21, aux = eg.model_eor_mesinger(model_number, v, interpolation_kind='linear')
		model21_all[i,:] = model21
	
		
	

	return v, model21_all, L











def plot_feature_in_high_band_data():

	"""
	
	2018-04-07
	
	"""
	
	
	f, r, p, w, rms, m = hb.level3read('case100')
	
	avr, avw   = eg.spectral_averaging(r, w)
	fb, rb, wb = eg.spectral_binning_number_of_samples(f, avr, avw, nsamples=64)
		
	avp = np.mean(p, axis=0)
	av_model_factor = np.polyval(avp, fb/200) 
	av_model = av_model_factor * ((fb/200)**(-2.5))
	
	tb = rb + av_model
	


	fL=76
	fH=100
	fx=fb[(fb>=fL) & (fb<=fH)]
	tx=tb[(fb>=fL) & (fb<=fH)]
	wx=wb[(fb>=fL) & (fb<=fH)]
	
	
	par = eg.fit_polynomial_fourier('Physical_model', fx, tx, 5, Weights=wx)
	
	plt.plot(fx[wx>0], (tx-par[1])[wx>0])
	
	plt.xlim([70, 105])
	plt.ylim([-0.6, 0.6])
	plt.grid()
	plt.xlabel('frequency [MHz]')
	plt.ylabel('temperature [K]')



	
	return fb, tb, wb









def low_band_saving_GHA_4hr_averages():
	
	f, t, r, w, p, m, rms, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fg, tg, rg, wg, pg, gg, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')
	
	
	# Save data
	# ----------------------------------
	#
	outT = np.array([fg, tg[0,:], wg[0,:], tg[1,:], wg[1,:], tg[2,:], wg[2,:], tg[3,:], wg[3,:], tg[4,:], wg[4,:], tg[5,:], wg[5,:]])
	out  = outT.T
	np.savetxt(home_folder + '/DATA/EDGES/results/low_band/products/average_spectra/GHA_4HR_AV/GHA_4HR_AV.txt', out, header='freq [MHz]\tt0 [K]\tw0\tt4 [K]\tw4\tt8 [K]\tw8\tt12 [K]\tw12\tt16 [K]\tw16\tt20 [K]\tw20')
	
	
	
	# Plotting
	# ---------------------
	
	#foreground_model = 'EDGES_polynomial'
	foreground_model = 'Physical_model'
	Nfg = 5
	
	
	fig = plt.figure(figsize=(6, 8))
	X=0;   p = eg.fit_polynomial_fourier(foreground_model, fg, tg[X,:], Nfg); plt.plot(fg, tg[X,:]- p[1])
	X=1;   p = eg.fit_polynomial_fourier(foreground_model, fg, tg[X,:], Nfg); plt.plot(fg, tg[X,:]- p[1]-1)
	X=2;   p = eg.fit_polynomial_fourier(foreground_model, fg, tg[X,:], Nfg); plt.plot(fg, tg[X,:]- p[1]-2)
	X=3;   p = eg.fit_polynomial_fourier(foreground_model, fg, tg[X,:], Nfg); plt.plot(fg, tg[X,:]- p[1]-3)
	X=4;   p = eg.fit_polynomial_fourier(foreground_model, fg, tg[X,:], Nfg); plt.plot(fg, tg[X,:]- p[1]-4)
	X=5;   p = eg.fit_polynomial_fourier(foreground_model, fg, tg[X,:], Nfg); plt.plot(fg, tg[X,:]- p[1]-5)
	
	plt.yticks([0, -1, -2, -3, -4, -5], [0, 4, 8, 12, 16, 20])
	plt.ylim([-6, 1])
	plt.xlabel('frequency [MHz]')
	plt.ylabel('Center GHA  [1 K per division]')
	plt.title(foreground_model + ' ' + str(Nfg) + ' terms')
	
	# saving plot
	plt.savefig(home_folder + '/DATA/EDGES/results/plots/20180501/GHA_4Hr_AV_' + foreground_model + '_' + str(Nfg) + '.png', bbox_inches='tight')
	plt.close()
	plt.close()
	
	return fg, tg, wg, gg













def low_band_saving_GHA_6hr_averages():

	f, ty, ry, wy, py, my, rmsy, fb, tb_d, rb_d, wb_d, pb_d, mb_d, rmsb_d, fb_g, tb_g, rb_g, wb_g, pb_g, ghab_g, rmsb_g, fb_t, tb_t, rb_t, wb_t, pb_t, rmsb_t = eg.level4_read(home_folder + '/DATA/EDGES/spectra/level4/low_band_2015/extended_gp_yes_bc_s11_2016_243.hdf5')
	
	r = ry[my[:,1] != 286, :]
	w = wy[my[:,1] != 286, :]
	p = py[my[:,1] != 286, :]
	m = my[my[:,1] != 286, :]
	
	
	gha_edges   = np.array([21, 3, 9, 15])
	gha_centers = np.array([0, 6, 12, 18]) 

	rr1 = r[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
	wr1 = w[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]
	pr1 = p[(m[:,3] >= gha_edges[0]) | (m[:,3] < gha_edges[1]), :]

	rr2 = r[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
	wr2 = w[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]
	pr2 = p[(m[:,3] >= gha_edges[1]) & (m[:,3] < gha_edges[2]), :]

	rr3 = r[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
	wr3 = w[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]
	pr3 = p[(m[:,3] >= gha_edges[2]) & (m[:,3] < gha_edges[3]), :]

	rr4 = r[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[0]), :]
	wr4 = w[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[0]), :]
	pr4 = p[(m[:,3] >= gha_edges[3]) & (m[:,3] < gha_edges[0]), :]

	
	# Spectral averaging
	rx1, wx1   = eg.spectral_averaging(rr1, wr1)
	rx2, wx2   = eg.spectral_averaging(rr2, wr2)
	rx3, wx3   = eg.spectral_averaging(rr3, wr3)
	rx4, wx4   = eg.spectral_averaging(rr4, wr4)
	

	# RFI cleaning at raw resolution
	Nsigma = 2.5
	wxx1  = eg.RFI_cleaning_spectrum_raw(f, rx1, wx1, Nterms_fg=16, Nsigma=Nsigma)
	wxx2  = eg.RFI_cleaning_spectrum_raw(f, rx2, wx2, Nterms_fg=16, Nsigma=Nsigma)
	wxx3  = eg.RFI_cleaning_spectrum_raw(f, rx3, wx3, Nterms_fg=16, Nsigma=Nsigma)
	wxx4  = eg.RFI_cleaning_spectrum_raw(f, rx4, wx4, Nterms_fg=16, Nsigma=Nsigma)
	

	# Spectral binning
	Nsamples = 64
	fb, rb1, wb1  = eg.spectral_binning_number_of_samples(f, rx1, wxx1, nsamples=Nsamples)
	fb, rb2, wb2  = eg.spectral_binning_number_of_samples(f, rx2, wxx2, nsamples=Nsamples)
	fb, rb3, wb3  = eg.spectral_binning_number_of_samples(f, rx3, wxx3, nsamples=Nsamples)
	fb, rb4, wb4  = eg.spectral_binning_number_of_samples(f, rx4, wxx4, nsamples=Nsamples)


	# RMS of binned residuals
	rmsb1  = np.sqrt(np.sum((rb1[wb1>0])**2)/len(fb[wb1>0]))
	rmsb2  = np.sqrt(np.sum((rb2[wb2>0])**2)/len(fb[wb2>0]))
	rmsb3  = np.sqrt(np.sum((rb3[wb3>0])**2)/len(fb[wb3>0]))
	rmsb4  = np.sqrt(np.sum((rb4[wb4>0])**2)/len(fb[wb4>0]))


	# Average model parameters
	px1  = np.mean(pr1,  axis=0)
	px2  = np.mean(pr2,  axis=0)
	px3  = np.mean(pr3,  axis=0)
	px4  = np.mean(pr4,  axis=0)


	# Evaluating foreground model at binned frequencies
	tfg1  = eg.model_evaluate('EDGES_polynomial', px1, fb/200)
	tfg2  = eg.model_evaluate('EDGES_polynomial', px2, fb/200)
	tfg3  = eg.model_evaluate('EDGES_polynomial', px3, fb/200)
	tfg4  = eg.model_evaluate('EDGES_polynomial', px4, fb/200)


	# Binned total temperature
	tb1 = tfg1 + rb1	
	tb2 = tfg2 + rb2
	tb3 = tfg3 + rb3
	tb4 = tfg4 + rb4	




	# Save data
	# ----------------------------------
	#
	outT = np.array([fb, tb1, wb1, tb2, wb2, tb3, wb3, tb4, wb4])
	out  = outT.T
	np.savetxt(home_folder + '/DATA/EDGES/results/low_band/products/average_spectra/GHA_6HR_AV/GHA_6HR_AV.txt', out, header='freq [MHz]\tt0 [K]\tw0\tt6 [K]\tw6\tt12 [K]\tw12\tt18 [K]\tw18')












	# Plot
	# ---------------------------------------------------
	#
	
	foreground_model = 'EDGES_polynomial'
	#foreground_model = 'Physical_model'
	Nfg = [3,4,5,6,7,8,9,10,11,12]
	
	
	for i in range(len(Nfg)):
		
		fig = plt.figure(figsize=(6, 6))
		p = eg.fit_polynomial_fourier(foreground_model, fb, tb1, Nfg[i]);  plt.plot(fb, tb1 - p[1])
		p = eg.fit_polynomial_fourier(foreground_model, fb, tb2, Nfg[i]);  plt.plot(fb, tb2 - p[1]-1)
		p = eg.fit_polynomial_fourier(foreground_model, fb, tb3, Nfg[i]);  plt.plot(fb, tb3 - p[1]-2)
		p = eg.fit_polynomial_fourier(foreground_model, fb, tb4, Nfg[i]);  plt.plot(fb, tb4 - p[1]-3)
		
		plt.yticks([0, -1, -2, -3], [0, 6, 12, 18])      # GHA centers
		plt.ylim([-4, 1])
		plt.xlabel('frequency [MHz]')
		plt.ylabel('Center GHA  [1 K per division]')
		plt.title(foreground_model + ' ' + str(Nfg[i]) + ' terms')
		
		# saving plot
		plt.savefig(home_folder + '/DATA/EDGES/results/plots/20180501/GHA_6Hr_AV_' + foreground_model + '_' + str(Nfg[i]) + '.png', bbox_inches='tight')
		plt.close()
		plt.close()
	


		





	return fb, tb1, tb2, tb3, tb4, wb1, wb2, wb3, wb4



















def for_keith():
	
	ta1 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/beam_factors/low_band1/low_band_blade_haslam_FEKO_40-100MHz_minus7deg_reffreq_76MHz_NIVEDITA_extended_ground_plane_tant.txt')
	fa1 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/beam_factors/low_band1/low_band_blade_haslam_FEKO_40-100MHz_minus7deg_reffreq_76MHz_NIVEDITA_extended_ground_plane_freq.txt')
	la1 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/beam_factors/low_band1/low_band_blade_haslam_FEKO_40-100MHz_minus7deg_reffreq_76MHz_NIVEDITA_extended_ground_plane_LST.txt')
	
	ta1_70 = ta1[:,15]
	ta1_80 = ta1[:,20]
	
	
	
	ta2 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/beam_factors/low_band1/low_band_blade_haslam_FEKO_40-120MHz_minus7deg_reffreq_76MHz_tant.txt')
	fa2 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/beam_factors/low_band1/low_band_blade_haslam_FEKO_40-120MHz_minus7deg_reffreq_76MHz_freq.txt')
	la2 = np.genfromtxt('/home/ramo7131/DATA/EDGES/calibration/beam_factors/low_band1/low_band_blade_haslam_FEKO_40-120MHz_minus7deg_reffreq_76MHz_LST.txt')
	
	ta2_70 = ta2[:,15]
	ta2_80 = ta2[:,20]
	
	
	
	outT = np.array([la1, ta1_70, ta2_70, ta1_80, ta2_80])
	out  = outT.T
	
	np.savetxt('/home/ramo7131/Desktop/for_keith/simulations.txt', out, header='LST [hr]\tTa_70MHz_ant1 [K]\tTa_70MHz_ant2 [K]\tTa_80MHz_ant1 [K]\tTa_80MHz_ant2 [K]')
	
	
	return out














def plot_antenna_s11_three_bands():
	
	
	dl = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band1/s11/corrected/2016_243/S11_blade_low_band_2016_243.txt')
	vl = dl[:,0]/10**6
	ml = 20*np.log10(np.abs(dl[:,1]+1j*dl[:,2]))
	
	vl1 = vl[(vl>=50) & (vl<=100)]
	ml1 = ml[(vl>=50) & (vl<=100)]
	
	
	
	
	dl = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/low2-mar28-1/S11_low2-mar28-1.txt')
	vl = dl[:,0]/10**6
	ml = 20*np.log10(np.abs(dl[:,1]+1j*dl[:,2]))
	
	vl2 = vl[(vl>=50) & (vl<=100)]
	ml2 = ml[(vl>=50) & (vl<=100)]	
	
	
	
	
	
	dm = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/mid_band/s11/corrected/2017_341/S11_blade_mid_band_2017_341_field_switch_parameters_49.90ohm_50-200MHz.txt')
	vm = dm[:,0]/10**6
	mm = 20*np.log10(np.abs(dm[:,1]+1j*dm[:,2]))
	
	vm1 = vm[(vm>=60) & (vm<=173)]
	mm1 = mm[(vm>=60) & (vm<=173)]		
	
	
	
	
	dh = np.genfromtxt(home_folder + '/DATA/EDGES/calibration/antenna_s11/high_band1/s11/corrected/2015_262_19_14/S11_blade_high_band_2015_262_19_14.txt')
	vh = dh[:,0]/10**6
	mh = 20*np.log10(np.abs(dh[:,1]+1j*dh[:,2]))
	
	vh1 = vh[(vh>=100) & (vh<=200)]
	mh1 = mh[(vh>=100) & (vh<=200)]			
	
	
	
	
	
	
	plt.plot(vl1, ml1, 'r')
	plt.plot(vm1, mm1, 'g', linewidth=4)
	plt.plot(vh1, mh1, 'b')
	plt.plot(vl2, ml2, 'r')
	plt.plot(vh1, mh1, 'b')
	plt.plot(vm1, mm1, 'g', linewidth=4)
	plt.ylim([-18, -2])
	
	
	plt.xlabel('frequency [MHz]')
	plt.ylabel('antenna reflection magnitude [dB]')
	plt.legend(['Low-Band','Mid-Band','High-Band'])
	
	
	
	return 0






def low2_30dB_attenuator_s11_calibration():
	
	folder = 'low2_20180808_30dBatten'
	
	path_data = '/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/raw/' + folder + '/'	
	path_save = '/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/' + folder + '/'
	if not exists(path_save):
		makedirs(path_save)	
	
	
	time_all = ['06_49_31', '06_51_16', '06_53_34', '06_54_47', '06_55_57', '06_57_07', '06_58_17', '06_59_27', '07_00_40']
	
	
	for i in range(len(time_all)):
		o_m, f_m  = rc.s1p_read(path_data + '2018_220_' + time_all[i] + '_input1.s1p')
		s_m, f_m  = rc.s1p_read(path_data + '2018_220_' + time_all[i] + '_input2.s1p')
		l_m, f_m  = rc.s1p_read(path_data + '2018_220_' + time_all[i] + '_input3.s1p')
		a_m, f_m  = rc.s1p_read(path_data + '2018_220_' + time_all[i] + '_input4.s1p')
		
		
		# Standards assumed at the switch
		o_sw =  1 * np.ones(len(f_m))
		s_sw = -1 * np.ones(len(f_m))
		l_sw =  0 * np.ones(len(f_m))
		
		
		# Correction at switch
		a_sw_c, x1, x2, x3  = rc.de_embed(o_sw, s_sw, l_sw, o_m, s_m, l_m, a_m)
		
		
		a, X1, X2, X3 = eg.low_band_switch_correction_june_2016(a_sw_c, f_in = f_m)
		
		if i == 0:
			a_all = np.copy(a)
		
		elif i > 0:
			a_all = np.vstack((a_all, a))
		
	
	f  = f_m/1e6
	av = np.mean(a_all, axis=0)
		
		
	#
	out_T = np.array([f, np.real(av), np.imag(av)])
	out   = out_T.T
	
	
	np.savetxt(path_save + folder + '.txt', out, header='30-dB attenuator\nfreq [MHz]   real(s11)   imag(s11)')
	
	

	return f, av













def low2_ans2_6dB_attenuator_s11_calibration():
	
	folder = 'low2_20180809_ads2_6db'
	
	path_data = '/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/raw/' + folder + '/'	
	path_save = '/home/ramo7131/DATA/EDGES/calibration/antenna_s11/low_band2/s11/corrected/' + folder + '/'
	if not exists(path_save):
		makedirs(path_save)	
	
	
	#time_all = ['02_07_00']
	#time_all = ['02_08_20']
	#time_all = ['02_09_32']
	#time_all = ['02_11_18']
	time_all = ['02_08_20', '02_09_32', '02_11_18']   # Only last three measurements are used
	
	
	for i in range(len(time_all)):
		o_m, f_m  = rc.s1p_read(path_data + '2018_222_' + time_all[i] + '_input1.s1p')
		s_m, f_m  = rc.s1p_read(path_data + '2018_222_' + time_all[i] + '_input2.s1p')
		l_m, f_m  = rc.s1p_read(path_data + '2018_222_' + time_all[i] + '_input3.s1p')
		a_m, f_m  = rc.s1p_read(path_data + '2018_222_' + time_all[i] + '_input4.s1p')
		
		
		# Standards assumed at the switch
		o_sw =  1 * np.ones(len(f_m))
		s_sw = -1 * np.ones(len(f_m))
		l_sw =  0 * np.ones(len(f_m))
		
		
		# Correction at switch
		a_sw_c, x1, x2, x3  = rc.de_embed(o_sw, s_sw, l_sw, o_m, s_m, l_m, a_m)
		
		
		a, X1, X2, X3 = eg.low_band_switch_correction_june_2016(a_sw_c, f_in = f_m)
		
		if i == 0:
			a_all = np.copy(a)
		
		elif i > 0:
			a_all = np.vstack((a_all, a))
		
	
	f  = f_m/1e6
	av = np.mean(a_all, axis=0)
		
		
	# Output arrays
	out_T = np.array([f, np.real(av), np.imag(av)])
	out   = out_T.T
	
	
	np.savetxt(path_save + folder + '.txt', out, header='Alan\'s noise source #2 + 6-dB attenuator\nfreq [MHz]   real(s11)   imag(s11)')
	
	
		

	return f, av










